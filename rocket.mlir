module {
  hw.module private @SimpleClockGroupSource(in %clock : !seq.clock, in %reset : i1, out auto_out_member_subsystem_sbus_5_clock : !seq.clock, out auto_out_member_subsystem_sbus_5_reset : i1, out auto_out_member_subsystem_sbus_4_clock : !seq.clock, out auto_out_member_subsystem_sbus_4_reset : i1, out auto_out_member_subsystem_sbus_2_clock : !seq.clock, out auto_out_member_subsystem_sbus_2_reset : i1, out auto_out_member_subsystem_sbus_1_clock : !seq.clock, out auto_out_member_subsystem_sbus_1_reset : i1, out auto_out_member_subsystem_sbus_0_clock : !seq.clock, out auto_out_member_subsystem_sbus_0_reset : i1) {
    hw.output %clock, %reset, %clock, %reset, %clock, %reset, %clock, %reset, %clock, %reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator(in %auto_in_member_subsystem_sbus_5_clock : !seq.clock, in %auto_in_member_subsystem_sbus_5_reset : i1, in %auto_in_member_subsystem_sbus_4_clock : !seq.clock, in %auto_in_member_subsystem_sbus_4_reset : i1, in %auto_in_member_subsystem_sbus_2_clock : !seq.clock, in %auto_in_member_subsystem_sbus_2_reset : i1, in %auto_in_member_subsystem_sbus_1_clock : !seq.clock, in %auto_in_member_subsystem_sbus_1_reset : i1, in %auto_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_in_member_subsystem_sbus_0_reset : i1, out auto_out_3_member_subsystem_l2_1_clock : !seq.clock, out auto_out_3_member_subsystem_l2_1_reset : i1, out auto_out_3_member_subsystem_l2_0_clock : !seq.clock, out auto_out_3_member_subsystem_l2_0_reset : i1, out auto_out_1_member_subsystem_cbus_1_clock : !seq.clock, out auto_out_1_member_subsystem_cbus_1_reset : i1, out auto_out_1_member_subsystem_cbus_0_clock : !seq.clock, out auto_out_1_member_subsystem_cbus_0_reset : i1, out auto_out_0_member_subsystem_sbus_0_clock : !seq.clock, out auto_out_0_member_subsystem_sbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_sbus_5_clock, %auto_in_member_subsystem_sbus_5_reset, %auto_in_member_subsystem_sbus_4_clock, %auto_in_member_subsystem_sbus_4_reset, %auto_in_member_subsystem_sbus_2_clock, %auto_in_member_subsystem_sbus_2_reset, %auto_in_member_subsystem_sbus_1_clock, %auto_in_member_subsystem_sbus_1_reset, %auto_in_member_subsystem_sbus_0_clock, %auto_in_member_subsystem_sbus_0_reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroup(in %auto_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_in_member_subsystem_sbus_0_reset : i1, out auto_out_clock : !seq.clock, out auto_out_reset : i1) {
    hw.output %auto_in_member_subsystem_sbus_0_clock, %auto_in_member_subsystem_sbus_0_reset : !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_2_clock : !seq.clock, out auto_out_2_reset : i1, out auto_out_0_clock : !seq.clock, out auto_out_0_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset : !seq.clock, i1, !seq.clock, i1
  }
  hw.module.extern private @plusarg_reader<DEFAULT: ui32, FORMAT: none, WIDTH: ui32>(out out : i32) attributes {verilogName = "plusarg_reader"}
  hw.module private @TLMonitor(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_opcode : i3, in %io_in_b_bits_param : i2, in %io_in_b_bits_size : i4, in %io_in_b_bits_source : i2, in %io_in_b_bits_address : i32, in %io_in_b_bits_mask : i8, in %io_in_b_bits_corrupt : i1, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i4, in %io_in_c_bits_source : i2, in %io_in_c_bits_address : i32, in %io_in_c_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_ready : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c0_i6 = hw.constant 0 : i6
    %c0_i16 = hw.constant 0 : i16
    %c0_i20 = hw.constant 0 : i20
    %c-8_i4 = hw.constant -8 : i4
    %c7_i4 = hw.constant 7 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c0_i2 = hw.constant 0 : i2
    %c-1_i12 = hw.constant -1 : i12
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %false = hw.constant false
    %c0_i23 = hw.constant 0 : i23
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %8 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %10 = comb.xor bin %9, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %11 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i12
    %12 = comb.and bin %11, %10 : i12
    %13 = comb.icmp bin eq %12, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.or bin %3, %4, %5 : i1
    %62 = comb.and bin %60, %61 : i1
    %63 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %64 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %65 = comb.xor bin %64, %c-1_i2 : i2
    %66 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %67 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %68 = comb.xor bin %67, %true : i1
    %69 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %70 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %71 = comb.xor bin %70, %c-512_i10 : i10
    %72 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %73 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %74 = comb.xor bin %73, %c-1_i2 : i2
    %75 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %76 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %77 = comb.xor bin %76, %c-1_i2 : i2
    %78 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %79 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %80 = comb.icmp eq %79, %c-8_i4 : i4
    %81 = comb.and bin %62, %78, %80 : i1
    %82 = comb.xor bin %reset, %true : i1
    %83 = comb.and bin %io_in_a_valid, %59, %82 : i1
    %84 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %85 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %86 = comb.icmp bin eq %85, %c0_i20 : i20
    %87 = comb.concat %63, %65 : i18, i2
    %88 = comb.icmp bin eq %87, %c0_i20 : i20
    %89 = comb.concat %66, %68 : i15, i1
    %90 = comb.icmp bin eq %89, %c0_i16 : i16
    %91 = comb.concat %69, %71 : i6, i10
    %92 = comb.icmp bin eq %91, %c0_i16 : i16
    %93 = comb.concat %72, %74 : i4, i2
    %94 = comb.icmp bin eq %93, %c0_i6 : i6
    %95 = comb.concat %75, %77 : i1, i2
    %96 = comb.icmp bin eq %95, %c0_i3 : i3
    %97 = comb.or bin %86, %88 : i1
    %98 = comb.or bin %97, %90, %92, %94, %96, %80 : i1
    %99 = comb.and bin %60, %98 : i1
    %100 = comb.and bin %3, %84, %99 : i1
    %101 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %102 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %103 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %104 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %105 = comb.and bin %io_in_a_valid, %104, %82 : i1
    %106 = comb.and bin %3, %84, %99 : i1
    %107 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %108 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %109 = comb.and bin %io_in_a_valid, %108, %82 : i1
    %110 = comb.and bin %60, %88 : i1
    %111 = comb.or bin %86, %90, %92, %94, %96, %80 : i1
    %112 = comb.and bin %78, %111 : i1
    %113 = comb.or bin %110, %112 : i1
    %114 = comb.xor bin %107, %true : i1
    %115 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %116 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %117 = comb.or bin %86, %92, %94, %80 : i1
    %118 = comb.and bin %78, %117 : i1
    %119 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %120 = comb.and bin %119, %96 : i1
    %121 = comb.or bin %110, %118, %120 : i1
    %122 = comb.and bin %62, %121 : i1
    %123 = comb.and bin %io_in_a_valid, %116, %82 : i1
    %124 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %125 = comb.and bin %io_in_a_valid, %124, %82 : i1
    %126 = comb.xor bin %58, %c-1_i8 : i8
    %127 = comb.and bin %io_in_a_bits_mask, %126 : i8
    %128 = comb.icmp bin eq %127, %c0_i8 : i8
    %129 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %130 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %131 = comb.or bin %97, %92, %94 : i1
    %132 = comb.and bin %62, %130, %131 : i1
    %133 = comb.and bin %io_in_a_valid, %129, %82 : i1
    %134 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %135 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %136 = comb.and bin %io_in_a_valid, %135, %82 : i1
    %137 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %138 = comb.xor bin %137, %true : i1
    %139 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %140 = comb.and bin %62, %110 : i1
    %141 = comb.and bin %io_in_a_valid, %139, %82 : i1
    %142 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %143 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %144 = comb.and bin %io_in_d_valid, %82 : i1
    %145 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %146 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %147 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %148 = comb.or bin %145, %146, %147 {sv.namehint = "source_ok_1"} : i1
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %150 = comb.and bin %io_in_d_valid, %149, %82 : i1
    %151 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %152 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %153 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %154 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %155 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %156 = comb.and bin %io_in_d_valid, %155, %82 : i1
    %157 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %158 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %159 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %160 = comb.and bin %io_in_d_valid, %159, %82 : i1
    %161 = comb.or bin %154, %io_in_d_bits_corrupt : i1
    %162 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %163 = comb.and bin %io_in_d_valid, %162, %82 : i1
    %164 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %165 = comb.and bin %io_in_d_valid, %164, %82 : i1
    %166 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %167 = comb.and bin %io_in_d_valid, %166, %82 : i1
    %168 = comb.icmp bin ne %io_in_b_bits_opcode, %c-1_i3 : i3
    %169 = comb.and bin %io_in_b_valid, %82 : i1
    %170 = comb.icmp bin eq %io_in_b_bits_source, %c0_i2 {sv.namehint = "_legal_source_T"} : i2
    %171 = comb.icmp bin eq %io_in_b_bits_source, %c1_i2 {sv.namehint = "_legal_source_T_1"} : i2
    %172 = comb.icmp bin eq %io_in_b_bits_source, %c-2_i2 {sv.namehint = "_legal_source_T_2"} : i2
    %173 = comb.extract %io_in_b_bits_address from 14 : (i32) -> i18
    %174 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i2
    %175 = comb.xor bin %174, %c-1_i2 : i2
    %176 = comb.concat %173, %175 : i18, i2
    %177 = comb.icmp bin ne %176, %c0_i20 : i20
    %178 = comb.xor bin %177, %true {sv.namehint = "_address_ok_T_4"} : i1
    %179 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %180 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i2
    %181 = comb.xor bin %180, %c-1_i2 : i2
    %182 = comb.concat %179, %181 : i4, i2
    %183 = comb.icmp bin ne %182, %c0_i6 : i6
    %184 = comb.xor bin %183, %true {sv.namehint = "_address_ok_T_9"} : i1
    %185 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i6
    %186 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i10
    %187 = comb.xor bin %186, %c-512_i10 : i10
    %188 = comb.concat %185, %187 : i6, i10
    %189 = comb.icmp bin ne %188, %c0_i16 : i16
    %190 = comb.xor bin %189, %true {sv.namehint = "_address_ok_T_14"} : i1
    %191 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i20
    %192 = comb.icmp bin ne %191, %c0_i20 : i20
    %193 = comb.xor bin %192, %true {sv.namehint = "_address_ok_T_19"} : i1
    %194 = comb.extract %io_in_b_bits_address from 17 : (i32) -> i15
    %195 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i1
    %196 = comb.xor bin %195, %true : i1
    %197 = comb.concat %194, %196 : i15, i1
    %198 = comb.icmp bin ne %197, %c0_i16 : i16
    %199 = comb.xor bin %198, %true {sv.namehint = "_address_ok_T_24"} : i1
    %200 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %201 = comb.icmp ne %200, %c-8_i4 : i4
    %202 = comb.xor bin %201, %true {sv.namehint = "_address_ok_T_29"} : i1
    %203 = comb.extract %io_in_b_bits_address from 31 : (i32) -> i1
    %204 = comb.extract %io_in_b_bits_address from 29 : (i32) -> i2
    %205 = comb.xor bin %204, %c-1_i2 : i2
    %206 = comb.concat %203, %205 : i1, i2
    %207 = comb.icmp bin ne %206, %c0_i3 : i3
    %208 = comb.xor bin %207, %true {sv.namehint = "_address_ok_T_34"} : i1
    %209 = comb.or bin %178, %184, %190, %193, %199, %202, %208 {sv.namehint = "address_ok"} : i1
    %210 = comb.concat %c0_i23, %io_in_b_bits_size : i23, i4
    %211 = comb.shl bin %c4095_i27, %210 {sv.namehint = "_is_aligned_mask_T_4"} : i27
    %212 = comb.extract %211 from 0 {sv.namehint = "_is_aligned_mask_T_5"} : (i27) -> i12
    %213 = comb.xor bin %212, %c-1_i12 {sv.namehint = "is_aligned_mask_1"} : i12
    %214 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i12
    %215 = comb.and bin %214, %213 : i12
    %216 = comb.icmp bin eq %215, %c0_i12 {sv.namehint = "is_aligned_1"} : i12
    %217 = comb.extract %io_in_b_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount_1"} : (i4) -> i2
    %218 = comb.concat %c0_i2, %217 : i2, i2
    %219 = comb.shl bin %c1_i4, %218 {sv.namehint = "_mask_sizeOH_T_4"} : i4
    %220 = comb.icmp bin ugt %io_in_b_bits_size, %c2_i4 {sv.namehint = "_mask_T_1"} : i4
    %221 = comb.extract %219 from 2 {sv.namehint = "mask_size_3"} : (i4) -> i1
    %222 = comb.extract %io_in_b_bits_address from 2 {sv.namehint = "mask_bit_3"} : (i32) -> i1
    %223 = comb.xor bin %222, %true {sv.namehint = "mask_eq_14"} : i1
    %224 = comb.and bin %221, %223 {sv.namehint = "_mask_acc_T_14"} : i1
    %225 = comb.or bin %220, %224 {sv.namehint = "mask_acc_14"} : i1
    %226 = comb.and bin %221, %222 {sv.namehint = "_mask_acc_T_15"} : i1
    %227 = comb.or bin %220, %226 {sv.namehint = "mask_acc_15"} : i1
    %228 = comb.extract %219 from 1 {sv.namehint = "mask_size_4"} : (i4) -> i1
    %229 = comb.extract %io_in_b_bits_address from 1 {sv.namehint = "mask_bit_4"} : (i32) -> i1
    %230 = comb.xor bin %229, %true {sv.namehint = "mask_nbit_4"} : i1
    %231 = comb.and bin %223, %230 {sv.namehint = "mask_eq_16"} : i1
    %232 = comb.and bin %228, %231 {sv.namehint = "_mask_acc_T_16"} : i1
    %233 = comb.or bin %225, %232 {sv.namehint = "mask_acc_16"} : i1
    %234 = comb.and bin %223, %229 {sv.namehint = "mask_eq_17"} : i1
    %235 = comb.and bin %228, %234 {sv.namehint = "_mask_acc_T_17"} : i1
    %236 = comb.or bin %225, %235 {sv.namehint = "mask_acc_17"} : i1
    %237 = comb.and bin %222, %230 {sv.namehint = "mask_eq_18"} : i1
    %238 = comb.and bin %228, %237 {sv.namehint = "_mask_acc_T_18"} : i1
    %239 = comb.or bin %227, %238 {sv.namehint = "mask_acc_18"} : i1
    %240 = comb.and bin %222, %229 {sv.namehint = "mask_eq_19"} : i1
    %241 = comb.and bin %228, %240 {sv.namehint = "_mask_acc_T_19"} : i1
    %242 = comb.or bin %227, %241 {sv.namehint = "mask_acc_19"} : i1
    %243 = comb.extract %io_in_b_bits_address from 0 {sv.namehint = "mask_bit_5"} : (i32) -> i1
    %244 = comb.xor bin %243, %true {sv.namehint = "mask_nbit_5"} : i1
    %245 = comb.and bin %231, %244 {sv.namehint = "mask_eq_20"} : i1
    %246 = comb.or bin %233, %245 {sv.namehint = "mask_acc_20"} : i1
    %247 = comb.and bin %231, %243 {sv.namehint = "mask_eq_21"} : i1
    %248 = comb.or bin %233, %247 {sv.namehint = "mask_acc_21"} : i1
    %249 = comb.and bin %234, %244 {sv.namehint = "mask_eq_22"} : i1
    %250 = comb.or bin %236, %249 {sv.namehint = "mask_acc_22"} : i1
    %251 = comb.and bin %234, %243 {sv.namehint = "mask_eq_23"} : i1
    %252 = comb.or bin %236, %251 {sv.namehint = "mask_acc_23"} : i1
    %253 = comb.and bin %237, %244 {sv.namehint = "mask_eq_24"} : i1
    %254 = comb.or bin %239, %253 {sv.namehint = "mask_acc_24"} : i1
    %255 = comb.and bin %237, %243 {sv.namehint = "mask_eq_25"} : i1
    %256 = comb.or bin %239, %255 {sv.namehint = "mask_acc_25"} : i1
    %257 = comb.and bin %240, %244 {sv.namehint = "mask_eq_26"} : i1
    %258 = comb.or bin %242, %257 {sv.namehint = "mask_acc_26"} : i1
    %259 = comb.and bin %240, %243 {sv.namehint = "mask_eq_27"} : i1
    %260 = comb.or bin %242, %259 {sv.namehint = "mask_acc_27"} : i1
    %261 = comb.concat %260, %258, %256, %254, %252, %250, %248, %246 {sv.namehint = "mask_1"} : i1, i1, i1, i1, i1, i1, i1, i1
    %262 = comb.concat %172, %false {sv.namehint = "_legal_source_T_5"} : i1, i1
    %263 = comb.concat %false, %171 : i1, i1
    %264 = comb.or bin %263, %262 {sv.namehint = "_legal_source_T_7"} : i2
    %265 = comb.icmp bin eq %264, %io_in_b_bits_source {sv.namehint = "legal_source"} : i2
    %266 = comb.icmp bin eq %io_in_b_bits_opcode, %c-2_i3 : i3
    %267 = comb.icmp bin eq %io_in_b_bits_size, %c6_i4 : i4
    %268 = comb.icmp bin ult %io_in_b_bits_size, %c-3_i4 : i4
    %269 = comb.xor bin %192, %true : i1
    %270 = comb.xor bin %177, %true : i1
    %271 = comb.xor bin %198, %true : i1
    %272 = comb.xor bin %189, %true : i1
    %273 = comb.xor bin %183, %true : i1
    %274 = comb.xor bin %207, %true : i1
    %275 = comb.xor bin %201, %true : i1
    %276 = comb.or bin %269, %270, %271, %272, %273, %274, %275 : i1
    %277 = comb.and bin %170, %267, %268, %276 : i1
    %278 = comb.and bin %io_in_b_valid, %266, %82 : i1
    %279 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %280 = comb.icmp bin eq %io_in_b_bits_mask, %261 : i8
    %281 = comb.xor bin %io_in_b_bits_corrupt, %true : i1
    %282 = comb.icmp bin eq %io_in_b_bits_opcode, %c-4_i3 : i3
    %283 = comb.and bin %io_in_b_valid, %282, %82 : i1
    %284 = comb.icmp bin eq %io_in_b_bits_param, %c0_i2 : i2
    %285 = comb.icmp bin eq %io_in_b_bits_opcode, %c0_i3 : i3
    %286 = comb.and bin %io_in_b_valid, %285, %82 : i1
    %287 = comb.icmp bin eq %io_in_b_bits_opcode, %c1_i3 : i3
    %288 = comb.and bin %io_in_b_valid, %287, %82 : i1
    %289 = comb.xor bin %261, %c-1_i8 : i8
    %290 = comb.and bin %io_in_b_bits_mask, %289 : i8
    %291 = comb.icmp bin eq %290, %c0_i8 : i8
    %292 = comb.icmp bin eq %io_in_b_bits_opcode, %c2_i3 : i3
    %293 = comb.and bin %io_in_b_valid, %292, %82 : i1
    %294 = comb.icmp bin eq %io_in_b_bits_opcode, %c3_i3 : i3
    %295 = comb.and bin %io_in_b_valid, %294, %82 : i1
    %296 = comb.icmp bin eq %io_in_b_bits_opcode, %c-3_i3 : i3
    %297 = comb.and bin %io_in_b_valid, %296, %82 : i1
    %298 = comb.icmp bin eq %io_in_c_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_8"} : i2
    %299 = comb.icmp bin eq %io_in_c_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_9"} : i2
    %300 = comb.icmp bin eq %io_in_c_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_10"} : i2
    %301 = comb.or bin %298, %299, %300 {sv.namehint = "source_ok_2"} : i1
    %302 = comb.concat %c0_i23, %io_in_c_bits_size : i23, i4
    %303 = comb.shl bin %c4095_i27, %302 {sv.namehint = "_is_aligned_mask_T_7"} : i27
    %304 = comb.extract %303 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i27) -> i12
    %305 = comb.xor bin %304, %c-1_i12 {sv.namehint = "is_aligned_mask_2"} : i12
    %306 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i12
    %307 = comb.and bin %306, %305 : i12
    %308 = comb.icmp bin eq %307, %c0_i12 {sv.namehint = "is_aligned_2"} : i12
    %309 = comb.extract %io_in_c_bits_address from 14 : (i32) -> i18
    %310 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i2
    %311 = comb.xor bin %310, %c-1_i2 : i2
    %312 = comb.concat %309, %311 : i18, i2
    %313 = comb.icmp bin ne %312, %c0_i20 : i20
    %314 = comb.xor bin %313, %true {sv.namehint = "_address_ok_T_44"} : i1
    %315 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %316 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i2
    %317 = comb.xor bin %316, %c-1_i2 : i2
    %318 = comb.concat %315, %317 : i4, i2
    %319 = comb.icmp bin ne %318, %c0_i6 : i6
    %320 = comb.xor bin %319, %true {sv.namehint = "_address_ok_T_49"} : i1
    %321 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i6
    %322 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i10
    %323 = comb.xor bin %322, %c-512_i10 : i10
    %324 = comb.concat %321, %323 : i6, i10
    %325 = comb.icmp bin ne %324, %c0_i16 : i16
    %326 = comb.xor bin %325, %true {sv.namehint = "_address_ok_T_54"} : i1
    %327 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i20
    %328 = comb.icmp bin ne %327, %c0_i20 : i20
    %329 = comb.xor bin %328, %true {sv.namehint = "_address_ok_T_59"} : i1
    %330 = comb.extract %io_in_c_bits_address from 17 : (i32) -> i15
    %331 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i1
    %332 = comb.xor bin %331, %true : i1
    %333 = comb.concat %330, %332 : i15, i1
    %334 = comb.icmp bin ne %333, %c0_i16 : i16
    %335 = comb.xor bin %334, %true {sv.namehint = "_address_ok_T_64"} : i1
    %336 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %337 = comb.icmp ne %336, %c-8_i4 : i4
    %338 = comb.xor bin %337, %true {sv.namehint = "_address_ok_T_69"} : i1
    %339 = comb.extract %io_in_c_bits_address from 31 : (i32) -> i1
    %340 = comb.extract %io_in_c_bits_address from 29 : (i32) -> i2
    %341 = comb.xor bin %340, %c-1_i2 : i2
    %342 = comb.concat %339, %341 : i1, i2
    %343 = comb.icmp bin ne %342, %c0_i3 : i3
    %344 = comb.xor bin %343, %true {sv.namehint = "_address_ok_T_74"} : i1
    %345 = comb.or bin %314, %320, %326, %329, %335, %338, %344 {sv.namehint = "address_ok_1"} : i1
    %346 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %347 = comb.and bin %io_in_c_valid, %346, %82 : i1
    %348 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i4 : i4
    %349 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %350 = comb.icmp bin ne %349, %c-1_i2 : i2
    %351 = comb.xor bin %io_in_c_bits_corrupt, %true : i1
    %352 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %353 = comb.and bin %io_in_c_valid, %352, %82 : i1
    %354 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %355 = comb.icmp bin ult %io_in_c_bits_size, %c-3_i4 : i4
    %356 = comb.or bin %298, %299, %300 : i1
    %357 = comb.icmp bin ult %io_in_c_bits_size, %c7_i4 : i4
    %358 = comb.xor bin %337, %true : i1
    %359 = comb.and bin %355, %356, %357, %358 : i1
    %360 = comb.and bin %io_in_c_valid, %354, %82 : i1
    %361 = comb.icmp bin eq %io_in_c_bits_size, %c6_i4 : i4
    %362 = comb.xor bin %328, %true : i1
    %363 = comb.xor bin %313, %true : i1
    %364 = comb.xor bin %334, %true : i1
    %365 = comb.xor bin %325, %true : i1
    %366 = comb.xor bin %319, %true : i1
    %367 = comb.xor bin %343, %true : i1
    %368 = comb.or bin %362, %363, %364, %365, %366, %367, %358 : i1
    %369 = comb.and bin %355, %368 : i1
    %370 = comb.and bin %298, %361, %369 : i1
    %371 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %372 = comb.and bin %io_in_c_valid, %371, %82 : i1
    %373 = comb.and bin %298, %361, %369 : i1
    %374 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %375 = comb.and bin %io_in_c_valid, %374, %82 : i1
    %376 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %377 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %378 = comb.and bin %io_in_c_valid, %377, %82 : i1
    %379 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %380 = comb.and bin %io_in_c_valid, %379, %82 : i1
    %381 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %382 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %383 = comb.extract %382 from 3 : (i27) -> i9
    %384 = comb.xor bin %383, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %385 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %386 = comb.mux bin %385, %c0_i9, %384 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %391 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %387 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %388 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %389 = comb.xor bin %388, %true {sv.namehint = "a_first"} : i1
    %390 = comb.mux bin %388, %387, %386 {sv.namehint = "_a_first_counter_T"} : i9
    %391 = comb.mux bin %381, %390, %a_first_counter : i9
    %opcode = seq.firreg %399 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %400 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %401 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %402 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %403 clock %clock {firrtl.random_init_start = 21 : ui64} : i32
    %392 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %393 = comb.and bin %io_in_a_valid, %388, %82 : i1
    %394 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %395 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %396 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %397 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %398 = comb.and bin %381, %389 : i1
    %399 = comb.mux bin %398, %io_in_a_bits_opcode, %opcode : i3
    %400 = comb.mux bin %398, %io_in_a_bits_param, %param : i3
    %401 = comb.mux bin %398, %io_in_a_bits_size, %size : i4
    %402 = comb.mux bin %398, %io_in_a_bits_source, %source : i2
    %403 = comb.mux bin %398, %io_in_a_bits_address, %address : i32
    %404 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %405 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %406 = comb.shl bin %c4095_i27, %405 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %407 = comb.extract %406 from 3 : (i27) -> i9
    %408 = comb.xor bin %407, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %409 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %410 = comb.mux bin %409, %408, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %415 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 53 : ui64} : i9
    %411 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %412 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %413 = comb.xor bin %412, %true {sv.namehint = "d_first"} : i1
    %414 = comb.mux bin %412, %411, %410 {sv.namehint = "_d_first_counter_T"} : i9
    %415 = comb.mux bin %404, %414, %d_first_counter : i9
    %opcode_1 = seq.firreg %424 clock %clock {firrtl.random_init_start = 62 : ui64} : i3
    %param_1 = seq.firreg %425 clock %clock {firrtl.random_init_start = 65 : ui64} : i2
    %size_1 = seq.firreg %426 clock %clock {firrtl.random_init_start = 67 : ui64} : i4
    %source_1 = seq.firreg %427 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %sink = seq.firreg %428 clock %clock {firrtl.random_init_start = 73 : ui64} : i2
    %denied = seq.firreg %429 clock %clock {firrtl.random_init_start = 75 : ui64} : i1
    %416 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %417 = comb.and bin %io_in_d_valid, %412, %82 : i1
    %418 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %419 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %420 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %421 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %422 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %423 = comb.and bin %404, %413 : i1
    %424 = comb.mux bin %423, %io_in_d_bits_opcode, %opcode_1 : i3
    %425 = comb.mux bin %423, %io_in_d_bits_param, %param_1 : i2
    %426 = comb.mux bin %423, %io_in_d_bits_size, %size_1 : i4
    %427 = comb.mux bin %423, %io_in_d_bits_source, %source_1 : i2
    %428 = comb.mux bin %423, %io_in_d_bits_sink, %sink : i2
    %429 = comb.mux bin %423, %io_in_d_bits_denied, %denied : i1
    %430 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %435 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 76 : ui64} : i9
    %431 = comb.add %b_first_counter, %c-1_i9 {sv.namehint = "_b_first_counter1_T"} : i9
    %432 = comb.icmp bin ne %b_first_counter, %c0_i9 : i9
    %433 = comb.xor bin %432, %true {sv.namehint = "b_first"} : i1
    %434 = comb.mux bin %432, %431, %c0_i9 {sv.namehint = "_b_first_counter_T"} : i9
    %435 = comb.mux bin %430, %434, %b_first_counter : i9
    %opcode_2 = seq.firreg %443 clock %clock {firrtl.random_init_start = 85 : ui64} : i3
    %param_2 = seq.firreg %444 clock %clock {firrtl.random_init_start = 88 : ui64} : i2
    %size_2 = seq.firreg %445 clock %clock {firrtl.random_init_start = 90 : ui64} : i4
    %source_2 = seq.firreg %446 clock %clock {firrtl.random_init_start = 94 : ui64} : i2
    %address_1 = seq.firreg %447 clock %clock {firrtl.random_init_start = 96 : ui64} : i32
    %436 = comb.icmp bin eq %io_in_b_bits_opcode, %opcode_2 : i3
    %437 = comb.and bin %io_in_b_valid, %432, %82 : i1
    %438 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %439 = comb.icmp bin eq %io_in_b_bits_size, %size_2 : i4
    %440 = comb.icmp bin eq %io_in_b_bits_source, %source_2 : i2
    %441 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %442 = comb.and bin %430, %433 : i1
    %443 = comb.mux bin %442, %io_in_b_bits_opcode, %opcode_2 : i3
    %444 = comb.mux bin %442, %io_in_b_bits_param, %param_2 : i2
    %445 = comb.mux bin %442, %io_in_b_bits_size, %size_2 : i4
    %446 = comb.mux bin %442, %io_in_b_bits_source, %source_2 : i2
    %447 = comb.mux bin %442, %io_in_b_bits_address, %address_1 : i32
    %448 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %449 = comb.shl bin %c4095_i27, %302 {sv.namehint = "_c_first_beats1_decode_T_1"} : i27
    %450 = comb.extract %449 from 3 : (i27) -> i9
    %451 = comb.xor bin %450, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_3"} : i9
    %452 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %453 = comb.mux bin %452, %451, %c0_i9 {sv.namehint = "c_first_beats1"} : i9
    %c_first_counter = seq.firreg %458 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 128 : ui64} : i9
    %454 = comb.add %c_first_counter, %c-1_i9 {sv.namehint = "_c_first_counter1_T"} : i9
    %455 = comb.icmp bin ne %c_first_counter, %c0_i9 : i9
    %456 = comb.xor bin %455, %true {sv.namehint = "c_first"} : i1
    %457 = comb.mux bin %455, %454, %453 {sv.namehint = "_c_first_counter_T"} : i9
    %458 = comb.mux bin %448, %457, %c_first_counter : i9
    %opcode_3 = seq.firreg %466 clock %clock {firrtl.random_init_start = 137 : ui64} : i3
    %param_3 = seq.firreg %467 clock %clock {firrtl.random_init_start = 140 : ui64} : i3
    %size_3 = seq.firreg %468 clock %clock {firrtl.random_init_start = 143 : ui64} : i4
    %source_3 = seq.firreg %469 clock %clock {firrtl.random_init_start = 147 : ui64} : i2
    %address_2 = seq.firreg %470 clock %clock {firrtl.random_init_start = 149 : ui64} : i32
    %459 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %460 = comb.and bin %io_in_c_valid, %455, %82 : i1
    %461 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %462 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i4
    %463 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i2
    %464 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %465 = comb.and bin %448, %456 : i1
    %466 = comb.mux bin %465, %io_in_c_bits_opcode, %opcode_3 : i3
    %467 = comb.mux bin %465, %io_in_c_bits_param, %param_3 : i3
    %468 = comb.mux bin %465, %io_in_c_bits_size, %size_3 : i4
    %469 = comb.mux bin %465, %io_in_c_bits_source, %source_3 : i2
    %470 = comb.mux bin %465, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %574 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 181 : ui64} : i3
    %inflight_opcodes = seq.firreg %577 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 184 : ui64} : i12
    %inflight_sizes = seq.firreg %580 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 196 : ui64} : i24
    %471 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %472 = comb.extract %471 from 3 : (i27) -> i9
    %473 = comb.xor bin %472, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %474 = comb.mux bin %385, %c0_i9, %473 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %478 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 220 : ui64} : i9
    %475 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %476 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %477 = comb.mux bin %476, %474, %475 {sv.namehint = "_a_first_counter_T_1"} : i9
    %478 = comb.mux bin %381, %477, %a_first_counter_1 : i9
    %479 = comb.shl bin %c4095_i27, %405 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %480 = comb.extract %479 from 3 : (i27) -> i9
    %481 = comb.xor bin %480, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %482 = comb.mux bin %409, %481, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %486 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 229 : ui64} : i9
    %483 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %484 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %485 = comb.mux bin %484, %482, %483 {sv.namehint = "_d_first_counter_T_1"} : i9
    %486 = comb.mux bin %404, %485, %d_first_counter_1 : i9
    %487 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %488 = comb.shru bin %inflight_opcodes, %487 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %489 = comb.extract %488 from 1 : (i12) -> i3
    %490 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %491 = comb.shru bin %inflight_sizes, %490 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %492 = comb.extract %491 from 1 : (i24) -> i7
    %493 = comb.concat %false, %492 {sv.namehint = "a_size_lookup"} : i1, i7
    %494 = comb.and bin %io_in_a_valid, %476 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %495 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %496 = comb.shl bin %c1_i4, %495 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %497 = comb.extract %496 from 0 : (i4) -> i3
    %498 = comb.mux bin %494, %497, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %499 = comb.and bin %381, %476 : i1
    %500 = comb.shl bin %c1_i4, %495 {sv.namehint = "_a_set_T"} : i4
    %501 = comb.extract %500 from 0 : (i4) -> i3
    %502 = comb.mux bin %499, %501, %c0_i3 {sv.namehint = "a_set"} : i3
    %503 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %504 = comb.mux bin %499, %503, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %505 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %506 = comb.mux bin %499, %505, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %507 = comb.concat %c0_i31, %504 : i31, i4
    %508 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %509 = comb.shl bin %507, %508 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %510 = comb.extract %509 from 0 : (i35) -> i12
    %511 = comb.mux bin %499, %510, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %512 = comb.concat %c0_i31, %506 : i31, i5
    %513 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %514 = comb.shl bin %512, %513 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %515 = comb.extract %514 from 0 : (i36) -> i24
    %516 = comb.mux bin %499, %515, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %517 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %518 = comb.shru bin %inflight, %517 : i3
    %519 = comb.extract %518 from 0 : (i3) -> i1
    %520 = comb.xor bin %519, %true : i1
    %521 = comb.and bin %499, %82 : i1
    %522 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %523 = comb.and bin %io_in_d_valid, %484 : i1
    %524 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %525 = comb.and bin %523, %524 : i1
    %526 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %527 = comb.shl bin %c1_i4, %526 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %528 = comb.extract %527 from 0 : (i4) -> i3
    %529 = comb.mux bin %525, %528, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %530 = comb.and bin %404, %484, %524 : i1
    %531 = comb.shl bin %c1_i4, %526 {sv.namehint = "_d_clr_T"} : i4
    %532 = comb.extract %531 from 0 : (i4) -> i3
    %533 = comb.mux bin %530, %532, %c0_i3 {sv.namehint = "d_clr"} : i3
    %534 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %535 = comb.shl bin %c15_i47, %534 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %536 = comb.extract %535 from 0 : (i47) -> i12
    %537 = comb.mux bin %530, %536, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %538 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %539 = comb.shl bin %c255_i47, %538 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %540 = comb.extract %539 from 0 : (i47) -> i24
    %541 = comb.mux bin %530, %540, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %542 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %543 = comb.and bin %494, %542 {sv.namehint = "same_cycle_resp"} : i1
    %544 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %545 = comb.shru bin %inflight, %544 : i3
    %546 = comb.extract %545 from 0 : (i3) -> i1
    %547 = comb.or bin %546, %543 : i1
    %548 = comb.and bin %525, %82 : i1
    %549 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %550 = comb.icmp bin eq %io_in_d_bits_opcode, %549 : i3
    %551 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %552 = comb.icmp bin eq %io_in_d_bits_opcode, %551 : i3
    %553 = comb.or bin %550, %552 : i1
    %554 = comb.and bin %525, %543, %82 : i1
    %555 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %556 = comb.xor bin %543, %true : i1
    %557 = hw.array_get %1[%489] : !hw.array<8xi3>, i3
    %558 = comb.icmp bin eq %io_in_d_bits_opcode, %557 : i3
    %559 = hw.array_get %0[%489] : !hw.array<8xi3>, i3
    %560 = comb.icmp bin eq %io_in_d_bits_opcode, %559 : i3
    %561 = comb.or bin %558, %560 : i1
    %562 = comb.and bin %525, %556, %82 : i1
    %563 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %564 = comb.icmp bin eq %563, %493 : i8
    %565 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %566 = comb.xor bin %io_in_d_ready, %true : i1
    %567 = comb.or bin %566, %io_in_a_ready : i1
    %568 = comb.and bin %523, %476, %io_in_a_valid, %565, %524, %82 : i1
    %569 = comb.icmp bin ne %498, %529 : i3
    %570 = comb.icmp bin eq %498, %c0_i3 : i3
    %571 = comb.or bin %569, %570 : i1
    %572 = comb.or bin %inflight, %502 {sv.namehint = "_inflight_T"} : i3
    %573 = comb.xor bin %533, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %574 = comb.and bin %572, %573 {sv.namehint = "_inflight_T_2"} : i3
    %575 = comb.or bin %inflight_opcodes, %511 {sv.namehint = "_inflight_opcodes_T"} : i12
    %576 = comb.xor bin %537, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %577 = comb.and bin %575, %576 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %578 = comb.or bin %inflight_sizes, %516 {sv.namehint = "_inflight_sizes_T"} : i24
    %579 = comb.xor bin %541, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %580 = comb.and bin %578, %579 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %587 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 238 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %581 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %582 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %583 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %584 = comb.or bin %581, %582, %583 : i1
    %585 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %586 = comb.or bin %381, %404 : i1
    %587 = comb.mux bin %586, %c0_i32, %585 : i32
    %inflight_1 = seq.firreg %667 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 270 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %670 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 285 : ui64} : i24
    %588 = comb.shl bin %c4095_i27, %302 {sv.namehint = "_c_first_beats1_decode_T_5"} : i27
    %589 = comb.extract %588 from 3 : (i27) -> i9
    %590 = comb.xor bin %589, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_7"} : i9
    %591 = comb.mux bin %452, %590, %c0_i9 {sv.namehint = "c_first_beats1_1"} : i9
    %c_first_counter_1 = seq.firreg %595 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 309 : ui64} : i9
    %592 = comb.add %c_first_counter_1, %c-1_i9 {sv.namehint = "_c_first_counter1_T_1"} : i9
    %593 = comb.icmp bin eq %c_first_counter_1, %c0_i9 {sv.namehint = "c_first_1"} : i9
    %594 = comb.mux bin %593, %591, %592 {sv.namehint = "_c_first_counter_T_1"} : i9
    %595 = comb.mux bin %448, %594, %c_first_counter_1 : i9
    %596 = comb.shl bin %c4095_i27, %405 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %597 = comb.extract %596 from 3 : (i27) -> i9
    %598 = comb.xor bin %597, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %599 = comb.mux bin %409, %598, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %603 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 318 : ui64} : i9
    %600 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %601 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %602 = comb.mux bin %601, %599, %600 {sv.namehint = "_d_first_counter_T_2"} : i9
    %603 = comb.mux bin %404, %602, %d_first_counter_2 : i9
    %604 = comb.shru bin %inflight_sizes_1, %490 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %605 = comb.extract %604 from 1 : (i24) -> i7
    %606 = comb.concat %false, %605 {sv.namehint = "c_size_lookup"} : i1, i7
    %607 = comb.and bin %io_in_c_valid, %593 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %608 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %609 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %610 = comb.and bin %608, %609 : i1
    %611 = comb.and bin %607, %610 : i1
    %612 = comb.concat %c0_i2, %io_in_c_bits_source : i2, i2
    %613 = comb.shl bin %c1_i4, %612 {sv.namehint = "_c_set_wo_ready_T"} : i4
    %614 = comb.extract %613 from 0 : (i4) -> i3
    %615 = comb.mux bin %611, %614, %c0_i3 {sv.namehint = "c_set_wo_ready"} : i3
    %616 = comb.and bin %448, %593, %610 : i1
    %617 = comb.shl bin %c1_i4, %612 {sv.namehint = "_c_set_T"} : i4
    %618 = comb.extract %617 from 0 : (i4) -> i3
    %619 = comb.mux bin %616, %618, %c0_i3 {sv.namehint = "c_set"} : i3
    %620 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i4, i1
    %621 = comb.mux bin %616, %620, %c0_i5 {sv.namehint = "c_sizes_set_interm"} : i5
    %622 = comb.concat %c0_i31, %621 : i31, i5
    %623 = comb.concat %c0_i31, %io_in_c_bits_source, %c0_i3 : i31, i2, i3
    %624 = comb.shl bin %622, %623 {sv.namehint = "_c_sizes_set_T_1"} : i36
    %625 = comb.extract %624 from 0 : (i36) -> i24
    %626 = comb.mux bin %616, %625, %c0_i24 {sv.namehint = "c_sizes_set"} : i24
    %627 = comb.concat %false, %io_in_c_bits_source : i1, i2
    %628 = comb.shru bin %inflight_1, %627 : i3
    %629 = comb.extract %628 from 0 : (i3) -> i1
    %630 = comb.xor bin %629, %true : i1
    %631 = comb.and bin %616, %82 : i1
    %632 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 {sv.namehint = "_c_probe_ack_T"} : i3
    %633 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 {sv.namehint = "_c_probe_ack_T_1"} : i3
    %634 = comb.or bin %632, %633 {sv.namehint = "c_probe_ack"} : i1
    %635 = comb.and bin %io_in_d_valid, %601 : i1
    %636 = comb.and bin %635, %522 : i1
    %637 = comb.shl bin %c1_i4, %526 {sv.namehint = "_d_clr_wo_ready_T_1"} : i4
    %638 = comb.extract %637 from 0 : (i4) -> i3
    %639 = comb.mux bin %636, %638, %c0_i3 {sv.namehint = "d_clr_wo_ready_1"} : i3
    %640 = comb.and bin %404, %601, %522 : i1
    %641 = comb.shl bin %c1_i4, %526 {sv.namehint = "_d_clr_T_1"} : i4
    %642 = comb.extract %641 from 0 : (i4) -> i3
    %643 = comb.mux bin %640, %642, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %644 = comb.shl bin %c255_i47, %538 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %645 = comb.extract %644 from 0 : (i47) -> i24
    %646 = comb.mux bin %640, %645, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %647 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i2
    %648 = comb.and bin %607, %608, %609, %647 {sv.namehint = "same_cycle_resp_1"} : i1
    %649 = comb.shru bin %inflight_1, %544 : i3
    %650 = comb.extract %649 from 0 : (i3) -> i1
    %651 = comb.or bin %650, %648 : i1
    %652 = comb.and bin %636, %82 : i1
    %653 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i4
    %654 = comb.and bin %636, %648, %82 : i1
    %655 = comb.xor bin %648, %true : i1
    %656 = comb.icmp bin eq %563, %606 : i8
    %657 = comb.and bin %636, %655, %82 : i1
    %658 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i2
    %659 = comb.xor bin %634, %true : i1
    %660 = comb.or bin %566, %io_in_c_ready : i1
    %661 = comb.and bin %635, %593, %io_in_c_valid, %658, %522, %659, %82 : i1
    %662 = comb.icmp bin ne %615, %c0_i3 : i3
    %663 = comb.icmp bin ne %615, %639 : i3
    %664 = comb.and bin %662, %82 : i1
    %665 = comb.or bin %inflight_1, %619 {sv.namehint = "_inflight_T_3"} : i3
    %666 = comb.xor bin %643, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %667 = comb.and bin %665, %666 {sv.namehint = "_inflight_T_5"} : i3
    %668 = comb.or bin %inflight_sizes_1, %626 {sv.namehint = "_inflight_sizes_T_3"} : i24
    %669 = comb.xor bin %646, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %670 = comb.and bin %668, %669 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %677 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 327 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %671 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %672 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %673 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %674 = comb.or bin %671, %672, %673 : i1
    %675 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %676 = comb.or bin %448, %404 : i1
    %677 = comb.mux bin %676, %c0_i32, %675 : i32
    %inflight_2 = seq.firreg %707 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 359 : ui64} : i4
    %678 = comb.shl bin %c4095_i27, %405 {sv.namehint = "_d_first_beats1_decode_T_13"} : i27
    %679 = comb.extract %678 from 3 : (i27) -> i9
    %680 = comb.xor bin %679, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_15"} : i9
    %681 = comb.mux bin %409, %680, %c0_i9 {sv.namehint = "d_first_beats1_3"} : i9
    %d_first_counter_3 = seq.firreg %685 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 363 : ui64} : i9
    %682 = comb.add %d_first_counter_3, %c-1_i9 {sv.namehint = "_d_first_counter1_T_3"} : i9
    %683 = comb.icmp bin eq %d_first_counter_3, %c0_i9 {sv.namehint = "d_first_3"} : i9
    %684 = comb.mux bin %683, %681, %682 {sv.namehint = "_d_first_counter_T_3"} : i9
    %685 = comb.mux bin %404, %684, %d_first_counter_3 : i9
    %686 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %687 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %688 = comb.xor bin %687, %true : i1
    %689 = comb.and bin %404, %683, %686, %688 : i1
    %690 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %691 = comb.shl bin %c1_i4, %690 {sv.namehint = "_d_set_T"} : i4
    %692 = comb.mux bin %689, %691, %c0_i4 {sv.namehint = "d_set"} : i4
    %693 = comb.shru bin %inflight_2, %690 : i4
    %694 = comb.extract %693 from 0 : (i4) -> i1
    %695 = comb.xor bin %694, %true : i1
    %696 = comb.and bin %689, %82 : i1
    %697 = comb.and bin %io_in_e_ready, %io_in_e_valid : i1
    %698 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %699 = comb.shl bin %c1_i4, %698 {sv.namehint = "_e_clr_T"} : i4
    %700 = comb.mux bin %697, %699, %c0_i4 {sv.namehint = "e_clr"} : i4
    %701 = comb.or bin %692, %inflight_2 : i4
    %702 = comb.shru bin %701, %698 : i4
    %703 = comb.extract %702 from 0 : (i4) -> i1
    %704 = comb.and bin %697, %82 : i1
    sv.always posedge %2 {
      sv.if %83 {
        sv.assert %81, immediate label "assert__assert_2"
      }
      sv.if %83 {
        sv.assert %100, immediate label "assert__assert_3"
      }
      sv.if %83 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %83 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %83 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %83 {
        sv.assert %101, immediate label "assert__assert_7"
      }
      sv.if %83 {
        sv.assert %102, immediate label "assert__assert_8"
      }
      sv.if %83 {
        sv.assert %103, immediate label "assert__assert_9"
      }
      sv.if %105 {
        sv.assert %81, immediate label "assert__assert_10"
      }
      sv.if %105 {
        sv.assert %106, immediate label "assert__assert_11"
      }
      sv.if %105 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %105 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %105 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %105 {
        sv.assert %101, immediate label "assert__assert_15"
      }
      sv.if %105 {
        sv.assert %107, immediate label "assert__assert_16"
      }
      sv.if %105 {
        sv.assert %102, immediate label "assert__assert_17"
      }
      sv.if %105 {
        sv.assert %103, immediate label "assert__assert_18"
      }
      sv.if %109 {
        sv.assert %62, immediate label "assert__assert_19"
      }
      sv.if %109 {
        sv.assert %113, immediate label "assert__assert_20"
      }
      sv.if %109 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %109 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %109 {
        sv.assert %114, immediate label "assert__assert_23"
      }
      sv.if %109 {
        sv.assert %115, immediate label "assert__assert_24"
      }
      sv.if %109 {
        sv.assert %103, immediate label "assert__assert_25"
      }
      sv.if %123 {
        sv.assert %122, immediate label "assert__assert_26"
      }
      sv.if %123 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %123 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %123 {
        sv.assert %114, immediate label "assert__assert_29"
      }
      sv.if %123 {
        sv.assert %115, immediate label "assert__assert_30"
      }
      sv.if %125 {
        sv.assert %122, immediate label "assert__assert_31"
      }
      sv.if %125 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %125 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %125 {
        sv.assert %114, immediate label "assert__assert_34"
      }
      sv.if %125 {
        sv.assert %128, immediate label "assert__assert_35"
      }
      sv.if %133 {
        sv.assert %132, immediate label "assert__assert_36"
      }
      sv.if %133 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %133 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %133 {
        sv.assert %134, immediate label "assert__assert_39"
      }
      sv.if %133 {
        sv.assert %115, immediate label "assert__assert_40"
      }
      sv.if %136 {
        sv.assert %132, immediate label "assert__assert_41"
      }
      sv.if %136 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %136 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %136 {
        sv.assert %138, immediate label "assert__assert_44"
      }
      sv.if %136 {
        sv.assert %115, immediate label "assert__assert_45"
      }
      sv.if %141 {
        sv.assert %140, immediate label "assert__assert_46"
      }
      sv.if %141 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %141 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %141 {
        sv.assert %142, immediate label "assert__assert_49"
      }
      sv.if %141 {
        sv.assert %115, immediate label "assert__assert_50"
      }
      sv.if %141 {
        sv.assert %103, immediate label "assert__assert_51"
      }
      sv.if %144 {
        sv.assert %143, immediate label "assert__assert_52"
      }
      sv.if %150 {
        sv.assert %148, immediate label "assert__assert_53"
      }
      sv.if %150 {
        sv.assert %151, immediate label "assert__assert_54"
      }
      sv.if %150 {
        sv.assert %152, immediate label "assert__assert_55"
      }
      sv.if %150 {
        sv.assert %153, immediate label "assert__assert_56"
      }
      sv.if %150 {
        sv.assert %154, immediate label "assert__assert_57"
      }
      sv.if %156 {
        sv.assert %148, immediate label "assert__assert_58"
      }
      sv.if %156 {
        sv.assert %151, immediate label "assert__assert_60"
      }
      sv.if %156 {
        sv.assert %157, immediate label "assert__assert_61"
      }
      sv.if %156 {
        sv.assert %158, immediate label "assert__assert_62"
      }
      sv.if %156 {
        sv.assert %153, immediate label "assert__assert_63"
      }
      sv.if %160 {
        sv.assert %148, immediate label "assert__assert_65"
      }
      sv.if %160 {
        sv.assert %151, immediate label "assert__assert_67"
      }
      sv.if %160 {
        sv.assert %157, immediate label "assert__assert_68"
      }
      sv.if %160 {
        sv.assert %158, immediate label "assert__assert_69"
      }
      sv.if %160 {
        sv.assert %161, immediate label "assert__assert_70"
      }
      sv.if %163 {
        sv.assert %148, immediate label "assert__assert_72"
      }
      sv.if %163 {
        sv.assert %152, immediate label "assert__assert_73"
      }
      sv.if %163 {
        sv.assert %153, immediate label "assert__assert_74"
      }
      sv.if %165 {
        sv.assert %148, immediate label "assert__assert_76"
      }
      sv.if %165 {
        sv.assert %152, immediate label "assert__assert_77"
      }
      sv.if %165 {
        sv.assert %161, immediate label "assert__assert_78"
      }
      sv.if %167 {
        sv.assert %148, immediate label "assert__assert_80"
      }
      sv.if %167 {
        sv.assert %152, immediate label "assert__assert_81"
      }
      sv.if %167 {
        sv.assert %153, immediate label "assert__assert_82"
      }
      sv.if %169 {
        sv.assert %168, immediate label "assert__assert_84"
      }
      sv.if %278 {
        sv.assert %277, immediate label "assert__assert_86"
      }
      sv.if %278 {
        sv.assert %209, immediate label "assert__assert_87"
      }
      sv.if %278 {
        sv.assert %265, immediate label "assert__assert_88"
      }
      sv.if %278 {
        sv.assert %216, immediate label "assert__assert_89"
      }
      sv.if %278 {
        sv.assert %279, immediate label "assert__assert_90"
      }
      sv.if %278 {
        sv.assert %280, immediate label "assert__assert_91"
      }
      sv.if %278 {
        sv.assert %281, immediate label "assert__assert_92"
      }
      sv.if %283 {
        sv.assert %false, immediate label "assert__assert_93"
      }
      sv.if %283 {
        sv.assert %209, immediate label "assert__assert_94"
      }
      sv.if %283 {
        sv.assert %265, immediate label "assert__assert_95"
      }
      sv.if %283 {
        sv.assert %216, immediate label "assert__assert_96"
      }
      sv.if %283 {
        sv.assert %284, immediate label "assert__assert_97"
      }
      sv.if %283 {
        sv.assert %280, immediate label "assert__assert_98"
      }
      sv.if %283 {
        sv.assert %281, immediate label "assert__assert_99"
      }
      sv.if %286 {
        sv.assert %false, immediate label "assert__assert_100"
      }
      sv.if %286 {
        sv.assert %209, immediate label "assert__assert_101"
      }
      sv.if %286 {
        sv.assert %265, immediate label "assert__assert_102"
      }
      sv.if %286 {
        sv.assert %216, immediate label "assert__assert_103"
      }
      sv.if %286 {
        sv.assert %284, immediate label "assert__assert_104"
      }
      sv.if %286 {
        sv.assert %280, immediate label "assert__assert_105"
      }
      sv.if %288 {
        sv.assert %false, immediate label "assert__assert_106"
      }
      sv.if %288 {
        sv.assert %209, immediate label "assert__assert_107"
      }
      sv.if %288 {
        sv.assert %265, immediate label "assert__assert_108"
      }
      sv.if %288 {
        sv.assert %216, immediate label "assert__assert_109"
      }
      sv.if %288 {
        sv.assert %284, immediate label "assert__assert_110"
      }
      sv.if %288 {
        sv.assert %291, immediate label "assert__assert_111"
      }
      sv.if %293 {
        sv.assert %false, immediate label "assert__assert_112"
      }
      sv.if %293 {
        sv.assert %209, immediate label "assert__assert_113"
      }
      sv.if %293 {
        sv.assert %265, immediate label "assert__assert_114"
      }
      sv.if %293 {
        sv.assert %216, immediate label "assert__assert_115"
      }
      sv.if %293 {
        sv.assert %280, immediate label "assert__assert_117"
      }
      sv.if %295 {
        sv.assert %false, immediate label "assert__assert_118"
      }
      sv.if %295 {
        sv.assert %209, immediate label "assert__assert_119"
      }
      sv.if %295 {
        sv.assert %265, immediate label "assert__assert_120"
      }
      sv.if %295 {
        sv.assert %216, immediate label "assert__assert_121"
      }
      sv.if %295 {
        sv.assert %280, immediate label "assert__assert_123"
      }
      sv.if %297 {
        sv.assert %false, immediate label "assert__assert_124"
      }
      sv.if %297 {
        sv.assert %209, immediate label "assert__assert_125"
      }
      sv.if %297 {
        sv.assert %265, immediate label "assert__assert_126"
      }
      sv.if %297 {
        sv.assert %216, immediate label "assert__assert_127"
      }
      sv.if %297 {
        sv.assert %280, immediate label "assert__assert_128"
      }
      sv.if %297 {
        sv.assert %281, immediate label "assert__assert_129"
      }
      sv.if %347 {
        sv.assert %345, immediate label "assert__assert_132"
      }
      sv.if %347 {
        sv.assert %301, immediate label "assert__assert_133"
      }
      sv.if %347 {
        sv.assert %348, immediate label "assert__assert_134"
      }
      sv.if %347 {
        sv.assert %308, immediate label "assert__assert_135"
      }
      sv.if %347 {
        sv.assert %350, immediate label "assert__assert_136"
      }
      sv.if %347 {
        sv.assert %351, immediate label "assert__assert_137"
      }
      sv.if %353 {
        sv.assert %345, immediate label "assert__assert_138"
      }
      sv.if %353 {
        sv.assert %301, immediate label "assert__assert_139"
      }
      sv.if %353 {
        sv.assert %348, immediate label "assert__assert_140"
      }
      sv.if %353 {
        sv.assert %308, immediate label "assert__assert_141"
      }
      sv.if %353 {
        sv.assert %350, immediate label "assert__assert_142"
      }
      sv.if %360 {
        sv.assert %359, immediate label "assert__assert_143"
      }
      sv.if %360 {
        sv.assert %370, immediate label "assert__assert_144"
      }
      sv.if %360 {
        sv.assert %301, immediate label "assert__assert_145"
      }
      sv.if %360 {
        sv.assert %348, immediate label "assert__assert_146"
      }
      sv.if %360 {
        sv.assert %308, immediate label "assert__assert_147"
      }
      sv.if %360 {
        sv.assert %350, immediate label "assert__assert_148"
      }
      sv.if %360 {
        sv.assert %351, immediate label "assert__assert_149"
      }
      sv.if %372 {
        sv.assert %359, immediate label "assert__assert_150"
      }
      sv.if %372 {
        sv.assert %373, immediate label "assert__assert_151"
      }
      sv.if %372 {
        sv.assert %301, immediate label "assert__assert_152"
      }
      sv.if %372 {
        sv.assert %348, immediate label "assert__assert_153"
      }
      sv.if %372 {
        sv.assert %308, immediate label "assert__assert_154"
      }
      sv.if %372 {
        sv.assert %350, immediate label "assert__assert_155"
      }
      sv.if %375 {
        sv.assert %345, immediate label "assert__assert_156"
      }
      sv.if %375 {
        sv.assert %301, immediate label "assert__assert_157"
      }
      sv.if %375 {
        sv.assert %308, immediate label "assert__assert_158"
      }
      sv.if %375 {
        sv.assert %376, immediate label "assert__assert_159"
      }
      sv.if %375 {
        sv.assert %351, immediate label "assert__assert_160"
      }
      sv.if %378 {
        sv.assert %345, immediate label "assert__assert_161"
      }
      sv.if %378 {
        sv.assert %301, immediate label "assert__assert_162"
      }
      sv.if %378 {
        sv.assert %308, immediate label "assert__assert_163"
      }
      sv.if %378 {
        sv.assert %376, immediate label "assert__assert_164"
      }
      sv.if %380 {
        sv.assert %345, immediate label "assert__assert_165"
      }
      sv.if %380 {
        sv.assert %301, immediate label "assert__assert_166"
      }
      sv.if %380 {
        sv.assert %308, immediate label "assert__assert_167"
      }
      sv.if %380 {
        sv.assert %376, immediate label "assert__assert_168"
      }
      sv.if %380 {
        sv.assert %351, immediate label "assert__assert_169"
      }
      sv.if %393 {
        sv.assert %392, immediate label "assert__assert_171"
      }
      sv.if %393 {
        sv.assert %394, immediate label "assert__assert_172"
      }
      sv.if %393 {
        sv.assert %395, immediate label "assert__assert_173"
      }
      sv.if %393 {
        sv.assert %396, immediate label "assert__assert_174"
      }
      sv.if %393 {
        sv.assert %397, immediate label "assert__assert_175"
      }
      sv.if %417 {
        sv.assert %416, immediate label "assert__assert_176"
      }
      sv.if %417 {
        sv.assert %418, immediate label "assert__assert_177"
      }
      sv.if %417 {
        sv.assert %419, immediate label "assert__assert_178"
      }
      sv.if %417 {
        sv.assert %420, immediate label "assert__assert_179"
      }
      sv.if %417 {
        sv.assert %421, immediate label "assert__assert_180"
      }
      sv.if %417 {
        sv.assert %422, immediate label "assert__assert_181"
      }
      sv.if %437 {
        sv.assert %436, immediate label "assert__assert_182"
      }
      sv.if %437 {
        sv.assert %438, immediate label "assert__assert_183"
      }
      sv.if %437 {
        sv.assert %439, immediate label "assert__assert_184"
      }
      sv.if %437 {
        sv.assert %440, immediate label "assert__assert_185"
      }
      sv.if %437 {
        sv.assert %441, immediate label "assert__assert_186"
      }
      sv.if %460 {
        sv.assert %459, immediate label "assert__assert_187"
      }
      sv.if %460 {
        sv.assert %461, immediate label "assert__assert_188"
      }
      sv.if %460 {
        sv.assert %462, immediate label "assert__assert_189"
      }
      sv.if %460 {
        sv.assert %463, immediate label "assert__assert_190"
      }
      sv.if %460 {
        sv.assert %464, immediate label "assert__assert_191"
      }
      sv.if %521 {
        sv.assert %520, immediate label "assert__assert_192"
      }
      sv.if %548 {
        sv.assert %547, immediate label "assert__assert_193"
      }
      sv.if %554 {
        sv.assert %553, immediate label "assert__assert_194"
      }
      sv.if %554 {
        sv.assert %555, immediate label "assert__assert_195"
      }
      sv.if %562 {
        sv.assert %561, immediate label "assert__assert_196"
      }
      sv.if %562 {
        sv.assert %564, immediate label "assert__assert_197"
      }
      sv.if %568 {
        sv.assert %567, immediate label "assert__assert_198"
      }
      sv.if %82 {
        sv.assert %571, immediate label "assert__assert_199"
      }
      sv.if %82 {
        sv.assert %584, immediate label "assert__assert_200"
      }
      sv.if %631 {
        sv.assert %630, immediate label "assert__assert_201"
      }
      sv.if %652 {
        sv.assert %651, immediate label "assert__assert_202"
      }
      sv.if %654 {
        sv.assert %653, immediate label "assert__assert_203"
      }
      sv.if %657 {
        sv.assert %656, immediate label "assert__assert_204"
      }
      sv.if %661 {
        sv.assert %660, immediate label "assert__assert_205"
      }
      sv.if %664 {
        sv.assert %663, immediate label "assert__assert_206"
      }
      sv.if %82 {
        sv.assert %674, immediate label "assert__assert_207"
      }
      sv.if %696 {
        sv.assert %695, immediate label "assert__assert_208"
      }
      sv.if %704 {
        sv.assert %703, immediate label "assert__assert_209"
      }
    }
    %705 = comb.or bin %inflight_2, %692 {sv.namehint = "_inflight_T_6"} : i4
    %706 = comb.xor bin %700, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %707 = comb.and bin %705, %706 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @TLXbar(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_2_a_ready : i1, out auto_out_2_a_valid : i1, out auto_out_2_a_bits_opcode : i3, out auto_out_2_a_bits_param : i3, out auto_out_2_a_bits_size : i4, out auto_out_2_a_bits_source : i2, out auto_out_2_a_bits_address : i31, out auto_out_2_a_bits_mask : i8, out auto_out_2_a_bits_data : i64, out auto_out_2_a_bits_corrupt : i1, out auto_out_2_d_ready : i1, in %auto_out_2_d_valid : i1, in %auto_out_2_d_bits_opcode : i3, in %auto_out_2_d_bits_size : i4, in %auto_out_2_d_bits_source : i2, in %auto_out_2_d_bits_denied : i1, in %auto_out_2_d_bits_data : i64, in %auto_out_2_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_param : i3, out auto_out_1_a_bits_size : i3, out auto_out_1_a_bits_source : i2, out auto_out_1_a_bits_address : i32, out auto_out_1_a_bits_mask : i8, out auto_out_1_a_bits_data : i64, out auto_out_1_a_bits_corrupt : i1, out auto_out_1_b_ready : i1, in %auto_out_1_b_valid : i1, in %auto_out_1_b_bits_param : i2, in %auto_out_1_b_bits_address : i32, in %auto_out_1_c_ready : i1, out auto_out_1_c_valid : i1, out auto_out_1_c_bits_opcode : i3, out auto_out_1_c_bits_param : i3, out auto_out_1_c_bits_size : i3, out auto_out_1_c_bits_source : i2, out auto_out_1_c_bits_address : i32, out auto_out_1_c_bits_data : i64, out auto_out_1_c_bits_corrupt : i1, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_param : i2, in %auto_out_1_d_bits_size : i3, in %auto_out_1_d_bits_source : i2, in %auto_out_1_d_bits_sink : i2, in %auto_out_1_d_bits_denied : i1, in %auto_out_1_d_bits_data : i64, in %auto_out_1_d_bits_corrupt : i1, out auto_out_1_e_valid : i1, out auto_out_1_e_bits_sink : i2, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_param : i3, out auto_out_0_a_bits_size : i4, out auto_out_0_a_bits_source : i2, out auto_out_0_a_bits_address : i28, out auto_out_0_a_bits_mask : i8, out auto_out_0_a_bits_data : i64, out auto_out_0_a_bits_corrupt : i1, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i4, in %auto_out_0_d_bits_source : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i64, in %auto_out_0_d_bits_corrupt : i1) {
    %c0_i8 = hw.constant 0 : i8
    %c-1_i5 = hw.constant -1 : i5
    %c0_i18 = hw.constant 0 : i18
    %c-1_i9 = hw.constant -1 : i9
    %c-2_i2 = hw.constant -2 : i2
    %c255_i23 = hw.constant 255 : i23
    %c63_i21 = hw.constant 63 : i21
    %c4095_i27 = hw.constant 4095 : i27
    %c-2_i3 = hw.constant -2 : i3
    %c6_i4 = hw.constant 6 : i4
    %c0_i2 = hw.constant 0 : i2
    %c-1_i8 = hw.constant -1 : i8
    %c0_i64 = hw.constant 0 : i64
    %false = hw.constant false
    %true = hw.constant true
    %c0_i5 = hw.constant 0 : i5
    %c0_i9 = hw.constant 0 : i9
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c0_i23 = hw.constant 0 : i23
    %c0_i19 = hw.constant 0 : i19
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %37: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %auto_out_1_b_valid: i1, io_in_b_bits_opcode: %c-2_i3: i3, io_in_b_bits_param: %auto_out_1_b_bits_param: i2, io_in_b_bits_size: %c6_i4: i4, io_in_b_bits_source: %c0_i2: i2, io_in_b_bits_address: %auto_out_1_b_bits_address: i32, io_in_b_bits_mask: %c-1_i8: i8, io_in_b_bits_corrupt: %false: i1, io_in_c_ready: %auto_out_1_c_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %120: i1, io_in_d_bits_opcode: %150: i3, io_in_d_bits_param: %146: i2, io_in_d_bits_size: %143: i4, io_in_d_bits_source: %139: i2, io_in_d_bits_sink: %135: i2, io_in_d_bits_denied: %132: i1, io_in_d_bits_corrupt: %124: i1, io_in_e_ready: %true: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "nodeOut_a_bits_address"} : (i32) -> i28
    %2 = comb.concat %false, %auto_out_0_d_bits_sink {sv.namehint = "out_0_d_bits_sink"} : i1, i1
    %3 = comb.extract %auto_in_a_bits_size from 0 {sv.namehint = "x1_nodeOut_a_bits_size"} : (i4) -> i3
    %4 = comb.extract %auto_in_c_bits_size from 0 {sv.namehint = "x1_nodeOut_c_bits_size"} : (i4) -> i3
    %5 = comb.concat %false, %auto_out_1_d_bits_size {sv.namehint = "out_1_d_bits_size"} : i1, i3
    %6 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "x1_nodeOut_1_a_bits_address"} : (i32) -> i31
    %7 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i2
    %8 = comb.icmp bin eq %7, %c0_i2 {sv.namehint = "requestAIO_0_0"} : i2
    %9 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i2
    %10 = comb.icmp eq %9, %c-2_i2 {sv.namehint = "requestAIO_0_1"} : i2
    %11 = comb.extract %auto_in_a_bits_address from 31 : (i32) -> i1
    %12 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i1
    %13 = comb.xor bin %12, %true : i1
    %14 = comb.concat %11, %13 : i1, i1
    %15 = comb.icmp bin eq %14, %c0_i2 {sv.namehint = "requestAIO_0_2"} : i2
    %16 = comb.concat %c0_i23, %auto_out_0_d_bits_size : i23, i4
    %17 = comb.shl bin %c4095_i27, %16 {sv.namehint = "_beatsDO_decode_T_1"} : i27
    %18 = comb.extract %17 from 3 : (i27) -> i9
    %19 = comb.xor bin %18, %c-1_i9 {sv.namehint = "_beatsDO_decode_T_3"} : i9
    %20 = comb.extract %auto_out_0_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata"} : (i3) -> i1
    %21 = comb.concat %c0_i18, %auto_out_1_d_bits_size : i18, i3
    %22 = comb.shl bin %c63_i21, %21 {sv.namehint = "_beatsDO_decode_T_5"} : i21
    %23 = comb.extract %22 from 3 : (i21) -> i3
    %24 = comb.xor bin %23, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_7"} : i3
    %25 = comb.extract %auto_out_1_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_1"} : (i3) -> i1
    %26 = comb.concat %c0_i19, %auto_out_2_d_bits_size : i19, i4
    %27 = comb.shl bin %c255_i23, %26 {sv.namehint = "_beatsDO_decode_T_9"} : i23
    %28 = comb.extract %27 from 3 : (i23) -> i5
    %29 = comb.xor bin %28, %c-1_i5 {sv.namehint = "_beatsDO_decode_T_11"} : i5
    %30 = comb.extract %auto_out_2_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_2"} : (i3) -> i1
    %31 = comb.and bin %auto_in_a_valid, %8 {sv.namehint = "portsAOI_filtered_0_valid"} : i1
    %32 = comb.and bin %auto_in_a_valid, %10 {sv.namehint = "portsAOI_filtered_1_valid"} : i1
    %33 = comb.and bin %auto_in_a_valid, %15 {sv.namehint = "portsAOI_filtered_2_valid"} : i1
    %34 = comb.and %8, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %35 = comb.and %10, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %36 = comb.and %15, %auto_out_2_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %37 = comb.or bin %34, %35, %36 {sv.namehint = "_portsAOI_in_0_a_ready_T_4"} : i1
    %beatsLeft = seq.firreg %105 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %38 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %39 = comb.and bin %38, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %40 = comb.concat %auto_out_2_d_valid, %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_valid"} : i1, i1, i1
    %readys_mask = seq.firreg %69 clock %clock reset sync %reset, %c-1_i3 {firrtl.random_init_start = 9 : ui64} : i3
    %41 = comb.xor bin %readys_mask, %c-1_i3 {sv.namehint = "_readys_filter_T"} : i3
    %42 = comb.and bin %40, %41 {sv.namehint = "_readys_filter_T_1"} : i3
    %43 = comb.extract %42 from 2 : (i3) -> i1
    %44 = comb.extract %42 from 0 : (i3) -> i2
    %45 = comb.concat %44, %auto_out_2_d_valid, %auto_out_1_d_valid : i2, i1, i1
    %46 = comb.concat %42, %auto_out_2_d_valid : i3, i1
    %47 = comb.or bin %45, %46 : i4
    %48 = comb.extract %47 from 3 : (i4) -> i1
    %49 = comb.extract %47 from 0 : (i4) -> i3
    %50 = comb.extract %47 from 2 : (i4) -> i2
    %51 = comb.concat %43, %50 : i1, i2
    %52 = comb.or bin %49, %51 : i3
    %53 = comb.concat %readys_mask, %c0_i3 {sv.namehint = "_readys_unready_T_6"} : i3, i3
    %54 = comb.concat %false, %43, %48, %52 : i1, i1, i1, i3
    %55 = comb.or bin %54, %53 {sv.namehint = "readys_unready"} : i6
    %56 = comb.extract %55 from 3 {sv.namehint = "_readys_readys_T"} : (i6) -> i3
    %57 = comb.extract %55 from 0 {sv.namehint = "_readys_readys_T_1"} : (i6) -> i3
    %58 = comb.and bin %56, %57 {sv.namehint = "_readys_readys_T_2"} : i3
    %59 = comb.xor bin %58, %c-1_i3 {sv.namehint = "readys_readys"} : i3
    %60 = comb.icmp bin ne %40, %c0_i3 {sv.namehint = "_readys_T_5"} : i3
    %61 = comb.and bin %39, %60 {sv.namehint = "_readys_T_6"} : i1
    %62 = comb.and bin %59, %40 {sv.namehint = "_readys_mask_T"} : i3
    %63 = comb.extract %62 from 0 : (i3) -> i2
    %64 = comb.concat %63, %false {sv.namehint = "_readys_mask_T_2"} : i2, i1
    %65 = comb.or bin %62, %64 {sv.namehint = "_readys_mask_T_3"} : i3
    %66 = comb.extract %65 from 0 : (i3) -> i1
    %67 = comb.concat %66, %c0_i2 {sv.namehint = "_readys_mask_T_5"} : i1, i2
    %68 = comb.or bin %65, %67 {sv.namehint = "_readys_mask_T_7"} : i3
    %69 = comb.mux bin %61, %68, %readys_mask : i3
    %70 = comb.extract %59 from 0 {sv.namehint = "readys_0"} : (i3) -> i1
    %71 = comb.extract %59 from 1 {sv.namehint = "readys_1"} : (i3) -> i1
    %72 = comb.extract %59 from 2 {sv.namehint = "readys_2"} : (i3) -> i1
    %73 = comb.and bin %70, %auto_out_0_d_valid {sv.namehint = "winner_0"} : i1
    %74 = comb.and bin %71, %auto_out_1_d_valid {sv.namehint = "winner_1"} : i1
    %75 = comb.and bin %72, %auto_out_2_d_valid {sv.namehint = "winner_2"} : i1
    %76 = comb.or bin %73, %74 {sv.namehint = "prefixOR_2"} : i1
    %77 = comb.xor bin %73, %true : i1
    %78 = comb.xor bin %74, %true : i1
    %79 = comb.or bin %77, %78 : i1
    %80 = comb.xor bin %76, %true : i1
    %81 = comb.xor bin %75, %true : i1
    %82 = comb.or bin %80, %81 : i1
    %83 = comb.and bin %79, %82 : i1
    %84 = comb.xor bin %reset, %true : i1
    %85 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T"} : i1
    %86 = comb.or bin %85, %auto_out_2_d_valid : i1
    %87 = comb.xor bin %86, %true : i1
    %88 = comb.or bin %87, %73, %74, %75 : i1
    sv.always posedge %0 {
      sv.if %84 {
        sv.assert %83, immediate label "assert__assert"
      }
      sv.if %84 {
        sv.assert %88, immediate label "assert__assert_1"
      }
    }
    %89 = comb.and bin %73, %20 : i1
    %90 = comb.mux bin %89, %19, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %91 = comb.and bin %74, %25 : i1
    %92 = comb.mux bin %91, %24, %c0_i3 {sv.namehint = "maskedBeats_1"} : i3
    %93 = comb.and bin %75, %30 : i1
    %94 = comb.mux bin %93, %29, %c0_i5 {sv.namehint = "maskedBeats_2"} : i5
    %95 = comb.extract %90 from 0 : (i9) -> i3
    %96 = comb.or bin %95, %92 : i3
    %97 = comb.extract %90 from 5 : (i9) -> i4
    %98 = comb.extract %90 from 3 : (i9) -> i2
    %99 = comb.concat %98, %96 : i2, i3
    %100 = comb.or bin %99, %94 : i5
    %101 = comb.concat %97, %100 {sv.namehint = "initBeats"} : i4, i5
    %102 = comb.and bin %auto_in_d_ready, %120 {sv.namehint = "_beatsLeft_T"} : i1
    %103 = comb.concat %c0_i8, %102 : i8, i1
    %104 = comb.sub bin %beatsLeft, %103 {sv.namehint = "_beatsLeft_T_1"} : i9
    %105 = comb.mux bin %39, %101, %104 {sv.namehint = "_beatsLeft_T_3"} : i9
    %state_0 = seq.firreg %106 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64} : i1
    %state_1 = seq.firreg %107 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64} : i1
    %state_2 = seq.firreg %108 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %106 = comb.mux bin %38, %73, %state_0 {sv.namehint = "muxState_0"} : i1
    %107 = comb.mux bin %38, %74, %state_1 {sv.namehint = "muxState_1"} : i1
    %108 = comb.mux bin %38, %75, %state_2 {sv.namehint = "muxState_2"} : i1
    %109 = comb.mux bin %38, %70, %state_0 {sv.namehint = "allowed_0"} : i1
    %110 = comb.mux bin %38, %71, %state_1 {sv.namehint = "allowed_1"} : i1
    %111 = comb.mux bin %38, %72, %state_2 {sv.namehint = "allowed_2"} : i1
    %112 = comb.and bin %auto_in_d_ready, %109 {sv.namehint = "portsDIO_filtered_0_ready"} : i1
    %113 = comb.and bin %auto_in_d_ready, %110 {sv.namehint = "portsDIO_filtered_1_0_ready"} : i1
    %114 = comb.and bin %auto_in_d_ready, %111 {sv.namehint = "portsDIO_filtered_2_0_ready"} : i1
    %115 = comb.or bin %85, %auto_out_2_d_valid {sv.namehint = "_in_0_d_valid_T_1"} : i1
    %116 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_in_0_d_valid_T_2"} : i1
    %117 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T_3"} : i1
    %118 = comb.and %state_2, %auto_out_2_d_valid {sv.namehint = "_in_0_d_valid_T_4"} : i1
    %119 = comb.or bin %116, %117, %118 {sv.namehint = "_in_0_d_valid_T_6"} : i1
    %120 = comb.mux bin %38, %115, %119 {sv.namehint = "in_0_d_valid"} : i1
    %121 = comb.and %106, %auto_out_0_d_bits_corrupt {sv.namehint = "_in_0_d_bits_T"} : i1
    %122 = comb.and %107, %auto_out_1_d_bits_corrupt {sv.namehint = "_in_0_d_bits_T_1"} : i1
    %123 = comb.and %108, %auto_out_2_d_bits_corrupt {sv.namehint = "_in_0_d_bits_T_2"} : i1
    %124 = comb.or bin %121, %122, %123 {sv.namehint = "_in_0_d_bits_T_4"} : i1
    %125 = comb.mux bin %106, %auto_out_0_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_5"} : i64
    %126 = comb.mux bin %107, %auto_out_1_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_6"} : i64
    %127 = comb.mux bin %108, %auto_out_2_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_7"} : i64
    %128 = comb.or bin %125, %126, %127 {sv.namehint = "_in_0_d_bits_T_9"} : i64
    %129 = comb.and %106, %auto_out_0_d_bits_denied {sv.namehint = "_in_0_d_bits_T_10"} : i1
    %130 = comb.and %107, %auto_out_1_d_bits_denied {sv.namehint = "_in_0_d_bits_T_11"} : i1
    %131 = comb.and %108, %auto_out_2_d_bits_denied {sv.namehint = "_in_0_d_bits_T_12"} : i1
    %132 = comb.or bin %129, %130, %131 {sv.namehint = "_in_0_d_bits_T_14"} : i1
    %133 = comb.mux bin %106, %2, %c0_i2 {sv.namehint = "_in_0_d_bits_T_15"} : i2
    %134 = comb.mux bin %107, %auto_out_1_d_bits_sink, %c0_i2 {sv.namehint = "_in_0_d_bits_T_16"} : i2
    %135 = comb.or bin %133, %134 {sv.namehint = "_in_0_d_bits_T_18"} : i2
    %136 = comb.mux bin %106, %auto_out_0_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_20"} : i2
    %137 = comb.mux bin %107, %auto_out_1_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_21"} : i2
    %138 = comb.mux bin %108, %auto_out_2_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_22"} : i2
    %139 = comb.or bin %136, %137, %138 {sv.namehint = "_in_0_d_bits_T_24"} : i2
    %140 = comb.mux bin %106, %auto_out_0_d_bits_size, %c0_i4 {sv.namehint = "_in_0_d_bits_T_25"} : i4
    %141 = comb.mux bin %107, %5, %c0_i4 {sv.namehint = "_in_0_d_bits_T_26"} : i4
    %142 = comb.mux bin %108, %auto_out_2_d_bits_size, %c0_i4 {sv.namehint = "_in_0_d_bits_T_27"} : i4
    %143 = comb.or bin %140, %141, %142 {sv.namehint = "_in_0_d_bits_T_29"} : i4
    %144 = comb.mux bin %106, %auto_out_0_d_bits_param, %c0_i2 {sv.namehint = "_in_0_d_bits_T_30"} : i2
    %145 = comb.mux bin %107, %auto_out_1_d_bits_param, %c0_i2 {sv.namehint = "_in_0_d_bits_T_31"} : i2
    %146 = comb.or bin %144, %145 {sv.namehint = "_in_0_d_bits_T_33"} : i2
    %147 = comb.mux bin %106, %auto_out_0_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_35"} : i3
    %148 = comb.mux bin %107, %auto_out_1_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_36"} : i3
    %149 = comb.mux bin %108, %auto_out_2_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_37"} : i3
    %150 = comb.or bin %147, %148, %149 {sv.namehint = "_in_0_d_bits_T_39"} : i3
    hw.output %37, %auto_out_1_b_valid, %auto_out_1_b_bits_param, %auto_out_1_b_bits_address, %auto_out_1_c_ready, %120, %150, %146, %143, %139, %135, %132, %128, %124, %33, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %6, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %114, %32, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %3, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %4, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %113, %auto_in_e_valid, %auto_in_e_bits_sink, %31, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %1, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %112 : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i31, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLFIFOFixer(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %c6_i4 = hw.constant 6 : i4
    %c-2_i3 = hw.constant -2 : i3
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %auto_out_b_valid: i1, io_in_b_bits_opcode: %c-2_i3: i3, io_in_b_bits_param: %auto_out_b_bits_param: i2, io_in_b_bits_size: %c6_i4: i4, io_in_b_bits_source: %c0_i2: i2, io_in_b_bits_address: %auto_out_b_bits_address: i32, io_in_b_bits_mask: %c-1_i8: i8, io_in_b_bits_corrupt: %false: i1, io_in_c_ready: %auto_out_c_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_in_e_ready: %true: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLWidthWidget(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i4, in %auto_widget_in_a_bits_source : i2, in %auto_widget_in_a_bits_address : i28, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_a_bits_corrupt : i1, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_param : i2, out auto_widget_in_d_bits_size : i4, out auto_widget_in_d_bits_source : i2, out auto_widget_in_d_bits_sink : i1, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_bus_xing_out_a_ready : i1, out auto_bus_xing_out_a_valid : i1, out auto_bus_xing_out_a_bits_opcode : i3, out auto_bus_xing_out_a_bits_param : i3, out auto_bus_xing_out_a_bits_size : i4, out auto_bus_xing_out_a_bits_source : i2, out auto_bus_xing_out_a_bits_address : i28, out auto_bus_xing_out_a_bits_mask : i8, out auto_bus_xing_out_a_bits_data : i64, out auto_bus_xing_out_a_bits_corrupt : i1, out auto_bus_xing_out_d_ready : i1, in %auto_bus_xing_out_d_valid : i1, in %auto_bus_xing_out_d_bits_opcode : i3, in %auto_bus_xing_out_d_bits_param : i2, in %auto_bus_xing_out_d_bits_size : i4, in %auto_bus_xing_out_d_bits_source : i2, in %auto_bus_xing_out_d_bits_sink : i1, in %auto_bus_xing_out_d_bits_denied : i1, in %auto_bus_xing_out_d_bits_data : i64, in %auto_bus_xing_out_d_bits_corrupt : i1) {
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i4, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i2, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_widget_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_out_a_ready: %auto_bus_xing_out_a_ready: i1, auto_out_d_valid: %auto_bus_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_bus_xing_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_bus_xing_out_d_bits_param: i2, auto_out_d_bits_size: %auto_bus_xing_out_d_bits_size: i4, auto_out_d_bits_source: %auto_bus_xing_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_bus_xing_out_d_bits_sink: i1, auto_out_d_bits_denied: %auto_bus_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_bus_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_bus_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bus_xingIn_d_ready"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLWidthWidget_2(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i3, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_2(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i3, in %auto_widget_in_a_bits_source : i2, in %auto_widget_in_a_bits_address : i32, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_a_bits_corrupt : i1, in %auto_widget_in_b_ready : i1, out auto_widget_in_b_valid : i1, out auto_widget_in_b_bits_param : i2, out auto_widget_in_b_bits_address : i32, out auto_widget_in_c_ready : i1, in %auto_widget_in_c_valid : i1, in %auto_widget_in_c_bits_opcode : i3, in %auto_widget_in_c_bits_param : i3, in %auto_widget_in_c_bits_size : i3, in %auto_widget_in_c_bits_source : i2, in %auto_widget_in_c_bits_address : i32, in %auto_widget_in_c_bits_data : i64, in %auto_widget_in_c_bits_corrupt : i1, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_param : i2, out auto_widget_in_d_bits_size : i3, out auto_widget_in_d_bits_source : i2, out auto_widget_in_d_bits_sink : i2, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_widget_in_e_valid : i1, in %auto_widget_in_e_bits_sink : i2, in %auto_widget_out_a_ready : i1, out auto_widget_out_a_valid : i1, out auto_widget_out_a_bits_opcode : i3, out auto_widget_out_a_bits_param : i3, out auto_widget_out_a_bits_size : i3, out auto_widget_out_a_bits_source : i2, out auto_widget_out_a_bits_address : i32, out auto_widget_out_a_bits_mask : i8, out auto_widget_out_a_bits_data : i64, out auto_widget_out_a_bits_corrupt : i1, out auto_widget_out_b_ready : i1, in %auto_widget_out_b_valid : i1, in %auto_widget_out_b_bits_param : i2, in %auto_widget_out_b_bits_address : i32, in %auto_widget_out_c_ready : i1, out auto_widget_out_c_valid : i1, out auto_widget_out_c_bits_opcode : i3, out auto_widget_out_c_bits_param : i3, out auto_widget_out_c_bits_size : i3, out auto_widget_out_c_bits_source : i2, out auto_widget_out_c_bits_address : i32, out auto_widget_out_c_bits_data : i64, out auto_widget_out_c_bits_corrupt : i1, out auto_widget_out_d_ready : i1, in %auto_widget_out_d_valid : i1, in %auto_widget_out_d_bits_opcode : i3, in %auto_widget_out_d_bits_param : i2, in %auto_widget_out_d_bits_size : i3, in %auto_widget_out_d_bits_source : i2, in %auto_widget_out_d_bits_sink : i2, in %auto_widget_out_d_bits_denied : i1, in %auto_widget_out_d_bits_data : i64, in %auto_widget_out_d_bits_corrupt : i1, out auto_widget_out_e_valid : i1, out auto_widget_out_e_bits_sink : i2) {
    %widget.auto_in_a_ready, %widget.auto_in_b_valid, %widget.auto_in_b_bits_param, %widget.auto_in_b_bits_address, %widget.auto_in_c_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_b_ready, %widget.auto_out_c_valid, %widget.auto_out_c_bits_opcode, %widget.auto_out_c_bits_param, %widget.auto_out_c_bits_size, %widget.auto_out_c_bits_source, %widget.auto_out_c_bits_address, %widget.auto_out_c_bits_data, %widget.auto_out_c_bits_corrupt, %widget.auto_out_d_ready, %widget.auto_out_e_valid, %widget.auto_out_e_bits_sink = hw.instance "widget" @TLWidthWidget_2(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i3, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i2, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i32, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_widget_in_a_bits_corrupt: i1, auto_in_b_ready: %auto_widget_in_b_ready: i1, auto_in_c_valid: %auto_widget_in_c_valid: i1, auto_in_c_bits_opcode: %auto_widget_in_c_bits_opcode: i3, auto_in_c_bits_param: %auto_widget_in_c_bits_param: i3, auto_in_c_bits_size: %auto_widget_in_c_bits_size: i3, auto_in_c_bits_source: %auto_widget_in_c_bits_source: i2, auto_in_c_bits_address: %auto_widget_in_c_bits_address: i32, auto_in_c_bits_data: %auto_widget_in_c_bits_data: i64, auto_in_c_bits_corrupt: %auto_widget_in_c_bits_corrupt: i1, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_in_e_valid: %auto_widget_in_e_valid: i1, auto_in_e_bits_sink: %auto_widget_in_e_bits_sink: i2, auto_out_a_ready: %auto_widget_out_a_ready: i1, auto_out_b_valid: %auto_widget_out_b_valid: i1, auto_out_b_bits_param: %auto_widget_out_b_bits_param: i2, auto_out_b_bits_address: %auto_widget_out_b_bits_address: i32, auto_out_c_ready: %auto_widget_out_c_ready: i1, auto_out_d_valid: %auto_widget_out_d_valid: i1, auto_out_d_bits_opcode: %auto_widget_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_widget_out_d_bits_param: i2, auto_out_d_bits_size: %auto_widget_out_d_bits_size: i3, auto_out_d_bits_source: %auto_widget_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_widget_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_widget_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_widget_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_widget_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i3, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "widget.auto_in_d_valid"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_b_valid, %widget.auto_in_b_bits_param, %widget.auto_in_b_bits_address, %widget.auto_in_c_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_b_ready, %widget.auto_out_c_valid, %widget.auto_out_c_bits_opcode, %widget.auto_out_c_bits_param, %widget.auto_out_c_bits_size, %widget.auto_out_c_bits_source, %widget.auto_out_c_bits_address, %widget.auto_out_c_bits_data, %widget.auto_out_c_bits_corrupt, %widget.auto_out_d_ready, %widget.auto_out_e_valid, %widget.auto_out_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_3(out auto_tl_master_clock_xing_in_a_ready : i1, in %auto_tl_master_clock_xing_in_a_valid : i1, in %auto_tl_master_clock_xing_in_a_bits_opcode : i3, in %auto_tl_master_clock_xing_in_a_bits_param : i3, in %auto_tl_master_clock_xing_in_a_bits_size : i4, in %auto_tl_master_clock_xing_in_a_bits_source : i2, in %auto_tl_master_clock_xing_in_a_bits_address : i32, in %auto_tl_master_clock_xing_in_a_bits_mask : i8, in %auto_tl_master_clock_xing_in_a_bits_data : i64, in %auto_tl_master_clock_xing_in_a_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_b_ready : i1, out auto_tl_master_clock_xing_in_b_valid : i1, out auto_tl_master_clock_xing_in_b_bits_param : i2, out auto_tl_master_clock_xing_in_b_bits_address : i32, out auto_tl_master_clock_xing_in_c_ready : i1, in %auto_tl_master_clock_xing_in_c_valid : i1, in %auto_tl_master_clock_xing_in_c_bits_opcode : i3, in %auto_tl_master_clock_xing_in_c_bits_param : i3, in %auto_tl_master_clock_xing_in_c_bits_size : i4, in %auto_tl_master_clock_xing_in_c_bits_source : i2, in %auto_tl_master_clock_xing_in_c_bits_address : i32, in %auto_tl_master_clock_xing_in_c_bits_data : i64, in %auto_tl_master_clock_xing_in_c_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_d_ready : i1, out auto_tl_master_clock_xing_in_d_valid : i1, out auto_tl_master_clock_xing_in_d_bits_opcode : i3, out auto_tl_master_clock_xing_in_d_bits_param : i2, out auto_tl_master_clock_xing_in_d_bits_size : i4, out auto_tl_master_clock_xing_in_d_bits_source : i2, out auto_tl_master_clock_xing_in_d_bits_sink : i2, out auto_tl_master_clock_xing_in_d_bits_denied : i1, out auto_tl_master_clock_xing_in_d_bits_data : i64, out auto_tl_master_clock_xing_in_d_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_e_valid : i1, in %auto_tl_master_clock_xing_in_e_bits_sink : i2, in %auto_tl_out_a_ready : i1, out auto_tl_out_a_valid : i1, out auto_tl_out_a_bits_opcode : i3, out auto_tl_out_a_bits_param : i3, out auto_tl_out_a_bits_size : i4, out auto_tl_out_a_bits_source : i2, out auto_tl_out_a_bits_address : i32, out auto_tl_out_a_bits_mask : i8, out auto_tl_out_a_bits_data : i64, out auto_tl_out_a_bits_corrupt : i1, out auto_tl_out_b_ready : i1, in %auto_tl_out_b_valid : i1, in %auto_tl_out_b_bits_param : i2, in %auto_tl_out_b_bits_address : i32, in %auto_tl_out_c_ready : i1, out auto_tl_out_c_valid : i1, out auto_tl_out_c_bits_opcode : i3, out auto_tl_out_c_bits_param : i3, out auto_tl_out_c_bits_size : i4, out auto_tl_out_c_bits_source : i2, out auto_tl_out_c_bits_address : i32, out auto_tl_out_c_bits_data : i64, out auto_tl_out_c_bits_corrupt : i1, out auto_tl_out_d_ready : i1, in %auto_tl_out_d_valid : i1, in %auto_tl_out_d_bits_opcode : i3, in %auto_tl_out_d_bits_param : i2, in %auto_tl_out_d_bits_size : i4, in %auto_tl_out_d_bits_source : i2, in %auto_tl_out_d_bits_sink : i2, in %auto_tl_out_d_bits_denied : i1, in %auto_tl_out_d_bits_data : i64, in %auto_tl_out_d_bits_corrupt : i1, out auto_tl_out_e_valid : i1, out auto_tl_out_e_bits_sink : i2) {
    hw.output %auto_tl_out_a_ready, %auto_tl_out_b_valid, %auto_tl_out_b_bits_param, %auto_tl_out_b_bits_address, %auto_tl_out_c_ready, %auto_tl_out_d_valid, %auto_tl_out_d_bits_opcode, %auto_tl_out_d_bits_param, %auto_tl_out_d_bits_size, %auto_tl_out_d_bits_source, %auto_tl_out_d_bits_sink, %auto_tl_out_d_bits_denied, %auto_tl_out_d_bits_data, %auto_tl_out_d_bits_corrupt, %auto_tl_master_clock_xing_in_a_valid, %auto_tl_master_clock_xing_in_a_bits_opcode, %auto_tl_master_clock_xing_in_a_bits_param, %auto_tl_master_clock_xing_in_a_bits_size, %auto_tl_master_clock_xing_in_a_bits_source, %auto_tl_master_clock_xing_in_a_bits_address, %auto_tl_master_clock_xing_in_a_bits_mask, %auto_tl_master_clock_xing_in_a_bits_data, %auto_tl_master_clock_xing_in_a_bits_corrupt, %auto_tl_master_clock_xing_in_b_ready, %auto_tl_master_clock_xing_in_c_valid, %auto_tl_master_clock_xing_in_c_bits_opcode, %auto_tl_master_clock_xing_in_c_bits_param, %auto_tl_master_clock_xing_in_c_bits_size, %auto_tl_master_clock_xing_in_c_bits_source, %auto_tl_master_clock_xing_in_c_bits_address, %auto_tl_master_clock_xing_in_c_bits_data, %auto_tl_master_clock_xing_in_c_bits_corrupt, %auto_tl_master_clock_xing_in_d_ready, %auto_tl_master_clock_xing_in_e_valid, %auto_tl_master_clock_xing_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @Queue2_AXI4BundleAW(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_addr : i31, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_burst : i2, in %io_enq_bits_lock : i1, in %io_enq_bits_cache : i4, in %io_enq_bits_prot : i3, in %io_enq_bits_qos : i4, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_addr : i31, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 60>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %15 : <2 x 60>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 60>
    %1 = comb.concat %io_enq_bits_id, %io_enq_bits_addr, %io_enq_bits_len, %io_enq_bits_size, %io_enq_bits_burst, %io_enq_bits_lock, %io_enq_bits_cache, %io_enq_bits_prot, %io_enq_bits_qos : i4, i31, i8, i3, i2, i1, i4, i3, i4
    %2 = comb.extract %0 from 56 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i60) -> i4
    %3 = comb.extract %0 from 25 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i60) -> i31
    %4 = comb.extract %0 from 17 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i60) -> i8
    %5 = comb.extract %0 from 14 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i60) -> i3
    %6 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i60) -> i2
    %7 = comb.extract %0 from 11 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i60) -> i1
    %8 = comb.extract %0 from 7 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i60) -> i4
    %9 = comb.extract %0 from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i60) -> i3
    %10 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i60) -> i4
    %wrap = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %11 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %12 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %13 = comb.and bin %11, %12 {sv.namehint = "empty"} : i1
    %14 = comb.and bin %11, %maybe_full {sv.namehint = "full"} : i1
    %15 = comb.and bin %24, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %16 = comb.and bin %io_deq_ready, %23 {sv.namehint = "do_deq"} : i1
    %17 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %18 = comb.mux bin %15, %17, %wrap : i1
    %19 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %20 = comb.mux bin %16, %19, %wrap_1 : i1
    %21 = comb.icmp bin eq %15, %16 : i1
    %22 = comb.mux bin %21, %maybe_full, %15 : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_deq_valid"} : i1
    %24 = comb.xor bin %14, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %24, %23, %2, %3, %4, %5, %6, %7, %8, %9, %10 : i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4
  }
  hw.module private @Queue2_AXI4BundleW(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_data : i64, in %io_enq_bits_strb : i8, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_data : i64, out io_deq_bits_strb : i8, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 73>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %9 : <2 x 73>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 73>
    %1 = comb.concat %io_enq_bits_data, %io_enq_bits_strb, %io_enq_bits_last : i64, i8, i1
    %2 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i73) -> i64
    %3 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_strb"} : (i73) -> i8
    %4 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i73) -> i1
    %wrap = seq.firreg %12 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %14 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %5 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %6 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %7 = comb.and bin %5, %6 {sv.namehint = "empty"} : i1
    %8 = comb.and bin %5, %maybe_full {sv.namehint = "full"} : i1
    %9 = comb.and bin %18, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %10 = comb.and bin %io_deq_ready, %17 {sv.namehint = "do_deq"} : i1
    %11 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %12 = comb.mux bin %9, %11, %wrap : i1
    %13 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %14 = comb.mux bin %10, %13, %wrap_1 : i1
    %15 = comb.icmp bin eq %9, %10 : i1
    %16 = comb.mux bin %15, %maybe_full, %9 : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_deq_valid"} : i1
    %18 = comb.xor bin %8, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %18, %17, %2, %3, %4 : i1, i1, i64, i8, i1
  }
  hw.module private @Queue2_AXI4BundleB(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_resp : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_resp : i2) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 6>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %8 : <2 x 6>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 6>
    %1 = comb.concat %io_enq_bits_id, %io_enq_bits_resp : i4, i2
    %2 = comb.extract %0 from 2 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i6) -> i4
    %3 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i6) -> i2
    %wrap = seq.firreg %11 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %13 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %4 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %5 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %6 = comb.and bin %4, %5 {sv.namehint = "empty"} : i1
    %7 = comb.and bin %4, %maybe_full {sv.namehint = "full"} : i1
    %8 = comb.and bin %17, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %9 = comb.and bin %io_deq_ready, %16 {sv.namehint = "do_deq"} : i1
    %10 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %11 = comb.mux bin %8, %10, %wrap : i1
    %12 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %13 = comb.mux bin %9, %12, %wrap_1 : i1
    %14 = comb.icmp bin eq %8, %9 : i1
    %15 = comb.mux bin %14, %maybe_full, %8 : i1
    %16 = comb.xor bin %6, %true {sv.namehint = "io_deq_valid"} : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %17, %16, %2, %3 : i1, i1, i4, i2
  }
  hw.module private @Queue2_AXI4BundleR(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_data : i64, in %io_enq_bits_resp : i2, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_data : i64, out io_deq_bits_resp : i2, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 71>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %10 : <2 x 71>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 71>
    %1 = comb.concat %io_enq_bits_id, %io_enq_bits_data, %io_enq_bits_resp, %io_enq_bits_last : i4, i64, i2, i1
    %2 = comb.extract %0 from 67 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i71) -> i4
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i71) -> i64
    %4 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i71) -> i2
    %5 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i71) -> i1
    %wrap = seq.firreg %13 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %6 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %7 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %8 = comb.and bin %6, %7 {sv.namehint = "empty"} : i1
    %9 = comb.and bin %6, %maybe_full {sv.namehint = "full"} : i1
    %10 = comb.and bin %19, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %11 = comb.and bin %io_deq_ready, %18 {sv.namehint = "do_deq"} : i1
    %12 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %13 = comb.mux bin %10, %12, %wrap : i1
    %14 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %15 = comb.mux bin %11, %14, %wrap_1 : i1
    %16 = comb.icmp bin eq %10, %11 : i1
    %17 = comb.mux bin %16, %maybe_full, %10 : i1
    %18 = comb.xor bin %8, %true {sv.namehint = "io_deq_valid"} : i1
    %19 = comb.xor bin %9, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %19, %18, %2, %3, %4, %5 : i1, i1, i4, i64, i2, i1
  }
  hw.module private @AXI4Buffer(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %nodeOut_aw_deq_q.io_enq_ready, %nodeOut_aw_deq_q.io_deq_valid, %nodeOut_aw_deq_q.io_deq_bits_id, %nodeOut_aw_deq_q.io_deq_bits_addr, %nodeOut_aw_deq_q.io_deq_bits_len, %nodeOut_aw_deq_q.io_deq_bits_size, %nodeOut_aw_deq_q.io_deq_bits_burst, %nodeOut_aw_deq_q.io_deq_bits_lock, %nodeOut_aw_deq_q.io_deq_bits_cache, %nodeOut_aw_deq_q.io_deq_bits_prot, %nodeOut_aw_deq_q.io_deq_bits_qos = hw.instance "nodeOut_aw_deq_q" @Queue2_AXI4BundleAW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_aw_valid: i1, io_enq_bits_id: %auto_in_aw_bits_id: i4, io_enq_bits_addr: %auto_in_aw_bits_addr: i31, io_enq_bits_len: %auto_in_aw_bits_len: i8, io_enq_bits_size: %auto_in_aw_bits_size: i3, io_enq_bits_burst: %auto_in_aw_bits_burst: i2, io_enq_bits_lock: %auto_in_aw_bits_lock: i1, io_enq_bits_cache: %auto_in_aw_bits_cache: i4, io_enq_bits_prot: %auto_in_aw_bits_prot: i3, io_enq_bits_qos: %auto_in_aw_bits_qos: i4, io_deq_ready: %auto_out_aw_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4) {sv.namehint = "nodeOut_aw_irr_valid"}
    %nodeOut_w_deq_q.io_enq_ready, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last = hw.instance "nodeOut_w_deq_q" @Queue2_AXI4BundleW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_w_valid: i1, io_enq_bits_data: %auto_in_w_bits_data: i64, io_enq_bits_strb: %auto_in_w_bits_strb: i8, io_enq_bits_last: %auto_in_w_bits_last: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "nodeOut_w_irr_valid"}
    %nodeIn_b_deq_q.io_enq_ready, %nodeIn_b_deq_q.io_deq_valid, %nodeIn_b_deq_q.io_deq_bits_id, %nodeIn_b_deq_q.io_deq_bits_resp = hw.instance "nodeIn_b_deq_q" @Queue2_AXI4BundleB(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_b_valid: i1, io_enq_bits_id: %auto_out_b_bits_id: i4, io_enq_bits_resp: %auto_out_b_bits_resp: i2, io_deq_ready: %auto_in_b_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_resp: i2) {sv.namehint = "nodeIn_b_irr_valid"}
    %nodeOut_ar_deq_q.io_enq_ready, %nodeOut_ar_deq_q.io_deq_valid, %nodeOut_ar_deq_q.io_deq_bits_id, %nodeOut_ar_deq_q.io_deq_bits_addr, %nodeOut_ar_deq_q.io_deq_bits_len, %nodeOut_ar_deq_q.io_deq_bits_size, %nodeOut_ar_deq_q.io_deq_bits_burst, %nodeOut_ar_deq_q.io_deq_bits_lock, %nodeOut_ar_deq_q.io_deq_bits_cache, %nodeOut_ar_deq_q.io_deq_bits_prot, %nodeOut_ar_deq_q.io_deq_bits_qos = hw.instance "nodeOut_ar_deq_q" @Queue2_AXI4BundleAW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_ar_valid: i1, io_enq_bits_id: %auto_in_ar_bits_id: i4, io_enq_bits_addr: %auto_in_ar_bits_addr: i31, io_enq_bits_len: %auto_in_ar_bits_len: i8, io_enq_bits_size: %auto_in_ar_bits_size: i3, io_enq_bits_burst: %auto_in_ar_bits_burst: i2, io_enq_bits_lock: %auto_in_ar_bits_lock: i1, io_enq_bits_cache: %auto_in_ar_bits_cache: i4, io_enq_bits_prot: %auto_in_ar_bits_prot: i3, io_enq_bits_qos: %auto_in_ar_bits_qos: i4, io_deq_ready: %auto_out_ar_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4) {sv.namehint = "nodeOut_ar_irr_valid"}
    %nodeIn_r_deq_q.io_enq_ready, %nodeIn_r_deq_q.io_deq_valid, %nodeIn_r_deq_q.io_deq_bits_id, %nodeIn_r_deq_q.io_deq_bits_data, %nodeIn_r_deq_q.io_deq_bits_resp, %nodeIn_r_deq_q.io_deq_bits_last = hw.instance "nodeIn_r_deq_q" @Queue2_AXI4BundleR(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_r_valid: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %auto_in_r_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_last: i1) {sv.namehint = "nodeIn_r_irr_valid"}
    hw.output %nodeOut_aw_deq_q.io_enq_ready, %nodeOut_w_deq_q.io_enq_ready, %nodeIn_b_deq_q.io_deq_valid, %nodeIn_b_deq_q.io_deq_bits_id, %nodeIn_b_deq_q.io_deq_bits_resp, %nodeOut_ar_deq_q.io_enq_ready, %nodeIn_r_deq_q.io_deq_valid, %nodeIn_r_deq_q.io_deq_bits_id, %nodeIn_r_deq_q.io_deq_bits_data, %nodeIn_r_deq_q.io_deq_bits_resp, %nodeIn_r_deq_q.io_deq_bits_last, %nodeOut_aw_deq_q.io_deq_valid, %nodeOut_aw_deq_q.io_deq_bits_id, %nodeOut_aw_deq_q.io_deq_bits_addr, %nodeOut_aw_deq_q.io_deq_bits_len, %nodeOut_aw_deq_q.io_deq_bits_size, %nodeOut_aw_deq_q.io_deq_bits_burst, %nodeOut_aw_deq_q.io_deq_bits_lock, %nodeOut_aw_deq_q.io_deq_bits_cache, %nodeOut_aw_deq_q.io_deq_bits_prot, %nodeOut_aw_deq_q.io_deq_bits_qos, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last, %nodeIn_b_deq_q.io_enq_ready, %nodeOut_ar_deq_q.io_deq_valid, %nodeOut_ar_deq_q.io_deq_bits_id, %nodeOut_ar_deq_q.io_deq_bits_addr, %nodeOut_ar_deq_q.io_deq_bits_len, %nodeOut_ar_deq_q.io_deq_bits_size, %nodeOut_ar_deq_q.io_deq_bits_burst, %nodeOut_ar_deq_q.io_deq_bits_lock, %nodeOut_ar_deq_q.io_deq_bits_cache, %nodeOut_ar_deq_q.io_deq_bits_prot, %nodeOut_ar_deq_q.io_deq_bits_qos, %nodeIn_r_deq_q.io_enq_ready : i1, i1, i1, i4, i2, i1, i1, i4, i64, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @Queue1_BundleMap(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_tl_state_size : i4, in %io_enq_bits_tl_state_source : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_tl_state_size : i4, out io_deq_bits_tl_state_source : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.concat %io_enq_bits_tl_state_size, %io_enq_bits_tl_state_source : i4, i2
    %1 = comb.extract %ram from 2 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_size"} : (i6) -> i4
    %2 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_source"} : (i6) -> i2
    %full = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %3 = comb.and bin %7, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %4 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %5 = comb.icmp bin eq %3, %4 : i1
    %6 = comb.mux bin %5, %full, %3 : i1
    %7 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %8 clock %clock {sv.namehint = "ram"} : i6
    %8 = comb.mux bin %3, %0, %ram : i6
    hw.output %7, %full, %1, %2 : i1, i1, i4, i2
  }
  hw.module private @AXI4UserYanker(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %c1_i16 = hw.constant 1 : i16
    %false = hw.constant false
    %c0_i4 = hw.constant 0 : i4
    %c0_i2 = hw.constant 0 : i2
    %true = hw.constant true
    %c0_i12 = hw.constant 0 : i12
    %0 = seq.from_clock %clock
    %Queue1_BundleMap.io_enq_ready, %Queue1_BundleMap.io_deq_valid, %Queue1_BundleMap.io_deq_bits_tl_state_size, %Queue1_BundleMap.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %27: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %25: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap.io_deq_valid"}
    %Queue1_BundleMap_1.io_enq_ready, %Queue1_BundleMap_1.io_deq_valid, %Queue1_BundleMap_1.io_deq_bits_tl_state_size, %Queue1_BundleMap_1.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_1" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %29: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %28: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap_1.io_deq_valid"}
    %Queue1_BundleMap_2.io_enq_ready, %Queue1_BundleMap_2.io_deq_valid, %Queue1_BundleMap_2.io_deq_bits_tl_state_size, %Queue1_BundleMap_2.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_2" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %31: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %30: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap_2.io_deq_valid"}
    %Queue1_BundleMap_3.io_enq_ready, %Queue1_BundleMap_3.io_deq_valid, %Queue1_BundleMap_3.io_deq_bits_tl_state_size, %Queue1_BundleMap_3.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_3" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %57: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %55: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap_3.io_deq_valid"}
    %Queue1_BundleMap_4.io_enq_ready, %Queue1_BundleMap_4.io_deq_valid, %Queue1_BundleMap_4.io_deq_bits_tl_state_size, %Queue1_BundleMap_4.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_4" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %59: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %58: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap_4.io_deq_valid"}
    %Queue1_BundleMap_5.io_enq_ready, %Queue1_BundleMap_5.io_deq_valid, %Queue1_BundleMap_5.io_deq_bits_tl_state_size, %Queue1_BundleMap_5.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_5" @Queue1_BundleMap(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %61: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %60: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "Queue1_BundleMap_5.io_deq_valid"}
    %1 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %Queue1_BundleMap_2.io_enq_ready, %Queue1_BundleMap_1.io_enq_ready, %Queue1_BundleMap.io_enq_ready : i1
    %2 = hw.array_get %1[%auto_in_ar_bits_id] : !hw.array<16xi1>, i4
    %3 = comb.and bin %auto_out_ar_ready, %2 {sv.namehint = "nodeIn_ar_ready"} : i1
    %4 = comb.and bin %auto_in_ar_valid, %2 {sv.namehint = "nodeOut_ar_valid"} : i1
    %5 = comb.xor bin %auto_out_r_valid, %true : i1
    %6 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %Queue1_BundleMap_2.io_deq_valid, %Queue1_BundleMap_1.io_deq_valid, %Queue1_BundleMap.io_deq_valid : i1
    %7 = hw.array_get %6[%auto_out_r_bits_id] : !hw.array<16xi1>, i4
    %8 = comb.or bin %5, %7 : i1
    %9 = comb.xor bin %reset, %true : i1
    %10 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %Queue1_BundleMap_2.io_deq_bits_tl_state_size, %Queue1_BundleMap_1.io_deq_bits_tl_state_size, %Queue1_BundleMap.io_deq_bits_tl_state_size : i4
    %11 = hw.array_get %10[%auto_out_r_bits_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %12 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %Queue1_BundleMap_2.io_deq_bits_tl_state_source, %Queue1_BundleMap_1.io_deq_bits_tl_state_source, %Queue1_BundleMap.io_deq_bits_tl_state_source : i2
    %13 = hw.array_get %12[%auto_out_r_bits_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %14 = comb.concat %c0_i12, %auto_in_ar_bits_id : i12, i4
    %15 = comb.shl bin %c1_i16, %14 {sv.namehint = "_arsel_T_1"} : i16
    %16 = comb.extract %15 from 0 {sv.namehint = "arsel_0"} : (i16) -> i1
    %17 = comb.extract %15 from 1 {sv.namehint = "arsel_1"} : (i16) -> i1
    %18 = comb.extract %15 from 2 {sv.namehint = "arsel_2"} : (i16) -> i1
    %19 = comb.concat %c0_i12, %auto_out_r_bits_id : i12, i4
    %20 = comb.shl bin %c1_i16, %19 {sv.namehint = "_rsel_T_1"} : i16
    %21 = comb.extract %20 from 0 {sv.namehint = "rsel_0"} : (i16) -> i1
    %22 = comb.extract %20 from 1 {sv.namehint = "rsel_1"} : (i16) -> i1
    %23 = comb.extract %20 from 2 {sv.namehint = "rsel_2"} : (i16) -> i1
    %24 = comb.and bin %auto_out_r_valid, %auto_in_r_ready {sv.namehint = "_rqueues_15_deq_ready_T"} : i1
    %25 = comb.and bin %24, %21, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap.io_deq_ready"} : i1
    %26 = comb.and bin %auto_in_ar_valid, %auto_out_ar_ready {sv.namehint = "_rqueues_15_enq_valid_T"} : i1
    %27 = comb.and bin %26, %16 {sv.namehint = "Queue1_BundleMap.io_enq_valid"} : i1
    %28 = comb.and bin %24, %22, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_1.io_deq_ready"} : i1
    %29 = comb.and bin %26, %17 {sv.namehint = "Queue1_BundleMap_1.io_enq_valid"} : i1
    %30 = comb.and bin %24, %23, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_2.io_deq_ready"} : i1
    %31 = comb.and bin %26, %18 {sv.namehint = "Queue1_BundleMap_2.io_enq_valid"} : i1
    %32 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %Queue1_BundleMap_5.io_enq_ready, %Queue1_BundleMap_4.io_enq_ready, %Queue1_BundleMap_3.io_enq_ready : i1
    %33 = hw.array_get %32[%auto_in_aw_bits_id] : !hw.array<16xi1>, i4
    %34 = comb.and bin %auto_out_aw_ready, %33 {sv.namehint = "nodeIn_aw_ready"} : i1
    %35 = comb.and bin %auto_in_aw_valid, %33 {sv.namehint = "nodeOut_aw_valid"} : i1
    %36 = comb.xor bin %auto_out_b_valid, %true : i1
    %37 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %Queue1_BundleMap_5.io_deq_valid, %Queue1_BundleMap_4.io_deq_valid, %Queue1_BundleMap_3.io_deq_valid : i1
    %38 = hw.array_get %37[%auto_out_b_bits_id] : !hw.array<16xi1>, i4
    %39 = comb.or bin %36, %38 : i1
    sv.always posedge %0 {
      sv.if %9 {
        sv.assert %8, immediate label "assert__assert"
      }
      sv.if %9 {
        sv.assert %39, immediate label "assert__assert_1"
      }
    }
    %40 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %Queue1_BundleMap_5.io_deq_bits_tl_state_size, %Queue1_BundleMap_4.io_deq_bits_tl_state_size, %Queue1_BundleMap_3.io_deq_bits_tl_state_size : i4
    %41 = hw.array_get %40[%auto_out_b_bits_id] {sv.namehint = "nodeIn_b_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %42 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %Queue1_BundleMap_5.io_deq_bits_tl_state_source, %Queue1_BundleMap_4.io_deq_bits_tl_state_source, %Queue1_BundleMap_3.io_deq_bits_tl_state_source : i2
    %43 = hw.array_get %42[%auto_out_b_bits_id] {sv.namehint = "nodeIn_b_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %44 = comb.concat %c0_i12, %auto_in_aw_bits_id : i12, i4
    %45 = comb.shl bin %c1_i16, %44 {sv.namehint = "_awsel_T_1"} : i16
    %46 = comb.extract %45 from 0 {sv.namehint = "awsel_0"} : (i16) -> i1
    %47 = comb.extract %45 from 1 {sv.namehint = "awsel_1"} : (i16) -> i1
    %48 = comb.extract %45 from 2 {sv.namehint = "awsel_2"} : (i16) -> i1
    %49 = comb.concat %c0_i12, %auto_out_b_bits_id : i12, i4
    %50 = comb.shl bin %c1_i16, %49 {sv.namehint = "_bsel_T_1"} : i16
    %51 = comb.extract %50 from 0 {sv.namehint = "bsel_0"} : (i16) -> i1
    %52 = comb.extract %50 from 1 {sv.namehint = "bsel_1"} : (i16) -> i1
    %53 = comb.extract %50 from 2 {sv.namehint = "bsel_2"} : (i16) -> i1
    %54 = comb.and bin %auto_out_b_valid, %auto_in_b_ready {sv.namehint = "_wqueues_15_deq_ready_T"} : i1
    %55 = comb.and bin %54, %51 {sv.namehint = "Queue1_BundleMap_3.io_deq_ready"} : i1
    %56 = comb.and bin %auto_in_aw_valid, %auto_out_aw_ready {sv.namehint = "_wqueues_15_enq_valid_T"} : i1
    %57 = comb.and bin %56, %46 {sv.namehint = "Queue1_BundleMap_3.io_enq_valid"} : i1
    %58 = comb.and bin %54, %52 {sv.namehint = "Queue1_BundleMap_4.io_deq_ready"} : i1
    %59 = comb.and bin %56, %47 {sv.namehint = "Queue1_BundleMap_4.io_enq_valid"} : i1
    %60 = comb.and bin %54, %53 {sv.namehint = "Queue1_BundleMap_5.io_deq_ready"} : i1
    %61 = comb.and bin %56, %48 {sv.namehint = "Queue1_BundleMap_5.io_enq_valid"} : i1
    hw.output %34, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %41, %43, %3, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %11, %13, %auto_out_r_bits_last, %35, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %4, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i2, i1, i1, i4, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @Queue8_AXI4BundleR(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_data : i64, in %io_enq_bits_resp : i2, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i2, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_bits_id : i4, out io_deq_bits_data : i64, out io_deq_bits_resp : i2, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i2, out io_deq_bits_last : i1) {
    %c1_i3 = hw.constant 1 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <8 x 77>
    seq.firmem.write_port %ram[%enq_ptr_value] = %1, clock %clock enable %12 : <8 x 77>
    %0 = seq.firmem.read_port %ram[%deq_ptr_value], clock %clock : <8 x 77>
    %1 = comb.concat %io_enq_bits_id, %io_enq_bits_data, %io_enq_bits_resp, %io_enq_bits_echo_tl_state_size, %io_enq_bits_echo_tl_state_source, %io_enq_bits_last : i4, i64, i2, i4, i2, i1
    %2 = comb.extract %0 from 73 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i77) -> i4
    %3 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i77) -> i64
    %4 = comb.extract %0 from 7 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i77) -> i2
    %5 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i77) -> i4
    %6 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i77) -> i2
    %7 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i77) -> i1
    %enq_ptr_value = seq.firreg %15 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64, sv.namehint = "enq_ptr_value"} : i3
    %deq_ptr_value = seq.firreg %17 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 3 : ui64, sv.namehint = "deq_ptr_value"} : i3
    %maybe_full = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %8 = comb.icmp bin eq %enq_ptr_value, %deq_ptr_value {sv.namehint = "ptr_match"} : i3
    %9 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %10 = comb.and bin %8, %9 {sv.namehint = "empty"} : i1
    %11 = comb.and bin %8, %maybe_full {sv.namehint = "full"} : i1
    %12 = comb.and bin %21, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %13 = comb.and bin %io_deq_ready, %20 {sv.namehint = "do_deq"} : i1
    %14 = comb.add bin %enq_ptr_value, %c1_i3 {sv.namehint = "_value_T"} : i3
    %15 = comb.mux bin %12, %14, %enq_ptr_value : i3
    %16 = comb.add bin %deq_ptr_value, %c1_i3 {sv.namehint = "_value_T_2"} : i3
    %17 = comb.mux bin %13, %16, %deq_ptr_value : i3
    %18 = comb.icmp bin eq %12, %13 : i1
    %19 = comb.mux bin %18, %maybe_full, %12 : i1
    %20 = comb.xor bin %10, %true {sv.namehint = "io_deq_valid"} : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %21, %2, %3, %4, %5, %6, %7 : i1, i4, i64, i2, i4, i2, i1
  }
  hw.module private @AXI4Deinterleaver(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c0_i11 = hw.constant 0 : i11
    %c-1_i15 = hw.constant -1 : i15
    %c0_i13 = hw.constant 0 : i13
    %c0_i3 = hw.constant 0 : i3
    %c1_i16 = hw.constant 1 : i16
    %c0_i12 = hw.constant 0 : i12
    %false = hw.constant false {sv.namehint = "deq_id_hi"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i64 = hw.constant 0 : i64
    %c-8_i4 = hw.constant -8 : i4
    %true = hw.constant true
    %c0_i8 = hw.constant 0 : i8
    %c0_i5 = hw.constant 0 : i5
    %0 = seq.from_clock %clock
    %qs_queue_0.io_enq_ready, %qs_queue_0.io_deq_bits_id, %qs_queue_0.io_deq_bits_data, %qs_queue_0.io_deq_bits_resp, %qs_queue_0.io_deq_bits_echo_tl_state_size, %qs_queue_0.io_deq_bits_echo_tl_state_source, %qs_queue_0.io_deq_bits_last = hw.instance "qs_queue_0" @Queue8_AXI4BundleR(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %152: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %134: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_0"}
    %qs_queue_1.io_enq_ready, %qs_queue_1.io_deq_bits_id, %qs_queue_1.io_deq_bits_data, %qs_queue_1.io_deq_bits_resp, %qs_queue_1.io_deq_bits_echo_tl_state_size, %qs_queue_1.io_deq_bits_echo_tl_state_source, %qs_queue_1.io_deq_bits_last = hw.instance "qs_queue_1" @Queue8_AXI4BundleR(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %153: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %135: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_1"}
    %qs_queue_2.io_enq_ready, %qs_queue_2.io_deq_bits_id, %qs_queue_2.io_deq_bits_data, %qs_queue_2.io_deq_bits_resp, %qs_queue_2.io_deq_bits_echo_tl_state_size, %qs_queue_2.io_deq_bits_echo_tl_state_source, %qs_queue_2.io_deq_bits_last = hw.instance "qs_queue_2" @Queue8_AXI4BundleR(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %154: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %136: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_2"}
    %1 = comb.xor bin %155, %true {sv.namehint = "_qs_T"} : i1
    %2 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_2"} : i1
    %3 = comb.xor bin %156, %true {sv.namehint = "_qs_T_4"} : i1
    %4 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_6"} : i1
    %5 = comb.xor bin %157, %true {sv.namehint = "_qs_T_8"} : i1
    %6 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_10"} : i1
    %7 = comb.xor bin %158, %true {sv.namehint = "_qs_T_12"} : i1
    %8 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_14"} : i1
    %9 = comb.xor bin %159, %true {sv.namehint = "_qs_T_16"} : i1
    %10 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_18"} : i1
    %11 = comb.xor bin %160, %true {sv.namehint = "_qs_T_20"} : i1
    %12 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_22"} : i1
    %13 = comb.xor bin %161, %true {sv.namehint = "_qs_T_24"} : i1
    %14 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_26"} : i1
    %15 = comb.xor bin %162, %true {sv.namehint = "_qs_T_28"} : i1
    %16 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_30"} : i1
    %17 = comb.xor bin %163, %true {sv.namehint = "_qs_T_32"} : i1
    %18 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_34"} : i1
    %19 = comb.xor bin %164, %true {sv.namehint = "_qs_T_36"} : i1
    %20 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_38"} : i1
    %21 = comb.xor bin %165, %true {sv.namehint = "_qs_T_40"} : i1
    %22 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_42"} : i1
    %23 = comb.xor bin %166, %true {sv.namehint = "_qs_T_44"} : i1
    %24 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_46"} : i1
    %25 = comb.xor bin %167, %true {sv.namehint = "_qs_T_48"} : i1
    %26 = comb.xor bin %reset, %true {sv.namehint = "_qs_T_50"} : i1
    %locked = seq.firreg %104 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "locked"} : i1
    %deq_id = seq.firreg %121 clock %clock {firrtl.random_init_start = 1 : ui64} : i4
    %27 = comb.concat %c0_i12, %deq_id : i12, i4
    %28 = comb.shl bin %c1_i16, %27 {sv.namehint = "deq_OH"} : i16
    %29 = comb.concat %c0_i12, %auto_out_r_bits_id : i12, i4
    %30 = comb.shl bin %c1_i16, %29 {sv.namehint = "enq_OH"} : i16
    %pending_count = seq.firreg %40 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 5 : ui64} : i4
    %31 = comb.extract %30 from 0 {sv.namehint = "enq_OH_bools_0"} : (i16) -> i1
    %32 = comb.and bin %151, %auto_out_r_valid {sv.namehint = "_pending_inc_T_7"} : i1
    %33 = comb.and bin %31, %32, %auto_out_r_bits_last {sv.namehint = "pending_inc"} : i1
    %34 = comb.extract %28 from 0 {sv.namehint = "deq_OH_bools_0"} : (i16) -> i1
    %35 = comb.and bin %auto_in_r_ready, %locked {sv.namehint = "_queue_wire_15_deq_ready_T"} : i1
    %36 = comb.and bin %34, %35, %133 {sv.namehint = "pending_dec"} : i1
    %37 = comb.concat %c0_i3, %33 : i3, i1
    %38 = comb.add bin %pending_count, %37 {sv.namehint = "_pending_next_T"} : i4
    %39 = comb.concat %c0_i3, %36 : i3, i1
    %40 = comb.sub bin %38, %39 {sv.namehint = "_pending_next_T_2"} : i4
    %41 = comb.xor bin %36, %true {sv.namehint = "_pending_T"} : i1
    %42 = comb.concat %41, %pending_count : i1, i4
    %43 = comb.icmp bin ne %42, %c0_i5 {sv.namehint = "_pending_T_2"} : i5
    %44 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_4"} : i1
    %45 = comb.xor bin %33, %true {sv.namehint = "_pending_T_6"} : i1
    %46 = comb.icmp bin ne %pending_count, %c-8_i4 {sv.namehint = "_pending_T_7"} : i4
    %47 = comb.or bin %45, %46 {sv.namehint = "_pending_T_8"} : i1
    %48 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_10"} : i1
    %49 = comb.icmp bin ne %40, %c0_i4 {sv.namehint = "_pending_T_12"} : i4
    %pending_count_1 = seq.firreg %57 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 9 : ui64} : i4
    %50 = comb.extract %30 from 1 {sv.namehint = "enq_OH_bools_1"} : (i16) -> i1
    %51 = comb.and bin %50, %32, %auto_out_r_bits_last {sv.namehint = "pending_inc_1"} : i1
    %52 = comb.extract %28 from 1 {sv.namehint = "deq_OH_bools_1"} : (i16) -> i1
    %53 = comb.and bin %52, %35, %133 {sv.namehint = "pending_dec_1"} : i1
    %54 = comb.concat %c0_i3, %51 : i3, i1
    %55 = comb.add bin %pending_count_1, %54 {sv.namehint = "_pending_next_T_4"} : i4
    %56 = comb.concat %c0_i3, %53 : i3, i1
    %57 = comb.sub bin %55, %56 {sv.namehint = "_pending_next_T_6"} : i4
    %58 = comb.xor bin %53, %true {sv.namehint = "_pending_T_13"} : i1
    %59 = comb.concat %58, %pending_count_1 : i1, i4
    %60 = comb.icmp bin ne %59, %c0_i5 {sv.namehint = "_pending_T_15"} : i5
    %61 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_17"} : i1
    %62 = comb.xor bin %51, %true {sv.namehint = "_pending_T_19"} : i1
    %63 = comb.icmp bin ne %pending_count_1, %c-8_i4 {sv.namehint = "_pending_T_20"} : i4
    %64 = comb.or bin %62, %63 {sv.namehint = "_pending_T_21"} : i1
    %65 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_23"} : i1
    %66 = comb.icmp bin ne %57, %c0_i4 {sv.namehint = "_pending_T_25"} : i4
    %pending_count_2 = seq.firreg %74 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 13 : ui64} : i4
    %67 = comb.extract %30 from 2 {sv.namehint = "enq_OH_bools_2"} : (i16) -> i1
    %68 = comb.and bin %67, %32, %auto_out_r_bits_last {sv.namehint = "pending_inc_2"} : i1
    %69 = comb.extract %28 from 2 {sv.namehint = "deq_OH_bools_2"} : (i16) -> i1
    %70 = comb.and bin %69, %35, %133 {sv.namehint = "pending_dec_2"} : i1
    %71 = comb.concat %c0_i3, %68 : i3, i1
    %72 = comb.add bin %pending_count_2, %71 {sv.namehint = "_pending_next_T_8"} : i4
    %73 = comb.concat %c0_i3, %70 : i3, i1
    %74 = comb.sub bin %72, %73 {sv.namehint = "_pending_next_T_10"} : i4
    %75 = comb.xor bin %70, %true {sv.namehint = "_pending_T_26"} : i1
    %76 = comb.concat %75, %pending_count_2 : i1, i4
    %77 = comb.icmp bin ne %76, %c0_i5 {sv.namehint = "_pending_T_28"} : i5
    %78 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_30"} : i1
    %79 = comb.xor bin %68, %true {sv.namehint = "_pending_T_32"} : i1
    %80 = comb.icmp bin ne %pending_count_2, %c-8_i4 {sv.namehint = "_pending_T_33"} : i4
    %81 = comb.or bin %79, %80 {sv.namehint = "_pending_T_34"} : i1
    %82 = comb.xor bin %reset, %true {sv.namehint = "_pending_T_36"} : i1
    sv.always posedge %0 {
      sv.if %2 {
        sv.assert %1, immediate label "assert__qs_assert"
      }
      sv.if %4 {
        sv.assert %3, immediate label "assert__qs_assert_1"
      }
      sv.if %6 {
        sv.assert %5, immediate label "assert__qs_assert_2"
      }
      sv.if %8 {
        sv.assert %7, immediate label "assert__qs_assert_3"
      }
      sv.if %10 {
        sv.assert %9, immediate label "assert__qs_assert_4"
      }
      sv.if %12 {
        sv.assert %11, immediate label "assert__qs_assert_5"
      }
      sv.if %14 {
        sv.assert %13, immediate label "assert__qs_assert_6"
      }
      sv.if %16 {
        sv.assert %15, immediate label "assert__qs_assert_7"
      }
      sv.if %18 {
        sv.assert %17, immediate label "assert__qs_assert_8"
      }
      sv.if %20 {
        sv.assert %19, immediate label "assert__qs_assert_9"
      }
      sv.if %22 {
        sv.assert %21, immediate label "assert__qs_assert_10"
      }
      sv.if %24 {
        sv.assert %23, immediate label "assert__qs_assert_11"
      }
      sv.if %26 {
        sv.assert %25, immediate label "assert__qs_assert_12"
      }
      sv.if %44 {
        sv.assert %43, immediate label "assert__pending_assert"
      }
      sv.if %48 {
        sv.assert %47, immediate label "assert__pending_assert_1"
      }
      sv.if %61 {
        sv.assert %60, immediate label "assert__pending_assert_2"
      }
      sv.if %65 {
        sv.assert %64, immediate label "assert__pending_assert_3"
      }
      sv.if %78 {
        sv.assert %77, immediate label "assert__pending_assert_4"
      }
      sv.if %82 {
        sv.assert %81, immediate label "assert__pending_assert_5"
      }
    }
    %83 = comb.icmp bin ne %74, %c0_i4 {sv.namehint = "_pending_T_38"} : i4
    %84 = comb.concat %c0_i12, %83, %66, %49 : i12, i1, i1, i1
    %85 = comb.concat %c0_i11, %83, %66, %49, %false : i11, i1, i1, i1, i1
    %86 = comb.or bin %84, %85 {sv.namehint = "_winner_T_2"} : i15
    %87 = comb.extract %86 from 0 : (i15) -> i13
    %88 = comb.concat %87, %c0_i2 : i13, i2
    %89 = comb.or bin %86, %88 {sv.namehint = "_winner_T_5"} : i15
    %90 = comb.extract %89 from 0 : (i15) -> i11
    %91 = comb.concat %90, %c0_i4 : i11, i4
    %92 = comb.or bin %89, %91 {sv.namehint = "_winner_T_8"} : i15
    %93 = comb.extract %92 from 0 : (i15) -> i7
    %94 = comb.concat %93, %c0_i8 : i7, i8
    %95 = comb.or bin %92, %94 {sv.namehint = "_winner_T_12"} : i15
    %96 = comb.xor %95, %c-1_i15 : i15
    %97 = comb.concat %c0_i13, %83, %66 : i13, i1, i1
    %98 = comb.and bin %96, %97 {sv.namehint = "deq_id_lo"} : i15
    %99 = comb.xor bin %locked, %true : i1
    %100 = comb.and bin %35, %133 : i1
    %101 = comb.or bin %99, %100 : i1
    %102 = comb.concat %83, %66, %49 : i1, i1, i1
    %103 = comb.icmp bin ne %102, %c0_i3 {sv.namehint = "_locked_T"} : i3
    %104 = comb.mux bin %101, %103, %locked : i1
    %105 = comb.extract %98 from 7 {sv.namehint = "deq_id_hi_1"} : (i15) -> i8
    %106 = comb.icmp bin ne %105, %c0_i8 {sv.namehint = "_deq_id_T_2"} : i8
    %107 = comb.extract %98 from 8 : (i15) -> i7
    %108 = comb.extract %98 from 0 : (i15) -> i7
    %109 = comb.or bin %107, %108 {sv.namehint = "_deq_id_T_3"} : i7
    %110 = comb.extract %109 from 3 {sv.namehint = "deq_id_hi_2"} : (i7) -> i4
    %111 = comb.icmp bin ne %110, %c0_i4 {sv.namehint = "_deq_id_T_4"} : i4
    %112 = comb.extract %109 from 4 : (i7) -> i3
    %113 = comb.extract %109 from 0 : (i7) -> i3
    %114 = comb.or bin %112, %113 {sv.namehint = "_deq_id_T_5"} : i3
    %115 = comb.extract %114 from 1 {sv.namehint = "deq_id_hi_3"} : (i3) -> i2
    %116 = comb.icmp bin ne %115, %c0_i2 {sv.namehint = "_deq_id_T_6"} : i2
    %117 = comb.extract %114 from 2 : (i3) -> i1
    %118 = comb.extract %114 from 0 : (i3) -> i1
    %119 = comb.or bin %117, %118 {sv.namehint = "_deq_id_T_7"} : i1
    %120 = comb.concat %106, %111, %116, %119 : i1, i1, i1, i1
    %121 = comb.mux bin %101, %120, %deq_id : i4
    %122 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %qs_queue_2.io_deq_bits_id, %qs_queue_1.io_deq_bits_id, %qs_queue_0.io_deq_bits_id : i4
    %123 = hw.array_get %122[%deq_id] {sv.namehint = "nodeIn_r_bits_id"} : !hw.array<16xi4>, i4
    %124 = hw.array_create %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %qs_queue_2.io_deq_bits_data, %qs_queue_1.io_deq_bits_data, %qs_queue_0.io_deq_bits_data : i64
    %125 = hw.array_get %124[%deq_id] {sv.namehint = "nodeIn_r_bits_data"} : !hw.array<16xi64>, i4
    %126 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %qs_queue_2.io_deq_bits_resp, %qs_queue_1.io_deq_bits_resp, %qs_queue_0.io_deq_bits_resp : i2
    %127 = hw.array_get %126[%deq_id] {sv.namehint = "nodeIn_r_bits_resp"} : !hw.array<16xi2>, i4
    %128 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %qs_queue_2.io_deq_bits_echo_tl_state_size, %qs_queue_1.io_deq_bits_echo_tl_state_size, %qs_queue_0.io_deq_bits_echo_tl_state_size : i4
    %129 = hw.array_get %128[%deq_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %130 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %qs_queue_2.io_deq_bits_echo_tl_state_source, %qs_queue_1.io_deq_bits_echo_tl_state_source, %qs_queue_0.io_deq_bits_echo_tl_state_source : i2
    %131 = hw.array_get %130[%deq_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %132 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %qs_queue_2.io_deq_bits_last, %qs_queue_1.io_deq_bits_last, %qs_queue_0.io_deq_bits_last : i1
    %133 = hw.array_get %132[%deq_id] {sv.namehint = "nodeIn_r_bits_last"} : !hw.array<16xi1>, i4
    %134 = comb.and bin %34, %35 {sv.namehint = "qs_queue_0.io_deq_ready"} : i1
    %135 = comb.and bin %52, %35 {sv.namehint = "qs_queue_1.io_deq_ready"} : i1
    %136 = comb.and bin %69, %35 {sv.namehint = "qs_queue_2.io_deq_ready"} : i1
    %137 = comb.extract %30 from 3 {sv.namehint = "enq_OH_bools_3"} : (i16) -> i1
    %138 = comb.extract %30 from 4 {sv.namehint = "enq_OH_bools_4"} : (i16) -> i1
    %139 = comb.extract %30 from 5 {sv.namehint = "enq_OH_bools_5"} : (i16) -> i1
    %140 = comb.extract %30 from 6 {sv.namehint = "enq_OH_bools_6"} : (i16) -> i1
    %141 = comb.extract %30 from 7 {sv.namehint = "enq_OH_bools_7"} : (i16) -> i1
    %142 = comb.extract %30 from 8 {sv.namehint = "enq_OH_bools_8"} : (i16) -> i1
    %143 = comb.extract %30 from 9 {sv.namehint = "enq_OH_bools_9"} : (i16) -> i1
    %144 = comb.extract %30 from 10 {sv.namehint = "enq_OH_bools_10"} : (i16) -> i1
    %145 = comb.extract %30 from 11 {sv.namehint = "enq_OH_bools_11"} : (i16) -> i1
    %146 = comb.extract %30 from 12 {sv.namehint = "enq_OH_bools_12"} : (i16) -> i1
    %147 = comb.extract %30 from 13 {sv.namehint = "enq_OH_bools_13"} : (i16) -> i1
    %148 = comb.extract %30 from 14 {sv.namehint = "enq_OH_bools_14"} : (i16) -> i1
    %149 = comb.extract %30 from 15 {sv.namehint = "enq_OH_bools_15"} : (i16) -> i1
    %150 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %qs_queue_2.io_enq_ready, %qs_queue_1.io_enq_ready, %qs_queue_0.io_enq_ready : i1
    %151 = hw.array_get %150[%auto_out_r_bits_id] {sv.namehint = "nodeOut_r_ready"} : !hw.array<16xi1>, i4
    %152 = comb.and bin %31, %auto_out_r_valid {sv.namehint = "qs_queue_0.io_enq_valid"} : i1
    %153 = comb.and bin %50, %auto_out_r_valid {sv.namehint = "qs_queue_1.io_enq_valid"} : i1
    %154 = comb.and bin %67, %auto_out_r_valid {sv.namehint = "qs_queue_2.io_enq_valid"} : i1
    %155 = comb.and bin %137, %auto_out_r_valid {sv.namehint = "queue_wire_3_enq_valid"} : i1
    %156 = comb.and bin %138, %auto_out_r_valid {sv.namehint = "queue_wire_4_enq_valid"} : i1
    %157 = comb.and bin %139, %auto_out_r_valid {sv.namehint = "queue_wire_5_enq_valid"} : i1
    %158 = comb.and bin %140, %auto_out_r_valid {sv.namehint = "queue_wire_6_enq_valid"} : i1
    %159 = comb.and bin %141, %auto_out_r_valid {sv.namehint = "queue_wire_7_enq_valid"} : i1
    %160 = comb.and bin %142, %auto_out_r_valid {sv.namehint = "queue_wire_8_enq_valid"} : i1
    %161 = comb.and bin %143, %auto_out_r_valid {sv.namehint = "queue_wire_9_enq_valid"} : i1
    %162 = comb.and bin %144, %auto_out_r_valid {sv.namehint = "queue_wire_10_enq_valid"} : i1
    %163 = comb.and bin %145, %auto_out_r_valid {sv.namehint = "queue_wire_11_enq_valid"} : i1
    %164 = comb.and bin %146, %auto_out_r_valid {sv.namehint = "queue_wire_12_enq_valid"} : i1
    %165 = comb.and bin %147, %auto_out_r_valid {sv.namehint = "queue_wire_13_enq_valid"} : i1
    %166 = comb.and bin %148, %auto_out_r_valid {sv.namehint = "queue_wire_14_enq_valid"} : i1
    %167 = comb.and bin %149, %auto_out_r_valid {sv.namehint = "queue_wire_15_enq_valid"} : i1
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %locked, %123, %125, %127, %129, %131, %133, %auto_in_aw_valid, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %151 : i1, i1, i1, i4, i2, i4, i2, i1, i1, i4, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @AXI4IdIndexer(out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i2, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i2, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i2, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i2, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c0_i2 = hw.constant 0 : i2
    %0 = comb.concat %c0_i2, %auto_in_ar_bits_id {sv.namehint = "nodeOut_ar_bits_id"} : i2, i2
    %1 = comb.concat %c0_i2, %auto_in_aw_bits_id {sv.namehint = "nodeOut_aw_bits_id"} : i2, i2
    %2 = comb.extract %auto_out_b_bits_id from 0 {sv.namehint = "nodeIn_b_bits_id"} : (i4) -> i2
    %3 = comb.extract %auto_out_r_bits_id from 0 {sv.namehint = "nodeIn_r_bits_id"} : (i4) -> i2
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %2, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %auto_out_r_valid, %3, %auto_out_r_bits_data, %auto_out_r_bits_resp, %auto_out_r_bits_echo_tl_state_size, %auto_out_r_bits_echo_tl_state_source, %auto_out_r_bits_last, %auto_in_aw_valid, %1, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %0, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %auto_in_r_ready : i1, i1, i1, i2, i2, i4, i2, i1, i1, i2, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLMonitor_2(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i31, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i5 = hw.constant -1 : i5
    %c-7_i4 = hw.constant -7 : i4
    %c7_i4 = hw.constant 7 : i4
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c255_i23 = hw.constant 255 : i23
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i8 = hw.constant -1 : i8
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i19 = hw.constant 0 : i19
    %c0_i8 = hw.constant 0 : i8
    %c-1_i24 = hw.constant -1 : i24
    %c-1_i12 = hw.constant -1 : i12
    %c0_i42 = hw.constant 0 : i42
    %c-1_i3 = hw.constant -1 : i3
    %c0_i31 = hw.constant 0 : i31
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i19, %io_in_a_bits_size : i19, i4
    %8 = comb.shl bin %c255_i23, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i23
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i23) -> i8
    %10 = comb.xor bin %9, %c-1_i8 {sv.namehint = "is_aligned_mask"} : i8
    %11 = comb.extract %io_in_a_bits_address from 0 : (i31) -> i8
    %12 = comb.and bin %11, %10 : i8
    %13 = comb.icmp bin eq %12, %c0_i8 {sv.namehint = "is_aligned"} : i8
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i31) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i31) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i31) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 29 : (i31) -> i2
    %62 = comb.xor bin %reset, %true : i1
    %63 = comb.and bin %io_in_a_valid, %59, %62 : i1
    %64 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %65 = comb.icmp eq %61, %c-1_i2 : i2
    %66 = comb.and bin %60, %65 : i1
    %67 = comb.and bin %3, %64, %66 : i1
    %68 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %69 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %70 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %72 = comb.and bin %io_in_a_valid, %71, %62 : i1
    %73 = comb.and bin %3, %64, %66 : i1
    %74 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %75 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %76 = comb.or bin %3, %4, %5 : i1
    %77 = comb.and bin %60, %76 : i1
    %78 = comb.and bin %io_in_a_valid, %75, %62 : i1
    %79 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %80 = comb.and bin %79, %65 : i1
    %81 = comb.xor bin %74, %true : i1
    %82 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %83 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %84 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %85 = comb.and bin %77, %84, %65 : i1
    %86 = comb.and bin %io_in_a_valid, %83, %62 : i1
    %87 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %88 = comb.and bin %io_in_a_valid, %87, %62 : i1
    %89 = comb.xor bin %58, %c-1_i8 : i8
    %90 = comb.and bin %io_in_a_bits_mask, %89 : i8
    %91 = comb.icmp bin eq %90, %c0_i8 : i8
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92, %62 : i1
    %94 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %95 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %96 = comb.and bin %io_in_a_valid, %95, %62 : i1
    %97 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %100 = comb.and bin %io_in_a_valid, %99, %62 : i1
    %101 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %102 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %103 = comb.and bin %io_in_d_valid, %62 : i1
    %104 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %105 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %106 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %107 = comb.or bin %104, %105, %106 {sv.namehint = "source_ok_1"} : i1
    %108 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %109 = comb.and bin %io_in_d_valid, %108, %62 : i1
    %110 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %111 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %112 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %113 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %114 = comb.and bin %io_in_d_valid, %113, %62 : i1
    %115 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %116 = comb.and bin %io_in_d_valid, %115, %62 : i1
    %117 = comb.or bin %112, %io_in_d_bits_corrupt : i1
    %118 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %119 = comb.and bin %io_in_d_valid, %118, %62 : i1
    %120 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %121 = comb.and bin %io_in_d_valid, %120, %62 : i1
    %122 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %123 = comb.and bin %io_in_d_valid, %122, %62 : i1
    %124 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %125 = comb.shl bin %c255_i23, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i23
    %126 = comb.extract %125 from 3 : (i23) -> i5
    %127 = comb.xor bin %126, %c-1_i5 {sv.namehint = "_a_first_beats1_decode_T_3"} : i5
    %128 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %129 = comb.mux bin %128, %c0_i5, %127 {sv.namehint = "a_first_beats1"} : i5
    %a_first_counter = seq.firreg %134 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 0 : ui64} : i5
    %130 = comb.add %a_first_counter, %c-1_i5 {sv.namehint = "_a_first_counter1_T"} : i5
    %131 = comb.icmp bin ne %a_first_counter, %c0_i5 : i5
    %132 = comb.xor bin %131, %true {sv.namehint = "a_first"} : i1
    %133 = comb.mux bin %131, %130, %129 {sv.namehint = "_a_first_counter_T"} : i5
    %134 = comb.mux bin %124, %133, %a_first_counter : i5
    %opcode = seq.firreg %142 clock %clock {firrtl.random_init_start = 5 : ui64} : i3
    %param = seq.firreg %143 clock %clock {firrtl.random_init_start = 8 : ui64} : i3
    %size = seq.firreg %144 clock %clock {firrtl.random_init_start = 11 : ui64} : i4
    %source = seq.firreg %145 clock %clock {firrtl.random_init_start = 15 : ui64} : i2
    %address = seq.firreg %146 clock %clock {firrtl.random_init_start = 17 : ui64} : i31
    %135 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %136 = comb.and bin %io_in_a_valid, %131, %62 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %138 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %139 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %140 = comb.icmp bin eq %io_in_a_bits_address, %address : i31
    %141 = comb.and bin %124, %132 : i1
    %142 = comb.mux bin %141, %io_in_a_bits_opcode, %opcode : i3
    %143 = comb.mux bin %141, %io_in_a_bits_param, %param : i3
    %144 = comb.mux bin %141, %io_in_a_bits_size, %size : i4
    %145 = comb.mux bin %141, %io_in_a_bits_source, %source : i2
    %146 = comb.mux bin %141, %io_in_a_bits_address, %address : i31
    %147 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %148 = comb.concat %c0_i19, %io_in_d_bits_size : i19, i4
    %149 = comb.shl bin %c255_i23, %148 {sv.namehint = "_d_first_beats1_decode_T_1"} : i23
    %150 = comb.extract %149 from 3 : (i23) -> i5
    %151 = comb.xor bin %150, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_3"} : i5
    %152 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %153 = comb.mux bin %152, %151, %c0_i5 {sv.namehint = "d_first_beats1"} : i5
    %d_first_counter = seq.firreg %158 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 48 : ui64} : i5
    %154 = comb.add %d_first_counter, %c-1_i5 {sv.namehint = "_d_first_counter1_T"} : i5
    %155 = comb.icmp bin ne %d_first_counter, %c0_i5 : i5
    %156 = comb.xor bin %155, %true {sv.namehint = "d_first"} : i1
    %157 = comb.mux bin %155, %154, %153 {sv.namehint = "_d_first_counter_T"} : i5
    %158 = comb.mux bin %147, %157, %d_first_counter : i5
    %opcode_1 = seq.firreg %165 clock %clock {firrtl.random_init_start = 53 : ui64} : i3
    %size_1 = seq.firreg %166 clock %clock {firrtl.random_init_start = 58 : ui64} : i4
    %source_1 = seq.firreg %167 clock %clock {firrtl.random_init_start = 62 : ui64} : i2
    %denied = seq.firreg %168 clock %clock {firrtl.random_init_start = 65 : ui64} : i1
    %159 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %160 = comb.and bin %io_in_d_valid, %155, %62 : i1
    %161 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %162 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %163 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %164 = comb.and bin %147, %156 : i1
    %165 = comb.mux bin %164, %io_in_d_bits_opcode, %opcode_1 : i3
    %166 = comb.mux bin %164, %io_in_d_bits_size, %size_1 : i4
    %167 = comb.mux bin %164, %io_in_d_bits_source, %source_1 : i2
    %168 = comb.mux bin %164, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %272 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 66 : ui64} : i3
    %inflight_opcodes = seq.firreg %275 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 69 : ui64} : i12
    %inflight_sizes = seq.firreg %278 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 81 : ui64} : i24
    %169 = comb.shl bin %c255_i23, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i23
    %170 = comb.extract %169 from 3 : (i23) -> i5
    %171 = comb.xor bin %170, %c-1_i5 {sv.namehint = "_a_first_beats1_decode_T_7"} : i5
    %172 = comb.mux bin %128, %c0_i5, %171 {sv.namehint = "a_first_beats1_1"} : i5
    %a_first_counter_1 = seq.firreg %176 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 105 : ui64} : i5
    %173 = comb.add %a_first_counter_1, %c-1_i5 {sv.namehint = "_a_first_counter1_T_1"} : i5
    %174 = comb.icmp bin eq %a_first_counter_1, %c0_i5 {sv.namehint = "a_first_1"} : i5
    %175 = comb.mux bin %174, %172, %173 {sv.namehint = "_a_first_counter_T_1"} : i5
    %176 = comb.mux bin %124, %175, %a_first_counter_1 : i5
    %177 = comb.shl bin %c255_i23, %148 {sv.namehint = "_d_first_beats1_decode_T_5"} : i23
    %178 = comb.extract %177 from 3 : (i23) -> i5
    %179 = comb.xor bin %178, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_7"} : i5
    %180 = comb.mux bin %152, %179, %c0_i5 {sv.namehint = "d_first_beats1_1"} : i5
    %d_first_counter_1 = seq.firreg %184 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 110 : ui64} : i5
    %181 = comb.add %d_first_counter_1, %c-1_i5 {sv.namehint = "_d_first_counter1_T_1"} : i5
    %182 = comb.icmp bin eq %d_first_counter_1, %c0_i5 {sv.namehint = "d_first_1"} : i5
    %183 = comb.mux bin %182, %180, %181 {sv.namehint = "_d_first_counter_T_1"} : i5
    %184 = comb.mux bin %147, %183, %d_first_counter_1 : i5
    %185 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %186 = comb.shru bin %inflight_opcodes, %185 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %187 = comb.extract %186 from 1 : (i12) -> i3
    %188 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %189 = comb.shru bin %inflight_sizes, %188 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %190 = comb.extract %189 from 1 : (i24) -> i7
    %191 = comb.concat %false, %190 {sv.namehint = "a_size_lookup"} : i1, i7
    %192 = comb.and bin %io_in_a_valid, %174 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %193 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %194 = comb.shl bin %c1_i4, %193 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %195 = comb.extract %194 from 0 : (i4) -> i3
    %196 = comb.mux bin %192, %195, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %197 = comb.and bin %124, %174 : i1
    %198 = comb.shl bin %c1_i4, %193 {sv.namehint = "_a_set_T"} : i4
    %199 = comb.extract %198 from 0 : (i4) -> i3
    %200 = comb.mux bin %197, %199, %c0_i3 {sv.namehint = "a_set"} : i3
    %201 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %202 = comb.mux bin %197, %201, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %203 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %204 = comb.mux bin %197, %203, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %205 = comb.concat %c0_i31, %202 : i31, i4
    %206 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %207 = comb.shl bin %205, %206 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %208 = comb.extract %207 from 0 : (i35) -> i12
    %209 = comb.mux bin %197, %208, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %210 = comb.concat %c0_i31, %204 : i31, i5
    %211 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %212 = comb.shl bin %210, %211 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %213 = comb.extract %212 from 0 : (i36) -> i24
    %214 = comb.mux bin %197, %213, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %215 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %216 = comb.shru bin %inflight, %215 : i3
    %217 = comb.extract %216 from 0 : (i3) -> i1
    %218 = comb.xor bin %217, %true : i1
    %219 = comb.and bin %197, %62 : i1
    %220 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %221 = comb.and bin %io_in_d_valid, %182 : i1
    %222 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %223 = comb.and bin %221, %222 : i1
    %224 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %225 = comb.shl bin %c1_i4, %224 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %226 = comb.extract %225 from 0 : (i4) -> i3
    %227 = comb.mux bin %223, %226, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %228 = comb.and bin %147, %182, %222 : i1
    %229 = comb.shl bin %c1_i4, %224 {sv.namehint = "_d_clr_T"} : i4
    %230 = comb.extract %229 from 0 : (i4) -> i3
    %231 = comb.mux bin %228, %230, %c0_i3 {sv.namehint = "d_clr"} : i3
    %232 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %233 = comb.shl bin %c15_i47, %232 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %234 = comb.extract %233 from 0 : (i47) -> i12
    %235 = comb.mux bin %228, %234, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %236 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %237 = comb.shl bin %c255_i47, %236 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %238 = comb.extract %237 from 0 : (i47) -> i24
    %239 = comb.mux bin %228, %238, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %240 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %241 = comb.and bin %192, %240 {sv.namehint = "same_cycle_resp"} : i1
    %242 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %243 = comb.shru bin %inflight, %242 : i3
    %244 = comb.extract %243 from 0 : (i3) -> i1
    %245 = comb.or bin %244, %241 : i1
    %246 = comb.and bin %223, %62 : i1
    %247 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %248 = comb.icmp bin eq %io_in_d_bits_opcode, %247 : i3
    %249 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %250 = comb.icmp bin eq %io_in_d_bits_opcode, %249 : i3
    %251 = comb.or bin %248, %250 : i1
    %252 = comb.and bin %223, %241, %62 : i1
    %253 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %254 = comb.xor bin %241, %true : i1
    %255 = hw.array_get %1[%187] : !hw.array<8xi3>, i3
    %256 = comb.icmp bin eq %io_in_d_bits_opcode, %255 : i3
    %257 = hw.array_get %0[%187] : !hw.array<8xi3>, i3
    %258 = comb.icmp bin eq %io_in_d_bits_opcode, %257 : i3
    %259 = comb.or bin %256, %258 : i1
    %260 = comb.and bin %223, %254, %62 : i1
    %261 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %262 = comb.icmp bin eq %261, %191 : i8
    %263 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %264 = comb.xor bin %io_in_d_ready, %true : i1
    %265 = comb.or bin %264, %io_in_a_ready : i1
    %266 = comb.and bin %221, %174, %io_in_a_valid, %263, %222, %62 : i1
    %267 = comb.icmp bin ne %196, %227 : i3
    %268 = comb.icmp bin eq %196, %c0_i3 : i3
    %269 = comb.or bin %267, %268 : i1
    %270 = comb.or bin %inflight, %200 {sv.namehint = "_inflight_T"} : i3
    %271 = comb.xor bin %231, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %272 = comb.and bin %270, %271 {sv.namehint = "_inflight_T_2"} : i3
    %273 = comb.or bin %inflight_opcodes, %209 {sv.namehint = "_inflight_opcodes_T"} : i12
    %274 = comb.xor bin %235, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %275 = comb.and bin %273, %274 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %276 = comb.or bin %inflight_sizes, %214 {sv.namehint = "_inflight_sizes_T"} : i24
    %277 = comb.xor bin %239, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %278 = comb.and bin %276, %277 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %285 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 115 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %279 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %280 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %281 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %282 = comb.or bin %279, %280, %281 : i1
    %283 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %284 = comb.or bin %124, %147 : i1
    %285 = comb.mux bin %284, %c0_i32, %283 : i32
    %inflight_1 = seq.firreg %309 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 147 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %311 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 162 : ui64} : i24
    %286 = comb.shl bin %c255_i23, %148 {sv.namehint = "_d_first_beats1_decode_T_9"} : i23
    %287 = comb.extract %286 from 3 : (i23) -> i5
    %288 = comb.xor bin %287, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_11"} : i5
    %289 = comb.mux bin %152, %288, %c0_i5 {sv.namehint = "d_first_beats1_2"} : i5
    %d_first_counter_2 = seq.firreg %293 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 191 : ui64} : i5
    %290 = comb.add %d_first_counter_2, %c-1_i5 {sv.namehint = "_d_first_counter1_T_2"} : i5
    %291 = comb.icmp bin eq %d_first_counter_2, %c0_i5 {sv.namehint = "d_first_2"} : i5
    %292 = comb.mux bin %291, %289, %290 {sv.namehint = "_d_first_counter_T_2"} : i5
    %293 = comb.mux bin %147, %292, %d_first_counter_2 : i5
    %294 = comb.shru bin %inflight_sizes_1, %188 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %295 = comb.extract %294 from 1 : (i24) -> i7
    %296 = comb.concat %false, %295 {sv.namehint = "c_size_lookup"} : i1, i7
    %297 = comb.and bin %147, %291, %220 : i1
    %298 = comb.shl bin %c1_i4, %224 {sv.namehint = "_d_clr_T_1"} : i4
    %299 = comb.extract %298 from 0 : (i4) -> i3
    %300 = comb.mux bin %297, %299, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %301 = comb.shl bin %c255_i47, %236 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %302 = comb.extract %301 from 0 : (i47) -> i24
    %303 = comb.mux bin %297, %302, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %304 = comb.shru bin %inflight_1, %242 : i3
    %305 = comb.extract %304 from 0 : (i3) -> i1
    %306 = comb.and bin %io_in_d_valid, %291, %220, %62 : i1
    %307 = comb.icmp bin eq %261, %296 : i8
    %308 = comb.xor bin %300, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %309 = comb.and bin %inflight_1, %308 {sv.namehint = "_inflight_T_5"} : i3
    %310 = comb.xor bin %303, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %311 = comb.and bin %inflight_sizes_1, %310 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %317 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 196 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %312 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %313 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %314 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %315 = comb.or bin %312, %313, %314 : i1
    sv.always posedge %2 {
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %63 {
        sv.assert %67, immediate label "assert__assert_3"
      }
      sv.if %63 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %63 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %63 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %63 {
        sv.assert %68, immediate label "assert__assert_7"
      }
      sv.if %63 {
        sv.assert %69, immediate label "assert__assert_8"
      }
      sv.if %63 {
        sv.assert %70, immediate label "assert__assert_9"
      }
      sv.if %72 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %72 {
        sv.assert %73, immediate label "assert__assert_11"
      }
      sv.if %72 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %72 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %72 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %72 {
        sv.assert %68, immediate label "assert__assert_15"
      }
      sv.if %72 {
        sv.assert %74, immediate label "assert__assert_16"
      }
      sv.if %72 {
        sv.assert %69, immediate label "assert__assert_17"
      }
      sv.if %72 {
        sv.assert %70, immediate label "assert__assert_18"
      }
      sv.if %78 {
        sv.assert %77, immediate label "assert__assert_19"
      }
      sv.if %78 {
        sv.assert %80, immediate label "assert__assert_20"
      }
      sv.if %78 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %78 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %78 {
        sv.assert %81, immediate label "assert__assert_23"
      }
      sv.if %78 {
        sv.assert %82, immediate label "assert__assert_24"
      }
      sv.if %78 {
        sv.assert %70, immediate label "assert__assert_25"
      }
      sv.if %86 {
        sv.assert %85, immediate label "assert__assert_26"
      }
      sv.if %86 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %86 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %86 {
        sv.assert %81, immediate label "assert__assert_29"
      }
      sv.if %86 {
        sv.assert %82, immediate label "assert__assert_30"
      }
      sv.if %88 {
        sv.assert %85, immediate label "assert__assert_31"
      }
      sv.if %88 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %88 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %88 {
        sv.assert %81, immediate label "assert__assert_34"
      }
      sv.if %88 {
        sv.assert %91, immediate label "assert__assert_35"
      }
      sv.if %93 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %93 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %93 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %93 {
        sv.assert %94, immediate label "assert__assert_39"
      }
      sv.if %93 {
        sv.assert %82, immediate label "assert__assert_40"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %96 {
        sv.assert %98, immediate label "assert__assert_44"
      }
      sv.if %96 {
        sv.assert %82, immediate label "assert__assert_45"
      }
      sv.if %100 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %100 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %100 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %100 {
        sv.assert %101, immediate label "assert__assert_49"
      }
      sv.if %100 {
        sv.assert %82, immediate label "assert__assert_50"
      }
      sv.if %100 {
        sv.assert %70, immediate label "assert__assert_51"
      }
      sv.if %103 {
        sv.assert %102, immediate label "assert__assert_52"
      }
      sv.if %109 {
        sv.assert %107, immediate label "assert__assert_53"
      }
      sv.if %109 {
        sv.assert %110, immediate label "assert__assert_54"
      }
      sv.if %109 {
        sv.assert %111, immediate label "assert__assert_56"
      }
      sv.if %109 {
        sv.assert %112, immediate label "assert__assert_57"
      }
      sv.if %114 {
        sv.assert %107, immediate label "assert__assert_58"
      }
      sv.if %114 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %114 {
        sv.assert %110, immediate label "assert__assert_60"
      }
      sv.if %114 {
        sv.assert %111, immediate label "assert__assert_63"
      }
      sv.if %116 {
        sv.assert %107, immediate label "assert__assert_65"
      }
      sv.if %116 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %116 {
        sv.assert %110, immediate label "assert__assert_67"
      }
      sv.if %116 {
        sv.assert %117, immediate label "assert__assert_70"
      }
      sv.if %119 {
        sv.assert %107, immediate label "assert__assert_72"
      }
      sv.if %119 {
        sv.assert %111, immediate label "assert__assert_74"
      }
      sv.if %121 {
        sv.assert %107, immediate label "assert__assert_76"
      }
      sv.if %121 {
        sv.assert %117, immediate label "assert__assert_78"
      }
      sv.if %123 {
        sv.assert %107, immediate label "assert__assert_80"
      }
      sv.if %123 {
        sv.assert %111, immediate label "assert__assert_82"
      }
      sv.if %136 {
        sv.assert %135, immediate label "assert__assert_87"
      }
      sv.if %136 {
        sv.assert %137, immediate label "assert__assert_88"
      }
      sv.if %136 {
        sv.assert %138, immediate label "assert__assert_89"
      }
      sv.if %136 {
        sv.assert %139, immediate label "assert__assert_90"
      }
      sv.if %136 {
        sv.assert %140, immediate label "assert__assert_91"
      }
      sv.if %160 {
        sv.assert %159, immediate label "assert__assert_92"
      }
      sv.if %160 {
        sv.assert %161, immediate label "assert__assert_94"
      }
      sv.if %160 {
        sv.assert %162, immediate label "assert__assert_95"
      }
      sv.if %160 {
        sv.assert %163, immediate label "assert__assert_97"
      }
      sv.if %219 {
        sv.assert %218, immediate label "assert__assert_98"
      }
      sv.if %246 {
        sv.assert %245, immediate label "assert__assert_99"
      }
      sv.if %252 {
        sv.assert %251, immediate label "assert__assert_100"
      }
      sv.if %252 {
        sv.assert %253, immediate label "assert__assert_101"
      }
      sv.if %260 {
        sv.assert %259, immediate label "assert__assert_102"
      }
      sv.if %260 {
        sv.assert %262, immediate label "assert__assert_103"
      }
      sv.if %266 {
        sv.assert %265, immediate label "assert__assert_104"
      }
      sv.if %62 {
        sv.assert %269, immediate label "assert__assert_105"
      }
      sv.if %62 {
        sv.assert %282, immediate label "assert__assert_106"
      }
      sv.if %306 {
        sv.assert %305, immediate label "assert__assert_108"
      }
      sv.if %306 {
        sv.assert %307, immediate label "assert__assert_110"
      }
      sv.if %62 {
        sv.assert %315, immediate label "assert__assert_113"
      }
    }
    %316 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %317 = comb.mux bin %147, %c0_i32, %316 : i32
    hw.output
  }
  hw.module private @Queue1_AXI4BundleW(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_data : i64, in %io_enq_bits_strb : i8, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_data : i64, out io_deq_bits_strb : i8, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.concat %io_enq_bits_data, %io_enq_bits_strb, %io_enq_bits_last : i64, i8, i1
    %1 = comb.extract %ram from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i73) -> i64
    %2 = comb.extract %ram from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_strb"} : (i73) -> i8
    %3 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i73) -> i1
    %full = seq.firreg %7 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %4 = comb.and bin %9, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %5 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %6 = comb.icmp bin eq %4, %5 : i1
    %7 = comb.mux bin %6, %full, %4 : i1
    %8 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %9 = comb.or %io_deq_ready, %8 {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %10 clock %clock {sv.namehint = "ram"} : i73
    %10 = comb.mux bin %4, %0, %ram : i73
    hw.output %9, %full, %1, %2, %3 : i1, i1, i64, i8, i1
  }
  hw.module private @Queue1_AXI4BundleARW(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i2, in %io_enq_bits_addr : i31, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i2, in %io_enq_bits_wen : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i2, out io_deq_bits_addr : i31, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i2, out io_deq_bits_wen : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c4128_i14 = hw.constant 4128 : i14
    %0 = comb.concat %io_enq_bits_id, %io_enq_bits_addr, %io_enq_bits_len, %io_enq_bits_size, %c4128_i14, %io_enq_bits_echo_tl_state_size, %io_enq_bits_echo_tl_state_source, %io_enq_bits_wen : i2, i31, i8, i3, i14, i4, i2, i1
    %1 = comb.extract %ram from 63 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i65) -> i2
    %2 = comb.extract %ram from 32 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i65) -> i31
    %3 = comb.extract %ram from 24 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i65) -> i8
    %4 = comb.extract %ram from 21 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i65) -> i3
    %5 = comb.extract %ram from 19 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i65) -> i2
    %6 = comb.extract %ram from 18 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i65) -> i1
    %7 = comb.extract %ram from 14 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i65) -> i4
    %8 = comb.extract %ram from 11 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i65) -> i3
    %9 = comb.extract %ram from 7 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i65) -> i4
    %10 = comb.extract %ram from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i65) -> i4
    %11 = comb.extract %ram from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i65) -> i2
    %12 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_wen"} : (i65) -> i1
    %full = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %13 = comb.and bin %18, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %15 = comb.icmp bin eq %13, %14 : i1
    %16 = comb.mux bin %15, %full, %13 : i1
    %17 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %18 = comb.or %io_deq_ready, %17 {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %19 clock %clock {sv.namehint = "ram"} : i65
    %19 = comb.mux bin %13, %0, %ram : i65
    hw.output %18, %full, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12 : i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLToAXI4(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i31, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i2, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i2, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i2, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i2, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c1_i3 = hw.constant 1 : i3
    %c3_i3 = hw.constant 3 : i3
    %c2_i4 = hw.constant 2 : i4
    %c-1_i8 = hw.constant -1 : i8
    %0 = hw.aggregate_constant [-2 : i2, 0 : i2, 1 : i2, -2 : i2] : !hw.array<4xi2>
    %c-1_i5 = hw.constant -1 : i5
    %c1_i4 = hw.constant 1 : i4
    %c2047_i26 = hw.constant 2047 : i26
    %c1_i5 = hw.constant 1 : i5
    %c255_i23 = hw.constant 255 : i23
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c0_i5 = hw.constant 0 : i5
    %true = hw.constant true
    %c0_i19 = hw.constant 0 : i19
    %c0_i22 = hw.constant 0 : i22
    %c-1_i3 = hw.constant -1 : i3
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_2(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %38: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i31, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %57: i1, io_in_d_bits_opcode: %65: i3, io_in_d_bits_size: %66: i4, io_in_d_bits_source: %67: i2, io_in_d_bits_denied: %68: i1, io_in_d_bits_corrupt: %69: i1) -> ()
    %2 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_beats1_opdata_T"} : (i3) -> i1
    %3 = comb.xor bin %2, %true {sv.namehint = "a_isPut"} : i1
    %4 = comb.and bin %38, %auto_in_a_valid : i1
    %5 = comb.concat %c0_i19, %auto_in_a_bits_size : i19, i4
    %6 = comb.shl bin %c255_i23, %5 {sv.namehint = "_beats1_decode_T_1"} : i23
    %7 = comb.extract %6 from 3 : (i23) -> i5
    %8 = comb.xor bin %7, %c-1_i5 {sv.namehint = "_beats1_decode_T_3"} : i5
    %9 = comb.mux bin %2, %c0_i5, %8 {sv.namehint = "beats1"} : i5
    %counter = seq.firreg %16 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 0 : ui64} : i5
    %10 = comb.add %counter, %c-1_i5 {sv.namehint = "_counter1_T"} : i5
    %11 = comb.icmp bin eq %counter, %c0_i5 {sv.namehint = "a_first"} : i5
    %12 = comb.icmp bin eq %counter, %c1_i5 {sv.namehint = "_last_T"} : i5
    %13 = comb.icmp bin eq %9, %c0_i5 {sv.namehint = "_last_T_1"} : i5
    %14 = comb.or bin %12, %13 {sv.namehint = "a_last"} : i1
    %15 = comb.mux bin %11, %9, %10 {sv.namehint = "_counter_T"} : i5
    %16 = comb.mux bin %4, %15, %counter : i5
    %nodeOut_w_deq_q.io_enq_ready, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last = hw.instance "nodeOut_w_deq_q" @Queue1_AXI4BundleW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %43: i1, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_strb: %auto_in_a_bits_mask: i8, io_enq_bits_last: %14: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "nodeOut_w_irr_valid"}
    %queue_arw_deq_q.io_enq_ready, %queue_arw_deq_q.io_deq_valid, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %queue_arw_deq_q.io_deq_bits_wen = hw.instance "queue_arw_deq_q" @Queue1_AXI4BundleARW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %42: i1, io_enq_bits_id: %23: i2, io_enq_bits_addr: %auto_in_a_bits_address: i31, io_enq_bits_len: %27: i8, io_enq_bits_size: %30: i3, io_enq_bits_echo_tl_state_size: %auto_in_a_bits_size: i4, io_enq_bits_echo_tl_state_source: %auto_in_a_bits_source: i2, io_enq_bits_wen: %3: i1, io_deq_ready: %20: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i2, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_wen: i1) {sv.namehint = "queue_arw_valid"}
    %17 = comb.xor bin %queue_arw_deq_q.io_deq_bits_wen, %true {sv.namehint = "_nodeOut_ar_valid_T"} : i1
    %18 = comb.and bin %queue_arw_deq_q.io_deq_valid, %17 {sv.namehint = "nodeOut_ar_valid"} : i1
    %19 = comb.and bin %queue_arw_deq_q.io_deq_valid, %queue_arw_deq_q.io_deq_bits_wen {sv.namehint = "nodeOut_aw_valid"} : i1
    %20 = comb.mux bin %queue_arw_deq_q.io_deq_bits_wen, %auto_out_aw_ready, %auto_out_ar_ready {sv.namehint = "queue_arw_ready"} : i1
    %doneAW = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 5 : ui64} : i1
    %21 = comb.xor bin %14, %true {sv.namehint = "_doneAW_T"} : i1
    %22 = comb.mux bin %4, %21, %doneAW : i1
    %23 = hw.array_get %0[%auto_in_a_bits_source] {sv.namehint = "a_sel_shiftAmount"} : !hw.array<4xi2>, i2
    %24 = comb.concat %c0_i22, %auto_in_a_bits_size : i22, i4
    %25 = comb.shl bin %c2047_i26, %24 {sv.namehint = "_out_arw_bits_len_T_1"} : i26
    %26 = comb.extract %25 from 3 : (i26) -> i8
    %27 = comb.xor bin %26, %c-1_i8 {sv.namehint = "_out_arw_bits_len_T_3"} : i8
    %28 = comb.icmp bin ugt %auto_in_a_bits_size, %c2_i4 {sv.namehint = "_out_arw_bits_size_T"} : i4
    %29 = comb.extract %auto_in_a_bits_size from 0 : (i4) -> i3
    %30 = comb.mux bin %28, %c3_i3, %29 {sv.namehint = "_out_arw_bits_size_T_1"} : i3
    %31 = hw.array_create %count_3, %count_1, %count_2, %count_3 : i1
    %32 = hw.array_get %31[%auto_in_a_bits_source] : !hw.array<4xi1>, i2
    %33 = comb.and bin %32, %11 {sv.namehint = "stall"} : i1
    %34 = comb.xor bin %33, %true {sv.namehint = "_out_w_valid_T"} : i1
    %35 = comb.or bin %doneAW, %queue_arw_deq_q.io_enq_ready {sv.namehint = "_out_w_valid_T_3"} : i1
    %36 = comb.and bin %35, %nodeOut_w_deq_q.io_enq_ready {sv.namehint = "_nodeIn_a_ready_T_2"} : i1
    %37 = comb.mux bin %2, %queue_arw_deq_q.io_enq_ready, %36 {sv.namehint = "_nodeIn_a_ready_T_3"} : i1
    %38 = comb.and bin %34, %37 {sv.namehint = "nodeIn_a_ready"} : i1
    %39 = comb.xor bin %doneAW, %true {sv.namehint = "_out_arw_valid_T_2"} : i1
    %40 = comb.and bin %39, %nodeOut_w_deq_q.io_enq_ready {sv.namehint = "_out_arw_valid_T_3"} : i1
    %41 = comb.or %2, %40 {sv.namehint = "_out_arw_valid_T_4"} : i1
    %42 = comb.and bin %34, %auto_in_a_valid, %41 {sv.namehint = "out_arw_valid"} : i1
    %43 = comb.and bin %34, %auto_in_a_valid, %3, %35 {sv.namehint = "out_w_valid"} : i1
    %r_holds_d = seq.firreg %46 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %44 = comb.and bin %54, %auto_out_r_valid : i1
    %45 = comb.xor bin %auto_out_r_bits_last, %true {sv.namehint = "_r_holds_d_T"} : i1
    %46 = comb.mux bin %44, %45, %r_holds_d : i1
    %b_delay = seq.firreg %50 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %47 = comb.xor bin %56, %true : i1
    %48 = comb.and bin %auto_out_b_valid, %47 : i1
    %49 = comb.add bin %b_delay, %c1_i3 {sv.namehint = "_b_delay_T"} : i3
    %50 = comb.mux bin %48, %49, %c0_i3 : i3
    %51 = comb.icmp bin ne %b_delay, %c-1_i3 {sv.namehint = "_r_wins_T"} : i3
    %52 = comb.and bin %auto_out_r_valid, %51 {sv.namehint = "_r_wins_T_1"} : i1
    %53 = comb.or bin %52, %r_holds_d {sv.namehint = "r_wins"} : i1
    %54 = comb.and bin %auto_in_d_ready, %53 {sv.namehint = "nodeOut_r_ready"} : i1
    %55 = comb.xor bin %53, %true {sv.namehint = "_nodeOut_b_ready_T"} : i1
    %56 = comb.and bin %auto_in_d_ready, %55 {sv.namehint = "nodeOut_b_ready"} : i1
    %57 = comb.mux bin %53, %auto_out_r_valid, %auto_out_b_valid {sv.namehint = "nodeIn_d_valid"} : i1
    %r_first = seq.firreg %58 clock %clock reset sync %reset, %true {firrtl.random_init_start = 10 : ui64} : i1
    %58 = comb.mux bin %44, %auto_out_r_bits_last, %r_first : i1
    %59 = comb.icmp bin eq %auto_out_r_bits_resp, %c-1_i2 {sv.namehint = "_r_denied_T"} : i2
    %r_denied_r = seq.firreg %60 clock %clock {firrtl.random_init_start = 11 : ui64} : i1
    %60 = comb.mux bin %r_first, %59, %r_denied_r : i1
    %61 = comb.mux bin %r_first, %59, %r_denied_r {sv.namehint = "r_denied"} : i1
    %62 = comb.icmp bin ne %auto_out_r_bits_resp, %c0_i2 {sv.namehint = "r_corrupt"} : i2
    %63 = comb.icmp bin ne %auto_out_b_bits_resp, %c0_i2 {sv.namehint = "b_denied"} : i2
    %64 = comb.or bin %62, %61 {sv.namehint = "r_d_corrupt"} : i1
    %65 = comb.concat %c0_i2, %53 {sv.namehint = "nodeIn_d_bits_opcode"} : i2, i1
    %66 = comb.mux bin %53, %auto_out_r_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_size {sv.namehint = "nodeIn_d_bits_size"} : i4
    %67 = comb.mux bin %53, %auto_out_r_bits_echo_tl_state_source, %auto_out_b_bits_echo_tl_state_source {sv.namehint = "nodeIn_d_bits_source"} : i2
    %68 = comb.mux bin %53, %61, %63 {sv.namehint = "nodeIn_d_bits_denied"} : i1
    %69 = comb.and %53, %64 {sv.namehint = "nodeIn_d_bits_corrupt"} : i1
    %70 = comb.concat %c0_i2, %23 : i2, i2
    %71 = comb.shl bin %c1_i4, %70 {sv.namehint = "_a_sel_T"} : i4
    %72 = comb.extract %71 from 0 {sv.namehint = "a_sel_0"} : (i4) -> i1
    %73 = comb.extract %71 from 1 {sv.namehint = "a_sel_1"} : (i4) -> i1
    %74 = comb.extract %71 from 2 {sv.namehint = "a_sel_2"} : (i4) -> i1
    %75 = comb.mux bin %53, %auto_out_r_bits_id, %auto_out_b_bits_id {sv.namehint = "d_sel_shiftAmount"} : i2
    %76 = comb.concat %c0_i2, %75 : i2, i2
    %77 = comb.shl bin %c1_i4, %76 {sv.namehint = "_d_sel_T_1"} : i4
    %78 = comb.extract %77 from 0 {sv.namehint = "d_sel_0"} : (i4) -> i1
    %79 = comb.extract %77 from 1 {sv.namehint = "d_sel_1"} : (i4) -> i1
    %80 = comb.extract %77 from 2 {sv.namehint = "d_sel_2"} : (i4) -> i1
    %81 = comb.xor %53, %true : i1
    %82 = comb.or %81, %auto_out_r_bits_last {sv.namehint = "d_last"} : i1
    %count_1 = seq.firreg %88 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64, sv.namehint = "count_1"} : i1
    %83 = comb.and bin %queue_arw_deq_q.io_enq_ready, %42 {sv.namehint = "_inc_T_2"} : i1
    %84 = comb.and bin %72, %83 {sv.namehint = "inc"} : i1
    %85 = comb.and bin %auto_in_d_ready, %57 {sv.namehint = "_dec_T_5"} : i1
    %86 = comb.and bin %78, %82, %85 {sv.namehint = "dec"} : i1
    %87 = comb.add bin %count_1, %84 {sv.namehint = "_count_T_1"} : i1
    %88 = comb.sub bin %87, %86 {sv.namehint = "_count_T_3"} : i1
    %89 = comb.xor bin %86, %true : i1
    %90 = comb.or bin %89, %count_1 : i1
    %91 = comb.xor bin %reset, %true : i1
    %92 = comb.xor bin %84, %true : i1
    %93 = comb.xor bin %count_1, %true : i1
    %94 = comb.or bin %92, %93 : i1
    %count_2 = seq.firreg %98 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64, sv.namehint = "count_2"} : i1
    %95 = comb.and bin %73, %83 {sv.namehint = "inc_1"} : i1
    %96 = comb.and bin %79, %82, %85 {sv.namehint = "dec_1"} : i1
    %97 = comb.add bin %count_2, %95 {sv.namehint = "_count_T_5"} : i1
    %98 = comb.sub bin %97, %96 {sv.namehint = "_count_T_7"} : i1
    %99 = comb.xor bin %96, %true : i1
    %100 = comb.or bin %99, %count_2 : i1
    %101 = comb.xor bin %95, %true : i1
    %102 = comb.xor bin %count_2, %true : i1
    %103 = comb.or bin %101, %102 : i1
    %count_3 = seq.firreg %107 clock %clock reset sync %reset, %false {firrtl.random_init_start = 16 : ui64, sv.namehint = "count_3"} : i1
    %104 = comb.and bin %74, %83 {sv.namehint = "inc_2"} : i1
    %105 = comb.and bin %80, %82, %85 {sv.namehint = "dec_2"} : i1
    %106 = comb.add bin %count_3, %104 {sv.namehint = "_count_T_9"} : i1
    %107 = comb.sub bin %106, %105 {sv.namehint = "_count_T_11"} : i1
    %108 = comb.xor bin %105, %true : i1
    %109 = comb.or bin %108, %count_3 : i1
    %110 = comb.xor bin %104, %true : i1
    %111 = comb.xor bin %count_3, %true : i1
    %112 = comb.or bin %110, %111 : i1
    sv.always posedge %1 {
      sv.if %91 {
        sv.assert %90, immediate label "assert__assert"
      }
      sv.if %91 {
        sv.assert %94, immediate label "assert__assert_1"
      }
      sv.if %91 {
        sv.assert %100, immediate label "assert__assert_2"
      }
      sv.if %91 {
        sv.assert %103, immediate label "assert__assert_3"
      }
      sv.if %91 {
        sv.assert %109, immediate label "assert__assert_4"
      }
      sv.if %91 {
        sv.assert %112, immediate label "assert__assert_5"
      }
    }
    hw.output %38, %57, %65, %66, %67, %68, %auto_out_r_bits_data, %69, %19, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last, %56, %18, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %54 : i1, i1, i3, i4, i2, i1, i64, i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLWidthWidget_3(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i31, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i31, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i4, i2, i1, i64, i1, i1, i3, i3, i4, i2, i31, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_4(in %clock : !seq.clock, in %reset : i1, in %auto_axi4buf_out_aw_ready : i1, out auto_axi4buf_out_aw_valid : i1, out auto_axi4buf_out_aw_bits_id : i4, out auto_axi4buf_out_aw_bits_addr : i31, out auto_axi4buf_out_aw_bits_len : i8, out auto_axi4buf_out_aw_bits_size : i3, out auto_axi4buf_out_aw_bits_burst : i2, out auto_axi4buf_out_aw_bits_lock : i1, out auto_axi4buf_out_aw_bits_cache : i4, out auto_axi4buf_out_aw_bits_prot : i3, out auto_axi4buf_out_aw_bits_qos : i4, in %auto_axi4buf_out_w_ready : i1, out auto_axi4buf_out_w_valid : i1, out auto_axi4buf_out_w_bits_data : i64, out auto_axi4buf_out_w_bits_strb : i8, out auto_axi4buf_out_w_bits_last : i1, out auto_axi4buf_out_b_ready : i1, in %auto_axi4buf_out_b_valid : i1, in %auto_axi4buf_out_b_bits_id : i4, in %auto_axi4buf_out_b_bits_resp : i2, in %auto_axi4buf_out_ar_ready : i1, out auto_axi4buf_out_ar_valid : i1, out auto_axi4buf_out_ar_bits_id : i4, out auto_axi4buf_out_ar_bits_addr : i31, out auto_axi4buf_out_ar_bits_len : i8, out auto_axi4buf_out_ar_bits_size : i3, out auto_axi4buf_out_ar_bits_burst : i2, out auto_axi4buf_out_ar_bits_lock : i1, out auto_axi4buf_out_ar_bits_cache : i4, out auto_axi4buf_out_ar_bits_prot : i3, out auto_axi4buf_out_ar_bits_qos : i4, out auto_axi4buf_out_r_ready : i1, in %auto_axi4buf_out_r_valid : i1, in %auto_axi4buf_out_r_bits_id : i4, in %auto_axi4buf_out_r_bits_data : i64, in %auto_axi4buf_out_r_bits_resp : i2, in %auto_axi4buf_out_r_bits_last : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i4, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i31, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i4, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_denied : i1, out auto_tl_in_d_bits_data : i64, out auto_tl_in_d_bits_corrupt : i1) {
    %axi4buf.auto_in_aw_ready, %axi4buf.auto_in_w_ready, %axi4buf.auto_in_b_valid, %axi4buf.auto_in_b_bits_id, %axi4buf.auto_in_b_bits_resp, %axi4buf.auto_in_ar_ready, %axi4buf.auto_in_r_valid, %axi4buf.auto_in_r_bits_id, %axi4buf.auto_in_r_bits_data, %axi4buf.auto_in_r_bits_resp, %axi4buf.auto_in_r_bits_last, %axi4buf.auto_out_aw_valid, %axi4buf.auto_out_aw_bits_id, %axi4buf.auto_out_aw_bits_addr, %axi4buf.auto_out_aw_bits_len, %axi4buf.auto_out_aw_bits_size, %axi4buf.auto_out_aw_bits_burst, %axi4buf.auto_out_aw_bits_lock, %axi4buf.auto_out_aw_bits_cache, %axi4buf.auto_out_aw_bits_prot, %axi4buf.auto_out_aw_bits_qos, %axi4buf.auto_out_w_valid, %axi4buf.auto_out_w_bits_data, %axi4buf.auto_out_w_bits_strb, %axi4buf.auto_out_w_bits_last, %axi4buf.auto_out_b_ready, %axi4buf.auto_out_ar_valid, %axi4buf.auto_out_ar_bits_id, %axi4buf.auto_out_ar_bits_addr, %axi4buf.auto_out_ar_bits_len, %axi4buf.auto_out_ar_bits_size, %axi4buf.auto_out_ar_bits_burst, %axi4buf.auto_out_ar_bits_lock, %axi4buf.auto_out_ar_bits_cache, %axi4buf.auto_out_ar_bits_prot, %axi4buf.auto_out_ar_bits_qos, %axi4buf.auto_out_r_ready = hw.instance "axi4buf" @AXI4Buffer(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4yank.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4yank.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4yank.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4yank.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4yank.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4yank.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4yank.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4yank.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4yank.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4yank.auto_out_aw_bits_qos: i4, auto_in_w_valid: %axi4yank.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4yank.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4yank.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4yank.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4yank.auto_out_b_ready: i1, auto_in_ar_valid: %axi4yank.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4yank.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4yank.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4yank.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4yank.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4yank.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4yank.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4yank.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4yank.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4yank.auto_out_ar_bits_qos: i4, auto_in_r_ready: %axi4yank.auto_out_r_ready: i1, auto_out_aw_ready: %auto_axi4buf_out_aw_ready: i1, auto_out_w_ready: %auto_axi4buf_out_w_ready: i1, auto_out_b_valid: %auto_axi4buf_out_b_valid: i1, auto_out_b_bits_id: %auto_axi4buf_out_b_bits_id: i4, auto_out_b_bits_resp: %auto_axi4buf_out_b_bits_resp: i2, auto_out_ar_ready: %auto_axi4buf_out_ar_ready: i1, auto_out_r_valid: %auto_axi4buf_out_r_valid: i1, auto_out_r_bits_id: %auto_axi4buf_out_r_bits_id: i4, auto_out_r_bits_data: %auto_axi4buf_out_r_bits_data: i64, auto_out_r_bits_resp: %auto_axi4buf_out_r_bits_resp: i2, auto_out_r_bits_last: %auto_axi4buf_out_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4buf.auto_in_r_valid"}
    %axi4yank.auto_in_aw_ready, %axi4yank.auto_in_w_ready, %axi4yank.auto_in_b_valid, %axi4yank.auto_in_b_bits_id, %axi4yank.auto_in_b_bits_resp, %axi4yank.auto_in_b_bits_echo_tl_state_size, %axi4yank.auto_in_b_bits_echo_tl_state_source, %axi4yank.auto_in_ar_ready, %axi4yank.auto_in_r_valid, %axi4yank.auto_in_r_bits_id, %axi4yank.auto_in_r_bits_data, %axi4yank.auto_in_r_bits_resp, %axi4yank.auto_in_r_bits_echo_tl_state_size, %axi4yank.auto_in_r_bits_echo_tl_state_source, %axi4yank.auto_in_r_bits_last, %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready = hw.instance "axi4yank" @AXI4UserYanker(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4deint.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4deint.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4deint.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4deint.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4deint.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4deint.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4deint.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4deint.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4deint.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4deint.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4deint.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4deint.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %axi4deint.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4deint.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4deint.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4deint.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4deint.auto_out_b_ready: i1, auto_in_ar_valid: %axi4deint.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4deint.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4deint.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4deint.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4deint.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4deint.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4deint.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4deint.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4deint.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4deint.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4deint.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4deint.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %axi4deint.auto_out_r_ready: i1, auto_out_aw_ready: %axi4buf.auto_in_aw_ready: i1, auto_out_w_ready: %axi4buf.auto_in_w_ready: i1, auto_out_b_valid: %axi4buf.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4buf.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4buf.auto_in_b_bits_resp: i2, auto_out_ar_ready: %axi4buf.auto_in_ar_ready: i1, auto_out_r_valid: %axi4buf.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4buf.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4buf.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4buf.auto_in_r_bits_resp: i2, auto_out_r_bits_last: %axi4buf.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4yank.auto_in_r_valid"}
    %axi4deint.auto_in_aw_ready, %axi4deint.auto_in_w_ready, %axi4deint.auto_in_b_valid, %axi4deint.auto_in_b_bits_id, %axi4deint.auto_in_b_bits_resp, %axi4deint.auto_in_b_bits_echo_tl_state_size, %axi4deint.auto_in_b_bits_echo_tl_state_source, %axi4deint.auto_in_ar_ready, %axi4deint.auto_in_r_valid, %axi4deint.auto_in_r_bits_id, %axi4deint.auto_in_r_bits_data, %axi4deint.auto_in_r_bits_resp, %axi4deint.auto_in_r_bits_echo_tl_state_size, %axi4deint.auto_in_r_bits_echo_tl_state_source, %axi4deint.auto_in_r_bits_last, %axi4deint.auto_out_aw_valid, %axi4deint.auto_out_aw_bits_id, %axi4deint.auto_out_aw_bits_addr, %axi4deint.auto_out_aw_bits_len, %axi4deint.auto_out_aw_bits_size, %axi4deint.auto_out_aw_bits_burst, %axi4deint.auto_out_aw_bits_lock, %axi4deint.auto_out_aw_bits_cache, %axi4deint.auto_out_aw_bits_prot, %axi4deint.auto_out_aw_bits_qos, %axi4deint.auto_out_aw_bits_echo_tl_state_size, %axi4deint.auto_out_aw_bits_echo_tl_state_source, %axi4deint.auto_out_w_valid, %axi4deint.auto_out_w_bits_data, %axi4deint.auto_out_w_bits_strb, %axi4deint.auto_out_w_bits_last, %axi4deint.auto_out_b_ready, %axi4deint.auto_out_ar_valid, %axi4deint.auto_out_ar_bits_id, %axi4deint.auto_out_ar_bits_addr, %axi4deint.auto_out_ar_bits_len, %axi4deint.auto_out_ar_bits_size, %axi4deint.auto_out_ar_bits_burst, %axi4deint.auto_out_ar_bits_lock, %axi4deint.auto_out_ar_bits_cache, %axi4deint.auto_out_ar_bits_prot, %axi4deint.auto_out_ar_bits_qos, %axi4deint.auto_out_ar_bits_echo_tl_state_size, %axi4deint.auto_out_ar_bits_echo_tl_state_source, %axi4deint.auto_out_r_ready = hw.instance "axi4deint" @AXI4Deinterleaver(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4index.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4index.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4index.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4index.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4index.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4index.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4index.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4index.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4index.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4index.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4index.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4index.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %axi4index.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4index.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4index.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4index.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4index.auto_out_b_ready: i1, auto_in_ar_valid: %axi4index.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4index.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4index.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4index.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4index.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4index.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4index.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4index.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4index.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4index.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4index.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4index.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %axi4index.auto_out_r_ready: i1, auto_out_aw_ready: %axi4yank.auto_in_aw_ready: i1, auto_out_w_ready: %axi4yank.auto_in_w_ready: i1, auto_out_b_valid: %axi4yank.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4yank.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4yank.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4yank.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4yank.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4yank.auto_in_ar_ready: i1, auto_out_r_valid: %axi4yank.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4yank.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4yank.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4yank.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4yank.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4yank.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4yank.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "axi4deint.auto_in_r_valid"}
    %axi4index.auto_in_aw_ready, %axi4index.auto_in_w_ready, %axi4index.auto_in_b_valid, %axi4index.auto_in_b_bits_id, %axi4index.auto_in_b_bits_resp, %axi4index.auto_in_b_bits_echo_tl_state_size, %axi4index.auto_in_b_bits_echo_tl_state_source, %axi4index.auto_in_ar_ready, %axi4index.auto_in_r_valid, %axi4index.auto_in_r_bits_id, %axi4index.auto_in_r_bits_data, %axi4index.auto_in_r_bits_resp, %axi4index.auto_in_r_bits_echo_tl_state_size, %axi4index.auto_in_r_bits_echo_tl_state_source, %axi4index.auto_in_r_bits_last, %axi4index.auto_out_aw_valid, %axi4index.auto_out_aw_bits_id, %axi4index.auto_out_aw_bits_addr, %axi4index.auto_out_aw_bits_len, %axi4index.auto_out_aw_bits_size, %axi4index.auto_out_aw_bits_burst, %axi4index.auto_out_aw_bits_lock, %axi4index.auto_out_aw_bits_cache, %axi4index.auto_out_aw_bits_prot, %axi4index.auto_out_aw_bits_qos, %axi4index.auto_out_aw_bits_echo_tl_state_size, %axi4index.auto_out_aw_bits_echo_tl_state_source, %axi4index.auto_out_w_valid, %axi4index.auto_out_w_bits_data, %axi4index.auto_out_w_bits_strb, %axi4index.auto_out_w_bits_last, %axi4index.auto_out_b_ready, %axi4index.auto_out_ar_valid, %axi4index.auto_out_ar_bits_id, %axi4index.auto_out_ar_bits_addr, %axi4index.auto_out_ar_bits_len, %axi4index.auto_out_ar_bits_size, %axi4index.auto_out_ar_bits_burst, %axi4index.auto_out_ar_bits_lock, %axi4index.auto_out_ar_bits_cache, %axi4index.auto_out_ar_bits_prot, %axi4index.auto_out_ar_bits_qos, %axi4index.auto_out_ar_bits_echo_tl_state_size, %axi4index.auto_out_ar_bits_echo_tl_state_source, %axi4index.auto_out_r_ready = hw.instance "axi4index" @AXI4IdIndexer(auto_in_aw_valid: %tl2axi4.auto_out_aw_valid: i1, auto_in_aw_bits_id: %tl2axi4.auto_out_aw_bits_id: i2, auto_in_aw_bits_addr: %tl2axi4.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %tl2axi4.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %tl2axi4.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %tl2axi4.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %tl2axi4.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %tl2axi4.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %tl2axi4.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %tl2axi4.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %tl2axi4.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %tl2axi4.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %tl2axi4.auto_out_w_valid: i1, auto_in_w_bits_data: %tl2axi4.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %tl2axi4.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %tl2axi4.auto_out_w_bits_last: i1, auto_in_b_ready: %tl2axi4.auto_out_b_ready: i1, auto_in_ar_valid: %tl2axi4.auto_out_ar_valid: i1, auto_in_ar_bits_id: %tl2axi4.auto_out_ar_bits_id: i2, auto_in_ar_bits_addr: %tl2axi4.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %tl2axi4.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %tl2axi4.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %tl2axi4.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %tl2axi4.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %tl2axi4.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %tl2axi4.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %tl2axi4.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %tl2axi4.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %tl2axi4.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %tl2axi4.auto_out_r_ready: i1, auto_out_aw_ready: %axi4deint.auto_in_aw_ready: i1, auto_out_w_ready: %axi4deint.auto_in_w_ready: i1, auto_out_b_valid: %axi4deint.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4deint.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4deint.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4deint.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4deint.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4deint.auto_in_ar_ready: i1, auto_out_r_valid: %axi4deint.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4deint.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4deint.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4deint.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4deint.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4deint.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4deint.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i2, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i2, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "tl2axi4.auto_out_r_valid"}
    %tl2axi4.auto_in_a_ready, %tl2axi4.auto_in_d_valid, %tl2axi4.auto_in_d_bits_opcode, %tl2axi4.auto_in_d_bits_size, %tl2axi4.auto_in_d_bits_source, %tl2axi4.auto_in_d_bits_denied, %tl2axi4.auto_in_d_bits_data, %tl2axi4.auto_in_d_bits_corrupt, %tl2axi4.auto_out_aw_valid, %tl2axi4.auto_out_aw_bits_id, %tl2axi4.auto_out_aw_bits_addr, %tl2axi4.auto_out_aw_bits_len, %tl2axi4.auto_out_aw_bits_size, %tl2axi4.auto_out_aw_bits_burst, %tl2axi4.auto_out_aw_bits_lock, %tl2axi4.auto_out_aw_bits_cache, %tl2axi4.auto_out_aw_bits_prot, %tl2axi4.auto_out_aw_bits_qos, %tl2axi4.auto_out_aw_bits_echo_tl_state_size, %tl2axi4.auto_out_aw_bits_echo_tl_state_source, %tl2axi4.auto_out_w_valid, %tl2axi4.auto_out_w_bits_data, %tl2axi4.auto_out_w_bits_strb, %tl2axi4.auto_out_w_bits_last, %tl2axi4.auto_out_b_ready, %tl2axi4.auto_out_ar_valid, %tl2axi4.auto_out_ar_bits_id, %tl2axi4.auto_out_ar_bits_addr, %tl2axi4.auto_out_ar_bits_len, %tl2axi4.auto_out_ar_bits_size, %tl2axi4.auto_out_ar_bits_burst, %tl2axi4.auto_out_ar_bits_lock, %tl2axi4.auto_out_ar_bits_cache, %tl2axi4.auto_out_ar_bits_prot, %tl2axi4.auto_out_ar_bits_qos, %tl2axi4.auto_out_ar_bits_echo_tl_state_size, %tl2axi4.auto_out_ar_bits_echo_tl_state_source, %tl2axi4.auto_out_r_ready = hw.instance "tl2axi4" @TLToAXI4(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %widget.auto_out_a_valid: i1, auto_in_a_bits_opcode: %widget.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %widget.auto_out_a_bits_param: i3, auto_in_a_bits_size: %widget.auto_out_a_bits_size: i4, auto_in_a_bits_source: %widget.auto_out_a_bits_source: i2, auto_in_a_bits_address: %widget.auto_out_a_bits_address: i31, auto_in_a_bits_mask: %widget.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %widget.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %widget.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %widget.auto_out_d_ready: i1, auto_out_aw_ready: %axi4index.auto_in_aw_ready: i1, auto_out_w_ready: %axi4index.auto_in_w_ready: i1, auto_out_b_valid: %axi4index.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4index.auto_in_b_bits_id: i2, auto_out_b_bits_resp: %axi4index.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4index.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4index.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4index.auto_in_ar_ready: i1, auto_out_r_valid: %axi4index.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4index.auto_in_r_bits_id: i2, auto_out_r_bits_data: %axi4index.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4index.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4index.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4index.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4index.auto_in_r_bits_last: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i2, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i2, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "widget.auto_out_d_valid"}
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_3(auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i4, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i31, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %tl2axi4.auto_in_a_ready: i1, auto_out_d_valid: %tl2axi4.auto_in_d_valid: i1, auto_out_d_bits_opcode: %tl2axi4.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %tl2axi4.auto_in_d_bits_size: i4, auto_out_d_bits_source: %tl2axi4.auto_in_d_bits_source: i2, auto_out_d_bits_denied: %tl2axi4.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %tl2axi4.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %tl2axi4.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i31, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "tlIn_d_valid"}
    hw.output %axi4buf.auto_out_aw_valid, %axi4buf.auto_out_aw_bits_id, %axi4buf.auto_out_aw_bits_addr, %axi4buf.auto_out_aw_bits_len, %axi4buf.auto_out_aw_bits_size, %axi4buf.auto_out_aw_bits_burst, %axi4buf.auto_out_aw_bits_lock, %axi4buf.auto_out_aw_bits_cache, %axi4buf.auto_out_aw_bits_prot, %axi4buf.auto_out_aw_bits_qos, %axi4buf.auto_out_w_valid, %axi4buf.auto_out_w_bits_data, %axi4buf.auto_out_w_bits_strb, %axi4buf.auto_out_w_bits_last, %axi4buf.auto_out_b_ready, %axi4buf.auto_out_ar_valid, %axi4buf.auto_out_ar_bits_id, %axi4buf.auto_out_ar_bits_addr, %axi4buf.auto_out_ar_bits_len, %axi4buf.auto_out_ar_bits_size, %axi4buf.auto_out_ar_bits_burst, %axi4buf.auto_out_ar_bits_lock, %axi4buf.auto_out_ar_bits_cache, %axi4buf.auto_out_ar_bits_prot, %axi4buf.auto_out_ar_bits_qos, %axi4buf.auto_out_r_ready, %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt : i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i4, i2, i1, i64, i1
  }
  hw.module private @SystemBus(in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr : i31, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst : i2, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data : i64, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp : i2, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr : i31, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst : i2, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data : i64, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp : i2, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_a_ready : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size : i4, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source : i2, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address : i32, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask : i8, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data : i64, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_b_ready : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_b_valid : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address : i32, out auto_coupler_from_tile_tl_master_clock_xing_in_c_ready : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size : i4, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source : i2, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address : i32, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data : i64, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_d_ready : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_valid : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode : i3, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size : i4, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data : i64, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_e_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source : i2, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address : i32, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address : i32, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source : i2, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address : i32, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data : i64, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size : i3, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size : i4, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source : i2, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address : i28, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size : i4, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt : i1, out auto_fixedClockNode_out_1_clock : !seq.clock, out auto_fixedClockNode_out_1_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset : i1, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset : i1, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset : i1, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset : i1, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset : i1) {
    %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_reset, %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_clock, %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_reset = hw.instance "subsystem_sbus_clock_groups" @ClockGroupAggregator(auto_in_member_subsystem_sbus_5_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock: !seq.clock, auto_in_member_subsystem_sbus_5_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset: i1, auto_in_member_subsystem_sbus_4_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock: !seq.clock, auto_in_member_subsystem_sbus_4_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset: i1, auto_in_member_subsystem_sbus_2_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock: !seq.clock, auto_in_member_subsystem_sbus_2_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset: i1, auto_in_member_subsystem_sbus_1_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock: !seq.clock, auto_in_member_subsystem_sbus_1_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset: i1, auto_in_member_subsystem_sbus_0_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset: i1) -> (auto_out_3_member_subsystem_l2_1_clock: !seq.clock, auto_out_3_member_subsystem_l2_1_reset: i1, auto_out_3_member_subsystem_l2_0_clock: !seq.clock, auto_out_3_member_subsystem_l2_0_reset: i1, auto_out_1_member_subsystem_cbus_1_clock: !seq.clock, auto_out_1_member_subsystem_cbus_1_reset: i1, auto_out_1_member_subsystem_cbus_0_clock: !seq.clock, auto_out_1_member_subsystem_cbus_0_reset: i1, auto_out_0_member_subsystem_sbus_0_clock: !seq.clock, auto_out_0_member_subsystem_sbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_sbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_2_clock, %fixedClockNode.auto_out_2_reset, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset = hw.instance "fixedClockNode" @FixedClockBroadcast(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_2_clock: !seq.clock, auto_out_2_reset: i1, auto_out_0_clock: !seq.clock, auto_out_0_reset: i1) {sv.namehint = "clockSinkNodeIn_reset"}
    %system_bus_xbar.auto_in_a_ready, %system_bus_xbar.auto_in_b_valid, %system_bus_xbar.auto_in_b_bits_param, %system_bus_xbar.auto_in_b_bits_address, %system_bus_xbar.auto_in_c_ready, %system_bus_xbar.auto_in_d_valid, %system_bus_xbar.auto_in_d_bits_opcode, %system_bus_xbar.auto_in_d_bits_param, %system_bus_xbar.auto_in_d_bits_size, %system_bus_xbar.auto_in_d_bits_source, %system_bus_xbar.auto_in_d_bits_sink, %system_bus_xbar.auto_in_d_bits_denied, %system_bus_xbar.auto_in_d_bits_data, %system_bus_xbar.auto_in_d_bits_corrupt, %system_bus_xbar.auto_out_2_a_valid, %system_bus_xbar.auto_out_2_a_bits_opcode, %system_bus_xbar.auto_out_2_a_bits_param, %system_bus_xbar.auto_out_2_a_bits_size, %system_bus_xbar.auto_out_2_a_bits_source, %system_bus_xbar.auto_out_2_a_bits_address, %system_bus_xbar.auto_out_2_a_bits_mask, %system_bus_xbar.auto_out_2_a_bits_data, %system_bus_xbar.auto_out_2_a_bits_corrupt, %system_bus_xbar.auto_out_2_d_ready, %system_bus_xbar.auto_out_1_a_valid, %system_bus_xbar.auto_out_1_a_bits_opcode, %system_bus_xbar.auto_out_1_a_bits_param, %system_bus_xbar.auto_out_1_a_bits_size, %system_bus_xbar.auto_out_1_a_bits_source, %system_bus_xbar.auto_out_1_a_bits_address, %system_bus_xbar.auto_out_1_a_bits_mask, %system_bus_xbar.auto_out_1_a_bits_data, %system_bus_xbar.auto_out_1_a_bits_corrupt, %system_bus_xbar.auto_out_1_b_ready, %system_bus_xbar.auto_out_1_c_valid, %system_bus_xbar.auto_out_1_c_bits_opcode, %system_bus_xbar.auto_out_1_c_bits_param, %system_bus_xbar.auto_out_1_c_bits_size, %system_bus_xbar.auto_out_1_c_bits_source, %system_bus_xbar.auto_out_1_c_bits_address, %system_bus_xbar.auto_out_1_c_bits_data, %system_bus_xbar.auto_out_1_c_bits_corrupt, %system_bus_xbar.auto_out_1_d_ready, %system_bus_xbar.auto_out_1_e_valid, %system_bus_xbar.auto_out_1_e_bits_sink, %system_bus_xbar.auto_out_0_a_valid, %system_bus_xbar.auto_out_0_a_bits_opcode, %system_bus_xbar.auto_out_0_a_bits_param, %system_bus_xbar.auto_out_0_a_bits_size, %system_bus_xbar.auto_out_0_a_bits_source, %system_bus_xbar.auto_out_0_a_bits_address, %system_bus_xbar.auto_out_0_a_bits_mask, %system_bus_xbar.auto_out_0_a_bits_data, %system_bus_xbar.auto_out_0_a_bits_corrupt, %system_bus_xbar.auto_out_0_d_ready = hw.instance "system_bus_xbar" @TLXbar(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %fixer.auto_out_a_bits_corrupt: i1, auto_in_b_ready: %fixer.auto_out_b_ready: i1, auto_in_c_valid: %fixer.auto_out_c_valid: i1, auto_in_c_bits_opcode: %fixer.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %fixer.auto_out_c_bits_param: i3, auto_in_c_bits_size: %fixer.auto_out_c_bits_size: i4, auto_in_c_bits_source: %fixer.auto_out_c_bits_source: i2, auto_in_c_bits_address: %fixer.auto_out_c_bits_address: i32, auto_in_c_bits_data: %fixer.auto_out_c_bits_data: i64, auto_in_c_bits_corrupt: %fixer.auto_out_c_bits_corrupt: i1, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_in_e_valid: %fixer.auto_out_e_valid: i1, auto_in_e_bits_sink: %fixer.auto_out_e_bits_sink: i2, auto_out_2_a_ready: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_a_ready: i1, auto_out_2_d_valid: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid: i1, auto_out_2_d_bits_opcode: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_opcode: i3, auto_out_2_d_bits_size: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_size: i4, auto_out_2_d_bits_source: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_source: i2, auto_out_2_d_bits_denied: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_denied: i1, auto_out_2_d_bits_data: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_data: i64, auto_out_2_d_bits_corrupt: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_corrupt: i1, auto_out_1_a_ready: %coupler_to_bus_named_subsystem_l2.auto_widget_in_a_ready: i1, auto_out_1_b_valid: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_valid: i1, auto_out_1_b_bits_param: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_param: i2, auto_out_1_b_bits_address: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_address: i32, auto_out_1_c_ready: %coupler_to_bus_named_subsystem_l2.auto_widget_in_c_ready: i1, auto_out_1_d_valid: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid: i1, auto_out_1_d_bits_opcode: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_opcode: i3, auto_out_1_d_bits_param: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_param: i2, auto_out_1_d_bits_size: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_size: i3, auto_out_1_d_bits_source: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_source: i2, auto_out_1_d_bits_sink: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_sink: i2, auto_out_1_d_bits_denied: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_denied: i1, auto_out_1_d_bits_data: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_data: i64, auto_out_1_d_bits_corrupt: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_corrupt: i1, auto_out_0_a_ready: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_a_ready: i1, auto_out_0_d_valid: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid: i1, auto_out_0_d_bits_opcode: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_param: i2, auto_out_0_d_bits_size: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_size: i4, auto_out_0_d_bits_source: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_source: i2, auto_out_0_d_bits_sink: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_denied: i1, auto_out_0_d_bits_data: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_data: i64, auto_out_0_d_bits_corrupt: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_2_a_valid: i1, auto_out_2_a_bits_opcode: i3, auto_out_2_a_bits_param: i3, auto_out_2_a_bits_size: i4, auto_out_2_a_bits_source: i2, auto_out_2_a_bits_address: i31, auto_out_2_a_bits_mask: i8, auto_out_2_a_bits_data: i64, auto_out_2_a_bits_corrupt: i1, auto_out_2_d_ready: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_param: i3, auto_out_1_a_bits_size: i3, auto_out_1_a_bits_source: i2, auto_out_1_a_bits_address: i32, auto_out_1_a_bits_mask: i8, auto_out_1_a_bits_data: i64, auto_out_1_a_bits_corrupt: i1, auto_out_1_b_ready: i1, auto_out_1_c_valid: i1, auto_out_1_c_bits_opcode: i3, auto_out_1_c_bits_param: i3, auto_out_1_c_bits_size: i3, auto_out_1_c_bits_source: i2, auto_out_1_c_bits_address: i32, auto_out_1_c_bits_data: i64, auto_out_1_c_bits_corrupt: i1, auto_out_1_d_ready: i1, auto_out_1_e_valid: i1, auto_out_1_e_bits_sink: i2, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_param: i3, auto_out_0_a_bits_size: i4, auto_out_0_a_bits_source: i2, auto_out_0_a_bits_address: i28, auto_out_0_a_bits_mask: i8, auto_out_0_a_bits_data: i64, auto_out_0_a_bits_corrupt: i1, auto_out_0_d_ready: i1) {sv.namehint = "fixer.auto_out_d_valid"}
    %fixer.auto_in_a_ready, %fixer.auto_in_b_valid, %fixer.auto_in_b_bits_param, %fixer.auto_in_b_bits_address, %fixer.auto_in_c_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_param, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_sink, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_a_bits_corrupt, %fixer.auto_out_b_ready, %fixer.auto_out_c_valid, %fixer.auto_out_c_bits_opcode, %fixer.auto_out_c_bits_param, %fixer.auto_out_c_bits_size, %fixer.auto_out_c_bits_source, %fixer.auto_out_c_bits_address, %fixer.auto_out_c_bits_data, %fixer.auto_out_c_bits_corrupt, %fixer.auto_out_d_ready, %fixer.auto_out_e_valid, %fixer.auto_out_e_bits_sink = hw.instance "fixer" @TLFIFOFixer(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %coupler_from_tile.auto_tl_out_a_valid: i1, auto_in_a_bits_opcode: %coupler_from_tile.auto_tl_out_a_bits_opcode: i3, auto_in_a_bits_param: %coupler_from_tile.auto_tl_out_a_bits_param: i3, auto_in_a_bits_size: %coupler_from_tile.auto_tl_out_a_bits_size: i4, auto_in_a_bits_source: %coupler_from_tile.auto_tl_out_a_bits_source: i2, auto_in_a_bits_address: %coupler_from_tile.auto_tl_out_a_bits_address: i32, auto_in_a_bits_mask: %coupler_from_tile.auto_tl_out_a_bits_mask: i8, auto_in_a_bits_data: %coupler_from_tile.auto_tl_out_a_bits_data: i64, auto_in_a_bits_corrupt: %coupler_from_tile.auto_tl_out_a_bits_corrupt: i1, auto_in_b_ready: %coupler_from_tile.auto_tl_out_b_ready: i1, auto_in_c_valid: %coupler_from_tile.auto_tl_out_c_valid: i1, auto_in_c_bits_opcode: %coupler_from_tile.auto_tl_out_c_bits_opcode: i3, auto_in_c_bits_param: %coupler_from_tile.auto_tl_out_c_bits_param: i3, auto_in_c_bits_size: %coupler_from_tile.auto_tl_out_c_bits_size: i4, auto_in_c_bits_source: %coupler_from_tile.auto_tl_out_c_bits_source: i2, auto_in_c_bits_address: %coupler_from_tile.auto_tl_out_c_bits_address: i32, auto_in_c_bits_data: %coupler_from_tile.auto_tl_out_c_bits_data: i64, auto_in_c_bits_corrupt: %coupler_from_tile.auto_tl_out_c_bits_corrupt: i1, auto_in_d_ready: %coupler_from_tile.auto_tl_out_d_ready: i1, auto_in_e_valid: %coupler_from_tile.auto_tl_out_e_valid: i1, auto_in_e_bits_sink: %coupler_from_tile.auto_tl_out_e_bits_sink: i2, auto_out_a_ready: %system_bus_xbar.auto_in_a_ready: i1, auto_out_b_valid: %system_bus_xbar.auto_in_b_valid: i1, auto_out_b_bits_param: %system_bus_xbar.auto_in_b_bits_param: i2, auto_out_b_bits_address: %system_bus_xbar.auto_in_b_bits_address: i32, auto_out_c_ready: %system_bus_xbar.auto_in_c_ready: i1, auto_out_d_valid: %system_bus_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %system_bus_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %system_bus_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %system_bus_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %system_bus_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %system_bus_xbar.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %system_bus_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %system_bus_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %system_bus_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "fixer.auto_in_d_valid"}
    %coupler_to_bus_named_subsystem_cbus.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_sink, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_d_ready = hw.instance "coupler_to_bus_named_subsystem_cbus" @TLInterconnectCoupler(auto_widget_in_a_valid: %system_bus_xbar.auto_out_0_a_valid: i1, auto_widget_in_a_bits_opcode: %system_bus_xbar.auto_out_0_a_bits_opcode: i3, auto_widget_in_a_bits_param: %system_bus_xbar.auto_out_0_a_bits_param: i3, auto_widget_in_a_bits_size: %system_bus_xbar.auto_out_0_a_bits_size: i4, auto_widget_in_a_bits_source: %system_bus_xbar.auto_out_0_a_bits_source: i2, auto_widget_in_a_bits_address: %system_bus_xbar.auto_out_0_a_bits_address: i28, auto_widget_in_a_bits_mask: %system_bus_xbar.auto_out_0_a_bits_mask: i8, auto_widget_in_a_bits_data: %system_bus_xbar.auto_out_0_a_bits_data: i64, auto_widget_in_a_bits_corrupt: %system_bus_xbar.auto_out_0_a_bits_corrupt: i1, auto_widget_in_d_ready: %system_bus_xbar.auto_out_0_d_ready: i1, auto_bus_xing_out_a_ready: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready: i1, auto_bus_xing_out_d_valid: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid: i1, auto_bus_xing_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode: i3, auto_bus_xing_out_d_bits_param: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param: i2, auto_bus_xing_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size: i4, auto_bus_xing_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source: i2, auto_bus_xing_out_d_bits_sink: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink: i1, auto_bus_xing_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied: i1, auto_bus_xing_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data: i64, auto_bus_xing_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_param: i2, auto_widget_in_d_bits_size: i4, auto_widget_in_d_bits_source: i2, auto_widget_in_d_bits_sink: i1, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_bus_xing_out_a_valid: i1, auto_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_out_a_bits_param: i3, auto_bus_xing_out_a_bits_size: i4, auto_bus_xing_out_a_bits_source: i2, auto_bus_xing_out_a_bits_address: i28, auto_bus_xing_out_a_bits_mask: i8, auto_bus_xing_out_a_bits_data: i64, auto_bus_xing_out_a_bits_corrupt: i1, auto_bus_xing_out_d_ready: i1) {sv.namehint = "coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid"}
    %coupler_to_bus_named_subsystem_l2.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_in_c_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_sink, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_mask, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_b_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_d_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_bits_sink = hw.instance "coupler_to_bus_named_subsystem_l2" @TLInterconnectCoupler_2(auto_widget_in_a_valid: %system_bus_xbar.auto_out_1_a_valid: i1, auto_widget_in_a_bits_opcode: %system_bus_xbar.auto_out_1_a_bits_opcode: i3, auto_widget_in_a_bits_param: %system_bus_xbar.auto_out_1_a_bits_param: i3, auto_widget_in_a_bits_size: %system_bus_xbar.auto_out_1_a_bits_size: i3, auto_widget_in_a_bits_source: %system_bus_xbar.auto_out_1_a_bits_source: i2, auto_widget_in_a_bits_address: %system_bus_xbar.auto_out_1_a_bits_address: i32, auto_widget_in_a_bits_mask: %system_bus_xbar.auto_out_1_a_bits_mask: i8, auto_widget_in_a_bits_data: %system_bus_xbar.auto_out_1_a_bits_data: i64, auto_widget_in_a_bits_corrupt: %system_bus_xbar.auto_out_1_a_bits_corrupt: i1, auto_widget_in_b_ready: %system_bus_xbar.auto_out_1_b_ready: i1, auto_widget_in_c_valid: %system_bus_xbar.auto_out_1_c_valid: i1, auto_widget_in_c_bits_opcode: %system_bus_xbar.auto_out_1_c_bits_opcode: i3, auto_widget_in_c_bits_param: %system_bus_xbar.auto_out_1_c_bits_param: i3, auto_widget_in_c_bits_size: %system_bus_xbar.auto_out_1_c_bits_size: i3, auto_widget_in_c_bits_source: %system_bus_xbar.auto_out_1_c_bits_source: i2, auto_widget_in_c_bits_address: %system_bus_xbar.auto_out_1_c_bits_address: i32, auto_widget_in_c_bits_data: %system_bus_xbar.auto_out_1_c_bits_data: i64, auto_widget_in_c_bits_corrupt: %system_bus_xbar.auto_out_1_c_bits_corrupt: i1, auto_widget_in_d_ready: %system_bus_xbar.auto_out_1_d_ready: i1, auto_widget_in_e_valid: %system_bus_xbar.auto_out_1_e_valid: i1, auto_widget_in_e_bits_sink: %system_bus_xbar.auto_out_1_e_bits_sink: i2, auto_widget_out_a_ready: %auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready: i1, auto_widget_out_b_valid: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid: i1, auto_widget_out_b_bits_param: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param: i2, auto_widget_out_b_bits_address: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address: i32, auto_widget_out_c_ready: %auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready: i1, auto_widget_out_d_valid: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid: i1, auto_widget_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode: i3, auto_widget_out_d_bits_param: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param: i2, auto_widget_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size: i3, auto_widget_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source: i2, auto_widget_out_d_bits_sink: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink: i2, auto_widget_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied: i1, auto_widget_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data: i64, auto_widget_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_b_valid: i1, auto_widget_in_b_bits_param: i2, auto_widget_in_b_bits_address: i32, auto_widget_in_c_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_param: i2, auto_widget_in_d_bits_size: i3, auto_widget_in_d_bits_source: i2, auto_widget_in_d_bits_sink: i2, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_widget_out_a_valid: i1, auto_widget_out_a_bits_opcode: i3, auto_widget_out_a_bits_param: i3, auto_widget_out_a_bits_size: i3, auto_widget_out_a_bits_source: i2, auto_widget_out_a_bits_address: i32, auto_widget_out_a_bits_mask: i8, auto_widget_out_a_bits_data: i64, auto_widget_out_a_bits_corrupt: i1, auto_widget_out_b_ready: i1, auto_widget_out_c_valid: i1, auto_widget_out_c_bits_opcode: i3, auto_widget_out_c_bits_param: i3, auto_widget_out_c_bits_size: i3, auto_widget_out_c_bits_source: i2, auto_widget_out_c_bits_address: i32, auto_widget_out_c_bits_data: i64, auto_widget_out_c_bits_corrupt: i1, auto_widget_out_d_ready: i1, auto_widget_out_e_valid: i1, auto_widget_out_e_bits_sink: i2) {sv.namehint = "coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid"}
    %coupler_from_tile.auto_tl_master_clock_xing_in_a_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_b_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_address, %coupler_from_tile.auto_tl_master_clock_xing_in_c_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_d_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_opcode, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_size, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_source, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_sink, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_denied, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_data, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_corrupt, %coupler_from_tile.auto_tl_out_a_valid, %coupler_from_tile.auto_tl_out_a_bits_opcode, %coupler_from_tile.auto_tl_out_a_bits_param, %coupler_from_tile.auto_tl_out_a_bits_size, %coupler_from_tile.auto_tl_out_a_bits_source, %coupler_from_tile.auto_tl_out_a_bits_address, %coupler_from_tile.auto_tl_out_a_bits_mask, %coupler_from_tile.auto_tl_out_a_bits_data, %coupler_from_tile.auto_tl_out_a_bits_corrupt, %coupler_from_tile.auto_tl_out_b_ready, %coupler_from_tile.auto_tl_out_c_valid, %coupler_from_tile.auto_tl_out_c_bits_opcode, %coupler_from_tile.auto_tl_out_c_bits_param, %coupler_from_tile.auto_tl_out_c_bits_size, %coupler_from_tile.auto_tl_out_c_bits_source, %coupler_from_tile.auto_tl_out_c_bits_address, %coupler_from_tile.auto_tl_out_c_bits_data, %coupler_from_tile.auto_tl_out_c_bits_corrupt, %coupler_from_tile.auto_tl_out_d_ready, %coupler_from_tile.auto_tl_out_e_valid, %coupler_from_tile.auto_tl_out_e_bits_sink = hw.instance "coupler_from_tile" @TLInterconnectCoupler_3(auto_tl_master_clock_xing_in_a_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_a_valid: i1, auto_tl_master_clock_xing_in_a_bits_opcode: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode: i3, auto_tl_master_clock_xing_in_a_bits_param: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param: i3, auto_tl_master_clock_xing_in_a_bits_size: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size: i4, auto_tl_master_clock_xing_in_a_bits_source: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source: i2, auto_tl_master_clock_xing_in_a_bits_address: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address: i32, auto_tl_master_clock_xing_in_a_bits_mask: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask: i8, auto_tl_master_clock_xing_in_a_bits_data: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data: i64, auto_tl_master_clock_xing_in_a_bits_corrupt: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt: i1, auto_tl_master_clock_xing_in_b_ready: %auto_coupler_from_tile_tl_master_clock_xing_in_b_ready: i1, auto_tl_master_clock_xing_in_c_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_c_valid: i1, auto_tl_master_clock_xing_in_c_bits_opcode: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode: i3, auto_tl_master_clock_xing_in_c_bits_param: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param: i3, auto_tl_master_clock_xing_in_c_bits_size: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size: i4, auto_tl_master_clock_xing_in_c_bits_source: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source: i2, auto_tl_master_clock_xing_in_c_bits_address: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address: i32, auto_tl_master_clock_xing_in_c_bits_data: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data: i64, auto_tl_master_clock_xing_in_c_bits_corrupt: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt: i1, auto_tl_master_clock_xing_in_d_ready: %auto_coupler_from_tile_tl_master_clock_xing_in_d_ready: i1, auto_tl_master_clock_xing_in_e_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_e_valid: i1, auto_tl_master_clock_xing_in_e_bits_sink: %auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink: i2, auto_tl_out_a_ready: %fixer.auto_in_a_ready: i1, auto_tl_out_b_valid: %fixer.auto_in_b_valid: i1, auto_tl_out_b_bits_param: %fixer.auto_in_b_bits_param: i2, auto_tl_out_b_bits_address: %fixer.auto_in_b_bits_address: i32, auto_tl_out_c_ready: %fixer.auto_in_c_ready: i1, auto_tl_out_d_valid: %fixer.auto_in_d_valid: i1, auto_tl_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_tl_out_d_bits_param: %fixer.auto_in_d_bits_param: i2, auto_tl_out_d_bits_size: %fixer.auto_in_d_bits_size: i4, auto_tl_out_d_bits_source: %fixer.auto_in_d_bits_source: i2, auto_tl_out_d_bits_sink: %fixer.auto_in_d_bits_sink: i2, auto_tl_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_tl_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_tl_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_tl_master_clock_xing_in_a_ready: i1, auto_tl_master_clock_xing_in_b_valid: i1, auto_tl_master_clock_xing_in_b_bits_param: i2, auto_tl_master_clock_xing_in_b_bits_address: i32, auto_tl_master_clock_xing_in_c_ready: i1, auto_tl_master_clock_xing_in_d_valid: i1, auto_tl_master_clock_xing_in_d_bits_opcode: i3, auto_tl_master_clock_xing_in_d_bits_param: i2, auto_tl_master_clock_xing_in_d_bits_size: i4, auto_tl_master_clock_xing_in_d_bits_source: i2, auto_tl_master_clock_xing_in_d_bits_sink: i2, auto_tl_master_clock_xing_in_d_bits_denied: i1, auto_tl_master_clock_xing_in_d_bits_data: i64, auto_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_tl_out_a_valid: i1, auto_tl_out_a_bits_opcode: i3, auto_tl_out_a_bits_param: i3, auto_tl_out_a_bits_size: i4, auto_tl_out_a_bits_source: i2, auto_tl_out_a_bits_address: i32, auto_tl_out_a_bits_mask: i8, auto_tl_out_a_bits_data: i64, auto_tl_out_a_bits_corrupt: i1, auto_tl_out_b_ready: i1, auto_tl_out_c_valid: i1, auto_tl_out_c_bits_opcode: i3, auto_tl_out_c_bits_param: i3, auto_tl_out_c_bits_size: i4, auto_tl_out_c_bits_source: i2, auto_tl_out_c_bits_address: i32, auto_tl_out_c_bits_data: i64, auto_tl_out_c_bits_corrupt: i1, auto_tl_out_d_ready: i1, auto_tl_out_e_valid: i1, auto_tl_out_e_bits_sink: i2) {sv.namehint = "coupler_from_tile.auto_tl_out_e_valid"}
    %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_strb, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_last, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_b_ready, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_r_ready, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_a_ready, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_opcode, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_source, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_denied, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_corrupt = hw.instance "coupler_to_port_named_mmio_port_axi4" @TLInterconnectCoupler_4(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_axi4buf_out_aw_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready: i1, auto_axi4buf_out_w_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready: i1, auto_axi4buf_out_b_valid: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid: i1, auto_axi4buf_out_b_bits_id: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id: i4, auto_axi4buf_out_b_bits_resp: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp: i2, auto_axi4buf_out_ar_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready: i1, auto_axi4buf_out_r_valid: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid: i1, auto_axi4buf_out_r_bits_id: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id: i4, auto_axi4buf_out_r_bits_data: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data: i64, auto_axi4buf_out_r_bits_resp: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp: i2, auto_axi4buf_out_r_bits_last: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last: i1, auto_tl_in_a_valid: %system_bus_xbar.auto_out_2_a_valid: i1, auto_tl_in_a_bits_opcode: %system_bus_xbar.auto_out_2_a_bits_opcode: i3, auto_tl_in_a_bits_param: %system_bus_xbar.auto_out_2_a_bits_param: i3, auto_tl_in_a_bits_size: %system_bus_xbar.auto_out_2_a_bits_size: i4, auto_tl_in_a_bits_source: %system_bus_xbar.auto_out_2_a_bits_source: i2, auto_tl_in_a_bits_address: %system_bus_xbar.auto_out_2_a_bits_address: i31, auto_tl_in_a_bits_mask: %system_bus_xbar.auto_out_2_a_bits_mask: i8, auto_tl_in_a_bits_data: %system_bus_xbar.auto_out_2_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %system_bus_xbar.auto_out_2_a_bits_corrupt: i1, auto_tl_in_d_ready: %system_bus_xbar.auto_out_2_d_ready: i1) -> (auto_axi4buf_out_aw_valid: i1, auto_axi4buf_out_aw_bits_id: i4, auto_axi4buf_out_aw_bits_addr: i31, auto_axi4buf_out_aw_bits_len: i8, auto_axi4buf_out_aw_bits_size: i3, auto_axi4buf_out_aw_bits_burst: i2, auto_axi4buf_out_aw_bits_lock: i1, auto_axi4buf_out_aw_bits_cache: i4, auto_axi4buf_out_aw_bits_prot: i3, auto_axi4buf_out_aw_bits_qos: i4, auto_axi4buf_out_w_valid: i1, auto_axi4buf_out_w_bits_data: i64, auto_axi4buf_out_w_bits_strb: i8, auto_axi4buf_out_w_bits_last: i1, auto_axi4buf_out_b_ready: i1, auto_axi4buf_out_ar_valid: i1, auto_axi4buf_out_ar_bits_id: i4, auto_axi4buf_out_ar_bits_addr: i31, auto_axi4buf_out_ar_bits_len: i8, auto_axi4buf_out_ar_bits_size: i3, auto_axi4buf_out_ar_bits_burst: i2, auto_axi4buf_out_ar_bits_lock: i1, auto_axi4buf_out_ar_bits_cache: i4, auto_axi4buf_out_ar_bits_prot: i3, auto_axi4buf_out_ar_bits_qos: i4, auto_axi4buf_out_r_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i4, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_denied: i1, auto_tl_in_d_bits_data: i64, auto_tl_in_d_bits_corrupt: i1) {sv.namehint = "coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid"}
    hw.output %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_strb, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_last, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_b_ready, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_r_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_a_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_b_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_address, %coupler_from_tile.auto_tl_master_clock_xing_in_c_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_d_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_opcode, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_size, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_source, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_sink, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_denied, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_data, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_mask, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_b_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_d_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_bits_sink, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_d_ready, %fixedClockNode.auto_out_2_clock, %fixedClockNode.auto_out_2_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_reset : i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator_1(in %auto_in_member_subsystem_pbus_0_clock : !seq.clock, in %auto_in_member_subsystem_pbus_0_reset : i1, out auto_out_member_subsystem_pbus_0_clock : !seq.clock, out auto_out_member_subsystem_pbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_pbus_0_clock, %auto_in_member_subsystem_pbus_0_reset : !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast_1(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_clock : !seq.clock, out auto_out_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset : !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator_3(in %auto_in_member_subsystem_cbus_1_clock : !seq.clock, in %auto_in_member_subsystem_cbus_1_reset : i1, in %auto_in_member_subsystem_cbus_0_clock : !seq.clock, in %auto_in_member_subsystem_cbus_0_reset : i1, out auto_out_1_member_subsystem_pbus_0_clock : !seq.clock, out auto_out_1_member_subsystem_pbus_0_reset : i1, out auto_out_0_member_subsystem_cbus_0_clock : !seq.clock, out auto_out_0_member_subsystem_cbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_cbus_1_clock, %auto_in_member_subsystem_cbus_1_reset, %auto_in_member_subsystem_cbus_0_clock, %auto_in_member_subsystem_cbus_0_reset : !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast_3(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_3_clock : !seq.clock, out auto_out_3_reset : i1, out auto_out_1_clock : !seq.clock, out auto_out_1_reset : i1, out auto_out_0_clock : !seq.clock, out auto_out_0_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @TLMonitor_3(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i23 = hw.constant 0 : i23
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %8 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %10 = comb.xor bin %9, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %11 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %12 = comb.and bin %11, %10 : i12
    %13 = comb.icmp bin eq %12, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %62 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %63 = comb.xor bin %62, %c-1_i2 : i2
    %64 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %65 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %66 = comb.xor bin %65, %true : i1
    %67 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %68 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %69 = comb.xor bin %68, %c-512_i10 : i10
    %70 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %71 = comb.xor bin %reset, %true : i1
    %72 = comb.and bin %io_in_a_valid, %59, %71 : i1
    %73 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %74 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %61, %63 : i14, i2
    %77 = comb.icmp bin eq %76, %c0_i16 : i16
    %78 = comb.concat %64, %66 : i11, i1
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.concat %67, %69 : i2, i10
    %81 = comb.icmp bin eq %80, %c0_i12 : i12
    %82 = comb.icmp eq %70, %c-1_i2 : i2
    %83 = comb.or bin %75, %77, %79, %81, %82 : i1
    %84 = comb.and bin %60, %83 : i1
    %85 = comb.and bin %3, %73, %84 : i1
    %86 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %87 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %88 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %89 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %90 = comb.and bin %io_in_a_valid, %89, %71 : i1
    %91 = comb.and bin %3, %73, %84 : i1
    %92 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %93 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %94 = comb.or bin %3, %4, %5 : i1
    %95 = comb.and bin %60, %94 : i1
    %96 = comb.and bin %io_in_a_valid, %93, %71 : i1
    %97 = comb.and bin %60, %77 : i1
    %98 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %99 = comb.or bin %75, %79, %81, %82 : i1
    %100 = comb.and bin %98, %99 : i1
    %101 = comb.or bin %97, %100 : i1
    %102 = comb.xor bin %92, %true : i1
    %103 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %104 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %105 = comb.or bin %75, %81, %82 : i1
    %106 = comb.and bin %98, %105 : i1
    %107 = comb.or bin %97, %106 : i1
    %108 = comb.and bin %95, %107 : i1
    %109 = comb.and bin %io_in_a_valid, %104, %71 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %111 = comb.and bin %io_in_a_valid, %110, %71 : i1
    %112 = comb.xor bin %58, %c-1_i8 : i8
    %113 = comb.and bin %io_in_a_bits_mask, %112 : i8
    %114 = comb.icmp bin eq %113, %c0_i8 : i8
    %115 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %116 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %117 = comb.and bin %95, %116, %77 : i1
    %118 = comb.and bin %io_in_a_valid, %115, %71 : i1
    %119 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %120 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %121 = comb.and bin %io_in_a_valid, %120, %71 : i1
    %122 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %123 = comb.xor bin %122, %true : i1
    %124 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %125 = comb.and bin %95, %97 : i1
    %126 = comb.and bin %io_in_a_valid, %124, %71 : i1
    %127 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %128 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %129 = comb.and bin %io_in_d_valid, %71 : i1
    %130 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %131 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %132 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %133 = comb.or bin %130, %131, %132 {sv.namehint = "source_ok_1"} : i1
    %134 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %135 = comb.and bin %io_in_d_valid, %134, %71 : i1
    %136 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %137 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %138 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %139 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %140 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %141 = comb.and bin %io_in_d_valid, %140, %71 : i1
    %142 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %143 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %144 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %145 = comb.and bin %io_in_d_valid, %144, %71 : i1
    %146 = comb.or bin %139, %io_in_d_bits_corrupt : i1
    %147 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %148 = comb.and bin %io_in_d_valid, %147, %71 : i1
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %150 = comb.and bin %io_in_d_valid, %149, %71 : i1
    %151 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %152 = comb.and bin %io_in_d_valid, %151, %71 : i1
    %153 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %154 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %155 = comb.extract %154 from 3 : (i27) -> i9
    %156 = comb.xor bin %155, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %157 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %158 = comb.mux bin %157, %c0_i9, %156 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %163 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %159 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %160 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %161 = comb.xor bin %160, %true {sv.namehint = "a_first"} : i1
    %162 = comb.mux bin %160, %159, %158 {sv.namehint = "_a_first_counter_T"} : i9
    %163 = comb.mux bin %153, %162, %a_first_counter : i9
    %opcode = seq.firreg %171 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %172 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %173 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %174 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %175 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %164 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %165 = comb.and bin %io_in_a_valid, %160, %71 : i1
    %166 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %167 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %168 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %169 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %170 = comb.and bin %153, %161 : i1
    %171 = comb.mux bin %170, %io_in_a_bits_opcode, %opcode : i3
    %172 = comb.mux bin %170, %io_in_a_bits_param, %param : i3
    %173 = comb.mux bin %170, %io_in_a_bits_size, %size : i4
    %174 = comb.mux bin %170, %io_in_a_bits_source, %source : i2
    %175 = comb.mux bin %170, %io_in_a_bits_address, %address : i28
    %176 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %177 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %178 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %179 = comb.extract %178 from 3 : (i27) -> i9
    %180 = comb.xor bin %179, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %181 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %182 = comb.mux bin %181, %180, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %187 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %183 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %184 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %185 = comb.xor bin %184, %true {sv.namehint = "d_first"} : i1
    %186 = comb.mux bin %184, %183, %182 {sv.namehint = "_d_first_counter_T"} : i9
    %187 = comb.mux bin %176, %186, %d_first_counter : i9
    %opcode_1 = seq.firreg %196 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %197 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %198 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %199 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %200 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %201 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %189 = comb.and bin %io_in_d_valid, %184, %71 : i1
    %190 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %191 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %192 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %193 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %194 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %195 = comb.and bin %176, %185 : i1
    %196 = comb.mux bin %195, %io_in_d_bits_opcode, %opcode_1 : i3
    %197 = comb.mux bin %195, %io_in_d_bits_param, %param_1 : i2
    %198 = comb.mux bin %195, %io_in_d_bits_size, %size_1 : i4
    %199 = comb.mux bin %195, %io_in_d_bits_source, %source_1 : i2
    %200 = comb.mux bin %195, %io_in_d_bits_sink, %sink : i1
    %201 = comb.mux bin %195, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %295 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %298 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %301 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %202 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %203 = comb.extract %202 from 3 : (i27) -> i9
    %204 = comb.xor bin %203, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %205 = comb.mux bin %157, %c0_i9, %204 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %209 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %206 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %207 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %208 = comb.mux bin %207, %205, %206 {sv.namehint = "_a_first_counter_T_1"} : i9
    %209 = comb.mux bin %153, %208, %a_first_counter_1 : i9
    %210 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %211 = comb.extract %210 from 3 : (i27) -> i9
    %212 = comb.xor bin %211, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %213 = comb.mux bin %181, %212, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %217 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %214 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %215 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %216 = comb.mux bin %215, %213, %214 {sv.namehint = "_d_first_counter_T_1"} : i9
    %217 = comb.mux bin %176, %216, %d_first_counter_1 : i9
    %218 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %219 = comb.shru bin %inflight_opcodes, %218 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %220 = comb.extract %219 from 1 : (i12) -> i3
    %221 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %222 = comb.shru bin %inflight_sizes, %221 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %223 = comb.extract %222 from 1 : (i24) -> i7
    %224 = comb.concat %false, %223 {sv.namehint = "a_size_lookup"} : i1, i7
    %225 = comb.and bin %153, %207 : i1
    %226 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %227 = comb.shl bin %c1_i4, %226 {sv.namehint = "_a_set_T"} : i4
    %228 = comb.extract %227 from 0 : (i4) -> i3
    %229 = comb.mux bin %225, %228, %c0_i3 {sv.namehint = "a_set"} : i3
    %230 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %231 = comb.mux bin %225, %230, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %232 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %233 = comb.mux bin %225, %232, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %234 = comb.concat %c0_i31, %231 : i31, i4
    %235 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %236 = comb.shl bin %234, %235 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %237 = comb.extract %236 from 0 : (i35) -> i12
    %238 = comb.mux bin %225, %237, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %239 = comb.concat %c0_i31, %233 : i31, i5
    %240 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %241 = comb.shl bin %239, %240 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %242 = comb.extract %241 from 0 : (i36) -> i24
    %243 = comb.mux bin %225, %242, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %244 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %245 = comb.shru bin %inflight, %244 : i3
    %246 = comb.extract %245 from 0 : (i3) -> i1
    %247 = comb.xor bin %246, %true : i1
    %248 = comb.and bin %225, %71 : i1
    %249 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %250 = comb.and bin %io_in_d_valid, %215 : i1
    %251 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %252 = comb.and bin %176, %215, %251 : i1
    %253 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %254 = comb.shl bin %c1_i4, %253 {sv.namehint = "_d_clr_T"} : i4
    %255 = comb.extract %254 from 0 : (i4) -> i3
    %256 = comb.mux bin %252, %255, %c0_i3 {sv.namehint = "d_clr"} : i3
    %257 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %258 = comb.shl bin %c15_i47, %257 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %259 = comb.extract %258 from 0 : (i47) -> i12
    %260 = comb.mux bin %252, %259, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %261 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %262 = comb.shl bin %c255_i47, %261 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %263 = comb.extract %262 from 0 : (i47) -> i24
    %264 = comb.mux bin %252, %263, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %265 = comb.and bin %250, %251 : i1
    %266 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %267 = comb.and bin %io_in_a_valid, %207, %266 {sv.namehint = "same_cycle_resp"} : i1
    %268 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %269 = comb.shru bin %inflight, %268 : i3
    %270 = comb.extract %269 from 0 : (i3) -> i1
    %271 = comb.or bin %270, %267 : i1
    %272 = comb.and bin %265, %71 : i1
    %273 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %274 = comb.icmp bin eq %io_in_d_bits_opcode, %273 : i3
    %275 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %276 = comb.icmp bin eq %io_in_d_bits_opcode, %275 : i3
    %277 = comb.or bin %274, %276 : i1
    %278 = comb.and bin %265, %267, %71 : i1
    %279 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %280 = comb.xor bin %267, %true : i1
    %281 = hw.array_get %1[%220] : !hw.array<8xi3>, i3
    %282 = comb.icmp bin eq %io_in_d_bits_opcode, %281 : i3
    %283 = hw.array_get %0[%220] : !hw.array<8xi3>, i3
    %284 = comb.icmp bin eq %io_in_d_bits_opcode, %283 : i3
    %285 = comb.or bin %282, %284 : i1
    %286 = comb.and bin %265, %280, %71 : i1
    %287 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %288 = comb.icmp bin eq %287, %224 : i8
    %289 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %290 = comb.xor bin %io_in_d_ready, %true : i1
    %291 = comb.or bin %290, %io_in_a_ready : i1
    %292 = comb.and bin %250, %207, %io_in_a_valid, %289, %251, %71 : i1
    %293 = comb.or bin %inflight, %229 {sv.namehint = "_inflight_T"} : i3
    %294 = comb.xor bin %256, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %295 = comb.and bin %293, %294 {sv.namehint = "_inflight_T_2"} : i3
    %296 = comb.or bin %inflight_opcodes, %238 {sv.namehint = "_inflight_opcodes_T"} : i12
    %297 = comb.xor bin %260, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %298 = comb.and bin %296, %297 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %299 = comb.or bin %inflight_sizes, %243 {sv.namehint = "_inflight_sizes_T"} : i24
    %300 = comb.xor bin %264, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %301 = comb.and bin %299, %300 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %308 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %302 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %303 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %304 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %305 = comb.or bin %302, %303, %304 : i1
    %306 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %307 = comb.or bin %153, %176 : i1
    %308 = comb.mux bin %307, %c0_i32, %306 : i32
    %inflight_1 = seq.firreg %332 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %334 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %309 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %310 = comb.extract %309 from 3 : (i27) -> i9
    %311 = comb.xor bin %310, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %312 = comb.mux bin %181, %311, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %316 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %313 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %314 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %315 = comb.mux bin %314, %312, %313 {sv.namehint = "_d_first_counter_T_2"} : i9
    %316 = comb.mux bin %176, %315, %d_first_counter_2 : i9
    %317 = comb.shru bin %inflight_sizes_1, %221 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %318 = comb.extract %317 from 1 : (i24) -> i7
    %319 = comb.concat %false, %318 {sv.namehint = "c_size_lookup"} : i1, i7
    %320 = comb.and bin %176, %314, %249 : i1
    %321 = comb.shl bin %c1_i4, %253 {sv.namehint = "_d_clr_T_1"} : i4
    %322 = comb.extract %321 from 0 : (i4) -> i3
    %323 = comb.mux bin %320, %322, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %324 = comb.shl bin %c255_i47, %261 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %325 = comb.extract %324 from 0 : (i47) -> i24
    %326 = comb.mux bin %320, %325, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %327 = comb.shru bin %inflight_1, %268 : i3
    %328 = comb.extract %327 from 0 : (i3) -> i1
    %329 = comb.and bin %io_in_d_valid, %314, %249, %71 : i1
    %330 = comb.icmp bin eq %287, %319 : i8
    %331 = comb.xor bin %323, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %332 = comb.and bin %inflight_1, %331 {sv.namehint = "_inflight_T_5"} : i3
    %333 = comb.xor bin %326, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %334 = comb.and bin %inflight_sizes_1, %333 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %340 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %335 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %336 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %337 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %338 = comb.or bin %335, %336, %337 : i1
    sv.always posedge %2 {
      sv.if %72 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %72 {
        sv.assert %85, immediate label "assert__assert_3"
      }
      sv.if %72 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %72 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %72 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %72 {
        sv.assert %86, immediate label "assert__assert_7"
      }
      sv.if %72 {
        sv.assert %87, immediate label "assert__assert_8"
      }
      sv.if %72 {
        sv.assert %88, immediate label "assert__assert_9"
      }
      sv.if %90 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %90 {
        sv.assert %91, immediate label "assert__assert_11"
      }
      sv.if %90 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %90 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %90 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %90 {
        sv.assert %86, immediate label "assert__assert_15"
      }
      sv.if %90 {
        sv.assert %92, immediate label "assert__assert_16"
      }
      sv.if %90 {
        sv.assert %87, immediate label "assert__assert_17"
      }
      sv.if %90 {
        sv.assert %88, immediate label "assert__assert_18"
      }
      sv.if %96 {
        sv.assert %95, immediate label "assert__assert_19"
      }
      sv.if %96 {
        sv.assert %101, immediate label "assert__assert_20"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %96 {
        sv.assert %102, immediate label "assert__assert_23"
      }
      sv.if %96 {
        sv.assert %103, immediate label "assert__assert_24"
      }
      sv.if %96 {
        sv.assert %88, immediate label "assert__assert_25"
      }
      sv.if %109 {
        sv.assert %108, immediate label "assert__assert_26"
      }
      sv.if %109 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %109 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %109 {
        sv.assert %102, immediate label "assert__assert_29"
      }
      sv.if %109 {
        sv.assert %103, immediate label "assert__assert_30"
      }
      sv.if %111 {
        sv.assert %108, immediate label "assert__assert_31"
      }
      sv.if %111 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %111 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %111 {
        sv.assert %102, immediate label "assert__assert_34"
      }
      sv.if %111 {
        sv.assert %114, immediate label "assert__assert_35"
      }
      sv.if %118 {
        sv.assert %117, immediate label "assert__assert_36"
      }
      sv.if %118 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %118 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %118 {
        sv.assert %119, immediate label "assert__assert_39"
      }
      sv.if %118 {
        sv.assert %103, immediate label "assert__assert_40"
      }
      sv.if %121 {
        sv.assert %117, immediate label "assert__assert_41"
      }
      sv.if %121 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %121 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %121 {
        sv.assert %123, immediate label "assert__assert_44"
      }
      sv.if %121 {
        sv.assert %103, immediate label "assert__assert_45"
      }
      sv.if %126 {
        sv.assert %125, immediate label "assert__assert_46"
      }
      sv.if %126 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %126 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %126 {
        sv.assert %127, immediate label "assert__assert_49"
      }
      sv.if %126 {
        sv.assert %103, immediate label "assert__assert_50"
      }
      sv.if %126 {
        sv.assert %88, immediate label "assert__assert_51"
      }
      sv.if %129 {
        sv.assert %128, immediate label "assert__assert_52"
      }
      sv.if %135 {
        sv.assert %133, immediate label "assert__assert_53"
      }
      sv.if %135 {
        sv.assert %136, immediate label "assert__assert_54"
      }
      sv.if %135 {
        sv.assert %137, immediate label "assert__assert_55"
      }
      sv.if %135 {
        sv.assert %138, immediate label "assert__assert_56"
      }
      sv.if %135 {
        sv.assert %139, immediate label "assert__assert_57"
      }
      sv.if %141 {
        sv.assert %133, immediate label "assert__assert_58"
      }
      sv.if %141 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %141 {
        sv.assert %136, immediate label "assert__assert_60"
      }
      sv.if %141 {
        sv.assert %142, immediate label "assert__assert_61"
      }
      sv.if %141 {
        sv.assert %143, immediate label "assert__assert_62"
      }
      sv.if %141 {
        sv.assert %138, immediate label "assert__assert_63"
      }
      sv.if %145 {
        sv.assert %133, immediate label "assert__assert_65"
      }
      sv.if %145 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %145 {
        sv.assert %136, immediate label "assert__assert_67"
      }
      sv.if %145 {
        sv.assert %142, immediate label "assert__assert_68"
      }
      sv.if %145 {
        sv.assert %143, immediate label "assert__assert_69"
      }
      sv.if %145 {
        sv.assert %146, immediate label "assert__assert_70"
      }
      sv.if %148 {
        sv.assert %133, immediate label "assert__assert_72"
      }
      sv.if %148 {
        sv.assert %137, immediate label "assert__assert_73"
      }
      sv.if %148 {
        sv.assert %138, immediate label "assert__assert_74"
      }
      sv.if %150 {
        sv.assert %133, immediate label "assert__assert_76"
      }
      sv.if %150 {
        sv.assert %137, immediate label "assert__assert_77"
      }
      sv.if %150 {
        sv.assert %146, immediate label "assert__assert_78"
      }
      sv.if %152 {
        sv.assert %133, immediate label "assert__assert_80"
      }
      sv.if %152 {
        sv.assert %137, immediate label "assert__assert_81"
      }
      sv.if %152 {
        sv.assert %138, immediate label "assert__assert_82"
      }
      sv.if %165 {
        sv.assert %164, immediate label "assert__assert_87"
      }
      sv.if %165 {
        sv.assert %166, immediate label "assert__assert_88"
      }
      sv.if %165 {
        sv.assert %167, immediate label "assert__assert_89"
      }
      sv.if %165 {
        sv.assert %168, immediate label "assert__assert_90"
      }
      sv.if %165 {
        sv.assert %169, immediate label "assert__assert_91"
      }
      sv.if %189 {
        sv.assert %188, immediate label "assert__assert_92"
      }
      sv.if %189 {
        sv.assert %190, immediate label "assert__assert_93"
      }
      sv.if %189 {
        sv.assert %191, immediate label "assert__assert_94"
      }
      sv.if %189 {
        sv.assert %192, immediate label "assert__assert_95"
      }
      sv.if %189 {
        sv.assert %193, immediate label "assert__assert_96"
      }
      sv.if %189 {
        sv.assert %194, immediate label "assert__assert_97"
      }
      sv.if %248 {
        sv.assert %247, immediate label "assert__assert_98"
      }
      sv.if %272 {
        sv.assert %271, immediate label "assert__assert_99"
      }
      sv.if %278 {
        sv.assert %277, immediate label "assert__assert_100"
      }
      sv.if %278 {
        sv.assert %279, immediate label "assert__assert_101"
      }
      sv.if %286 {
        sv.assert %285, immediate label "assert__assert_102"
      }
      sv.if %286 {
        sv.assert %288, immediate label "assert__assert_103"
      }
      sv.if %292 {
        sv.assert %291, immediate label "assert__assert_104"
      }
      sv.if %71 {
        sv.assert %305, immediate label "assert__assert_105"
      }
      sv.if %329 {
        sv.assert %328, immediate label "assert__assert_107"
      }
      sv.if %329 {
        sv.assert %330, immediate label "assert__assert_109"
      }
      sv.if %71 {
        sv.assert %338, immediate label "assert__assert_111"
      }
    }
    %339 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %340 = comb.mux bin %176, %c0_i32, %339 : i32
    hw.output
  }
  hw.module private @TLFIFOFixer_2(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i1, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLXbar_4(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLXbar_5(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_4_a_ready : i1, out auto_out_4_a_valid : i1, out auto_out_4_a_bits_opcode : i3, out auto_out_4_a_bits_param : i3, out auto_out_4_a_bits_size : i3, out auto_out_4_a_bits_source : i2, out auto_out_4_a_bits_address : i17, out auto_out_4_a_bits_mask : i8, out auto_out_4_a_bits_corrupt : i1, out auto_out_4_d_ready : i1, in %auto_out_4_d_valid : i1, in %auto_out_4_d_bits_size : i3, in %auto_out_4_d_bits_source : i2, in %auto_out_4_d_bits_data : i64, in %auto_out_3_a_ready : i1, out auto_out_3_a_valid : i1, out auto_out_3_a_bits_opcode : i3, out auto_out_3_a_bits_param : i3, out auto_out_3_a_bits_size : i3, out auto_out_3_a_bits_source : i2, out auto_out_3_a_bits_address : i12, out auto_out_3_a_bits_mask : i8, out auto_out_3_a_bits_data : i64, out auto_out_3_a_bits_corrupt : i1, out auto_out_3_d_ready : i1, in %auto_out_3_d_valid : i1, in %auto_out_3_d_bits_opcode : i3, in %auto_out_3_d_bits_size : i3, in %auto_out_3_d_bits_source : i2, in %auto_out_3_d_bits_data : i64, in %auto_out_2_a_ready : i1, out auto_out_2_a_valid : i1, out auto_out_2_a_bits_opcode : i3, out auto_out_2_a_bits_param : i3, out auto_out_2_a_bits_size : i3, out auto_out_2_a_bits_source : i2, out auto_out_2_a_bits_address : i26, out auto_out_2_a_bits_mask : i8, out auto_out_2_a_bits_data : i64, out auto_out_2_a_bits_corrupt : i1, out auto_out_2_d_ready : i1, in %auto_out_2_d_valid : i1, in %auto_out_2_d_bits_opcode : i3, in %auto_out_2_d_bits_size : i3, in %auto_out_2_d_bits_source : i2, in %auto_out_2_d_bits_data : i64, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_param : i3, out auto_out_1_a_bits_size : i3, out auto_out_1_a_bits_source : i2, out auto_out_1_a_bits_address : i28, out auto_out_1_a_bits_mask : i8, out auto_out_1_a_bits_data : i64, out auto_out_1_a_bits_corrupt : i1, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_size : i3, in %auto_out_1_d_bits_source : i2, in %auto_out_1_d_bits_data : i64, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_param : i3, out auto_out_0_a_bits_size : i4, out auto_out_0_a_bits_source : i2, out auto_out_0_a_bits_address : i14, out auto_out_0_a_bits_mask : i8, out auto_out_0_a_bits_data : i64, out auto_out_0_a_bits_corrupt : i1, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i4, in %auto_out_0_d_bits_source : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i64, in %auto_out_0_d_bits_corrupt : i1) {
    %c0_i8 = hw.constant 0 : i8
    %c-1_i3 = hw.constant -1 : i3
    %c0_i18 = hw.constant 0 : i18
    %c-1_i9 = hw.constant -1 : i9
    %c63_i21 = hw.constant 63 : i21
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %c0_i9 = hw.constant 0 : i9
    %c0_i64 = hw.constant 0 : i64
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c-1_i5 = hw.constant -1 : i5
    %true = hw.constant true
    %c0_i23 = hw.constant 0 : i23
    %c0_i5 = hw.constant 0 : i5
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %70: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %181: i1, io_in_d_bits_opcode: %209: i3, io_in_d_bits_param: %203: i2, io_in_d_bits_size: %202: i4, io_in_d_bits_source: %196: i2, io_in_d_bits_sink: %190: i1, io_in_d_bits_denied: %189: i1, io_in_d_bits_corrupt: %182: i1) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "nodeOut_a_bits_address"} : (i28) -> i14
    %2 = comb.extract %auto_in_a_bits_size from 0 {sv.namehint = "x1_nodeOut_a_bits_size"} : (i4) -> i3
    %3 = comb.concat %false, %auto_out_1_d_bits_size {sv.namehint = "out_1_d_bits_size"} : i1, i3
    %4 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "x1_nodeOut_1_a_bits_address"} : (i28) -> i26
    %5 = comb.concat %false, %auto_out_2_d_bits_size {sv.namehint = "out_2_d_bits_size"} : i1, i3
    %6 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "x1_nodeOut_2_a_bits_address"} : (i28) -> i12
    %7 = comb.concat %false, %auto_out_3_d_bits_size {sv.namehint = "out_3_d_bits_size"} : i1, i3
    %8 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "x1_nodeOut_3_a_bits_address"} : (i28) -> i17
    %9 = comb.concat %false, %auto_out_4_d_bits_size {sv.namehint = "out_4_d_bits_size"} : i1, i3
    %10 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %11 = comb.xor bin %10, %true : i1
    %12 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %13 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %14 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %15 = comb.concat %12, %13, %14, %11 : i1, i1, i1, i1
    %16 = comb.icmp bin eq %15, %c0_i4 {sv.namehint = "requestAIO_0_0"} : i4
    %17 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %18 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %19 = comb.xor bin %18, %true : i1
    %20 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %21 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %22 = comb.concat %20, %19, %21 : i1, i1, i1
    %23 = comb.icmp bin eq %22, %c0_i3 {sv.namehint = "requestAIO_0_2"} : i3
    %24 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %25 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %26 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %27 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %28 = comb.concat %24, %25, %26, %27 : i1, i1, i1, i1
    %29 = comb.icmp bin eq %28, %c0_i4 {sv.namehint = "requestAIO_0_3"} : i4
    %30 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %31 = comb.xor bin %30, %true : i1
    %32 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %33 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %34 = comb.concat %32, %33, %31 : i1, i1, i1
    %35 = comb.icmp bin eq %34, %c0_i3 {sv.namehint = "requestAIO_0_4"} : i3
    %36 = comb.concat %c0_i23, %auto_out_0_d_bits_size : i23, i4
    %37 = comb.shl bin %c4095_i27, %36 {sv.namehint = "_beatsDO_decode_T_1"} : i27
    %38 = comb.extract %37 from 3 : (i27) -> i9
    %39 = comb.xor bin %38, %c-1_i9 {sv.namehint = "_beatsDO_decode_T_3"} : i9
    %40 = comb.extract %auto_out_0_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata"} : (i3) -> i1
    %41 = comb.concat %c0_i18, %auto_out_1_d_bits_size : i18, i3
    %42 = comb.shl bin %c63_i21, %41 {sv.namehint = "_beatsDO_decode_T_5"} : i21
    %43 = comb.extract %42 from 3 : (i21) -> i3
    %44 = comb.xor bin %43, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_7"} : i3
    %45 = comb.extract %auto_out_1_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_1"} : (i3) -> i1
    %46 = comb.concat %c0_i18, %auto_out_2_d_bits_size : i18, i3
    %47 = comb.shl bin %c63_i21, %46 {sv.namehint = "_beatsDO_decode_T_9"} : i21
    %48 = comb.extract %47 from 3 : (i21) -> i3
    %49 = comb.xor bin %48, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_11"} : i3
    %50 = comb.extract %auto_out_2_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_2"} : (i3) -> i1
    %51 = comb.concat %c0_i18, %auto_out_3_d_bits_size : i18, i3
    %52 = comb.shl bin %c63_i21, %51 {sv.namehint = "_beatsDO_decode_T_13"} : i21
    %53 = comb.extract %52 from 3 : (i21) -> i3
    %54 = comb.xor bin %53, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_15"} : i3
    %55 = comb.extract %auto_out_3_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_3"} : (i3) -> i1
    %56 = comb.concat %c0_i18, %auto_out_4_d_bits_size : i18, i3
    %57 = comb.shl bin %c63_i21, %56 {sv.namehint = "_beatsDO_decode_T_17"} : i21
    %58 = comb.extract %57 from 3 : (i21) -> i3
    %59 = comb.xor bin %58, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_19"} : i3
    %60 = comb.and bin %auto_in_a_valid, %16 {sv.namehint = "portsAOI_filtered_0_valid"} : i1
    %61 = comb.and bin %auto_in_a_valid, %17 {sv.namehint = "portsAOI_filtered_1_valid"} : i1
    %62 = comb.and bin %auto_in_a_valid, %23 {sv.namehint = "portsAOI_filtered_2_valid"} : i1
    %63 = comb.and bin %auto_in_a_valid, %29 {sv.namehint = "portsAOI_filtered_3_valid"} : i1
    %64 = comb.and bin %auto_in_a_valid, %35 {sv.namehint = "portsAOI_filtered_4_valid"} : i1
    %65 = comb.and %16, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %66 = comb.and %17, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %67 = comb.and %23, %auto_out_2_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %68 = comb.and %29, %auto_out_3_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_3"} : i1
    %69 = comb.and %35, %auto_out_4_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_4"} : i1
    %70 = comb.or bin %65, %66, %67, %68, %69 {sv.namehint = "_portsAOI_in_0_a_ready_T_8"} : i1
    %beatsLeft = seq.firreg %158 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %71 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %72 = comb.and bin %71, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %73 = comb.concat %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid, %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_valid"} : i1, i1, i1, i1, i1
    %readys_mask = seq.firreg %110 clock %clock reset sync %reset, %c-1_i5 {firrtl.random_init_start = 9 : ui64} : i5
    %74 = comb.xor bin %readys_mask, %c-1_i5 {sv.namehint = "_readys_filter_T"} : i5
    %75 = comb.and bin %73, %74 {sv.namehint = "_readys_filter_T_1"} : i5
    %76 = comb.extract %75 from 4 : (i5) -> i1
    %77 = comb.extract %75 from 0 : (i5) -> i4
    %78 = comb.concat %77, %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid, %auto_out_1_d_valid : i4, i1, i1, i1, i1
    %79 = comb.concat %75, %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid : i5, i1, i1, i1
    %80 = comb.or bin %78, %79 : i8
    %81 = comb.extract %80 from 7 : (i8) -> i1
    %82 = comb.extract %80 from 0 : (i8) -> i7
    %83 = comb.extract %80 from 2 : (i8) -> i6
    %84 = comb.concat %76, %83 : i1, i6
    %85 = comb.or bin %82, %84 : i7
    %86 = comb.extract %85 from 5 : (i7) -> i2
    %87 = comb.extract %85 from 0 : (i7) -> i5
    %88 = comb.extract %85 from 4 : (i7) -> i3
    %89 = comb.concat %76, %81, %88 : i1, i1, i3
    %90 = comb.or bin %87, %89 : i5
    %91 = comb.concat %readys_mask, %c0_i5 {sv.namehint = "_readys_unready_T_8"} : i5, i5
    %92 = comb.concat %false, %76, %81, %86, %90 : i1, i1, i1, i2, i5
    %93 = comb.or bin %92, %91 {sv.namehint = "readys_unready"} : i10
    %94 = comb.extract %93 from 5 {sv.namehint = "_readys_readys_T"} : (i10) -> i5
    %95 = comb.extract %93 from 0 {sv.namehint = "_readys_readys_T_1"} : (i10) -> i5
    %96 = comb.and bin %94, %95 {sv.namehint = "_readys_readys_T_2"} : i5
    %97 = comb.xor bin %96, %c-1_i5 {sv.namehint = "readys_readys"} : i5
    %98 = comb.icmp bin ne %73, %c0_i5 {sv.namehint = "_readys_T_5"} : i5
    %99 = comb.and bin %72, %98 {sv.namehint = "_readys_T_6"} : i1
    %100 = comb.and bin %97, %73 {sv.namehint = "_readys_mask_T"} : i5
    %101 = comb.extract %100 from 0 : (i5) -> i4
    %102 = comb.concat %101, %false {sv.namehint = "_readys_mask_T_2"} : i4, i1
    %103 = comb.or bin %100, %102 {sv.namehint = "_readys_mask_T_3"} : i5
    %104 = comb.extract %103 from 0 : (i5) -> i3
    %105 = comb.concat %104, %c0_i2 {sv.namehint = "_readys_mask_T_5"} : i3, i2
    %106 = comb.or bin %103, %105 {sv.namehint = "_readys_mask_T_6"} : i5
    %107 = comb.extract %106 from 0 : (i5) -> i1
    %108 = comb.concat %107, %c0_i4 {sv.namehint = "_readys_mask_T_8"} : i1, i4
    %109 = comb.or bin %106, %108 {sv.namehint = "_readys_mask_T_10"} : i5
    %110 = comb.mux bin %99, %109, %readys_mask : i5
    %111 = comb.extract %97 from 0 {sv.namehint = "readys_0"} : (i5) -> i1
    %112 = comb.extract %97 from 1 {sv.namehint = "readys_1"} : (i5) -> i1
    %113 = comb.extract %97 from 2 {sv.namehint = "readys_2"} : (i5) -> i1
    %114 = comb.extract %97 from 3 {sv.namehint = "readys_3"} : (i5) -> i1
    %115 = comb.extract %97 from 4 {sv.namehint = "readys_4"} : (i5) -> i1
    %116 = comb.and bin %111, %auto_out_0_d_valid {sv.namehint = "winner_0"} : i1
    %117 = comb.and bin %112, %auto_out_1_d_valid {sv.namehint = "winner_1"} : i1
    %118 = comb.and bin %113, %auto_out_2_d_valid {sv.namehint = "winner_2"} : i1
    %119 = comb.and bin %114, %auto_out_3_d_valid {sv.namehint = "winner_3"} : i1
    %120 = comb.and bin %115, %auto_out_4_d_valid {sv.namehint = "winner_4"} : i1
    %121 = comb.or bin %116, %117 {sv.namehint = "prefixOR_2"} : i1
    %122 = comb.or bin %121, %118 {sv.namehint = "prefixOR_3"} : i1
    %123 = comb.or bin %122, %119 {sv.namehint = "prefixOR_4"} : i1
    %124 = comb.xor bin %116, %true : i1
    %125 = comb.xor bin %117, %true : i1
    %126 = comb.or bin %124, %125 : i1
    %127 = comb.xor bin %121, %true : i1
    %128 = comb.xor bin %118, %true : i1
    %129 = comb.or bin %127, %128 : i1
    %130 = comb.xor bin %122, %true : i1
    %131 = comb.xor bin %119, %true : i1
    %132 = comb.or bin %130, %131 : i1
    %133 = comb.xor bin %123, %true : i1
    %134 = comb.xor bin %120, %true : i1
    %135 = comb.or bin %133, %134 : i1
    %136 = comb.and bin %126, %129, %132, %135 : i1
    %137 = comb.xor bin %reset, %true : i1
    %138 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T"} : i1
    %139 = comb.or bin %138, %auto_out_2_d_valid, %auto_out_3_d_valid, %auto_out_4_d_valid : i1
    %140 = comb.xor bin %139, %true : i1
    %141 = comb.or bin %140, %116, %117, %118, %119, %120 : i1
    sv.always posedge %0 {
      sv.if %137 {
        sv.assert %136, immediate label "assert__assert"
      }
      sv.if %137 {
        sv.assert %141, immediate label "assert__assert_1"
      }
    }
    %142 = comb.and bin %116, %40 : i1
    %143 = comb.mux bin %142, %39, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %144 = comb.and bin %117, %45 : i1
    %145 = comb.mux bin %144, %44, %c0_i3 {sv.namehint = "maskedBeats_1"} : i3
    %146 = comb.and bin %118, %50 : i1
    %147 = comb.mux bin %146, %49, %c0_i3 {sv.namehint = "maskedBeats_2"} : i3
    %148 = comb.and bin %119, %55 : i1
    %149 = comb.mux bin %148, %54, %c0_i3 {sv.namehint = "maskedBeats_3"} : i3
    %150 = comb.mux bin %120, %59, %c0_i3 {sv.namehint = "maskedBeats_4"} : i3
    %151 = comb.extract %143 from 3 : (i9) -> i6
    %152 = comb.extract %143 from 0 : (i9) -> i3
    %153 = comb.or bin %152, %145, %147, %149, %150 : i3
    %154 = comb.concat %151, %153 {sv.namehint = "initBeats"} : i6, i3
    %155 = comb.and bin %auto_in_d_ready, %181 {sv.namehint = "_beatsLeft_T"} : i1
    %156 = comb.concat %c0_i8, %155 : i8, i1
    %157 = comb.sub bin %beatsLeft, %156 {sv.namehint = "_beatsLeft_T_1"} : i9
    %158 = comb.mux bin %72, %154, %157 {sv.namehint = "_beatsLeft_T_3"} : i9
    %state_0 = seq.firreg %159 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %state_1 = seq.firreg %160 clock %clock reset sync %reset, %false {firrtl.random_init_start = 15 : ui64} : i1
    %state_2 = seq.firreg %161 clock %clock reset sync %reset, %false {firrtl.random_init_start = 16 : ui64} : i1
    %state_3 = seq.firreg %162 clock %clock reset sync %reset, %false {firrtl.random_init_start = 17 : ui64} : i1
    %state_4 = seq.firreg %163 clock %clock reset sync %reset, %false {firrtl.random_init_start = 18 : ui64} : i1
    %159 = comb.mux bin %71, %116, %state_0 {sv.namehint = "muxState_0"} : i1
    %160 = comb.mux bin %71, %117, %state_1 {sv.namehint = "muxState_1"} : i1
    %161 = comb.mux bin %71, %118, %state_2 {sv.namehint = "muxState_2"} : i1
    %162 = comb.mux bin %71, %119, %state_3 {sv.namehint = "muxState_3"} : i1
    %163 = comb.mux bin %71, %120, %state_4 {sv.namehint = "muxState_4"} : i1
    %164 = comb.mux bin %71, %111, %state_0 {sv.namehint = "allowed_0"} : i1
    %165 = comb.mux bin %71, %112, %state_1 {sv.namehint = "allowed_1"} : i1
    %166 = comb.mux bin %71, %113, %state_2 {sv.namehint = "allowed_2"} : i1
    %167 = comb.mux bin %71, %114, %state_3 {sv.namehint = "allowed_3"} : i1
    %168 = comb.mux bin %71, %115, %state_4 {sv.namehint = "allowed_4"} : i1
    %169 = comb.and bin %auto_in_d_ready, %164 {sv.namehint = "portsDIO_filtered_0_ready"} : i1
    %170 = comb.and bin %auto_in_d_ready, %165 {sv.namehint = "portsDIO_filtered_1_0_ready"} : i1
    %171 = comb.and bin %auto_in_d_ready, %166 {sv.namehint = "portsDIO_filtered_2_0_ready"} : i1
    %172 = comb.and bin %auto_in_d_ready, %167 {sv.namehint = "portsDIO_filtered_3_0_ready"} : i1
    %173 = comb.and bin %auto_in_d_ready, %168 {sv.namehint = "portsDIO_filtered_4_0_ready"} : i1
    %174 = comb.or bin %138, %auto_out_2_d_valid, %auto_out_3_d_valid, %auto_out_4_d_valid {sv.namehint = "_in_0_d_valid_T_3"} : i1
    %175 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_in_0_d_valid_T_4"} : i1
    %176 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T_5"} : i1
    %177 = comb.and %state_2, %auto_out_2_d_valid {sv.namehint = "_in_0_d_valid_T_6"} : i1
    %178 = comb.and %state_3, %auto_out_3_d_valid {sv.namehint = "_in_0_d_valid_T_7"} : i1
    %179 = comb.and %state_4, %auto_out_4_d_valid {sv.namehint = "_in_0_d_valid_T_8"} : i1
    %180 = comb.or bin %175, %176, %177, %178, %179 {sv.namehint = "_in_0_d_valid_T_12"} : i1
    %181 = comb.mux bin %71, %174, %180 {sv.namehint = "in_0_d_valid"} : i1
    %182 = comb.and %159, %auto_out_0_d_bits_corrupt {sv.namehint = "_in_0_d_bits_T"} : i1
    %183 = comb.mux bin %159, %auto_out_0_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_9"} : i64
    %184 = comb.mux bin %160, %auto_out_1_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_10"} : i64
    %185 = comb.mux bin %161, %auto_out_2_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_11"} : i64
    %186 = comb.mux bin %162, %auto_out_3_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_12"} : i64
    %187 = comb.mux bin %163, %auto_out_4_d_bits_data, %c0_i64 {sv.namehint = "_in_0_d_bits_T_13"} : i64
    %188 = comb.or bin %183, %184, %185, %186, %187 {sv.namehint = "_in_0_d_bits_T_17"} : i64
    %189 = comb.and %159, %auto_out_0_d_bits_denied {sv.namehint = "_in_0_d_bits_T_18"} : i1
    %190 = comb.and %159, %auto_out_0_d_bits_sink {sv.namehint = "_in_0_d_bits_T_27"} : i1
    %191 = comb.mux bin %159, %auto_out_0_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_36"} : i2
    %192 = comb.mux bin %160, %auto_out_1_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_37"} : i2
    %193 = comb.mux bin %161, %auto_out_2_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_38"} : i2
    %194 = comb.mux bin %162, %auto_out_3_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_39"} : i2
    %195 = comb.mux bin %163, %auto_out_4_d_bits_source, %c0_i2 {sv.namehint = "_in_0_d_bits_T_40"} : i2
    %196 = comb.or bin %191, %192, %193, %194, %195 {sv.namehint = "_in_0_d_bits_T_44"} : i2
    %197 = comb.mux bin %159, %auto_out_0_d_bits_size, %c0_i4 {sv.namehint = "_in_0_d_bits_T_45"} : i4
    %198 = comb.mux bin %160, %3, %c0_i4 {sv.namehint = "_in_0_d_bits_T_46"} : i4
    %199 = comb.mux bin %161, %5, %c0_i4 {sv.namehint = "_in_0_d_bits_T_47"} : i4
    %200 = comb.mux bin %162, %7, %c0_i4 {sv.namehint = "_in_0_d_bits_T_48"} : i4
    %201 = comb.mux bin %163, %9, %c0_i4 {sv.namehint = "_in_0_d_bits_T_49"} : i4
    %202 = comb.or bin %197, %198, %199, %200, %201 {sv.namehint = "_in_0_d_bits_T_53"} : i4
    %203 = comb.mux bin %159, %auto_out_0_d_bits_param, %c0_i2 {sv.namehint = "_in_0_d_bits_T_54"} : i2
    %204 = comb.mux bin %159, %auto_out_0_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_63"} : i3
    %205 = comb.mux bin %160, %auto_out_1_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_64"} : i3
    %206 = comb.mux bin %161, %auto_out_2_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_65"} : i3
    %207 = comb.mux bin %162, %auto_out_3_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_66"} : i3
    %208 = comb.concat %c0_i2, %163 {sv.namehint = "_in_0_d_bits_T_67"} : i2, i1
    %209 = comb.or bin %204, %205, %206, %207, %208 {sv.namehint = "_in_0_d_bits_T_71"} : i3
    hw.output %70, %181, %209, %203, %202, %196, %190, %189, %188, %182, %64, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %8, %auto_in_a_bits_mask, %auto_in_a_bits_corrupt, %173, %63, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %6, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %172, %62, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %4, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %171, %61, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %170, %60, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %1, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %169 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i3, i2, i17, i8, i1, i1, i1, i3, i3, i3, i2, i12, i8, i64, i1, i1, i1, i3, i3, i3, i2, i26, i8, i64, i1, i1, i1, i3, i3, i3, i2, i28, i8, i64, i1, i1, i1, i3, i3, i4, i2, i14, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_5(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i23 = hw.constant 0 : i23
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %8 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %10 = comb.xor bin %9, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %11 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %12 = comb.and bin %11, %10 : i12
    %13 = comb.icmp bin eq %12, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %62 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %63 = comb.xor bin %62, %c-1_i2 : i2
    %64 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %65 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %66 = comb.xor bin %65, %true : i1
    %67 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %68 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %69 = comb.xor bin %68, %c-512_i10 : i10
    %70 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %71 = comb.xor bin %reset, %true : i1
    %72 = comb.and bin %io_in_a_valid, %59, %71 : i1
    %73 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %74 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %61, %63 : i14, i2
    %77 = comb.icmp bin eq %76, %c0_i16 : i16
    %78 = comb.concat %64, %66 : i11, i1
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.concat %67, %69 : i2, i10
    %81 = comb.icmp bin eq %80, %c0_i12 : i12
    %82 = comb.icmp eq %70, %c-1_i2 : i2
    %83 = comb.or bin %75, %77, %79, %81, %82 : i1
    %84 = comb.and bin %60, %83 : i1
    %85 = comb.and bin %3, %73, %84 : i1
    %86 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %87 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %88 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %89 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %90 = comb.and bin %io_in_a_valid, %89, %71 : i1
    %91 = comb.and bin %3, %73, %84 : i1
    %92 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %93 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %94 = comb.or bin %3, %4, %5 : i1
    %95 = comb.and bin %60, %94 : i1
    %96 = comb.and bin %io_in_a_valid, %93, %71 : i1
    %97 = comb.and bin %60, %77 : i1
    %98 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %99 = comb.or bin %75, %79, %81, %82 : i1
    %100 = comb.and bin %98, %99 : i1
    %101 = comb.or bin %97, %100 : i1
    %102 = comb.xor bin %92, %true : i1
    %103 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %104 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %105 = comb.or bin %75, %81, %82 : i1
    %106 = comb.and bin %98, %105 : i1
    %107 = comb.or bin %97, %106 : i1
    %108 = comb.and bin %95, %107 : i1
    %109 = comb.and bin %io_in_a_valid, %104, %71 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %111 = comb.and bin %io_in_a_valid, %110, %71 : i1
    %112 = comb.xor bin %58, %c-1_i8 : i8
    %113 = comb.and bin %io_in_a_bits_mask, %112 : i8
    %114 = comb.icmp bin eq %113, %c0_i8 : i8
    %115 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %116 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %117 = comb.and bin %95, %116, %77 : i1
    %118 = comb.and bin %io_in_a_valid, %115, %71 : i1
    %119 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %120 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %121 = comb.and bin %io_in_a_valid, %120, %71 : i1
    %122 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %123 = comb.xor bin %122, %true : i1
    %124 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %125 = comb.and bin %95, %97 : i1
    %126 = comb.and bin %io_in_a_valid, %124, %71 : i1
    %127 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %128 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %129 = comb.and bin %io_in_d_valid, %71 : i1
    %130 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %131 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %132 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %133 = comb.or bin %130, %131, %132 {sv.namehint = "source_ok_1"} : i1
    %134 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %135 = comb.and bin %io_in_d_valid, %134, %71 : i1
    %136 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %137 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %138 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %139 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %140 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %141 = comb.and bin %io_in_d_valid, %140, %71 : i1
    %142 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %143 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %144 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %145 = comb.and bin %io_in_d_valid, %144, %71 : i1
    %146 = comb.or bin %139, %io_in_d_bits_corrupt : i1
    %147 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %148 = comb.and bin %io_in_d_valid, %147, %71 : i1
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %150 = comb.and bin %io_in_d_valid, %149, %71 : i1
    %151 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %152 = comb.and bin %io_in_d_valid, %151, %71 : i1
    %153 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %154 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %155 = comb.extract %154 from 3 : (i27) -> i9
    %156 = comb.xor bin %155, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %157 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %158 = comb.mux bin %157, %c0_i9, %156 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %163 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %159 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %160 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %161 = comb.xor bin %160, %true {sv.namehint = "a_first"} : i1
    %162 = comb.mux bin %160, %159, %158 {sv.namehint = "_a_first_counter_T"} : i9
    %163 = comb.mux bin %153, %162, %a_first_counter : i9
    %opcode = seq.firreg %171 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %172 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %173 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %174 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %175 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %164 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %165 = comb.and bin %io_in_a_valid, %160, %71 : i1
    %166 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %167 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %168 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %169 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %170 = comb.and bin %153, %161 : i1
    %171 = comb.mux bin %170, %io_in_a_bits_opcode, %opcode : i3
    %172 = comb.mux bin %170, %io_in_a_bits_param, %param : i3
    %173 = comb.mux bin %170, %io_in_a_bits_size, %size : i4
    %174 = comb.mux bin %170, %io_in_a_bits_source, %source : i2
    %175 = comb.mux bin %170, %io_in_a_bits_address, %address : i28
    %176 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %177 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %178 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %179 = comb.extract %178 from 3 : (i27) -> i9
    %180 = comb.xor bin %179, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %181 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %182 = comb.mux bin %181, %180, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %187 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %183 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %184 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %185 = comb.xor bin %184, %true {sv.namehint = "d_first"} : i1
    %186 = comb.mux bin %184, %183, %182 {sv.namehint = "_d_first_counter_T"} : i9
    %187 = comb.mux bin %176, %186, %d_first_counter : i9
    %opcode_1 = seq.firreg %196 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %197 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %198 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %199 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %200 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %201 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %189 = comb.and bin %io_in_d_valid, %184, %71 : i1
    %190 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %191 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %192 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %193 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %194 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %195 = comb.and bin %176, %185 : i1
    %196 = comb.mux bin %195, %io_in_d_bits_opcode, %opcode_1 : i3
    %197 = comb.mux bin %195, %io_in_d_bits_param, %param_1 : i2
    %198 = comb.mux bin %195, %io_in_d_bits_size, %size_1 : i4
    %199 = comb.mux bin %195, %io_in_d_bits_source, %source_1 : i2
    %200 = comb.mux bin %195, %io_in_d_bits_sink, %sink : i1
    %201 = comb.mux bin %195, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %305 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %308 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %311 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %202 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %203 = comb.extract %202 from 3 : (i27) -> i9
    %204 = comb.xor bin %203, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %205 = comb.mux bin %157, %c0_i9, %204 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %209 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %206 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %207 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %208 = comb.mux bin %207, %205, %206 {sv.namehint = "_a_first_counter_T_1"} : i9
    %209 = comb.mux bin %153, %208, %a_first_counter_1 : i9
    %210 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %211 = comb.extract %210 from 3 : (i27) -> i9
    %212 = comb.xor bin %211, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %213 = comb.mux bin %181, %212, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %217 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %214 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %215 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %216 = comb.mux bin %215, %213, %214 {sv.namehint = "_d_first_counter_T_1"} : i9
    %217 = comb.mux bin %176, %216, %d_first_counter_1 : i9
    %218 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %219 = comb.shru bin %inflight_opcodes, %218 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %220 = comb.extract %219 from 1 : (i12) -> i3
    %221 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %222 = comb.shru bin %inflight_sizes, %221 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %223 = comb.extract %222 from 1 : (i24) -> i7
    %224 = comb.concat %false, %223 {sv.namehint = "a_size_lookup"} : i1, i7
    %225 = comb.and bin %io_in_a_valid, %207 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %226 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %227 = comb.shl bin %c1_i4, %226 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %228 = comb.extract %227 from 0 : (i4) -> i3
    %229 = comb.mux bin %225, %228, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %230 = comb.and bin %153, %207 : i1
    %231 = comb.shl bin %c1_i4, %226 {sv.namehint = "_a_set_T"} : i4
    %232 = comb.extract %231 from 0 : (i4) -> i3
    %233 = comb.mux bin %230, %232, %c0_i3 {sv.namehint = "a_set"} : i3
    %234 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %235 = comb.mux bin %230, %234, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %236 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %237 = comb.mux bin %230, %236, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %238 = comb.concat %c0_i31, %235 : i31, i4
    %239 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %240 = comb.shl bin %238, %239 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %241 = comb.extract %240 from 0 : (i35) -> i12
    %242 = comb.mux bin %230, %241, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %243 = comb.concat %c0_i31, %237 : i31, i5
    %244 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %245 = comb.shl bin %243, %244 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %246 = comb.extract %245 from 0 : (i36) -> i24
    %247 = comb.mux bin %230, %246, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %248 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %249 = comb.shru bin %inflight, %248 : i3
    %250 = comb.extract %249 from 0 : (i3) -> i1
    %251 = comb.xor bin %250, %true : i1
    %252 = comb.and bin %230, %71 : i1
    %253 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %254 = comb.and bin %io_in_d_valid, %215 : i1
    %255 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %256 = comb.and bin %254, %255 : i1
    %257 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %258 = comb.shl bin %c1_i4, %257 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %259 = comb.extract %258 from 0 : (i4) -> i3
    %260 = comb.mux bin %256, %259, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %261 = comb.and bin %176, %215, %255 : i1
    %262 = comb.shl bin %c1_i4, %257 {sv.namehint = "_d_clr_T"} : i4
    %263 = comb.extract %262 from 0 : (i4) -> i3
    %264 = comb.mux bin %261, %263, %c0_i3 {sv.namehint = "d_clr"} : i3
    %265 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %266 = comb.shl bin %c15_i47, %265 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %267 = comb.extract %266 from 0 : (i47) -> i12
    %268 = comb.mux bin %261, %267, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %269 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %270 = comb.shl bin %c255_i47, %269 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %271 = comb.extract %270 from 0 : (i47) -> i24
    %272 = comb.mux bin %261, %271, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %273 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %274 = comb.and bin %225, %273 {sv.namehint = "same_cycle_resp"} : i1
    %275 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %276 = comb.shru bin %inflight, %275 : i3
    %277 = comb.extract %276 from 0 : (i3) -> i1
    %278 = comb.or bin %277, %274 : i1
    %279 = comb.and bin %256, %71 : i1
    %280 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %281 = comb.icmp bin eq %io_in_d_bits_opcode, %280 : i3
    %282 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %283 = comb.icmp bin eq %io_in_d_bits_opcode, %282 : i3
    %284 = comb.or bin %281, %283 : i1
    %285 = comb.and bin %256, %274, %71 : i1
    %286 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %287 = comb.xor bin %274, %true : i1
    %288 = hw.array_get %1[%220] : !hw.array<8xi3>, i3
    %289 = comb.icmp bin eq %io_in_d_bits_opcode, %288 : i3
    %290 = hw.array_get %0[%220] : !hw.array<8xi3>, i3
    %291 = comb.icmp bin eq %io_in_d_bits_opcode, %290 : i3
    %292 = comb.or bin %289, %291 : i1
    %293 = comb.and bin %256, %287, %71 : i1
    %294 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %295 = comb.icmp bin eq %294, %224 : i8
    %296 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %297 = comb.xor bin %io_in_d_ready, %true : i1
    %298 = comb.or bin %297, %io_in_a_ready : i1
    %299 = comb.and bin %254, %207, %io_in_a_valid, %296, %255, %71 : i1
    %300 = comb.icmp bin ne %229, %260 : i3
    %301 = comb.icmp bin eq %229, %c0_i3 : i3
    %302 = comb.or bin %300, %301 : i1
    %303 = comb.or bin %inflight, %233 {sv.namehint = "_inflight_T"} : i3
    %304 = comb.xor bin %264, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %305 = comb.and bin %303, %304 {sv.namehint = "_inflight_T_2"} : i3
    %306 = comb.or bin %inflight_opcodes, %242 {sv.namehint = "_inflight_opcodes_T"} : i12
    %307 = comb.xor bin %268, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %308 = comb.and bin %306, %307 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %309 = comb.or bin %inflight_sizes, %247 {sv.namehint = "_inflight_sizes_T"} : i24
    %310 = comb.xor bin %272, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %311 = comb.and bin %309, %310 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %318 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %312 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %313 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %314 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %315 = comb.or bin %312, %313, %314 : i1
    %316 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %317 = comb.or bin %153, %176 : i1
    %318 = comb.mux bin %317, %c0_i32, %316 : i32
    %inflight_1 = seq.firreg %342 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %344 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %319 = comb.shl bin %c4095_i27, %177 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %320 = comb.extract %319 from 3 : (i27) -> i9
    %321 = comb.xor bin %320, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %322 = comb.mux bin %181, %321, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %326 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %323 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %324 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %325 = comb.mux bin %324, %322, %323 {sv.namehint = "_d_first_counter_T_2"} : i9
    %326 = comb.mux bin %176, %325, %d_first_counter_2 : i9
    %327 = comb.shru bin %inflight_sizes_1, %221 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %328 = comb.extract %327 from 1 : (i24) -> i7
    %329 = comb.concat %false, %328 {sv.namehint = "c_size_lookup"} : i1, i7
    %330 = comb.and bin %176, %324, %253 : i1
    %331 = comb.shl bin %c1_i4, %257 {sv.namehint = "_d_clr_T_1"} : i4
    %332 = comb.extract %331 from 0 : (i4) -> i3
    %333 = comb.mux bin %330, %332, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %334 = comb.shl bin %c255_i47, %269 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %335 = comb.extract %334 from 0 : (i47) -> i24
    %336 = comb.mux bin %330, %335, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %337 = comb.shru bin %inflight_1, %275 : i3
    %338 = comb.extract %337 from 0 : (i3) -> i1
    %339 = comb.and bin %io_in_d_valid, %324, %253, %71 : i1
    %340 = comb.icmp bin eq %294, %329 : i8
    %341 = comb.xor bin %333, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %342 = comb.and bin %inflight_1, %341 {sv.namehint = "_inflight_T_5"} : i3
    %343 = comb.xor bin %336, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %344 = comb.and bin %inflight_sizes_1, %343 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %350 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %345 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %346 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %347 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %348 = comb.or bin %345, %346, %347 : i1
    sv.always posedge %2 {
      sv.if %72 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %72 {
        sv.assert %85, immediate label "assert__assert_3"
      }
      sv.if %72 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %72 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %72 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %72 {
        sv.assert %86, immediate label "assert__assert_7"
      }
      sv.if %72 {
        sv.assert %87, immediate label "assert__assert_8"
      }
      sv.if %72 {
        sv.assert %88, immediate label "assert__assert_9"
      }
      sv.if %90 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %90 {
        sv.assert %91, immediate label "assert__assert_11"
      }
      sv.if %90 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %90 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %90 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %90 {
        sv.assert %86, immediate label "assert__assert_15"
      }
      sv.if %90 {
        sv.assert %92, immediate label "assert__assert_16"
      }
      sv.if %90 {
        sv.assert %87, immediate label "assert__assert_17"
      }
      sv.if %90 {
        sv.assert %88, immediate label "assert__assert_18"
      }
      sv.if %96 {
        sv.assert %95, immediate label "assert__assert_19"
      }
      sv.if %96 {
        sv.assert %101, immediate label "assert__assert_20"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %96 {
        sv.assert %102, immediate label "assert__assert_23"
      }
      sv.if %96 {
        sv.assert %103, immediate label "assert__assert_24"
      }
      sv.if %96 {
        sv.assert %88, immediate label "assert__assert_25"
      }
      sv.if %109 {
        sv.assert %108, immediate label "assert__assert_26"
      }
      sv.if %109 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %109 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %109 {
        sv.assert %102, immediate label "assert__assert_29"
      }
      sv.if %109 {
        sv.assert %103, immediate label "assert__assert_30"
      }
      sv.if %111 {
        sv.assert %108, immediate label "assert__assert_31"
      }
      sv.if %111 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %111 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %111 {
        sv.assert %102, immediate label "assert__assert_34"
      }
      sv.if %111 {
        sv.assert %114, immediate label "assert__assert_35"
      }
      sv.if %118 {
        sv.assert %117, immediate label "assert__assert_36"
      }
      sv.if %118 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %118 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %118 {
        sv.assert %119, immediate label "assert__assert_39"
      }
      sv.if %118 {
        sv.assert %103, immediate label "assert__assert_40"
      }
      sv.if %121 {
        sv.assert %117, immediate label "assert__assert_41"
      }
      sv.if %121 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %121 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %121 {
        sv.assert %123, immediate label "assert__assert_44"
      }
      sv.if %121 {
        sv.assert %103, immediate label "assert__assert_45"
      }
      sv.if %126 {
        sv.assert %125, immediate label "assert__assert_46"
      }
      sv.if %126 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %126 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %126 {
        sv.assert %127, immediate label "assert__assert_49"
      }
      sv.if %126 {
        sv.assert %103, immediate label "assert__assert_50"
      }
      sv.if %126 {
        sv.assert %88, immediate label "assert__assert_51"
      }
      sv.if %129 {
        sv.assert %128, immediate label "assert__assert_52"
      }
      sv.if %135 {
        sv.assert %133, immediate label "assert__assert_53"
      }
      sv.if %135 {
        sv.assert %136, immediate label "assert__assert_54"
      }
      sv.if %135 {
        sv.assert %137, immediate label "assert__assert_55"
      }
      sv.if %135 {
        sv.assert %138, immediate label "assert__assert_56"
      }
      sv.if %135 {
        sv.assert %139, immediate label "assert__assert_57"
      }
      sv.if %141 {
        sv.assert %133, immediate label "assert__assert_58"
      }
      sv.if %141 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %141 {
        sv.assert %136, immediate label "assert__assert_60"
      }
      sv.if %141 {
        sv.assert %142, immediate label "assert__assert_61"
      }
      sv.if %141 {
        sv.assert %143, immediate label "assert__assert_62"
      }
      sv.if %141 {
        sv.assert %138, immediate label "assert__assert_63"
      }
      sv.if %145 {
        sv.assert %133, immediate label "assert__assert_65"
      }
      sv.if %145 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %145 {
        sv.assert %136, immediate label "assert__assert_67"
      }
      sv.if %145 {
        sv.assert %142, immediate label "assert__assert_68"
      }
      sv.if %145 {
        sv.assert %143, immediate label "assert__assert_69"
      }
      sv.if %145 {
        sv.assert %146, immediate label "assert__assert_70"
      }
      sv.if %148 {
        sv.assert %133, immediate label "assert__assert_72"
      }
      sv.if %148 {
        sv.assert %137, immediate label "assert__assert_73"
      }
      sv.if %148 {
        sv.assert %138, immediate label "assert__assert_74"
      }
      sv.if %150 {
        sv.assert %133, immediate label "assert__assert_76"
      }
      sv.if %150 {
        sv.assert %137, immediate label "assert__assert_77"
      }
      sv.if %150 {
        sv.assert %146, immediate label "assert__assert_78"
      }
      sv.if %152 {
        sv.assert %133, immediate label "assert__assert_80"
      }
      sv.if %152 {
        sv.assert %137, immediate label "assert__assert_81"
      }
      sv.if %152 {
        sv.assert %138, immediate label "assert__assert_82"
      }
      sv.if %165 {
        sv.assert %164, immediate label "assert__assert_87"
      }
      sv.if %165 {
        sv.assert %166, immediate label "assert__assert_88"
      }
      sv.if %165 {
        sv.assert %167, immediate label "assert__assert_89"
      }
      sv.if %165 {
        sv.assert %168, immediate label "assert__assert_90"
      }
      sv.if %165 {
        sv.assert %169, immediate label "assert__assert_91"
      }
      sv.if %189 {
        sv.assert %188, immediate label "assert__assert_92"
      }
      sv.if %189 {
        sv.assert %190, immediate label "assert__assert_93"
      }
      sv.if %189 {
        sv.assert %191, immediate label "assert__assert_94"
      }
      sv.if %189 {
        sv.assert %192, immediate label "assert__assert_95"
      }
      sv.if %189 {
        sv.assert %193, immediate label "assert__assert_96"
      }
      sv.if %189 {
        sv.assert %194, immediate label "assert__assert_97"
      }
      sv.if %252 {
        sv.assert %251, immediate label "assert__assert_98"
      }
      sv.if %279 {
        sv.assert %278, immediate label "assert__assert_99"
      }
      sv.if %285 {
        sv.assert %284, immediate label "assert__assert_100"
      }
      sv.if %285 {
        sv.assert %286, immediate label "assert__assert_101"
      }
      sv.if %293 {
        sv.assert %292, immediate label "assert__assert_102"
      }
      sv.if %293 {
        sv.assert %295, immediate label "assert__assert_103"
      }
      sv.if %299 {
        sv.assert %298, immediate label "assert__assert_104"
      }
      sv.if %71 {
        sv.assert %302, immediate label "assert__assert_105"
      }
      sv.if %71 {
        sv.assert %315, immediate label "assert__assert_106"
      }
      sv.if %339 {
        sv.assert %338, immediate label "assert__assert_108"
      }
      sv.if %339 {
        sv.assert %340, immediate label "assert__assert_110"
      }
      sv.if %71 {
        sv.assert %348, immediate label "assert__assert_113"
      }
    }
    %349 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %350 = comb.mux bin %176, %c0_i32, %349 : i32
    hw.output
  }
  hw.module private @Queue2_TLBundleA(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i28, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i28, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 113>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 113>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 113>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_address, %io_enq_bits_mask, %io_enq_bits_data, %io_enq_bits_corrupt : i3, i3, i4, i2, i28, i8, i64, i1
    %2 = comb.extract %0 from 110 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i113) -> i3
    %3 = comb.extract %0 from 107 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i113) -> i3
    %4 = comb.extract %0 from 103 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i113) -> i4
    %5 = comb.extract %0 from 101 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i113) -> i2
    %6 = comb.extract %0 from 73 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i113) -> i28
    %7 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i113) -> i8
    %8 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i113) -> i64
    %9 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i113) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i3, i4, i2, i28, i8, i64, i1
  }
  hw.module private @Queue2_TLBundleD(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i2, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_sink : i1, in %io_enq_bits_denied : i1, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_sink : i1, out io_deq_bits_denied : i1, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 78>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 78>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 78>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_sink, %io_enq_bits_denied, %io_enq_bits_data, %io_enq_bits_corrupt : i3, i2, i4, i2, i1, i1, i64, i1
    %2 = comb.extract %0 from 75 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i78) -> i3
    %3 = comb.extract %0 from 73 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i78) -> i2
    %4 = comb.extract %0 from 69 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i78) -> i4
    %5 = comb.extract %0 from 67 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i78) -> i2
    %6 = comb.extract %0 from 66 {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : (i78) -> i1
    %7 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_denied"} : (i78) -> i1
    %8 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i78) -> i64
    %9 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i78) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1
  }
  hw.module private @TLBuffer_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_5(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %nodeOut_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %nodeIn_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %nodeIn_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %nodeIn_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %nodeIn_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %nodeIn_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %nodeIn_d_q.io_deq_bits_sink: i1, io_in_d_bits_denied: %nodeIn_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %nodeIn_d_q.io_deq_bits_corrupt: i1) -> ()
    %nodeOut_a_q.io_enq_ready, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt = hw.instance "nodeOut_a_q" @Queue2_TLBundleA(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i28, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i28, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeOut_a_q.io_deq_valid"}
    %nodeIn_d_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt = hw.instance "nodeIn_d_q" @Queue2_TLBundleD(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %auto_out_d_bits_param: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %auto_out_d_bits_sink: i1, io_enq_bits_denied: %auto_out_d_bits_denied: i1, io_enq_bits_data: %auto_out_d_bits_data: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeIn_d_q.io_deq_valid"}
    hw.output %nodeOut_a_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt, %nodeIn_d_q.io_enq_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_6(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i23 = hw.constant 0 : i23
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %8 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %10 = comb.xor bin %9, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %11 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %12 = comb.and bin %11, %10 : i12
    %13 = comb.icmp bin eq %12, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %62 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %63 = comb.xor bin %62, %c-1_i2 : i2
    %64 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %65 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %66 = comb.xor bin %65, %true : i1
    %67 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %68 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %69 = comb.xor bin %68, %c-512_i10 : i10
    %70 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %71 = comb.xor bin %reset, %true : i1
    %72 = comb.and bin %io_in_a_valid, %59, %71 : i1
    %73 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %74 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %61, %63 : i14, i2
    %77 = comb.icmp bin eq %76, %c0_i16 : i16
    %78 = comb.concat %64, %66 : i11, i1
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.concat %67, %69 : i2, i10
    %81 = comb.icmp bin eq %80, %c0_i12 : i12
    %82 = comb.icmp eq %70, %c-1_i2 : i2
    %83 = comb.or bin %75, %77 : i1
    %84 = comb.or bin %83, %79, %81, %82 : i1
    %85 = comb.and bin %60, %84 : i1
    %86 = comb.and bin %3, %73, %85 : i1
    %87 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %88 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %89 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %90 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %91 = comb.and bin %io_in_a_valid, %90, %71 : i1
    %92 = comb.and bin %3, %73, %85 : i1
    %93 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %94 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %95 = comb.or bin %3, %4, %5 : i1
    %96 = comb.and bin %60, %95 : i1
    %97 = comb.and bin %io_in_a_valid, %94, %71 : i1
    %98 = comb.and bin %60, %77 : i1
    %99 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %100 = comb.or bin %75, %79, %81, %82 : i1
    %101 = comb.and bin %99, %100 : i1
    %102 = comb.or bin %98, %101 : i1
    %103 = comb.xor bin %93, %true : i1
    %104 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %105 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %106 = comb.or bin %75, %81, %82 : i1
    %107 = comb.and bin %99, %106 : i1
    %108 = comb.or bin %98, %107 : i1
    %109 = comb.and bin %96, %108 : i1
    %110 = comb.and bin %io_in_a_valid, %105, %71 : i1
    %111 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %112 = comb.and bin %io_in_a_valid, %111, %71 : i1
    %113 = comb.xor bin %58, %c-1_i8 : i8
    %114 = comb.and bin %io_in_a_bits_mask, %113 : i8
    %115 = comb.icmp bin eq %114, %c0_i8 : i8
    %116 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %117 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %118 = comb.or bin %83, %81, %82 : i1
    %119 = comb.and bin %96, %117, %118 : i1
    %120 = comb.and bin %io_in_a_valid, %116, %71 : i1
    %121 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %122 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %123 = comb.and bin %io_in_a_valid, %122, %71 : i1
    %124 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %125 = comb.xor bin %124, %true : i1
    %126 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %127 = comb.and bin %96, %98 : i1
    %128 = comb.and bin %io_in_a_valid, %126, %71 : i1
    %129 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %130 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %131 = comb.and bin %io_in_d_valid, %71 : i1
    %132 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %133 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %134 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %135 = comb.or bin %132, %133, %134 {sv.namehint = "source_ok_1"} : i1
    %136 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %137 = comb.and bin %io_in_d_valid, %136, %71 : i1
    %138 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %139 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %140 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %141 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %142 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %143 = comb.and bin %io_in_d_valid, %142, %71 : i1
    %144 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %145 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %146 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %147 = comb.and bin %io_in_d_valid, %146, %71 : i1
    %148 = comb.or bin %141, %io_in_d_bits_corrupt : i1
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %150 = comb.and bin %io_in_d_valid, %149, %71 : i1
    %151 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %152 = comb.and bin %io_in_d_valid, %151, %71 : i1
    %153 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %154 = comb.and bin %io_in_d_valid, %153, %71 : i1
    %155 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %156 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %157 = comb.extract %156 from 3 : (i27) -> i9
    %158 = comb.xor bin %157, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %159 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %160 = comb.mux bin %159, %c0_i9, %158 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %165 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %161 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %162 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %163 = comb.xor bin %162, %true {sv.namehint = "a_first"} : i1
    %164 = comb.mux bin %162, %161, %160 {sv.namehint = "_a_first_counter_T"} : i9
    %165 = comb.mux bin %155, %164, %a_first_counter : i9
    %opcode = seq.firreg %173 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %174 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %175 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %176 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %177 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %166 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %167 = comb.and bin %io_in_a_valid, %162, %71 : i1
    %168 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %169 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %170 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %171 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %172 = comb.and bin %155, %163 : i1
    %173 = comb.mux bin %172, %io_in_a_bits_opcode, %opcode : i3
    %174 = comb.mux bin %172, %io_in_a_bits_param, %param : i3
    %175 = comb.mux bin %172, %io_in_a_bits_size, %size : i4
    %176 = comb.mux bin %172, %io_in_a_bits_source, %source : i2
    %177 = comb.mux bin %172, %io_in_a_bits_address, %address : i28
    %178 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %179 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %180 = comb.shl bin %c4095_i27, %179 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %181 = comb.extract %180 from 3 : (i27) -> i9
    %182 = comb.xor bin %181, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %183 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %184 = comb.mux bin %183, %182, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %189 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %185 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %186 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %187 = comb.xor bin %186, %true {sv.namehint = "d_first"} : i1
    %188 = comb.mux bin %186, %185, %184 {sv.namehint = "_d_first_counter_T"} : i9
    %189 = comb.mux bin %178, %188, %d_first_counter : i9
    %opcode_1 = seq.firreg %198 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %199 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %200 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %201 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %202 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %203 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %190 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %191 = comb.and bin %io_in_d_valid, %186, %71 : i1
    %192 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %193 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %194 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %195 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %196 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %197 = comb.and bin %178, %187 : i1
    %198 = comb.mux bin %197, %io_in_d_bits_opcode, %opcode_1 : i3
    %199 = comb.mux bin %197, %io_in_d_bits_param, %param_1 : i2
    %200 = comb.mux bin %197, %io_in_d_bits_size, %size_1 : i4
    %201 = comb.mux bin %197, %io_in_d_bits_source, %source_1 : i2
    %202 = comb.mux bin %197, %io_in_d_bits_sink, %sink : i1
    %203 = comb.mux bin %197, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %307 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %310 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %313 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %204 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %205 = comb.extract %204 from 3 : (i27) -> i9
    %206 = comb.xor bin %205, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %207 = comb.mux bin %159, %c0_i9, %206 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %211 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %208 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %209 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %210 = comb.mux bin %209, %207, %208 {sv.namehint = "_a_first_counter_T_1"} : i9
    %211 = comb.mux bin %155, %210, %a_first_counter_1 : i9
    %212 = comb.shl bin %c4095_i27, %179 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %213 = comb.extract %212 from 3 : (i27) -> i9
    %214 = comb.xor bin %213, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %215 = comb.mux bin %183, %214, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %219 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %216 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %217 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %218 = comb.mux bin %217, %215, %216 {sv.namehint = "_d_first_counter_T_1"} : i9
    %219 = comb.mux bin %178, %218, %d_first_counter_1 : i9
    %220 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %221 = comb.shru bin %inflight_opcodes, %220 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %222 = comb.extract %221 from 1 : (i12) -> i3
    %223 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %224 = comb.shru bin %inflight_sizes, %223 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %225 = comb.extract %224 from 1 : (i24) -> i7
    %226 = comb.concat %false, %225 {sv.namehint = "a_size_lookup"} : i1, i7
    %227 = comb.and bin %io_in_a_valid, %209 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %228 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %229 = comb.shl bin %c1_i4, %228 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %230 = comb.extract %229 from 0 : (i4) -> i3
    %231 = comb.mux bin %227, %230, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %232 = comb.and bin %155, %209 : i1
    %233 = comb.shl bin %c1_i4, %228 {sv.namehint = "_a_set_T"} : i4
    %234 = comb.extract %233 from 0 : (i4) -> i3
    %235 = comb.mux bin %232, %234, %c0_i3 {sv.namehint = "a_set"} : i3
    %236 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %237 = comb.mux bin %232, %236, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %238 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %239 = comb.mux bin %232, %238, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %240 = comb.concat %c0_i31, %237 : i31, i4
    %241 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %242 = comb.shl bin %240, %241 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %243 = comb.extract %242 from 0 : (i35) -> i12
    %244 = comb.mux bin %232, %243, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %245 = comb.concat %c0_i31, %239 : i31, i5
    %246 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %247 = comb.shl bin %245, %246 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %248 = comb.extract %247 from 0 : (i36) -> i24
    %249 = comb.mux bin %232, %248, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %250 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %251 = comb.shru bin %inflight, %250 : i3
    %252 = comb.extract %251 from 0 : (i3) -> i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %232, %71 : i1
    %255 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %256 = comb.and bin %io_in_d_valid, %217 : i1
    %257 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %258 = comb.and bin %256, %257 : i1
    %259 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %260 = comb.shl bin %c1_i4, %259 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %261 = comb.extract %260 from 0 : (i4) -> i3
    %262 = comb.mux bin %258, %261, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %263 = comb.and bin %178, %217, %257 : i1
    %264 = comb.shl bin %c1_i4, %259 {sv.namehint = "_d_clr_T"} : i4
    %265 = comb.extract %264 from 0 : (i4) -> i3
    %266 = comb.mux bin %263, %265, %c0_i3 {sv.namehint = "d_clr"} : i3
    %267 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %268 = comb.shl bin %c15_i47, %267 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %269 = comb.extract %268 from 0 : (i47) -> i12
    %270 = comb.mux bin %263, %269, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %271 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %272 = comb.shl bin %c255_i47, %271 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %273 = comb.extract %272 from 0 : (i47) -> i24
    %274 = comb.mux bin %263, %273, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %275 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %276 = comb.and bin %227, %275 {sv.namehint = "same_cycle_resp"} : i1
    %277 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %278 = comb.shru bin %inflight, %277 : i3
    %279 = comb.extract %278 from 0 : (i3) -> i1
    %280 = comb.or bin %279, %276 : i1
    %281 = comb.and bin %258, %71 : i1
    %282 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %283 = comb.icmp bin eq %io_in_d_bits_opcode, %282 : i3
    %284 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %285 = comb.icmp bin eq %io_in_d_bits_opcode, %284 : i3
    %286 = comb.or bin %283, %285 : i1
    %287 = comb.and bin %258, %276, %71 : i1
    %288 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %289 = comb.xor bin %276, %true : i1
    %290 = hw.array_get %1[%222] : !hw.array<8xi3>, i3
    %291 = comb.icmp bin eq %io_in_d_bits_opcode, %290 : i3
    %292 = hw.array_get %0[%222] : !hw.array<8xi3>, i3
    %293 = comb.icmp bin eq %io_in_d_bits_opcode, %292 : i3
    %294 = comb.or bin %291, %293 : i1
    %295 = comb.and bin %258, %289, %71 : i1
    %296 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %297 = comb.icmp bin eq %296, %226 : i8
    %298 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %299 = comb.xor bin %io_in_d_ready, %true : i1
    %300 = comb.or bin %299, %io_in_a_ready : i1
    %301 = comb.and bin %256, %209, %io_in_a_valid, %298, %257, %71 : i1
    %302 = comb.icmp bin ne %231, %262 : i3
    %303 = comb.icmp bin eq %231, %c0_i3 : i3
    %304 = comb.or bin %302, %303 : i1
    %305 = comb.or bin %inflight, %235 {sv.namehint = "_inflight_T"} : i3
    %306 = comb.xor bin %266, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %307 = comb.and bin %305, %306 {sv.namehint = "_inflight_T_2"} : i3
    %308 = comb.or bin %inflight_opcodes, %244 {sv.namehint = "_inflight_opcodes_T"} : i12
    %309 = comb.xor bin %270, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %310 = comb.and bin %308, %309 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %311 = comb.or bin %inflight_sizes, %249 {sv.namehint = "_inflight_sizes_T"} : i24
    %312 = comb.xor bin %274, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %313 = comb.and bin %311, %312 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %320 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %314 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %315 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %316 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %317 = comb.or bin %314, %315, %316 : i1
    %318 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %319 = comb.or bin %155, %178 : i1
    %320 = comb.mux bin %319, %c0_i32, %318 : i32
    %inflight_1 = seq.firreg %344 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %346 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %321 = comb.shl bin %c4095_i27, %179 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %322 = comb.extract %321 from 3 : (i27) -> i9
    %323 = comb.xor bin %322, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %324 = comb.mux bin %183, %323, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %328 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %325 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %326 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %327 = comb.mux bin %326, %324, %325 {sv.namehint = "_d_first_counter_T_2"} : i9
    %328 = comb.mux bin %178, %327, %d_first_counter_2 : i9
    %329 = comb.shru bin %inflight_sizes_1, %223 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %330 = comb.extract %329 from 1 : (i24) -> i7
    %331 = comb.concat %false, %330 {sv.namehint = "c_size_lookup"} : i1, i7
    %332 = comb.and bin %178, %326, %255 : i1
    %333 = comb.shl bin %c1_i4, %259 {sv.namehint = "_d_clr_T_1"} : i4
    %334 = comb.extract %333 from 0 : (i4) -> i3
    %335 = comb.mux bin %332, %334, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %336 = comb.shl bin %c255_i47, %271 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %337 = comb.extract %336 from 0 : (i47) -> i24
    %338 = comb.mux bin %332, %337, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %339 = comb.shru bin %inflight_1, %277 : i3
    %340 = comb.extract %339 from 0 : (i3) -> i1
    %341 = comb.and bin %io_in_d_valid, %326, %255, %71 : i1
    %342 = comb.icmp bin eq %296, %331 : i8
    %343 = comb.xor bin %335, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %344 = comb.and bin %inflight_1, %343 {sv.namehint = "_inflight_T_5"} : i3
    %345 = comb.xor bin %338, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %346 = comb.and bin %inflight_sizes_1, %345 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %352 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %347 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %348 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %349 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %350 = comb.or bin %347, %348, %349 : i1
    sv.always posedge %2 {
      sv.if %72 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %72 {
        sv.assert %86, immediate label "assert__assert_3"
      }
      sv.if %72 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %72 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %72 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %72 {
        sv.assert %87, immediate label "assert__assert_7"
      }
      sv.if %72 {
        sv.assert %88, immediate label "assert__assert_8"
      }
      sv.if %72 {
        sv.assert %89, immediate label "assert__assert_9"
      }
      sv.if %91 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %91 {
        sv.assert %92, immediate label "assert__assert_11"
      }
      sv.if %91 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %91 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %91 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %91 {
        sv.assert %87, immediate label "assert__assert_15"
      }
      sv.if %91 {
        sv.assert %93, immediate label "assert__assert_16"
      }
      sv.if %91 {
        sv.assert %88, immediate label "assert__assert_17"
      }
      sv.if %91 {
        sv.assert %89, immediate label "assert__assert_18"
      }
      sv.if %97 {
        sv.assert %96, immediate label "assert__assert_19"
      }
      sv.if %97 {
        sv.assert %102, immediate label "assert__assert_20"
      }
      sv.if %97 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %97 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %97 {
        sv.assert %103, immediate label "assert__assert_23"
      }
      sv.if %97 {
        sv.assert %104, immediate label "assert__assert_24"
      }
      sv.if %97 {
        sv.assert %89, immediate label "assert__assert_25"
      }
      sv.if %110 {
        sv.assert %109, immediate label "assert__assert_26"
      }
      sv.if %110 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %110 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %110 {
        sv.assert %103, immediate label "assert__assert_29"
      }
      sv.if %110 {
        sv.assert %104, immediate label "assert__assert_30"
      }
      sv.if %112 {
        sv.assert %109, immediate label "assert__assert_31"
      }
      sv.if %112 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %112 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %112 {
        sv.assert %103, immediate label "assert__assert_34"
      }
      sv.if %112 {
        sv.assert %115, immediate label "assert__assert_35"
      }
      sv.if %120 {
        sv.assert %119, immediate label "assert__assert_36"
      }
      sv.if %120 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %120 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %120 {
        sv.assert %121, immediate label "assert__assert_39"
      }
      sv.if %120 {
        sv.assert %104, immediate label "assert__assert_40"
      }
      sv.if %123 {
        sv.assert %119, immediate label "assert__assert_41"
      }
      sv.if %123 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %123 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %123 {
        sv.assert %125, immediate label "assert__assert_44"
      }
      sv.if %123 {
        sv.assert %104, immediate label "assert__assert_45"
      }
      sv.if %128 {
        sv.assert %127, immediate label "assert__assert_46"
      }
      sv.if %128 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %128 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %128 {
        sv.assert %129, immediate label "assert__assert_49"
      }
      sv.if %128 {
        sv.assert %104, immediate label "assert__assert_50"
      }
      sv.if %128 {
        sv.assert %89, immediate label "assert__assert_51"
      }
      sv.if %131 {
        sv.assert %130, immediate label "assert__assert_52"
      }
      sv.if %137 {
        sv.assert %135, immediate label "assert__assert_53"
      }
      sv.if %137 {
        sv.assert %138, immediate label "assert__assert_54"
      }
      sv.if %137 {
        sv.assert %139, immediate label "assert__assert_55"
      }
      sv.if %137 {
        sv.assert %140, immediate label "assert__assert_56"
      }
      sv.if %137 {
        sv.assert %141, immediate label "assert__assert_57"
      }
      sv.if %143 {
        sv.assert %135, immediate label "assert__assert_58"
      }
      sv.if %143 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %143 {
        sv.assert %138, immediate label "assert__assert_60"
      }
      sv.if %143 {
        sv.assert %144, immediate label "assert__assert_61"
      }
      sv.if %143 {
        sv.assert %145, immediate label "assert__assert_62"
      }
      sv.if %143 {
        sv.assert %140, immediate label "assert__assert_63"
      }
      sv.if %147 {
        sv.assert %135, immediate label "assert__assert_65"
      }
      sv.if %147 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %147 {
        sv.assert %138, immediate label "assert__assert_67"
      }
      sv.if %147 {
        sv.assert %144, immediate label "assert__assert_68"
      }
      sv.if %147 {
        sv.assert %145, immediate label "assert__assert_69"
      }
      sv.if %147 {
        sv.assert %148, immediate label "assert__assert_70"
      }
      sv.if %150 {
        sv.assert %135, immediate label "assert__assert_72"
      }
      sv.if %150 {
        sv.assert %139, immediate label "assert__assert_73"
      }
      sv.if %150 {
        sv.assert %140, immediate label "assert__assert_74"
      }
      sv.if %152 {
        sv.assert %135, immediate label "assert__assert_76"
      }
      sv.if %152 {
        sv.assert %139, immediate label "assert__assert_77"
      }
      sv.if %152 {
        sv.assert %148, immediate label "assert__assert_78"
      }
      sv.if %154 {
        sv.assert %135, immediate label "assert__assert_80"
      }
      sv.if %154 {
        sv.assert %139, immediate label "assert__assert_81"
      }
      sv.if %154 {
        sv.assert %140, immediate label "assert__assert_82"
      }
      sv.if %167 {
        sv.assert %166, immediate label "assert__assert_87"
      }
      sv.if %167 {
        sv.assert %168, immediate label "assert__assert_88"
      }
      sv.if %167 {
        sv.assert %169, immediate label "assert__assert_89"
      }
      sv.if %167 {
        sv.assert %170, immediate label "assert__assert_90"
      }
      sv.if %167 {
        sv.assert %171, immediate label "assert__assert_91"
      }
      sv.if %191 {
        sv.assert %190, immediate label "assert__assert_92"
      }
      sv.if %191 {
        sv.assert %192, immediate label "assert__assert_93"
      }
      sv.if %191 {
        sv.assert %193, immediate label "assert__assert_94"
      }
      sv.if %191 {
        sv.assert %194, immediate label "assert__assert_95"
      }
      sv.if %191 {
        sv.assert %195, immediate label "assert__assert_96"
      }
      sv.if %191 {
        sv.assert %196, immediate label "assert__assert_97"
      }
      sv.if %254 {
        sv.assert %253, immediate label "assert__assert_98"
      }
      sv.if %281 {
        sv.assert %280, immediate label "assert__assert_99"
      }
      sv.if %287 {
        sv.assert %286, immediate label "assert__assert_100"
      }
      sv.if %287 {
        sv.assert %288, immediate label "assert__assert_101"
      }
      sv.if %295 {
        sv.assert %294, immediate label "assert__assert_102"
      }
      sv.if %295 {
        sv.assert %297, immediate label "assert__assert_103"
      }
      sv.if %301 {
        sv.assert %300, immediate label "assert__assert_104"
      }
      sv.if %71 {
        sv.assert %304, immediate label "assert__assert_105"
      }
      sv.if %71 {
        sv.assert %317, immediate label "assert__assert_106"
      }
      sv.if %341 {
        sv.assert %340, immediate label "assert__assert_108"
      }
      sv.if %341 {
        sv.assert %342, immediate label "assert__assert_110"
      }
      sv.if %71 {
        sv.assert %350, immediate label "assert__assert_113"
      }
    }
    %351 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %352 = comb.mux bin %178, %c0_i32, %351 : i32
    hw.output
  }
  hw.module private @TLAtomicAutomata_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    %c-1_i7 = hw.constant -1 : i7
    %0 = hw.aggregate_constant [-4 : i4, -8 : i4, -2 : i4, 6 : i4] : !hw.array<4xi4>
    %c-1_i9 = hw.constant -1 : i9
    %c2_i4 = hw.constant 2 : i4
    %c4_i4 = hw.constant 4 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i4 = hw.constant 1 : i4
    %c2_i3 = hw.constant 2 : i3
    %false = hw.constant false
    %c1_i2 = hw.constant 1 : i2
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i2 = hw.constant 0 : i2
    %c0_i28 = hw.constant 0 : i28
    %c0_i64 = hw.constant 0 : i64
    %c0_i8 = hw.constant 0 : i8
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-4_i3 = hw.constant -4 : i3
    %true = hw.constant true {sv.namehint = "source_c_bits_a_mask_size_2"}
    %c-1_i2 = hw.constant -1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c0_i23 = hw.constant 0 : i23
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_6(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %450: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %594: i1, io_in_d_bits_opcode: %596: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i1, io_in_d_bits_denied: %601: i1, io_in_d_bits_corrupt: %599: i1) -> ()
    %cam_s_0_state = seq.firreg %590 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 0 : ui64} : i2
    %cam_a_0_bits_opcode = seq.firreg %554 clock %clock {firrtl.random_init_start = 2 : ui64} : i3
    %cam_a_0_bits_param = seq.firreg %555 clock %clock {firrtl.random_init_start = 5 : ui64} : i3
    %cam_a_0_bits_size = seq.firreg %556 clock %clock {firrtl.random_init_start = 8 : ui64, sv.namehint = "cam_a_0_bits_size"} : i4
    %cam_a_0_bits_source = seq.firreg %557 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "cam_a_0_bits_source"} : i2
    %cam_a_0_bits_address = seq.firreg %558 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "cam_a_0_bits_address"} : i28
    %cam_a_0_bits_mask = seq.firreg %559 clock %clock {firrtl.random_init_start = 42 : ui64} : i8
    %cam_a_0_bits_data = seq.firreg %560 clock %clock {firrtl.random_init_start = 50 : ui64} : i64
    %cam_a_0_bits_corrupt = seq.firreg %561 clock %clock {firrtl.random_init_start = 114 : ui64} : i1
    %cam_a_0_lut = seq.firreg %564 clock %clock {firrtl.random_init_start = 116 : ui64} : i4
    %cam_d_0_data = seq.firreg %585 clock %clock {firrtl.random_init_start = 120 : ui64} : i64
    %cam_d_0_denied = seq.firreg %586 clock %clock {firrtl.random_init_start = 184 : ui64} : i1
    %cam_d_0_corrupt = seq.firreg %587 clock %clock {firrtl.random_init_start = 185 : ui64} : i1
    %2 = comb.icmp bin eq %cam_s_0_state, %c0_i2 {sv.namehint = "cam_free_0"} : i2
    %3 = comb.icmp bin eq %cam_s_0_state, %c-2_i2 {sv.namehint = "winner_0"} : i2
    %4 = comb.icmp bin eq %cam_s_0_state, %c-1_i2 {sv.namehint = "_cam_abusy_T"} : i2
    %5 = comb.or bin %4, %3 {sv.namehint = "cam_abusy_0"} : i1
    %6 = comb.icmp bin ne %cam_s_0_state, %c0_i2 {sv.namehint = "cam_dmatch_0"} : i2
    %7 = comb.icmp bin ult %auto_in_a_bits_size, %c4_i4 {sv.namehint = "_a_canArithmetic_T_3"} : i4
    %8 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %9 = comb.xor bin %8, %true : i1
    %10 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %11 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %12 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %13 = comb.concat %10, %11, %12, %9 : i1, i1, i1, i1
    %14 = comb.icmp bin ne %13, %c0_i4 : i4
    %15 = comb.xor bin %14, %true {sv.namehint = "_a_canLogical_T_8"} : i1
    %16 = comb.and bin %7, %15 {sv.namehint = "a_canLogical"} : i1
    %17 = comb.xor bin %14, %true {sv.namehint = "_a_canArithmetic_T_8"} : i1
    %18 = comb.and bin %7, %17 {sv.namehint = "a_canArithmetic"} : i1
    %19 = comb.icmp bin eq %auto_in_a_bits_opcode, %c3_i3 {sv.namehint = "a_isLogical"} : i3
    %20 = comb.icmp bin ne %auto_in_a_bits_opcode, %c2_i3 : i3
    %21 = comb.or %20, %18 {sv.namehint = "_a_isSupported_T"} : i1
    %22 = comb.mux bin %19, %16, %21 {sv.namehint = "a_isSupported"} : i1
    %23 = comb.extract %cam_a_0_bits_data from 0 {sv.namehint = "_indexes_T"} : (i64) -> i1
    %24 = comb.extract %cam_d_0_data from 0 {sv.namehint = "_indexes_T_1"} : (i64) -> i1
    %25 = comb.extract %cam_a_0_bits_data from 1 {sv.namehint = "_indexes_T_2"} : (i64) -> i1
    %26 = comb.extract %cam_d_0_data from 1 {sv.namehint = "_indexes_T_3"} : (i64) -> i1
    %27 = comb.extract %cam_a_0_bits_data from 2 {sv.namehint = "_indexes_T_4"} : (i64) -> i1
    %28 = comb.extract %cam_d_0_data from 2 {sv.namehint = "_indexes_T_5"} : (i64) -> i1
    %29 = comb.extract %cam_a_0_bits_data from 3 {sv.namehint = "_indexes_T_6"} : (i64) -> i1
    %30 = comb.extract %cam_d_0_data from 3 {sv.namehint = "_indexes_T_7"} : (i64) -> i1
    %31 = comb.extract %cam_a_0_bits_data from 4 {sv.namehint = "_indexes_T_8"} : (i64) -> i1
    %32 = comb.extract %cam_d_0_data from 4 {sv.namehint = "_indexes_T_9"} : (i64) -> i1
    %33 = comb.extract %cam_a_0_bits_data from 5 {sv.namehint = "_indexes_T_10"} : (i64) -> i1
    %34 = comb.extract %cam_d_0_data from 5 {sv.namehint = "_indexes_T_11"} : (i64) -> i1
    %35 = comb.extract %cam_a_0_bits_data from 6 {sv.namehint = "_indexes_T_12"} : (i64) -> i1
    %36 = comb.extract %cam_d_0_data from 6 {sv.namehint = "_indexes_T_13"} : (i64) -> i1
    %37 = comb.extract %cam_a_0_bits_data from 7 {sv.namehint = "_signbits_a_T"} : (i64) -> i1
    %38 = comb.extract %cam_d_0_data from 7 {sv.namehint = "_signbits_d_T"} : (i64) -> i1
    %39 = comb.extract %cam_a_0_bits_data from 8 {sv.namehint = "_indexes_T_16"} : (i64) -> i1
    %40 = comb.extract %cam_d_0_data from 8 {sv.namehint = "_indexes_T_17"} : (i64) -> i1
    %41 = comb.extract %cam_a_0_bits_data from 9 {sv.namehint = "_indexes_T_18"} : (i64) -> i1
    %42 = comb.extract %cam_d_0_data from 9 {sv.namehint = "_indexes_T_19"} : (i64) -> i1
    %43 = comb.extract %cam_a_0_bits_data from 10 {sv.namehint = "_indexes_T_20"} : (i64) -> i1
    %44 = comb.extract %cam_d_0_data from 10 {sv.namehint = "_indexes_T_21"} : (i64) -> i1
    %45 = comb.extract %cam_a_0_bits_data from 11 {sv.namehint = "_indexes_T_22"} : (i64) -> i1
    %46 = comb.extract %cam_d_0_data from 11 {sv.namehint = "_indexes_T_23"} : (i64) -> i1
    %47 = comb.extract %cam_a_0_bits_data from 12 {sv.namehint = "_indexes_T_24"} : (i64) -> i1
    %48 = comb.extract %cam_d_0_data from 12 {sv.namehint = "_indexes_T_25"} : (i64) -> i1
    %49 = comb.extract %cam_a_0_bits_data from 13 {sv.namehint = "_indexes_T_26"} : (i64) -> i1
    %50 = comb.extract %cam_d_0_data from 13 {sv.namehint = "_indexes_T_27"} : (i64) -> i1
    %51 = comb.extract %cam_a_0_bits_data from 14 {sv.namehint = "_indexes_T_28"} : (i64) -> i1
    %52 = comb.extract %cam_d_0_data from 14 {sv.namehint = "_indexes_T_29"} : (i64) -> i1
    %53 = comb.extract %cam_a_0_bits_data from 15 {sv.namehint = "_signbits_a_T_1"} : (i64) -> i1
    %54 = comb.extract %cam_d_0_data from 15 {sv.namehint = "_signbits_d_T_1"} : (i64) -> i1
    %55 = comb.extract %cam_a_0_bits_data from 16 {sv.namehint = "_indexes_T_32"} : (i64) -> i1
    %56 = comb.extract %cam_d_0_data from 16 {sv.namehint = "_indexes_T_33"} : (i64) -> i1
    %57 = comb.extract %cam_a_0_bits_data from 17 {sv.namehint = "_indexes_T_34"} : (i64) -> i1
    %58 = comb.extract %cam_d_0_data from 17 {sv.namehint = "_indexes_T_35"} : (i64) -> i1
    %59 = comb.extract %cam_a_0_bits_data from 18 {sv.namehint = "_indexes_T_36"} : (i64) -> i1
    %60 = comb.extract %cam_d_0_data from 18 {sv.namehint = "_indexes_T_37"} : (i64) -> i1
    %61 = comb.extract %cam_a_0_bits_data from 19 {sv.namehint = "_indexes_T_38"} : (i64) -> i1
    %62 = comb.extract %cam_d_0_data from 19 {sv.namehint = "_indexes_T_39"} : (i64) -> i1
    %63 = comb.extract %cam_a_0_bits_data from 20 {sv.namehint = "_indexes_T_40"} : (i64) -> i1
    %64 = comb.extract %cam_d_0_data from 20 {sv.namehint = "_indexes_T_41"} : (i64) -> i1
    %65 = comb.extract %cam_a_0_bits_data from 21 {sv.namehint = "_indexes_T_42"} : (i64) -> i1
    %66 = comb.extract %cam_d_0_data from 21 {sv.namehint = "_indexes_T_43"} : (i64) -> i1
    %67 = comb.extract %cam_a_0_bits_data from 22 {sv.namehint = "_indexes_T_44"} : (i64) -> i1
    %68 = comb.extract %cam_d_0_data from 22 {sv.namehint = "_indexes_T_45"} : (i64) -> i1
    %69 = comb.extract %cam_a_0_bits_data from 23 {sv.namehint = "_signbits_a_T_2"} : (i64) -> i1
    %70 = comb.extract %cam_d_0_data from 23 {sv.namehint = "_signbits_d_T_2"} : (i64) -> i1
    %71 = comb.extract %cam_a_0_bits_data from 24 {sv.namehint = "_indexes_T_48"} : (i64) -> i1
    %72 = comb.extract %cam_d_0_data from 24 {sv.namehint = "_indexes_T_49"} : (i64) -> i1
    %73 = comb.extract %cam_a_0_bits_data from 25 {sv.namehint = "_indexes_T_50"} : (i64) -> i1
    %74 = comb.extract %cam_d_0_data from 25 {sv.namehint = "_indexes_T_51"} : (i64) -> i1
    %75 = comb.extract %cam_a_0_bits_data from 26 {sv.namehint = "_indexes_T_52"} : (i64) -> i1
    %76 = comb.extract %cam_d_0_data from 26 {sv.namehint = "_indexes_T_53"} : (i64) -> i1
    %77 = comb.extract %cam_a_0_bits_data from 27 {sv.namehint = "_indexes_T_54"} : (i64) -> i1
    %78 = comb.extract %cam_d_0_data from 27 {sv.namehint = "_indexes_T_55"} : (i64) -> i1
    %79 = comb.extract %cam_a_0_bits_data from 28 {sv.namehint = "_indexes_T_56"} : (i64) -> i1
    %80 = comb.extract %cam_d_0_data from 28 {sv.namehint = "_indexes_T_57"} : (i64) -> i1
    %81 = comb.extract %cam_a_0_bits_data from 29 {sv.namehint = "_indexes_T_58"} : (i64) -> i1
    %82 = comb.extract %cam_d_0_data from 29 {sv.namehint = "_indexes_T_59"} : (i64) -> i1
    %83 = comb.extract %cam_a_0_bits_data from 30 {sv.namehint = "_indexes_T_60"} : (i64) -> i1
    %84 = comb.extract %cam_d_0_data from 30 {sv.namehint = "_indexes_T_61"} : (i64) -> i1
    %85 = comb.extract %cam_a_0_bits_data from 31 {sv.namehint = "_signbits_a_T_3"} : (i64) -> i1
    %86 = comb.extract %cam_d_0_data from 31 {sv.namehint = "_signbits_d_T_3"} : (i64) -> i1
    %87 = comb.extract %cam_a_0_bits_data from 32 {sv.namehint = "_indexes_T_64"} : (i64) -> i1
    %88 = comb.extract %cam_d_0_data from 32 {sv.namehint = "_indexes_T_65"} : (i64) -> i1
    %89 = comb.extract %cam_a_0_bits_data from 33 {sv.namehint = "_indexes_T_66"} : (i64) -> i1
    %90 = comb.extract %cam_d_0_data from 33 {sv.namehint = "_indexes_T_67"} : (i64) -> i1
    %91 = comb.extract %cam_a_0_bits_data from 34 {sv.namehint = "_indexes_T_68"} : (i64) -> i1
    %92 = comb.extract %cam_d_0_data from 34 {sv.namehint = "_indexes_T_69"} : (i64) -> i1
    %93 = comb.extract %cam_a_0_bits_data from 35 {sv.namehint = "_indexes_T_70"} : (i64) -> i1
    %94 = comb.extract %cam_d_0_data from 35 {sv.namehint = "_indexes_T_71"} : (i64) -> i1
    %95 = comb.extract %cam_a_0_bits_data from 36 {sv.namehint = "_indexes_T_72"} : (i64) -> i1
    %96 = comb.extract %cam_d_0_data from 36 {sv.namehint = "_indexes_T_73"} : (i64) -> i1
    %97 = comb.extract %cam_a_0_bits_data from 37 {sv.namehint = "_indexes_T_74"} : (i64) -> i1
    %98 = comb.extract %cam_d_0_data from 37 {sv.namehint = "_indexes_T_75"} : (i64) -> i1
    %99 = comb.extract %cam_a_0_bits_data from 38 {sv.namehint = "_indexes_T_76"} : (i64) -> i1
    %100 = comb.extract %cam_d_0_data from 38 {sv.namehint = "_indexes_T_77"} : (i64) -> i1
    %101 = comb.extract %cam_a_0_bits_data from 39 {sv.namehint = "_signbits_a_T_4"} : (i64) -> i1
    %102 = comb.extract %cam_d_0_data from 39 {sv.namehint = "_signbits_d_T_4"} : (i64) -> i1
    %103 = comb.extract %cam_a_0_bits_data from 40 {sv.namehint = "_indexes_T_80"} : (i64) -> i1
    %104 = comb.extract %cam_d_0_data from 40 {sv.namehint = "_indexes_T_81"} : (i64) -> i1
    %105 = comb.extract %cam_a_0_bits_data from 41 {sv.namehint = "_indexes_T_82"} : (i64) -> i1
    %106 = comb.extract %cam_d_0_data from 41 {sv.namehint = "_indexes_T_83"} : (i64) -> i1
    %107 = comb.extract %cam_a_0_bits_data from 42 {sv.namehint = "_indexes_T_84"} : (i64) -> i1
    %108 = comb.extract %cam_d_0_data from 42 {sv.namehint = "_indexes_T_85"} : (i64) -> i1
    %109 = comb.extract %cam_a_0_bits_data from 43 {sv.namehint = "_indexes_T_86"} : (i64) -> i1
    %110 = comb.extract %cam_d_0_data from 43 {sv.namehint = "_indexes_T_87"} : (i64) -> i1
    %111 = comb.extract %cam_a_0_bits_data from 44 {sv.namehint = "_indexes_T_88"} : (i64) -> i1
    %112 = comb.extract %cam_d_0_data from 44 {sv.namehint = "_indexes_T_89"} : (i64) -> i1
    %113 = comb.extract %cam_a_0_bits_data from 45 {sv.namehint = "_indexes_T_90"} : (i64) -> i1
    %114 = comb.extract %cam_d_0_data from 45 {sv.namehint = "_indexes_T_91"} : (i64) -> i1
    %115 = comb.extract %cam_a_0_bits_data from 46 {sv.namehint = "_indexes_T_92"} : (i64) -> i1
    %116 = comb.extract %cam_d_0_data from 46 {sv.namehint = "_indexes_T_93"} : (i64) -> i1
    %117 = comb.extract %cam_a_0_bits_data from 47 {sv.namehint = "_signbits_a_T_5"} : (i64) -> i1
    %118 = comb.extract %cam_d_0_data from 47 {sv.namehint = "_signbits_d_T_5"} : (i64) -> i1
    %119 = comb.extract %cam_a_0_bits_data from 48 {sv.namehint = "_indexes_T_96"} : (i64) -> i1
    %120 = comb.extract %cam_d_0_data from 48 {sv.namehint = "_indexes_T_97"} : (i64) -> i1
    %121 = comb.extract %cam_a_0_bits_data from 49 {sv.namehint = "_indexes_T_98"} : (i64) -> i1
    %122 = comb.extract %cam_d_0_data from 49 {sv.namehint = "_indexes_T_99"} : (i64) -> i1
    %123 = comb.extract %cam_a_0_bits_data from 50 {sv.namehint = "_indexes_T_100"} : (i64) -> i1
    %124 = comb.extract %cam_d_0_data from 50 {sv.namehint = "_indexes_T_101"} : (i64) -> i1
    %125 = comb.extract %cam_a_0_bits_data from 51 {sv.namehint = "_indexes_T_102"} : (i64) -> i1
    %126 = comb.extract %cam_d_0_data from 51 {sv.namehint = "_indexes_T_103"} : (i64) -> i1
    %127 = comb.extract %cam_a_0_bits_data from 52 {sv.namehint = "_indexes_T_104"} : (i64) -> i1
    %128 = comb.extract %cam_d_0_data from 52 {sv.namehint = "_indexes_T_105"} : (i64) -> i1
    %129 = comb.extract %cam_a_0_bits_data from 53 {sv.namehint = "_indexes_T_106"} : (i64) -> i1
    %130 = comb.extract %cam_d_0_data from 53 {sv.namehint = "_indexes_T_107"} : (i64) -> i1
    %131 = comb.extract %cam_a_0_bits_data from 54 {sv.namehint = "_indexes_T_108"} : (i64) -> i1
    %132 = comb.extract %cam_d_0_data from 54 {sv.namehint = "_indexes_T_109"} : (i64) -> i1
    %133 = comb.extract %cam_a_0_bits_data from 55 {sv.namehint = "_signbits_a_T_6"} : (i64) -> i1
    %134 = comb.extract %cam_d_0_data from 55 {sv.namehint = "_signbits_d_T_6"} : (i64) -> i1
    %135 = comb.extract %cam_a_0_bits_data from 56 {sv.namehint = "_indexes_T_112"} : (i64) -> i1
    %136 = comb.extract %cam_d_0_data from 56 {sv.namehint = "_indexes_T_113"} : (i64) -> i1
    %137 = comb.extract %cam_a_0_bits_data from 57 {sv.namehint = "_indexes_T_114"} : (i64) -> i1
    %138 = comb.extract %cam_d_0_data from 57 {sv.namehint = "_indexes_T_115"} : (i64) -> i1
    %139 = comb.extract %cam_a_0_bits_data from 58 {sv.namehint = "_indexes_T_116"} : (i64) -> i1
    %140 = comb.extract %cam_d_0_data from 58 {sv.namehint = "_indexes_T_117"} : (i64) -> i1
    %141 = comb.extract %cam_a_0_bits_data from 59 {sv.namehint = "_indexes_T_118"} : (i64) -> i1
    %142 = comb.extract %cam_d_0_data from 59 {sv.namehint = "_indexes_T_119"} : (i64) -> i1
    %143 = comb.extract %cam_a_0_bits_data from 60 {sv.namehint = "_indexes_T_120"} : (i64) -> i1
    %144 = comb.extract %cam_d_0_data from 60 {sv.namehint = "_indexes_T_121"} : (i64) -> i1
    %145 = comb.extract %cam_a_0_bits_data from 61 {sv.namehint = "_indexes_T_122"} : (i64) -> i1
    %146 = comb.extract %cam_d_0_data from 61 {sv.namehint = "_indexes_T_123"} : (i64) -> i1
    %147 = comb.extract %cam_a_0_bits_data from 62 {sv.namehint = "_indexes_T_124"} : (i64) -> i1
    %148 = comb.extract %cam_d_0_data from 62 {sv.namehint = "_indexes_T_125"} : (i64) -> i1
    %149 = comb.extract %cam_a_0_bits_data from 63 {sv.namehint = "_signbits_a_T_7"} : (i64) -> i1
    %150 = comb.extract %cam_d_0_data from 63 {sv.namehint = "_signbits_d_T_7"} : (i64) -> i1
    %151 = comb.concat %c0_i2, %23, %24 : i2, i1, i1
    %152 = comb.shru bin %cam_a_0_lut, %151 {sv.namehint = "_logic_out_T"} : i4
    %153 = comb.extract %152 from 0 {sv.namehint = "_logic_out_T_1"} : (i4) -> i1
    %154 = comb.concat %c0_i2, %25, %26 : i2, i1, i1
    %155 = comb.shru bin %cam_a_0_lut, %154 {sv.namehint = "_logic_out_T_2"} : i4
    %156 = comb.extract %155 from 0 {sv.namehint = "_logic_out_T_3"} : (i4) -> i1
    %157 = comb.concat %c0_i2, %27, %28 : i2, i1, i1
    %158 = comb.shru bin %cam_a_0_lut, %157 {sv.namehint = "_logic_out_T_4"} : i4
    %159 = comb.extract %158 from 0 {sv.namehint = "_logic_out_T_5"} : (i4) -> i1
    %160 = comb.concat %c0_i2, %29, %30 : i2, i1, i1
    %161 = comb.shru bin %cam_a_0_lut, %160 {sv.namehint = "_logic_out_T_6"} : i4
    %162 = comb.extract %161 from 0 {sv.namehint = "_logic_out_T_7"} : (i4) -> i1
    %163 = comb.concat %c0_i2, %31, %32 : i2, i1, i1
    %164 = comb.shru bin %cam_a_0_lut, %163 {sv.namehint = "_logic_out_T_8"} : i4
    %165 = comb.extract %164 from 0 {sv.namehint = "_logic_out_T_9"} : (i4) -> i1
    %166 = comb.concat %c0_i2, %33, %34 : i2, i1, i1
    %167 = comb.shru bin %cam_a_0_lut, %166 {sv.namehint = "_logic_out_T_10"} : i4
    %168 = comb.extract %167 from 0 {sv.namehint = "_logic_out_T_11"} : (i4) -> i1
    %169 = comb.concat %c0_i2, %35, %36 : i2, i1, i1
    %170 = comb.shru bin %cam_a_0_lut, %169 {sv.namehint = "_logic_out_T_12"} : i4
    %171 = comb.extract %170 from 0 {sv.namehint = "_logic_out_T_13"} : (i4) -> i1
    %172 = comb.concat %c0_i2, %37, %38 : i2, i1, i1
    %173 = comb.shru bin %cam_a_0_lut, %172 {sv.namehint = "_logic_out_T_14"} : i4
    %174 = comb.extract %173 from 0 {sv.namehint = "_logic_out_T_15"} : (i4) -> i1
    %175 = comb.concat %c0_i2, %39, %40 : i2, i1, i1
    %176 = comb.shru bin %cam_a_0_lut, %175 {sv.namehint = "_logic_out_T_16"} : i4
    %177 = comb.extract %176 from 0 {sv.namehint = "_logic_out_T_17"} : (i4) -> i1
    %178 = comb.concat %c0_i2, %41, %42 : i2, i1, i1
    %179 = comb.shru bin %cam_a_0_lut, %178 {sv.namehint = "_logic_out_T_18"} : i4
    %180 = comb.extract %179 from 0 {sv.namehint = "_logic_out_T_19"} : (i4) -> i1
    %181 = comb.concat %c0_i2, %43, %44 : i2, i1, i1
    %182 = comb.shru bin %cam_a_0_lut, %181 {sv.namehint = "_logic_out_T_20"} : i4
    %183 = comb.extract %182 from 0 {sv.namehint = "_logic_out_T_21"} : (i4) -> i1
    %184 = comb.concat %c0_i2, %45, %46 : i2, i1, i1
    %185 = comb.shru bin %cam_a_0_lut, %184 {sv.namehint = "_logic_out_T_22"} : i4
    %186 = comb.extract %185 from 0 {sv.namehint = "_logic_out_T_23"} : (i4) -> i1
    %187 = comb.concat %c0_i2, %47, %48 : i2, i1, i1
    %188 = comb.shru bin %cam_a_0_lut, %187 {sv.namehint = "_logic_out_T_24"} : i4
    %189 = comb.extract %188 from 0 {sv.namehint = "_logic_out_T_25"} : (i4) -> i1
    %190 = comb.concat %c0_i2, %49, %50 : i2, i1, i1
    %191 = comb.shru bin %cam_a_0_lut, %190 {sv.namehint = "_logic_out_T_26"} : i4
    %192 = comb.extract %191 from 0 {sv.namehint = "_logic_out_T_27"} : (i4) -> i1
    %193 = comb.concat %c0_i2, %51, %52 : i2, i1, i1
    %194 = comb.shru bin %cam_a_0_lut, %193 {sv.namehint = "_logic_out_T_28"} : i4
    %195 = comb.extract %194 from 0 {sv.namehint = "_logic_out_T_29"} : (i4) -> i1
    %196 = comb.concat %c0_i2, %53, %54 : i2, i1, i1
    %197 = comb.shru bin %cam_a_0_lut, %196 {sv.namehint = "_logic_out_T_30"} : i4
    %198 = comb.extract %197 from 0 {sv.namehint = "_logic_out_T_31"} : (i4) -> i1
    %199 = comb.concat %c0_i2, %55, %56 : i2, i1, i1
    %200 = comb.shru bin %cam_a_0_lut, %199 {sv.namehint = "_logic_out_T_32"} : i4
    %201 = comb.extract %200 from 0 {sv.namehint = "_logic_out_T_33"} : (i4) -> i1
    %202 = comb.concat %c0_i2, %57, %58 : i2, i1, i1
    %203 = comb.shru bin %cam_a_0_lut, %202 {sv.namehint = "_logic_out_T_34"} : i4
    %204 = comb.extract %203 from 0 {sv.namehint = "_logic_out_T_35"} : (i4) -> i1
    %205 = comb.concat %c0_i2, %59, %60 : i2, i1, i1
    %206 = comb.shru bin %cam_a_0_lut, %205 {sv.namehint = "_logic_out_T_36"} : i4
    %207 = comb.extract %206 from 0 {sv.namehint = "_logic_out_T_37"} : (i4) -> i1
    %208 = comb.concat %c0_i2, %61, %62 : i2, i1, i1
    %209 = comb.shru bin %cam_a_0_lut, %208 {sv.namehint = "_logic_out_T_38"} : i4
    %210 = comb.extract %209 from 0 {sv.namehint = "_logic_out_T_39"} : (i4) -> i1
    %211 = comb.concat %c0_i2, %63, %64 : i2, i1, i1
    %212 = comb.shru bin %cam_a_0_lut, %211 {sv.namehint = "_logic_out_T_40"} : i4
    %213 = comb.extract %212 from 0 {sv.namehint = "_logic_out_T_41"} : (i4) -> i1
    %214 = comb.concat %c0_i2, %65, %66 : i2, i1, i1
    %215 = comb.shru bin %cam_a_0_lut, %214 {sv.namehint = "_logic_out_T_42"} : i4
    %216 = comb.extract %215 from 0 {sv.namehint = "_logic_out_T_43"} : (i4) -> i1
    %217 = comb.concat %c0_i2, %67, %68 : i2, i1, i1
    %218 = comb.shru bin %cam_a_0_lut, %217 {sv.namehint = "_logic_out_T_44"} : i4
    %219 = comb.extract %218 from 0 {sv.namehint = "_logic_out_T_45"} : (i4) -> i1
    %220 = comb.concat %c0_i2, %69, %70 : i2, i1, i1
    %221 = comb.shru bin %cam_a_0_lut, %220 {sv.namehint = "_logic_out_T_46"} : i4
    %222 = comb.extract %221 from 0 {sv.namehint = "_logic_out_T_47"} : (i4) -> i1
    %223 = comb.concat %c0_i2, %71, %72 : i2, i1, i1
    %224 = comb.shru bin %cam_a_0_lut, %223 {sv.namehint = "_logic_out_T_48"} : i4
    %225 = comb.extract %224 from 0 {sv.namehint = "_logic_out_T_49"} : (i4) -> i1
    %226 = comb.concat %c0_i2, %73, %74 : i2, i1, i1
    %227 = comb.shru bin %cam_a_0_lut, %226 {sv.namehint = "_logic_out_T_50"} : i4
    %228 = comb.extract %227 from 0 {sv.namehint = "_logic_out_T_51"} : (i4) -> i1
    %229 = comb.concat %c0_i2, %75, %76 : i2, i1, i1
    %230 = comb.shru bin %cam_a_0_lut, %229 {sv.namehint = "_logic_out_T_52"} : i4
    %231 = comb.extract %230 from 0 {sv.namehint = "_logic_out_T_53"} : (i4) -> i1
    %232 = comb.concat %c0_i2, %77, %78 : i2, i1, i1
    %233 = comb.shru bin %cam_a_0_lut, %232 {sv.namehint = "_logic_out_T_54"} : i4
    %234 = comb.extract %233 from 0 {sv.namehint = "_logic_out_T_55"} : (i4) -> i1
    %235 = comb.concat %c0_i2, %79, %80 : i2, i1, i1
    %236 = comb.shru bin %cam_a_0_lut, %235 {sv.namehint = "_logic_out_T_56"} : i4
    %237 = comb.extract %236 from 0 {sv.namehint = "_logic_out_T_57"} : (i4) -> i1
    %238 = comb.concat %c0_i2, %81, %82 : i2, i1, i1
    %239 = comb.shru bin %cam_a_0_lut, %238 {sv.namehint = "_logic_out_T_58"} : i4
    %240 = comb.extract %239 from 0 {sv.namehint = "_logic_out_T_59"} : (i4) -> i1
    %241 = comb.concat %c0_i2, %83, %84 : i2, i1, i1
    %242 = comb.shru bin %cam_a_0_lut, %241 {sv.namehint = "_logic_out_T_60"} : i4
    %243 = comb.extract %242 from 0 {sv.namehint = "_logic_out_T_61"} : (i4) -> i1
    %244 = comb.concat %c0_i2, %85, %86 : i2, i1, i1
    %245 = comb.shru bin %cam_a_0_lut, %244 {sv.namehint = "_logic_out_T_62"} : i4
    %246 = comb.extract %245 from 0 {sv.namehint = "_logic_out_T_63"} : (i4) -> i1
    %247 = comb.concat %c0_i2, %87, %88 : i2, i1, i1
    %248 = comb.shru bin %cam_a_0_lut, %247 {sv.namehint = "_logic_out_T_64"} : i4
    %249 = comb.extract %248 from 0 {sv.namehint = "_logic_out_T_65"} : (i4) -> i1
    %250 = comb.concat %c0_i2, %89, %90 : i2, i1, i1
    %251 = comb.shru bin %cam_a_0_lut, %250 {sv.namehint = "_logic_out_T_66"} : i4
    %252 = comb.extract %251 from 0 {sv.namehint = "_logic_out_T_67"} : (i4) -> i1
    %253 = comb.concat %c0_i2, %91, %92 : i2, i1, i1
    %254 = comb.shru bin %cam_a_0_lut, %253 {sv.namehint = "_logic_out_T_68"} : i4
    %255 = comb.extract %254 from 0 {sv.namehint = "_logic_out_T_69"} : (i4) -> i1
    %256 = comb.concat %c0_i2, %93, %94 : i2, i1, i1
    %257 = comb.shru bin %cam_a_0_lut, %256 {sv.namehint = "_logic_out_T_70"} : i4
    %258 = comb.extract %257 from 0 {sv.namehint = "_logic_out_T_71"} : (i4) -> i1
    %259 = comb.concat %c0_i2, %95, %96 : i2, i1, i1
    %260 = comb.shru bin %cam_a_0_lut, %259 {sv.namehint = "_logic_out_T_72"} : i4
    %261 = comb.extract %260 from 0 {sv.namehint = "_logic_out_T_73"} : (i4) -> i1
    %262 = comb.concat %c0_i2, %97, %98 : i2, i1, i1
    %263 = comb.shru bin %cam_a_0_lut, %262 {sv.namehint = "_logic_out_T_74"} : i4
    %264 = comb.extract %263 from 0 {sv.namehint = "_logic_out_T_75"} : (i4) -> i1
    %265 = comb.concat %c0_i2, %99, %100 : i2, i1, i1
    %266 = comb.shru bin %cam_a_0_lut, %265 {sv.namehint = "_logic_out_T_76"} : i4
    %267 = comb.extract %266 from 0 {sv.namehint = "_logic_out_T_77"} : (i4) -> i1
    %268 = comb.concat %c0_i2, %101, %102 : i2, i1, i1
    %269 = comb.shru bin %cam_a_0_lut, %268 {sv.namehint = "_logic_out_T_78"} : i4
    %270 = comb.extract %269 from 0 {sv.namehint = "_logic_out_T_79"} : (i4) -> i1
    %271 = comb.concat %c0_i2, %103, %104 : i2, i1, i1
    %272 = comb.shru bin %cam_a_0_lut, %271 {sv.namehint = "_logic_out_T_80"} : i4
    %273 = comb.extract %272 from 0 {sv.namehint = "_logic_out_T_81"} : (i4) -> i1
    %274 = comb.concat %c0_i2, %105, %106 : i2, i1, i1
    %275 = comb.shru bin %cam_a_0_lut, %274 {sv.namehint = "_logic_out_T_82"} : i4
    %276 = comb.extract %275 from 0 {sv.namehint = "_logic_out_T_83"} : (i4) -> i1
    %277 = comb.concat %c0_i2, %107, %108 : i2, i1, i1
    %278 = comb.shru bin %cam_a_0_lut, %277 {sv.namehint = "_logic_out_T_84"} : i4
    %279 = comb.extract %278 from 0 {sv.namehint = "_logic_out_T_85"} : (i4) -> i1
    %280 = comb.concat %c0_i2, %109, %110 : i2, i1, i1
    %281 = comb.shru bin %cam_a_0_lut, %280 {sv.namehint = "_logic_out_T_86"} : i4
    %282 = comb.extract %281 from 0 {sv.namehint = "_logic_out_T_87"} : (i4) -> i1
    %283 = comb.concat %c0_i2, %111, %112 : i2, i1, i1
    %284 = comb.shru bin %cam_a_0_lut, %283 {sv.namehint = "_logic_out_T_88"} : i4
    %285 = comb.extract %284 from 0 {sv.namehint = "_logic_out_T_89"} : (i4) -> i1
    %286 = comb.concat %c0_i2, %113, %114 : i2, i1, i1
    %287 = comb.shru bin %cam_a_0_lut, %286 {sv.namehint = "_logic_out_T_90"} : i4
    %288 = comb.extract %287 from 0 {sv.namehint = "_logic_out_T_91"} : (i4) -> i1
    %289 = comb.concat %c0_i2, %115, %116 : i2, i1, i1
    %290 = comb.shru bin %cam_a_0_lut, %289 {sv.namehint = "_logic_out_T_92"} : i4
    %291 = comb.extract %290 from 0 {sv.namehint = "_logic_out_T_93"} : (i4) -> i1
    %292 = comb.concat %c0_i2, %117, %118 : i2, i1, i1
    %293 = comb.shru bin %cam_a_0_lut, %292 {sv.namehint = "_logic_out_T_94"} : i4
    %294 = comb.extract %293 from 0 {sv.namehint = "_logic_out_T_95"} : (i4) -> i1
    %295 = comb.concat %c0_i2, %119, %120 : i2, i1, i1
    %296 = comb.shru bin %cam_a_0_lut, %295 {sv.namehint = "_logic_out_T_96"} : i4
    %297 = comb.extract %296 from 0 {sv.namehint = "_logic_out_T_97"} : (i4) -> i1
    %298 = comb.concat %c0_i2, %121, %122 : i2, i1, i1
    %299 = comb.shru bin %cam_a_0_lut, %298 {sv.namehint = "_logic_out_T_98"} : i4
    %300 = comb.extract %299 from 0 {sv.namehint = "_logic_out_T_99"} : (i4) -> i1
    %301 = comb.concat %c0_i2, %123, %124 : i2, i1, i1
    %302 = comb.shru bin %cam_a_0_lut, %301 {sv.namehint = "_logic_out_T_100"} : i4
    %303 = comb.extract %302 from 0 {sv.namehint = "_logic_out_T_101"} : (i4) -> i1
    %304 = comb.concat %c0_i2, %125, %126 : i2, i1, i1
    %305 = comb.shru bin %cam_a_0_lut, %304 {sv.namehint = "_logic_out_T_102"} : i4
    %306 = comb.extract %305 from 0 {sv.namehint = "_logic_out_T_103"} : (i4) -> i1
    %307 = comb.concat %c0_i2, %127, %128 : i2, i1, i1
    %308 = comb.shru bin %cam_a_0_lut, %307 {sv.namehint = "_logic_out_T_104"} : i4
    %309 = comb.extract %308 from 0 {sv.namehint = "_logic_out_T_105"} : (i4) -> i1
    %310 = comb.concat %c0_i2, %129, %130 : i2, i1, i1
    %311 = comb.shru bin %cam_a_0_lut, %310 {sv.namehint = "_logic_out_T_106"} : i4
    %312 = comb.extract %311 from 0 {sv.namehint = "_logic_out_T_107"} : (i4) -> i1
    %313 = comb.concat %c0_i2, %131, %132 : i2, i1, i1
    %314 = comb.shru bin %cam_a_0_lut, %313 {sv.namehint = "_logic_out_T_108"} : i4
    %315 = comb.extract %314 from 0 {sv.namehint = "_logic_out_T_109"} : (i4) -> i1
    %316 = comb.concat %c0_i2, %133, %134 : i2, i1, i1
    %317 = comb.shru bin %cam_a_0_lut, %316 {sv.namehint = "_logic_out_T_110"} : i4
    %318 = comb.extract %317 from 0 {sv.namehint = "_logic_out_T_111"} : (i4) -> i1
    %319 = comb.concat %c0_i2, %135, %136 : i2, i1, i1
    %320 = comb.shru bin %cam_a_0_lut, %319 {sv.namehint = "_logic_out_T_112"} : i4
    %321 = comb.extract %320 from 0 {sv.namehint = "_logic_out_T_113"} : (i4) -> i1
    %322 = comb.concat %c0_i2, %137, %138 : i2, i1, i1
    %323 = comb.shru bin %cam_a_0_lut, %322 {sv.namehint = "_logic_out_T_114"} : i4
    %324 = comb.extract %323 from 0 {sv.namehint = "_logic_out_T_115"} : (i4) -> i1
    %325 = comb.concat %c0_i2, %139, %140 : i2, i1, i1
    %326 = comb.shru bin %cam_a_0_lut, %325 {sv.namehint = "_logic_out_T_116"} : i4
    %327 = comb.extract %326 from 0 {sv.namehint = "_logic_out_T_117"} : (i4) -> i1
    %328 = comb.concat %c0_i2, %141, %142 : i2, i1, i1
    %329 = comb.shru bin %cam_a_0_lut, %328 {sv.namehint = "_logic_out_T_118"} : i4
    %330 = comb.extract %329 from 0 {sv.namehint = "_logic_out_T_119"} : (i4) -> i1
    %331 = comb.concat %c0_i2, %143, %144 : i2, i1, i1
    %332 = comb.shru bin %cam_a_0_lut, %331 {sv.namehint = "_logic_out_T_120"} : i4
    %333 = comb.extract %332 from 0 {sv.namehint = "_logic_out_T_121"} : (i4) -> i1
    %334 = comb.concat %c0_i2, %145, %146 : i2, i1, i1
    %335 = comb.shru bin %cam_a_0_lut, %334 {sv.namehint = "_logic_out_T_122"} : i4
    %336 = comb.extract %335 from 0 {sv.namehint = "_logic_out_T_123"} : (i4) -> i1
    %337 = comb.concat %c0_i2, %147, %148 : i2, i1, i1
    %338 = comb.shru bin %cam_a_0_lut, %337 {sv.namehint = "_logic_out_T_124"} : i4
    %339 = comb.extract %338 from 0 {sv.namehint = "_logic_out_T_125"} : (i4) -> i1
    %340 = comb.concat %c0_i2, %149, %150 : i2, i1, i1
    %341 = comb.shru bin %cam_a_0_lut, %340 {sv.namehint = "_logic_out_T_126"} : i4
    %342 = comb.extract %341 from 0 {sv.namehint = "_logic_out_T_127"} : (i4) -> i1
    %343 = comb.concat %342, %339, %336, %333, %330, %327, %324, %321, %318, %315, %312, %309, %306, %303, %300, %297, %294, %291, %288, %285, %282, %279, %276, %273, %270, %267, %264, %261, %258, %255, %252, %249, %246, %243, %240, %237, %234, %231, %228, %225, %222, %219, %216, %213, %210, %207, %204, %201, %198, %195, %192, %189, %186, %183, %180, %177, %174, %171, %168, %165, %162, %159, %156, %153 {sv.namehint = "logic_out"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %344 = comb.extract %cam_a_0_bits_param from 1 {sv.namehint = "unsigned"} : (i3) -> i1
    %345 = comb.extract %cam_a_0_bits_param from 0 {sv.namehint = "take_max"} : (i3) -> i1
    %346 = comb.extract %cam_a_0_bits_param from 2 {sv.namehint = "adder"} : (i3) -> i1
    %347 = comb.extract %cam_a_0_bits_mask from 0 : (i8) -> i7
    %348 = comb.xor bin %347, %c-1_i7 {sv.namehint = "_signSel_T"} : i7
    %349 = comb.extract %cam_a_0_bits_mask from 1 {sv.namehint = "_signSel_T_1"} : (i8) -> i7
    %350 = comb.or bin %348, %349 : i7
    %351 = comb.xor bin %350, %c-1_i7 {sv.namehint = "signSel"} : i7
    %352 = comb.concat %133, %117, %101, %85, %69, %53, %37 : i1, i1, i1, i1, i1, i1, i1
    %353 = comb.and bin %352, %351 {sv.namehint = "_signbit_a_T"} : i7
    %354 = comb.concat %353, %false {sv.namehint = "signbit_a"} : i7, i1
    %355 = comb.concat %134, %118, %102, %86, %70, %54, %38 : i1, i1, i1, i1, i1, i1, i1
    %356 = comb.and bin %355, %351 {sv.namehint = "_signbit_d_T"} : i7
    %357 = comb.concat %356, %false {sv.namehint = "signbit_d"} : i7, i1
    %358 = comb.extract %353 from 0 : (i7) -> i6
    %359 = comb.concat %358, %c0_i2 {sv.namehint = "_signext_a_T_1"} : i6, i2
    %360 = comb.or bin %354, %359 {sv.namehint = "_signext_a_T_2"} : i8
    %361 = comb.extract %360 from 0 : (i8) -> i6
    %362 = comb.concat %361, %c0_i2 {sv.namehint = "_signext_a_T_4"} : i6, i2
    %363 = comb.or bin %360, %362 {sv.namehint = "_signext_a_T_5"} : i8
    %364 = comb.extract %363 from 0 : (i8) -> i4
    %365 = comb.concat %364, %c0_i4 {sv.namehint = "_signext_a_T_7"} : i4, i4
    %366 = comb.or bin %363, %365 {sv.namehint = "_signext_a_T_9"} : i8
    %367 = comb.extract %366 from 0 {sv.namehint = "_signext_a_T_18"} : (i8) -> i1
    %368 = comb.extract %366 from 1 {sv.namehint = "_signext_a_T_20"} : (i8) -> i1
    %369 = comb.extract %366 from 2 {sv.namehint = "_signext_a_T_22"} : (i8) -> i1
    %370 = comb.extract %366 from 3 {sv.namehint = "_signext_a_T_24"} : (i8) -> i1
    %371 = comb.extract %366 from 4 {sv.namehint = "_signext_a_T_26"} : (i8) -> i1
    %372 = comb.extract %366 from 5 {sv.namehint = "_signext_a_T_28"} : (i8) -> i1
    %373 = comb.extract %366 from 6 {sv.namehint = "_signext_a_T_30"} : (i8) -> i1
    %374 = comb.extract %366 from 7 {sv.namehint = "_signext_a_T_32"} : (i8) -> i1
    %375 = comb.replicate %367 {sv.namehint = "_signext_a_T_19"} : (i1) -> i8
    %376 = comb.replicate %368 {sv.namehint = "_signext_a_T_21"} : (i1) -> i8
    %377 = comb.replicate %369 {sv.namehint = "_signext_a_T_23"} : (i1) -> i8
    %378 = comb.replicate %370 {sv.namehint = "_signext_a_T_25"} : (i1) -> i8
    %379 = comb.replicate %371 {sv.namehint = "_signext_a_T_27"} : (i1) -> i8
    %380 = comb.replicate %372 {sv.namehint = "_signext_a_T_29"} : (i1) -> i8
    %381 = comb.replicate %373 {sv.namehint = "_signext_a_T_31"} : (i1) -> i8
    %382 = comb.replicate %374 {sv.namehint = "_signext_a_T_33"} : (i1) -> i8
    %383 = comb.concat %382, %381, %380, %379, %378, %377, %376, %375 {sv.namehint = "signext_a"} : i8, i8, i8, i8, i8, i8, i8, i8
    %384 = comb.extract %356 from 0 : (i7) -> i6
    %385 = comb.concat %384, %c0_i2 {sv.namehint = "_signext_d_T_1"} : i6, i2
    %386 = comb.or bin %357, %385 {sv.namehint = "_signext_d_T_2"} : i8
    %387 = comb.extract %386 from 0 : (i8) -> i6
    %388 = comb.concat %387, %c0_i2 {sv.namehint = "_signext_d_T_4"} : i6, i2
    %389 = comb.or bin %386, %388 {sv.namehint = "_signext_d_T_5"} : i8
    %390 = comb.extract %389 from 0 : (i8) -> i4
    %391 = comb.concat %390, %c0_i4 {sv.namehint = "_signext_d_T_7"} : i4, i4
    %392 = comb.or bin %389, %391 {sv.namehint = "_signext_d_T_9"} : i8
    %393 = comb.extract %392 from 0 {sv.namehint = "_signext_d_T_18"} : (i8) -> i1
    %394 = comb.extract %392 from 1 {sv.namehint = "_signext_d_T_20"} : (i8) -> i1
    %395 = comb.extract %392 from 2 {sv.namehint = "_signext_d_T_22"} : (i8) -> i1
    %396 = comb.extract %392 from 3 {sv.namehint = "_signext_d_T_24"} : (i8) -> i1
    %397 = comb.extract %392 from 4 {sv.namehint = "_signext_d_T_26"} : (i8) -> i1
    %398 = comb.extract %392 from 5 {sv.namehint = "_signext_d_T_28"} : (i8) -> i1
    %399 = comb.extract %392 from 6 {sv.namehint = "_signext_d_T_30"} : (i8) -> i1
    %400 = comb.extract %392 from 7 {sv.namehint = "_signext_d_T_32"} : (i8) -> i1
    %401 = comb.replicate %393 {sv.namehint = "_signext_d_T_19"} : (i1) -> i8
    %402 = comb.replicate %394 {sv.namehint = "_signext_d_T_21"} : (i1) -> i8
    %403 = comb.replicate %395 {sv.namehint = "_signext_d_T_23"} : (i1) -> i8
    %404 = comb.replicate %396 {sv.namehint = "_signext_d_T_25"} : (i1) -> i8
    %405 = comb.replicate %397 {sv.namehint = "_signext_d_T_27"} : (i1) -> i8
    %406 = comb.replicate %398 {sv.namehint = "_signext_d_T_29"} : (i1) -> i8
    %407 = comb.replicate %399 {sv.namehint = "_signext_d_T_31"} : (i1) -> i8
    %408 = comb.replicate %400 {sv.namehint = "_signext_d_T_33"} : (i1) -> i8
    %409 = comb.concat %408, %407, %406, %405, %404, %403, %402, %401 {sv.namehint = "signext_d"} : i8, i8, i8, i8, i8, i8, i8, i8
    %410 = comb.extract %cam_a_0_bits_mask from 0 {sv.namehint = "_wide_mask_T_8"} : (i8) -> i1
    %411 = comb.extract %cam_a_0_bits_mask from 1 {sv.namehint = "_wide_mask_T_10"} : (i8) -> i1
    %412 = comb.extract %cam_a_0_bits_mask from 2 {sv.namehint = "_wide_mask_T_12"} : (i8) -> i1
    %413 = comb.extract %cam_a_0_bits_mask from 3 {sv.namehint = "_wide_mask_T_14"} : (i8) -> i1
    %414 = comb.extract %cam_a_0_bits_mask from 4 {sv.namehint = "_wide_mask_T_16"} : (i8) -> i1
    %415 = comb.extract %cam_a_0_bits_mask from 5 {sv.namehint = "_wide_mask_T_18"} : (i8) -> i1
    %416 = comb.extract %cam_a_0_bits_mask from 6 {sv.namehint = "_wide_mask_T_20"} : (i8) -> i1
    %417 = comb.extract %cam_a_0_bits_mask from 7 {sv.namehint = "_wide_mask_T_22"} : (i8) -> i1
    %418 = comb.replicate %410 {sv.namehint = "_wide_mask_T_9"} : (i1) -> i8
    %419 = comb.replicate %411 {sv.namehint = "_wide_mask_T_11"} : (i1) -> i8
    %420 = comb.replicate %412 {sv.namehint = "_wide_mask_T_13"} : (i1) -> i8
    %421 = comb.replicate %413 {sv.namehint = "_wide_mask_T_15"} : (i1) -> i8
    %422 = comb.replicate %414 {sv.namehint = "_wide_mask_T_17"} : (i1) -> i8
    %423 = comb.replicate %415 {sv.namehint = "_wide_mask_T_19"} : (i1) -> i8
    %424 = comb.replicate %416 {sv.namehint = "_wide_mask_T_21"} : (i1) -> i8
    %425 = comb.replicate %417 {sv.namehint = "_wide_mask_T_23"} : (i1) -> i8
    %426 = comb.concat %425, %424, %423, %422, %421, %420, %419, %418 {sv.namehint = "wide_mask"} : i8, i8, i8, i8, i8, i8, i8, i8
    %427 = comb.and bin %cam_a_0_bits_data, %426 {sv.namehint = "_a_a_ext_T"} : i64
    %428 = comb.or bin %427, %383 {sv.namehint = "a_a_ext"} : i64
    %429 = comb.and bin %cam_d_0_data, %426 {sv.namehint = "_a_d_ext_T"} : i64
    %430 = comb.or bin %429, %409 {sv.namehint = "a_d_ext"} : i64
    %431 = comb.xor %346, %true : i1
    %432 = comb.replicate %431 : (i1) -> i64
    %433 = comb.xor %432, %430 {sv.namehint = "a_d_inv"} : i64
    %434 = comb.add bin %428, %433 {sv.namehint = "_adder_out_T"} : i64
    %435 = comb.extract %428 from 63 {sv.namehint = "_a_bigger_T"} : (i64) -> i1
    %436 = comb.icmp bin eq %344, %435 {sv.namehint = "a_bigger_uneq"} : i1
    %437 = comb.extract %430 from 63 {sv.namehint = "_a_bigger_T_1"} : (i64) -> i1
    %438 = comb.icmp bin eq %435, %437 {sv.namehint = "_a_bigger_T_2"} : i1
    %439 = comb.extract %434 from 63 {sv.namehint = "_a_bigger_T_3"} : (i64) -> i1
    %440 = comb.xor bin %439, %true {sv.namehint = "_a_bigger_T_4"} : i1
    %441 = comb.mux bin %438, %440, %436 {sv.namehint = "a_bigger"} : i1
    %442 = comb.icmp bin eq %345, %441 {sv.namehint = "pick_a"} : i1
    %443 = comb.mux bin %442, %cam_a_0_bits_data, %cam_d_0_data {sv.namehint = "_arith_out_T"} : i64
    %444 = comb.mux bin %346, %434, %443 {sv.namehint = "arith_out"} : i64
    %445 = comb.extract %cam_a_0_bits_opcode from 0 {sv.namehint = "_amo_data_T"} : (i3) -> i1
    %446 = comb.mux bin %445, %343, %444 {sv.namehint = "amo_data"} : i64
    %447 = comb.xor bin %5, %true {sv.namehint = "_a_allow_T"} : i1
    %448 = comb.or bin %22, %2 {sv.namehint = "_a_allow_T_1"} : i1
    %449 = comb.and bin %447, %448 {sv.namehint = "a_allow"} : i1
    %450 = comb.and bin %527, %449 {sv.namehint = "nodeIn_a_ready"} : i1
    %451 = comb.and bin %auto_in_a_valid, %449 {sv.namehint = "source_i_valid"} : i1
    %452 = comb.xor bin %22, %true : i1
    %453 = comb.mux bin %22, %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "source_i_bits_opcode"} : i3
    %454 = comb.or bin %cam_a_0_bits_corrupt, %cam_d_0_corrupt {sv.namehint = "source_c_bits_a_corrupt"} : i1
    %455 = comb.extract %cam_a_0_bits_size from 0 {sv.namehint = "source_c_bits_a_mask_sizeOH_shiftAmount"} : (i4) -> i2
    %456 = comb.concat %c0_i2, %455 : i2, i2
    %457 = comb.shl bin %c1_i4, %456 {sv.namehint = "_source_c_bits_a_mask_sizeOH_T_1"} : i4
    %458 = comb.icmp bin ugt %cam_a_0_bits_size, %c2_i4 {sv.namehint = "_source_c_bits_a_mask_T"} : i4
    %459 = comb.extract %457 from 2 {sv.namehint = "source_c_bits_a_mask_size"} : (i4) -> i1
    %460 = comb.extract %cam_a_0_bits_address from 2 {sv.namehint = "source_c_bits_a_mask_bit"} : (i28) -> i1
    %461 = comb.xor bin %460, %true {sv.namehint = "source_c_bits_a_mask_eq"} : i1
    %462 = comb.and bin %459, %461 {sv.namehint = "_source_c_bits_a_mask_acc_T"} : i1
    %463 = comb.or bin %458, %462 {sv.namehint = "source_c_bits_a_mask_acc"} : i1
    %464 = comb.and bin %459, %460 {sv.namehint = "_source_c_bits_a_mask_acc_T_1"} : i1
    %465 = comb.or bin %458, %464 {sv.namehint = "source_c_bits_a_mask_acc_1"} : i1
    %466 = comb.extract %457 from 1 {sv.namehint = "source_c_bits_a_mask_size_1"} : (i4) -> i1
    %467 = comb.extract %cam_a_0_bits_address from 1 {sv.namehint = "source_c_bits_a_mask_bit_1"} : (i28) -> i1
    %468 = comb.xor bin %467, %true {sv.namehint = "source_c_bits_a_mask_nbit_1"} : i1
    %469 = comb.and bin %461, %468 {sv.namehint = "source_c_bits_a_mask_eq_2"} : i1
    %470 = comb.and bin %466, %469 {sv.namehint = "_source_c_bits_a_mask_acc_T_2"} : i1
    %471 = comb.or bin %463, %470 {sv.namehint = "source_c_bits_a_mask_acc_2"} : i1
    %472 = comb.and bin %461, %467 {sv.namehint = "source_c_bits_a_mask_eq_3"} : i1
    %473 = comb.and bin %466, %472 {sv.namehint = "_source_c_bits_a_mask_acc_T_3"} : i1
    %474 = comb.or bin %463, %473 {sv.namehint = "source_c_bits_a_mask_acc_3"} : i1
    %475 = comb.and bin %460, %468 {sv.namehint = "source_c_bits_a_mask_eq_4"} : i1
    %476 = comb.and bin %466, %475 {sv.namehint = "_source_c_bits_a_mask_acc_T_4"} : i1
    %477 = comb.or bin %465, %476 {sv.namehint = "source_c_bits_a_mask_acc_4"} : i1
    %478 = comb.and bin %460, %467 {sv.namehint = "source_c_bits_a_mask_eq_5"} : i1
    %479 = comb.and bin %466, %478 {sv.namehint = "_source_c_bits_a_mask_acc_T_5"} : i1
    %480 = comb.or bin %465, %479 {sv.namehint = "source_c_bits_a_mask_acc_5"} : i1
    %481 = comb.extract %cam_a_0_bits_address from 0 {sv.namehint = "source_c_bits_a_mask_bit_2"} : (i28) -> i1
    %482 = comb.xor bin %481, %true {sv.namehint = "source_c_bits_a_mask_nbit_2"} : i1
    %483 = comb.and bin %469, %482 {sv.namehint = "source_c_bits_a_mask_eq_6"} : i1
    %484 = comb.or bin %471, %483 {sv.namehint = "source_c_bits_a_mask_acc_6"} : i1
    %485 = comb.and bin %469, %481 {sv.namehint = "source_c_bits_a_mask_eq_7"} : i1
    %486 = comb.or bin %471, %485 {sv.namehint = "source_c_bits_a_mask_acc_7"} : i1
    %487 = comb.and bin %472, %482 {sv.namehint = "source_c_bits_a_mask_eq_8"} : i1
    %488 = comb.or bin %474, %487 {sv.namehint = "source_c_bits_a_mask_acc_8"} : i1
    %489 = comb.and bin %472, %481 {sv.namehint = "source_c_bits_a_mask_eq_9"} : i1
    %490 = comb.or bin %474, %489 {sv.namehint = "source_c_bits_a_mask_acc_9"} : i1
    %491 = comb.and bin %475, %482 {sv.namehint = "source_c_bits_a_mask_eq_10"} : i1
    %492 = comb.or bin %477, %491 {sv.namehint = "source_c_bits_a_mask_acc_10"} : i1
    %493 = comb.and bin %475, %481 {sv.namehint = "source_c_bits_a_mask_eq_11"} : i1
    %494 = comb.or bin %477, %493 {sv.namehint = "source_c_bits_a_mask_acc_11"} : i1
    %495 = comb.and bin %478, %482 {sv.namehint = "source_c_bits_a_mask_eq_12"} : i1
    %496 = comb.or bin %480, %495 {sv.namehint = "source_c_bits_a_mask_acc_12"} : i1
    %497 = comb.and bin %478, %481 {sv.namehint = "source_c_bits_a_mask_eq_13"} : i1
    %498 = comb.or bin %480, %497 {sv.namehint = "source_c_bits_a_mask_acc_13"} : i1
    %499 = comb.concat %498, %496, %494, %492, %490, %488, %486, %484 {sv.namehint = "source_c_bits_a_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %500 = comb.concat %c0_i23, %auto_in_a_bits_size : i23, i4
    %501 = comb.shl bin %c4095_i27, %500 {sv.namehint = "_decode_T_1"} : i27
    %502 = comb.extract %501 from 3 : (i27) -> i9
    %503 = comb.xor bin %502, %c-1_i9 {sv.namehint = "_decode_T_3"} : i9
    %504 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_opdata_T"} : (i3) -> i1
    %505 = comb.xor bin %504, %true {sv.namehint = "opdata"} : i1
    %beatsLeft = seq.firreg %522 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 186 : ui64} : i9
    %506 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %507 = comb.and bin %506, %auto_out_a_ready {sv.namehint = "latch"} : i1
    %508 = comb.xor %3, %true {sv.namehint = "readys_1"} : i1
    %509 = comb.and bin %508, %451 {sv.namehint = "winner_1"} : i1
    %510 = comb.xor bin %3, %true : i1
    %511 = comb.xor bin %509, %true : i1
    %512 = comb.or bin %510, %511 : i1
    %513 = comb.xor bin %reset, %true : i1
    %514 = comb.or bin %3, %451 {sv.namehint = "_nodeOut_a_valid_T"} : i1
    %515 = comb.xor bin %514, %true : i1
    %516 = comb.or bin %515, %3, %509 : i1
    sv.always posedge %1 {
      sv.if %513 {
        sv.assert %512, immediate label "assert__assert"
      }
      sv.if %513 {
        sv.assert %516, immediate label "assert__assert_1"
      }
    }
    %517 = comb.and bin %509, %505 : i1
    %518 = comb.mux bin %517, %503, %c0_i9 {sv.namehint = "initBeats"} : i9
    %519 = comb.and bin %auto_out_a_ready, %531 {sv.namehint = "_beatsLeft_T"} : i1
    %520 = comb.concat %c0_i8, %519 : i8, i1
    %521 = comb.sub bin %beatsLeft, %520 {sv.namehint = "_beatsLeft_T_1"} : i9
    %522 = comb.mux bin %507, %518, %521 {sv.namehint = "_beatsLeft_T_3"} : i9
    %state_0 = seq.firreg %523 clock %clock reset sync %reset, %false {firrtl.random_init_start = 195 : ui64} : i1
    %state_1 = seq.firreg %524 clock %clock reset sync %reset, %false {firrtl.random_init_start = 196 : ui64} : i1
    %523 = comb.mux bin %506, %3, %state_0 {sv.namehint = "muxState_0"} : i1
    %524 = comb.mux bin %506, %509, %state_1 {sv.namehint = "muxState_1"} : i1
    %525 = comb.or %506, %state_0 {sv.namehint = "allowed_0"} : i1
    %526 = comb.mux bin %506, %508, %state_1 {sv.namehint = "allowed_1"} : i1
    %527 = comb.and bin %auto_out_a_ready, %526 {sv.namehint = "source_i_ready"} : i1
    %528 = comb.and %state_0, %3 {sv.namehint = "_nodeOut_a_valid_T_1"} : i1
    %529 = comb.and %state_1, %451 {sv.namehint = "_nodeOut_a_valid_T_2"} : i1
    %530 = comb.or bin %528, %529 {sv.namehint = "_nodeOut_a_valid_T_3"} : i1
    %531 = comb.mux bin %506, %514, %530 {sv.namehint = "nodeOut_a_valid"} : i1
    %532 = comb.and %523, %454 {sv.namehint = "_nodeOut_a_bits_T"} : i1
    %533 = comb.and %524, %auto_in_a_bits_corrupt {sv.namehint = "_nodeOut_a_bits_T_1"} : i1
    %534 = comb.or bin %532, %533 {sv.namehint = "_nodeOut_a_bits_T_2"} : i1
    %535 = comb.mux bin %523, %446, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_3"} : i64
    %536 = comb.mux bin %524, %auto_in_a_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_4"} : i64
    %537 = comb.or bin %535, %536 {sv.namehint = "_nodeOut_a_bits_T_5"} : i64
    %538 = comb.mux bin %523, %499, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_6"} : i8
    %539 = comb.mux bin %524, %auto_in_a_bits_mask, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_7"} : i8
    %540 = comb.or bin %538, %539 {sv.namehint = "_nodeOut_a_bits_T_8"} : i8
    %541 = comb.mux bin %523, %cam_a_0_bits_address, %c0_i28 {sv.namehint = "_nodeOut_a_bits_T_9"} : i28
    %542 = comb.mux bin %524, %auto_in_a_bits_address, %c0_i28 {sv.namehint = "_nodeOut_a_bits_T_10"} : i28
    %543 = comb.or bin %541, %542 {sv.namehint = "_nodeOut_a_bits_T_11"} : i28
    %544 = comb.mux bin %523, %cam_a_0_bits_source, %c0_i2 {sv.namehint = "_nodeOut_a_bits_T_12"} : i2
    %545 = comb.mux bin %524, %auto_in_a_bits_source, %c0_i2 {sv.namehint = "_nodeOut_a_bits_T_13"} : i2
    %546 = comb.or bin %544, %545 {sv.namehint = "_nodeOut_a_bits_T_14"} : i2
    %547 = comb.mux bin %523, %cam_a_0_bits_size, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_15"} : i4
    %548 = comb.mux bin %524, %auto_in_a_bits_size, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_16"} : i4
    %549 = comb.or bin %547, %548 {sv.namehint = "_nodeOut_a_bits_T_17"} : i4
    %550 = comb.and %524, %22 : i1
    %551 = comb.mux bin %550, %auto_in_a_bits_param, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_20"} : i3
    %552 = comb.mux bin %524, %453, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_23"} : i3
    %553 = comb.and bin %527, %451, %452, %2 : i1
    %554 = comb.mux bin %553, %auto_in_a_bits_opcode, %cam_a_0_bits_opcode : i3
    %555 = comb.mux bin %553, %auto_in_a_bits_param, %cam_a_0_bits_param : i3
    %556 = comb.mux bin %553, %auto_in_a_bits_size, %cam_a_0_bits_size : i4
    %557 = comb.mux bin %553, %auto_in_a_bits_source, %cam_a_0_bits_source : i2
    %558 = comb.mux bin %553, %auto_in_a_bits_address, %cam_a_0_bits_address : i28
    %559 = comb.mux bin %553, %auto_in_a_bits_mask, %cam_a_0_bits_mask : i8
    %560 = comb.mux bin %553, %auto_in_a_bits_data, %cam_a_0_bits_data : i64
    %561 = comb.mux bin %553, %auto_in_a_bits_corrupt, %cam_a_0_bits_corrupt : i1
    %562 = comb.extract %auto_in_a_bits_param from 0 {sv.namehint = "_cam_a_0_lut_T"} : (i3) -> i2
    %563 = hw.array_get %0[%562] {sv.namehint = "_cam_a_0_lut_T_6"} : !hw.array<4xi4>, i2
    %564 = comb.mux bin %553, %563, %cam_a_0_lut : i4
    %565 = comb.mux bin %553, %c-1_i2, %cam_s_0_state : i2
    %566 = comb.and bin %auto_out_a_ready, %525, %3 : i1
    %567 = comb.mux bin %566, %c1_i2, %565 : i2
    %568 = comb.and bin %595, %auto_out_d_valid {sv.namehint = "_d_first_T"} : i1
    %569 = comb.concat %c0_i23, %auto_out_d_bits_size : i23, i4
    %570 = comb.shl bin %c4095_i27, %569 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %571 = comb.extract %570 from 3 : (i27) -> i9
    %572 = comb.xor bin %571, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %573 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %574 = comb.mux bin %573, %572, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %578 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 197 : ui64} : i9
    %575 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %576 = comb.icmp bin eq %d_first_counter, %c0_i9 {sv.namehint = "d_first"} : i9
    %577 = comb.mux bin %576, %574, %575 {sv.namehint = "_d_first_counter_T"} : i9
    %578 = comb.mux bin %568, %577, %d_first_counter : i9
    %579 = comb.icmp bin eq %cam_a_0_bits_source, %auto_out_d_bits_source {sv.namehint = "d_cam_sel_raw_0"} : i2
    %580 = comb.and bin %579, %6 {sv.namehint = "d_cam_sel_0"} : i1
    %581 = comb.icmp bin eq %auto_out_d_bits_opcode, %c1_i3 {sv.namehint = "d_ackd"} : i3
    %582 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 {sv.namehint = "d_ack"} : i3
    %583 = comb.and bin %568, %576 : i1
    %584 = comb.and bin %583, %580, %581 : i1
    %585 = comb.mux bin %584, %auto_out_d_bits_data, %cam_d_0_data : i64
    %586 = comb.mux bin %584, %auto_out_d_bits_denied, %cam_d_0_denied : i1
    %587 = comb.mux bin %584, %auto_out_d_bits_corrupt, %cam_d_0_corrupt : i1
    %588 = comb.concat %581, %false {sv.namehint = "_cam_s_0_state_T"} : i1, i1
    %589 = comb.and bin %583, %580 : i1
    %590 = comb.mux bin %589, %588, %567 : i2
    %591 = comb.and bin %576, %581, %580 {sv.namehint = "d_drop"} : i1
    %592 = comb.and bin %576, %582, %580 {sv.namehint = "d_replace"} : i1
    %593 = comb.xor bin %591, %true {sv.namehint = "_nodeIn_d_valid_T"} : i1
    %594 = comb.and bin %auto_out_d_valid, %593 {sv.namehint = "nodeIn_d_valid"} : i1
    %595 = comb.or bin %auto_in_d_ready, %591 {sv.namehint = "nodeOut_d_ready"} : i1
    %596 = comb.mux bin %592, %c1_i3, %auto_out_d_bits_opcode {sv.namehint = "nodeIn_d_bits_opcode"} : i3
    %597 = comb.mux bin %592, %cam_d_0_data, %auto_out_d_bits_data {sv.namehint = "nodeIn_d_bits_data"} : i64
    %598 = comb.or bin %cam_d_0_corrupt, %auto_out_d_bits_denied {sv.namehint = "_nodeIn_d_bits_corrupt_T"} : i1
    %599 = comb.mux bin %592, %598, %auto_out_d_bits_corrupt {sv.namehint = "nodeIn_d_bits_corrupt"} : i1
    %600 = comb.and %592, %cam_d_0_denied : i1
    %601 = comb.or %600, %auto_out_d_bits_denied {sv.namehint = "nodeIn_d_bits_denied"} : i1
    hw.output %450, %594, %596, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %601, %597, %599, %531, %552, %551, %549, %546, %543, %540, %537, %534, %595 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_7(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i14, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c-1_i2 = hw.constant -1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i23 = hw.constant 0 : i23
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %8 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %10 = comb.xor bin %9, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %11 = comb.extract %io_in_a_bits_address from 0 : (i14) -> i12
    %12 = comb.and bin %11, %10 : i12
    %13 = comb.icmp bin eq %12, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i14) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i14) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i14) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 12 : (i14) -> i2
    %62 = comb.xor bin %reset, %true : i1
    %63 = comb.and bin %io_in_a_valid, %59, %62 : i1
    %64 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %65 = comb.icmp eq %61, %c-1_i2 : i2
    %66 = comb.and bin %60, %65 : i1
    %67 = comb.and bin %3, %64, %66 : i1
    %68 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %69 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %70 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %72 = comb.and bin %io_in_a_valid, %71, %62 : i1
    %73 = comb.and bin %3, %64, %66 : i1
    %74 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %75 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %76 = comb.or bin %3, %4, %5 : i1
    %77 = comb.and bin %60, %76 : i1
    %78 = comb.and bin %io_in_a_valid, %75, %62 : i1
    %79 = comb.xor bin %74, %true : i1
    %80 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %82 = comb.and bin %77, %66 : i1
    %83 = comb.and bin %io_in_a_valid, %81, %62 : i1
    %84 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %85 = comb.and bin %io_in_a_valid, %84, %62 : i1
    %86 = comb.xor bin %58, %c-1_i8 : i8
    %87 = comb.and bin %io_in_a_bits_mask, %86 : i8
    %88 = comb.icmp bin eq %87, %c0_i8 : i8
    %89 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %90 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %91 = comb.and bin %77, %90, %65 : i1
    %92 = comb.and bin %io_in_a_valid, %89, %62 : i1
    %93 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %94 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %95 = comb.and bin %io_in_a_valid, %94, %62 : i1
    %96 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %99 = comb.and bin %io_in_a_valid, %98, %62 : i1
    %100 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %101 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %102 = comb.and bin %io_in_d_valid, %62 : i1
    %103 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %104 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %105 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %106 = comb.or bin %103, %104, %105 {sv.namehint = "source_ok_1"} : i1
    %107 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %108 = comb.and bin %io_in_d_valid, %107, %62 : i1
    %109 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %110 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %111 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %112 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %113 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %114 = comb.and bin %io_in_d_valid, %113, %62 : i1
    %115 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %116 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %117 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %118 = comb.and bin %io_in_d_valid, %117, %62 : i1
    %119 = comb.or bin %112, %io_in_d_bits_corrupt : i1
    %120 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %121 = comb.and bin %io_in_d_valid, %120, %62 : i1
    %122 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %123 = comb.and bin %io_in_d_valid, %122, %62 : i1
    %124 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %125 = comb.and bin %io_in_d_valid, %124, %62 : i1
    %126 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %127 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %128 = comb.extract %127 from 3 : (i27) -> i9
    %129 = comb.xor bin %128, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %130 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %131 = comb.mux bin %130, %c0_i9, %129 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %136 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %132 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %133 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %134 = comb.xor bin %133, %true {sv.namehint = "a_first"} : i1
    %135 = comb.mux bin %133, %132, %131 {sv.namehint = "_a_first_counter_T"} : i9
    %136 = comb.mux bin %126, %135, %a_first_counter : i9
    %opcode = seq.firreg %144 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %145 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %146 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %147 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %148 clock %clock {firrtl.random_init_start = 21 : ui64} : i14
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %138 = comb.and bin %io_in_a_valid, %133, %62 : i1
    %139 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %140 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %141 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %142 = comb.icmp bin eq %io_in_a_bits_address, %address : i14
    %143 = comb.and bin %126, %134 : i1
    %144 = comb.mux bin %143, %io_in_a_bits_opcode, %opcode : i3
    %145 = comb.mux bin %143, %io_in_a_bits_param, %param : i3
    %146 = comb.mux bin %143, %io_in_a_bits_size, %size : i4
    %147 = comb.mux bin %143, %io_in_a_bits_source, %source : i2
    %148 = comb.mux bin %143, %io_in_a_bits_address, %address : i14
    %149 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %150 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %151 = comb.shl bin %c4095_i27, %150 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %152 = comb.extract %151 from 3 : (i27) -> i9
    %153 = comb.xor bin %152, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %154 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %155 = comb.mux bin %154, %153, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %160 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 35 : ui64} : i9
    %156 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %157 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %158 = comb.xor bin %157, %true {sv.namehint = "d_first"} : i1
    %159 = comb.mux bin %157, %156, %155 {sv.namehint = "_d_first_counter_T"} : i9
    %160 = comb.mux bin %149, %159, %d_first_counter : i9
    %opcode_1 = seq.firreg %169 clock %clock {firrtl.random_init_start = 44 : ui64} : i3
    %param_1 = seq.firreg %170 clock %clock {firrtl.random_init_start = 47 : ui64} : i2
    %size_1 = seq.firreg %171 clock %clock {firrtl.random_init_start = 49 : ui64} : i4
    %source_1 = seq.firreg %172 clock %clock {firrtl.random_init_start = 53 : ui64} : i2
    %sink = seq.firreg %173 clock %clock {firrtl.random_init_start = 55 : ui64} : i1
    %denied = seq.firreg %174 clock %clock {firrtl.random_init_start = 56 : ui64} : i1
    %161 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %162 = comb.and bin %io_in_d_valid, %157, %62 : i1
    %163 = comb.icmp bin eq %param_1, %io_in_d_bits_param : i2
    %164 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %165 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %166 = comb.icmp bin eq %sink, %io_in_d_bits_sink : i1
    %167 = comb.icmp bin eq %denied, %io_in_d_bits_denied : i1
    %168 = comb.and bin %149, %158 : i1
    %169 = comb.mux bin %168, %io_in_d_bits_opcode, %opcode_1 : i3
    %170 = comb.mux bin %168, %io_in_d_bits_param, %param_1 : i2
    %171 = comb.mux bin %168, %io_in_d_bits_size, %size_1 : i4
    %172 = comb.mux bin %168, %io_in_d_bits_source, %source_1 : i2
    %173 = comb.mux bin %168, %io_in_d_bits_sink, %sink : i1
    %174 = comb.mux bin %168, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %278 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 57 : ui64} : i3
    %inflight_opcodes = seq.firreg %281 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 60 : ui64} : i12
    %inflight_sizes = seq.firreg %284 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 72 : ui64} : i24
    %175 = comb.shl bin %c4095_i27, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %176 = comb.extract %175 from 3 : (i27) -> i9
    %177 = comb.xor bin %176, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %178 = comb.mux bin %130, %c0_i9, %177 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %182 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 96 : ui64} : i9
    %179 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %180 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %181 = comb.mux bin %180, %178, %179 {sv.namehint = "_a_first_counter_T_1"} : i9
    %182 = comb.mux bin %126, %181, %a_first_counter_1 : i9
    %183 = comb.shl bin %c4095_i27, %150 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %184 = comb.extract %183 from 3 : (i27) -> i9
    %185 = comb.xor bin %184, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %186 = comb.mux bin %154, %185, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %190 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 105 : ui64} : i9
    %187 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %188 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %189 = comb.mux bin %188, %186, %187 {sv.namehint = "_d_first_counter_T_1"} : i9
    %190 = comb.mux bin %149, %189, %d_first_counter_1 : i9
    %191 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %192 = comb.shru bin %inflight_opcodes, %191 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %193 = comb.extract %192 from 1 : (i12) -> i3
    %194 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %195 = comb.shru bin %inflight_sizes, %194 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %196 = comb.extract %195 from 1 : (i24) -> i7
    %197 = comb.concat %false, %196 {sv.namehint = "a_size_lookup"} : i1, i7
    %198 = comb.and bin %io_in_a_valid, %180 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %199 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %200 = comb.shl bin %c1_i4, %199 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %201 = comb.extract %200 from 0 : (i4) -> i3
    %202 = comb.mux bin %198, %201, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %203 = comb.and bin %126, %180 : i1
    %204 = comb.shl bin %c1_i4, %199 {sv.namehint = "_a_set_T"} : i4
    %205 = comb.extract %204 from 0 : (i4) -> i3
    %206 = comb.mux bin %203, %205, %c0_i3 {sv.namehint = "a_set"} : i3
    %207 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %208 = comb.mux bin %203, %207, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %209 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %210 = comb.mux bin %203, %209, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %211 = comb.concat %c0_i31, %208 : i31, i4
    %212 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %213 = comb.shl bin %211, %212 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %214 = comb.extract %213 from 0 : (i35) -> i12
    %215 = comb.mux bin %203, %214, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %216 = comb.concat %c0_i31, %210 : i31, i5
    %217 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %218 = comb.shl bin %216, %217 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %219 = comb.extract %218 from 0 : (i36) -> i24
    %220 = comb.mux bin %203, %219, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %221 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %222 = comb.shru bin %inflight, %221 : i3
    %223 = comb.extract %222 from 0 : (i3) -> i1
    %224 = comb.xor bin %223, %true : i1
    %225 = comb.and bin %203, %62 : i1
    %226 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %227 = comb.and bin %io_in_d_valid, %188 : i1
    %228 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %229 = comb.and bin %227, %228 : i1
    %230 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %231 = comb.shl bin %c1_i4, %230 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %232 = comb.extract %231 from 0 : (i4) -> i3
    %233 = comb.mux bin %229, %232, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %234 = comb.and bin %149, %188, %228 : i1
    %235 = comb.shl bin %c1_i4, %230 {sv.namehint = "_d_clr_T"} : i4
    %236 = comb.extract %235 from 0 : (i4) -> i3
    %237 = comb.mux bin %234, %236, %c0_i3 {sv.namehint = "d_clr"} : i3
    %238 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %239 = comb.shl bin %c15_i47, %238 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %240 = comb.extract %239 from 0 : (i47) -> i12
    %241 = comb.mux bin %234, %240, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %242 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %243 = comb.shl bin %c255_i47, %242 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %244 = comb.extract %243 from 0 : (i47) -> i24
    %245 = comb.mux bin %234, %244, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %246 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %247 = comb.and bin %198, %246 {sv.namehint = "same_cycle_resp"} : i1
    %248 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %249 = comb.shru bin %inflight, %248 : i3
    %250 = comb.extract %249 from 0 : (i3) -> i1
    %251 = comb.or bin %250, %247 : i1
    %252 = comb.and bin %229, %62 : i1
    %253 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %254 = comb.icmp bin eq %io_in_d_bits_opcode, %253 : i3
    %255 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %256 = comb.icmp bin eq %io_in_d_bits_opcode, %255 : i3
    %257 = comb.or bin %254, %256 : i1
    %258 = comb.and bin %229, %247, %62 : i1
    %259 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %260 = comb.xor bin %247, %true : i1
    %261 = hw.array_get %1[%193] : !hw.array<8xi3>, i3
    %262 = comb.icmp bin eq %io_in_d_bits_opcode, %261 : i3
    %263 = hw.array_get %0[%193] : !hw.array<8xi3>, i3
    %264 = comb.icmp bin eq %io_in_d_bits_opcode, %263 : i3
    %265 = comb.or bin %262, %264 : i1
    %266 = comb.and bin %229, %260, %62 : i1
    %267 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %268 = comb.icmp bin eq %267, %197 : i8
    %269 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %270 = comb.xor bin %io_in_d_ready, %true : i1
    %271 = comb.or bin %270, %io_in_a_ready : i1
    %272 = comb.and bin %227, %180, %io_in_a_valid, %269, %228, %62 : i1
    %273 = comb.icmp bin ne %202, %233 : i3
    %274 = comb.icmp bin eq %202, %c0_i3 : i3
    %275 = comb.or bin %273, %274 : i1
    %276 = comb.or bin %inflight, %206 {sv.namehint = "_inflight_T"} : i3
    %277 = comb.xor bin %237, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %278 = comb.and bin %276, %277 {sv.namehint = "_inflight_T_2"} : i3
    %279 = comb.or bin %inflight_opcodes, %215 {sv.namehint = "_inflight_opcodes_T"} : i12
    %280 = comb.xor bin %241, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %281 = comb.and bin %279, %280 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %282 = comb.or bin %inflight_sizes, %220 {sv.namehint = "_inflight_sizes_T"} : i24
    %283 = comb.xor bin %245, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %284 = comb.and bin %282, %283 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %291 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 114 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %285 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %286 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %287 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %288 = comb.or bin %285, %286, %287 : i1
    %289 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %290 = comb.or bin %126, %149 : i1
    %291 = comb.mux bin %290, %c0_i32, %289 : i32
    %inflight_1 = seq.firreg %315 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 146 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %317 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 161 : ui64} : i24
    %292 = comb.shl bin %c4095_i27, %150 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %293 = comb.extract %292 from 3 : (i27) -> i9
    %294 = comb.xor bin %293, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %295 = comb.mux bin %154, %294, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %299 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 194 : ui64} : i9
    %296 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %297 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %298 = comb.mux bin %297, %295, %296 {sv.namehint = "_d_first_counter_T_2"} : i9
    %299 = comb.mux bin %149, %298, %d_first_counter_2 : i9
    %300 = comb.shru bin %inflight_sizes_1, %194 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %301 = comb.extract %300 from 1 : (i24) -> i7
    %302 = comb.concat %false, %301 {sv.namehint = "c_size_lookup"} : i1, i7
    %303 = comb.and bin %149, %297, %226 : i1
    %304 = comb.shl bin %c1_i4, %230 {sv.namehint = "_d_clr_T_1"} : i4
    %305 = comb.extract %304 from 0 : (i4) -> i3
    %306 = comb.mux bin %303, %305, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %307 = comb.shl bin %c255_i47, %242 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %308 = comb.extract %307 from 0 : (i47) -> i24
    %309 = comb.mux bin %303, %308, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %310 = comb.shru bin %inflight_1, %248 : i3
    %311 = comb.extract %310 from 0 : (i3) -> i1
    %312 = comb.and bin %io_in_d_valid, %297, %226, %62 : i1
    %313 = comb.icmp bin eq %267, %302 : i8
    %314 = comb.xor bin %306, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %315 = comb.and bin %inflight_1, %314 {sv.namehint = "_inflight_T_5"} : i3
    %316 = comb.xor bin %309, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %317 = comb.and bin %inflight_sizes_1, %316 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %323 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 203 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %318 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %319 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %320 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %321 = comb.or bin %318, %319, %320 : i1
    sv.always posedge %2 {
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %63 {
        sv.assert %67, immediate label "assert__assert_3"
      }
      sv.if %63 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %63 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %63 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %63 {
        sv.assert %68, immediate label "assert__assert_7"
      }
      sv.if %63 {
        sv.assert %69, immediate label "assert__assert_8"
      }
      sv.if %63 {
        sv.assert %70, immediate label "assert__assert_9"
      }
      sv.if %72 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %72 {
        sv.assert %73, immediate label "assert__assert_11"
      }
      sv.if %72 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %72 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %72 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %72 {
        sv.assert %68, immediate label "assert__assert_15"
      }
      sv.if %72 {
        sv.assert %74, immediate label "assert__assert_16"
      }
      sv.if %72 {
        sv.assert %69, immediate label "assert__assert_17"
      }
      sv.if %72 {
        sv.assert %70, immediate label "assert__assert_18"
      }
      sv.if %78 {
        sv.assert %77, immediate label "assert__assert_19"
      }
      sv.if %78 {
        sv.assert %66, immediate label "assert__assert_20"
      }
      sv.if %78 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %78 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %78 {
        sv.assert %79, immediate label "assert__assert_23"
      }
      sv.if %78 {
        sv.assert %80, immediate label "assert__assert_24"
      }
      sv.if %78 {
        sv.assert %70, immediate label "assert__assert_25"
      }
      sv.if %83 {
        sv.assert %82, immediate label "assert__assert_26"
      }
      sv.if %83 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %83 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %83 {
        sv.assert %79, immediate label "assert__assert_29"
      }
      sv.if %83 {
        sv.assert %80, immediate label "assert__assert_30"
      }
      sv.if %85 {
        sv.assert %82, immediate label "assert__assert_31"
      }
      sv.if %85 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %85 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %85 {
        sv.assert %79, immediate label "assert__assert_34"
      }
      sv.if %85 {
        sv.assert %88, immediate label "assert__assert_35"
      }
      sv.if %92 {
        sv.assert %91, immediate label "assert__assert_36"
      }
      sv.if %92 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %92 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %92 {
        sv.assert %93, immediate label "assert__assert_39"
      }
      sv.if %92 {
        sv.assert %80, immediate label "assert__assert_40"
      }
      sv.if %95 {
        sv.assert %91, immediate label "assert__assert_41"
      }
      sv.if %95 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %95 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %95 {
        sv.assert %97, immediate label "assert__assert_44"
      }
      sv.if %95 {
        sv.assert %80, immediate label "assert__assert_45"
      }
      sv.if %99 {
        sv.assert %82, immediate label "assert__assert_46"
      }
      sv.if %99 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %99 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %99 {
        sv.assert %100, immediate label "assert__assert_49"
      }
      sv.if %99 {
        sv.assert %80, immediate label "assert__assert_50"
      }
      sv.if %99 {
        sv.assert %70, immediate label "assert__assert_51"
      }
      sv.if %102 {
        sv.assert %101, immediate label "assert__assert_52"
      }
      sv.if %108 {
        sv.assert %106, immediate label "assert__assert_53"
      }
      sv.if %108 {
        sv.assert %109, immediate label "assert__assert_54"
      }
      sv.if %108 {
        sv.assert %110, immediate label "assert__assert_55"
      }
      sv.if %108 {
        sv.assert %111, immediate label "assert__assert_56"
      }
      sv.if %108 {
        sv.assert %112, immediate label "assert__assert_57"
      }
      sv.if %114 {
        sv.assert %106, immediate label "assert__assert_58"
      }
      sv.if %114 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %114 {
        sv.assert %109, immediate label "assert__assert_60"
      }
      sv.if %114 {
        sv.assert %115, immediate label "assert__assert_61"
      }
      sv.if %114 {
        sv.assert %116, immediate label "assert__assert_62"
      }
      sv.if %114 {
        sv.assert %111, immediate label "assert__assert_63"
      }
      sv.if %118 {
        sv.assert %106, immediate label "assert__assert_65"
      }
      sv.if %118 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %118 {
        sv.assert %109, immediate label "assert__assert_67"
      }
      sv.if %118 {
        sv.assert %115, immediate label "assert__assert_68"
      }
      sv.if %118 {
        sv.assert %116, immediate label "assert__assert_69"
      }
      sv.if %118 {
        sv.assert %119, immediate label "assert__assert_70"
      }
      sv.if %121 {
        sv.assert %106, immediate label "assert__assert_72"
      }
      sv.if %121 {
        sv.assert %110, immediate label "assert__assert_73"
      }
      sv.if %121 {
        sv.assert %111, immediate label "assert__assert_74"
      }
      sv.if %123 {
        sv.assert %106, immediate label "assert__assert_76"
      }
      sv.if %123 {
        sv.assert %110, immediate label "assert__assert_77"
      }
      sv.if %123 {
        sv.assert %119, immediate label "assert__assert_78"
      }
      sv.if %125 {
        sv.assert %106, immediate label "assert__assert_80"
      }
      sv.if %125 {
        sv.assert %110, immediate label "assert__assert_81"
      }
      sv.if %125 {
        sv.assert %111, immediate label "assert__assert_82"
      }
      sv.if %138 {
        sv.assert %137, immediate label "assert__assert_87"
      }
      sv.if %138 {
        sv.assert %139, immediate label "assert__assert_88"
      }
      sv.if %138 {
        sv.assert %140, immediate label "assert__assert_89"
      }
      sv.if %138 {
        sv.assert %141, immediate label "assert__assert_90"
      }
      sv.if %138 {
        sv.assert %142, immediate label "assert__assert_91"
      }
      sv.if %162 {
        sv.assert %161, immediate label "assert__assert_92"
      }
      sv.if %162 {
        sv.assert %163, immediate label "assert__assert_93"
      }
      sv.if %162 {
        sv.assert %164, immediate label "assert__assert_94"
      }
      sv.if %162 {
        sv.assert %165, immediate label "assert__assert_95"
      }
      sv.if %162 {
        sv.assert %166, immediate label "assert__assert_96"
      }
      sv.if %162 {
        sv.assert %167, immediate label "assert__assert_97"
      }
      sv.if %225 {
        sv.assert %224, immediate label "assert__assert_98"
      }
      sv.if %252 {
        sv.assert %251, immediate label "assert__assert_99"
      }
      sv.if %258 {
        sv.assert %257, immediate label "assert__assert_100"
      }
      sv.if %258 {
        sv.assert %259, immediate label "assert__assert_101"
      }
      sv.if %266 {
        sv.assert %265, immediate label "assert__assert_102"
      }
      sv.if %266 {
        sv.assert %268, immediate label "assert__assert_103"
      }
      sv.if %272 {
        sv.assert %271, immediate label "assert__assert_104"
      }
      sv.if %62 {
        sv.assert %275, immediate label "assert__assert_105"
      }
      sv.if %62 {
        sv.assert %288, immediate label "assert__assert_106"
      }
      sv.if %312 {
        sv.assert %311, immediate label "assert__assert_108"
      }
      sv.if %312 {
        sv.assert %313, immediate label "assert__assert_110"
      }
      sv.if %62 {
        sv.assert %321, immediate label "assert__assert_113"
      }
    }
    %322 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %323 = comb.mux bin %149, %c0_i32, %322 : i32
    hw.output
  }
  hw.module private @Queue1_TLBundleA(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i14, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_address, %io_enq_bits_mask, %io_enq_bits_data, %io_enq_bits_corrupt : i3, i3, i4, i2, i14, i8, i64, i1
    %1 = comb.extract %ram from 96 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i99) -> i3
    %2 = comb.extract %ram from 89 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i99) -> i4
    %3 = comb.extract %ram from 87 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i99) -> i2
    %full = seq.firreg %7 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %4 = comb.and bin %8, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %5 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %6 = comb.icmp bin eq %4, %5 : i1
    %7 = comb.mux bin %6, %full, %4 : i1
    %8 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %9 clock %clock {sv.namehint = "ram"} : i99
    %9 = comb.mux bin %4, %0, %ram : i99
    hw.output %8, %full, %1, %2, %3 : i1, i1, i3, i4, i2
  }
  hw.module private @TLError(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i14, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_corrupt : i1) {
    %0 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i9 = hw.constant -1 : i9
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i23 = hw.constant 0 : i23
    %c0_i9 = hw.constant 0 : i9
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %true = hw.constant true
    hw.instance "monitor" @TLMonitor_7(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i14, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %32: i1, io_in_d_bits_opcode: %33: i3, io_in_d_bits_param: %c0_i2: i2, io_in_d_bits_size: %a_q.io_deq_bits_size: i4, io_in_d_bits_source: %a_q.io_deq_bits_source: i2, io_in_d_bits_sink: %false: i1, io_in_d_bits_denied: %true: i1, io_in_d_bits_corrupt: %20: i1) -> ()
    %a_q.io_enq_ready, %a_q.io_deq_valid, %a_q.io_deq_bits_opcode, %a_q.io_deq_bits_size, %a_q.io_deq_bits_source = hw.instance "a_q" @Queue1_TLBundleA(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i14, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %31: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_size: i4, io_deq_bits_source: i2) {sv.namehint = "da_bits_size"}
    %1 = comb.and bin %31, %a_q.io_deq_valid {sv.namehint = "_a_last_T"} : i1
    %2 = comb.concat %c0_i23, %a_q.io_deq_bits_size : i23, i4
    %3 = comb.shl bin %c4095_i27, %2 {sv.namehint = "_a_last_beats1_decode_T_1"} : i27
    %4 = comb.extract %3 from 3 : (i27) -> i9
    %5 = comb.xor bin %4, %c-1_i9 {sv.namehint = "_a_last_beats1_decode_T_3"} : i9
    %6 = comb.extract %a_q.io_deq_bits_opcode from 2 {sv.namehint = "_a_last_beats1_opdata_T"} : (i3) -> i1
    %7 = comb.mux bin %6, %c0_i9, %5 {sv.namehint = "a_last_beats1"} : i9
    %a_last_counter = seq.firreg %14 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1 : ui64} : i9
    %8 = comb.add %a_last_counter, %c-1_i9 {sv.namehint = "_a_last_counter1_T"} : i9
    %9 = comb.icmp bin eq %a_last_counter, %c0_i9 {sv.namehint = "a_last_first"} : i9
    %10 = comb.icmp bin eq %a_last_counter, %c1_i9 {sv.namehint = "_a_last_last_T"} : i9
    %11 = comb.icmp bin eq %7, %c0_i9 {sv.namehint = "_a_last_last_T_1"} : i9
    %12 = comb.or bin %10, %11 {sv.namehint = "a_last"} : i1
    %13 = comb.mux bin %9, %7, %8 {sv.namehint = "_a_last_counter_T"} : i9
    %14 = comb.mux bin %1, %13, %a_last_counter : i9
    %15 = comb.and bin %auto_in_d_ready, %32 : i1
    %16 = comb.concat %c0_i23, %a_q.io_deq_bits_size : i23, i4
    %17 = comb.shl bin %c4095_i27, %16 {sv.namehint = "_beats1_decode_T_1"} : i27
    %18 = comb.extract %17 from 3 : (i27) -> i9
    %19 = comb.xor bin %18, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %20 = comb.extract %33 from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %21 = comb.mux bin %20, %19, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %28 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 10 : ui64} : i9
    %22 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %23 = comb.icmp bin eq %counter, %c0_i9 {sv.namehint = "da_first"} : i9
    %24 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %25 = comb.icmp bin eq %21, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %26 = comb.or bin %24, %25 {sv.namehint = "da_last"} : i1
    %27 = comb.mux bin %23, %21, %22 {sv.namehint = "_counter_T"} : i9
    %28 = comb.mux bin %15, %27, %counter : i9
    %29 = comb.and bin %auto_in_d_ready, %26 {sv.namehint = "_q_io_deq_ready_T"} : i1
    %30 = comb.xor bin %12, %true {sv.namehint = "_q_io_deq_ready_T_2"} : i1
    %31 = comb.or bin %29, %30 {sv.namehint = "a_q.io_deq_ready"} : i1
    %32 = comb.and bin %a_q.io_deq_valid, %12 {sv.namehint = "da_valid"} : i1
    %33 = hw.array_get %0[%a_q.io_deq_bits_opcode] {sv.namehint = "da_bits_opcode"} : !hw.array<8xi3>, i3
    hw.output %a_q.io_enq_ready, %32, %33, %a_q.io_deq_bits_size, %a_q.io_deq_bits_source, %20 : i1, i1, i3, i4, i2, i1
  }
  hw.module private @Queue2_TLBundleA_1(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i14, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i14, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 99>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 99>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 99>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_address, %io_enq_bits_mask, %io_enq_bits_data, %io_enq_bits_corrupt : i3, i3, i4, i2, i14, i8, i64, i1
    %2 = comb.extract %0 from 96 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i99) -> i3
    %3 = comb.extract %0 from 93 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i99) -> i3
    %4 = comb.extract %0 from 89 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i99) -> i4
    %5 = comb.extract %0 from 87 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i99) -> i2
    %6 = comb.extract %0 from 73 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i99) -> i14
    %7 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i99) -> i8
    %8 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i99) -> i64
    %9 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i99) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i3, i4, i2, i14, i8, i64, i1
  }
  hw.module private @TLBuffer_4(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i14, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i14, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_corrupt : i1) {
    %c0_i64 = hw.constant 0 : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    hw.instance "monitor" @TLMonitor_7(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %nodeOut_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i14, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %nodeIn_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %nodeIn_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %nodeIn_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %nodeIn_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %nodeIn_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %nodeIn_d_q.io_deq_bits_sink: i1, io_in_d_bits_denied: %nodeIn_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %nodeIn_d_q.io_deq_bits_corrupt: i1) -> ()
    %nodeOut_a_q.io_enq_ready, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt = hw.instance "nodeOut_a_q" @Queue2_TLBundleA_1(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i14, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i14, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeOut_a_q.io_deq_valid"}
    %nodeIn_d_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt = hw.instance "nodeIn_d_q" @Queue2_TLBundleD(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %c0_i2: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %false: i1, io_enq_bits_denied: %true: i1, io_enq_bits_data: %c0_i64: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeIn_d_q.io_deq_valid"}
    hw.output %nodeOut_a_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt, %nodeIn_d_q.io_enq_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i14, i8, i64, i1, i1
  }
  hw.module private @ErrorDeviceWrapper(in %clock : !seq.clock, in %reset : i1, out auto_buffer_in_a_ready : i1, in %auto_buffer_in_a_valid : i1, in %auto_buffer_in_a_bits_opcode : i3, in %auto_buffer_in_a_bits_param : i3, in %auto_buffer_in_a_bits_size : i4, in %auto_buffer_in_a_bits_source : i2, in %auto_buffer_in_a_bits_address : i14, in %auto_buffer_in_a_bits_mask : i8, in %auto_buffer_in_a_bits_data : i64, in %auto_buffer_in_a_bits_corrupt : i1, in %auto_buffer_in_d_ready : i1, out auto_buffer_in_d_valid : i1, out auto_buffer_in_d_bits_opcode : i3, out auto_buffer_in_d_bits_param : i2, out auto_buffer_in_d_bits_size : i4, out auto_buffer_in_d_bits_source : i2, out auto_buffer_in_d_bits_sink : i1, out auto_buffer_in_d_bits_denied : i1, out auto_buffer_in_d_bits_data : i64, out auto_buffer_in_d_bits_corrupt : i1) {
    %error.auto_in_a_ready, %error.auto_in_d_valid, %error.auto_in_d_bits_opcode, %error.auto_in_d_bits_size, %error.auto_in_d_bits_source, %error.auto_in_d_bits_corrupt = hw.instance "error" @TLError(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i14, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer.auto_out_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_corrupt: i1) {sv.namehint = "error.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_4(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_buffer_in_a_valid: i1, auto_in_a_bits_opcode: %auto_buffer_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_buffer_in_a_bits_param: i3, auto_in_a_bits_size: %auto_buffer_in_a_bits_size: i4, auto_in_a_bits_source: %auto_buffer_in_a_bits_source: i2, auto_in_a_bits_address: %auto_buffer_in_a_bits_address: i14, auto_in_a_bits_mask: %auto_buffer_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_buffer_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_buffer_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_buffer_in_d_ready: i1, auto_out_a_ready: %error.auto_in_a_ready: i1, auto_out_d_valid: %error.auto_in_d_valid: i1, auto_out_d_bits_opcode: %error.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %error.auto_in_d_bits_size: i4, auto_out_d_bits_source: %error.auto_in_d_bits_source: i2, auto_out_d_bits_corrupt: %error.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i14, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "buffer.auto_in_d_valid"}
    hw.output %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1
  }
  hw.module private @TLBuffer_5(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_9(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i2 = hw.constant -1 : i2
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %8 = comb.shl bin %c63_i13, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %10 = comb.xor bin %9, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %11 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i6
    %12 = comb.and bin %11, %10 : i6
    %13 = comb.icmp bin eq %12, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %61 = comb.xor bin %reset, %true : i1
    %62 = comb.and bin %io_in_a_valid, %59, %61 : i1
    %63 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %64 = comb.icmp eq %60, %c-1_i2 : i2
    %65 = comb.and bin %3, %63, %64 : i1
    %66 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %67 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %68 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %69 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %70 = comb.and bin %io_in_a_valid, %69, %61 : i1
    %71 = comb.and bin %3, %63, %64 : i1
    %72 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %74 = comb.or bin %3, %4, %5 : i1
    %75 = comb.and bin %io_in_a_valid, %73, %61 : i1
    %76 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %77 = comb.and bin %76, %64 : i1
    %78 = comb.xor bin %72, %true : i1
    %79 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %80 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %81 = comb.and bin %74, %77 : i1
    %82 = comb.and bin %io_in_a_valid, %80, %61 : i1
    %83 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %84 = comb.and bin %io_in_a_valid, %83, %61 : i1
    %85 = comb.xor bin %58, %c-1_i8 : i8
    %86 = comb.and bin %io_in_a_bits_mask, %85 : i8
    %87 = comb.icmp bin eq %86, %c0_i8 : i8
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %61 : i1
    %90 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %91 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %92 = comb.and bin %io_in_a_valid, %91, %61 : i1
    %93 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %96 = comb.and bin %io_in_a_valid, %95, %61 : i1
    %97 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %98 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %99 = comb.and bin %io_in_d_valid, %61 : i1
    %100 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %101 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %102 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %103 = comb.or bin %100, %101, %102 {sv.namehint = "source_ok_1"} : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %61 : i1
    %106 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %107 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %108 = comb.and bin %io_in_d_valid, %107, %61 : i1
    %109 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %110 = comb.and bin %io_in_d_valid, %109, %61 : i1
    %111 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %112 = comb.and bin %io_in_d_valid, %111, %61 : i1
    %113 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %114 = comb.and bin %io_in_d_valid, %113, %61 : i1
    %115 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %116 = comb.and bin %io_in_d_valid, %115, %61 : i1
    %117 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %118 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %119 = comb.extract %118 from 3 : (i13) -> i3
    %120 = comb.xor bin %119, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %121 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %122 = comb.mux bin %121, %c0_i3, %120 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %127 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %123 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %124 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %125 = comb.xor bin %124, %true {sv.namehint = "a_first"} : i1
    %126 = comb.mux bin %124, %123, %122 {sv.namehint = "_a_first_counter_T"} : i3
    %127 = comb.mux bin %117, %126, %a_first_counter : i3
    %opcode = seq.firreg %135 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %136 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %137 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %138 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %139 clock %clock {firrtl.random_init_start = 14 : ui64} : i28
    %128 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %129 = comb.and bin %io_in_a_valid, %124, %61 : i1
    %130 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %131 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %132 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %133 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %134 = comb.and bin %117, %125 : i1
    %135 = comb.mux bin %134, %io_in_a_bits_opcode, %opcode : i3
    %136 = comb.mux bin %134, %io_in_a_bits_param, %param : i3
    %137 = comb.mux bin %134, %io_in_a_bits_size, %size : i3
    %138 = comb.mux bin %134, %io_in_a_bits_source, %source : i2
    %139 = comb.mux bin %134, %io_in_a_bits_address, %address : i28
    %140 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %141 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %142 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %143 = comb.extract %142 from 3 : (i13) -> i3
    %144 = comb.xor bin %143, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %145 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %146 = comb.mux bin %145, %144, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %151 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 42 : ui64} : i3
    %147 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %148 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %149 = comb.xor bin %148, %true {sv.namehint = "d_first"} : i1
    %150 = comb.mux bin %148, %147, %146 {sv.namehint = "_d_first_counter_T"} : i3
    %151 = comb.mux bin %140, %150, %d_first_counter : i3
    %opcode_1 = seq.firreg %157 clock %clock {firrtl.random_init_start = 45 : ui64} : i3
    %size_1 = seq.firreg %158 clock %clock {firrtl.random_init_start = 50 : ui64} : i3
    %source_1 = seq.firreg %159 clock %clock {firrtl.random_init_start = 53 : ui64} : i2
    %152 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %153 = comb.and bin %io_in_d_valid, %148, %61 : i1
    %154 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %155 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %156 = comb.and bin %140, %149 : i1
    %157 = comb.mux bin %156, %io_in_d_bits_opcode, %opcode_1 : i3
    %158 = comb.mux bin %156, %io_in_d_bits_size, %size_1 : i3
    %159 = comb.mux bin %156, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %258 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 57 : ui64} : i3
    %inflight_opcodes = seq.firreg %261 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 60 : ui64} : i12
    %inflight_sizes = seq.firreg %264 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 72 : ui64} : i12
    %160 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %161 = comb.extract %160 from 3 : (i13) -> i3
    %162 = comb.xor bin %161, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %163 = comb.mux bin %121, %c0_i3, %162 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %167 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 84 : ui64} : i3
    %164 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %165 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %166 = comb.mux bin %165, %163, %164 {sv.namehint = "_a_first_counter_T_1"} : i3
    %167 = comb.mux bin %117, %166, %a_first_counter_1 : i3
    %168 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %169 = comb.extract %168 from 3 : (i13) -> i3
    %170 = comb.xor bin %169, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %171 = comb.mux bin %145, %170, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %175 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 87 : ui64} : i3
    %172 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %173 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %174 = comb.mux bin %173, %171, %172 {sv.namehint = "_d_first_counter_T_1"} : i3
    %175 = comb.mux bin %140, %174, %d_first_counter_1 : i3
    %176 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %177 = comb.shru bin %inflight_opcodes, %176 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %178 = comb.extract %177 from 1 : (i12) -> i3
    %179 = comb.shru bin %inflight_sizes, %176 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %180 = comb.extract %179 from 1 : (i12) -> i3
    %181 = comb.and bin %io_in_a_valid, %165 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %182 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %183 = comb.shl bin %c1_i4, %182 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %184 = comb.extract %183 from 0 : (i4) -> i3
    %185 = comb.mux bin %181, %184, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %186 = comb.and bin %117, %165 : i1
    %187 = comb.shl bin %c1_i4, %182 {sv.namehint = "_a_set_T"} : i4
    %188 = comb.extract %187 from 0 : (i4) -> i3
    %189 = comb.mux bin %186, %188, %c0_i3 {sv.namehint = "a_set"} : i3
    %190 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %191 = comb.mux bin %186, %190, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %192 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %193 = comb.mux bin %186, %192, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %194 = comb.concat %c0_i31, %191 : i31, i4
    %195 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %196 = comb.shl bin %194, %195 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %197 = comb.extract %196 from 0 : (i35) -> i12
    %198 = comb.mux bin %186, %197, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %199 = comb.concat %c0_i31, %193 : i31, i4
    %200 = comb.shl bin %199, %195 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %201 = comb.extract %200 from 0 : (i35) -> i12
    %202 = comb.mux bin %186, %201, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %203 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %204 = comb.shru bin %inflight, %203 : i3
    %205 = comb.extract %204 from 0 : (i3) -> i1
    %206 = comb.xor bin %205, %true : i1
    %207 = comb.and bin %186, %61 : i1
    %208 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %209 = comb.and bin %io_in_d_valid, %173 : i1
    %210 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %211 = comb.and bin %209, %210 : i1
    %212 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %213 = comb.shl bin %c1_i4, %212 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %214 = comb.extract %213 from 0 : (i4) -> i3
    %215 = comb.mux bin %211, %214, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %216 = comb.and bin %140, %173, %210 : i1
    %217 = comb.shl bin %c1_i4, %212 {sv.namehint = "_d_clr_T"} : i4
    %218 = comb.extract %217 from 0 : (i4) -> i3
    %219 = comb.mux bin %216, %218, %c0_i3 {sv.namehint = "d_clr"} : i3
    %220 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %221 = comb.shl bin %c15_i47, %220 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %222 = comb.extract %221 from 0 : (i47) -> i12
    %223 = comb.mux bin %216, %222, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %224 = comb.shl bin %c15_i47, %220 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %225 = comb.extract %224 from 0 : (i47) -> i12
    %226 = comb.mux bin %216, %225, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %227 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %228 = comb.and bin %181, %227 {sv.namehint = "same_cycle_resp"} : i1
    %229 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %230 = comb.shru bin %inflight, %229 : i3
    %231 = comb.extract %230 from 0 : (i3) -> i1
    %232 = comb.or bin %231, %228 : i1
    %233 = comb.and bin %211, %61 : i1
    %234 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %235 = comb.icmp bin eq %io_in_d_bits_opcode, %234 : i3
    %236 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %237 = comb.icmp bin eq %io_in_d_bits_opcode, %236 : i3
    %238 = comb.or bin %235, %237 : i1
    %239 = comb.and bin %211, %228, %61 : i1
    %240 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %241 = comb.xor bin %228, %true : i1
    %242 = hw.array_get %1[%178] : !hw.array<8xi3>, i3
    %243 = comb.icmp bin eq %io_in_d_bits_opcode, %242 : i3
    %244 = hw.array_get %0[%178] : !hw.array<8xi3>, i3
    %245 = comb.icmp bin eq %io_in_d_bits_opcode, %244 : i3
    %246 = comb.or bin %243, %245 : i1
    %247 = comb.and bin %211, %241, %61 : i1
    %248 = comb.icmp bin eq %io_in_d_bits_size, %180 : i3
    %249 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %250 = comb.xor bin %io_in_d_ready, %true : i1
    %251 = comb.or bin %250, %io_in_a_ready : i1
    %252 = comb.and bin %209, %165, %io_in_a_valid, %249, %210, %61 : i1
    %253 = comb.icmp bin ne %185, %215 : i3
    %254 = comb.icmp bin eq %185, %c0_i3 : i3
    %255 = comb.or bin %253, %254 : i1
    %256 = comb.or bin %inflight, %189 {sv.namehint = "_inflight_T"} : i3
    %257 = comb.xor bin %219, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %258 = comb.and bin %256, %257 {sv.namehint = "_inflight_T_2"} : i3
    %259 = comb.or bin %inflight_opcodes, %198 {sv.namehint = "_inflight_opcodes_T"} : i12
    %260 = comb.xor bin %223, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %261 = comb.and bin %259, %260 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %262 = comb.or bin %inflight_sizes, %202 {sv.namehint = "_inflight_sizes_T"} : i12
    %263 = comb.xor bin %226, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %264 = comb.and bin %262, %263 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %271 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 90 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %265 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %266 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %267 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %268 = comb.or bin %265, %266, %267 : i1
    %269 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %270 = comb.or bin %117, %140 : i1
    %271 = comb.mux bin %270, %c0_i32, %269 : i32
    %inflight_1 = seq.firreg %294 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 122 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %296 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 137 : ui64} : i12
    %272 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %273 = comb.extract %272 from 3 : (i13) -> i3
    %274 = comb.xor bin %273, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %275 = comb.mux bin %145, %274, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %279 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 152 : ui64} : i3
    %276 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %277 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %278 = comb.mux bin %277, %275, %276 {sv.namehint = "_d_first_counter_T_2"} : i3
    %279 = comb.mux bin %140, %278, %d_first_counter_2 : i3
    %280 = comb.shru bin %inflight_sizes_1, %176 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %281 = comb.extract %280 from 1 : (i12) -> i3
    %282 = comb.and bin %140, %277, %208 : i1
    %283 = comb.shl bin %c1_i4, %212 {sv.namehint = "_d_clr_T_1"} : i4
    %284 = comb.extract %283 from 0 : (i4) -> i3
    %285 = comb.mux bin %282, %284, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %286 = comb.shl bin %c15_i47, %220 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %287 = comb.extract %286 from 0 : (i47) -> i12
    %288 = comb.mux bin %282, %287, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %289 = comb.shru bin %inflight_1, %229 : i3
    %290 = comb.extract %289 from 0 : (i3) -> i1
    %291 = comb.and bin %io_in_d_valid, %277, %208, %61 : i1
    %292 = comb.icmp bin eq %io_in_d_bits_size, %281 : i3
    %293 = comb.xor bin %285, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %294 = comb.and bin %inflight_1, %293 {sv.namehint = "_inflight_T_5"} : i3
    %295 = comb.xor bin %288, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %296 = comb.and bin %inflight_sizes_1, %295 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %302 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 155 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %297 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %298 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %299 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %300 = comb.or bin %297, %298, %299 : i1
    sv.always posedge %2 {
      sv.if %62 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %62 {
        sv.assert %65, immediate label "assert__assert_3"
      }
      sv.if %62 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %62 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %62 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %62 {
        sv.assert %66, immediate label "assert__assert_7"
      }
      sv.if %62 {
        sv.assert %67, immediate label "assert__assert_8"
      }
      sv.if %62 {
        sv.assert %68, immediate label "assert__assert_9"
      }
      sv.if %70 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %70 {
        sv.assert %71, immediate label "assert__assert_11"
      }
      sv.if %70 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %70 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %70 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %70 {
        sv.assert %66, immediate label "assert__assert_15"
      }
      sv.if %70 {
        sv.assert %72, immediate label "assert__assert_16"
      }
      sv.if %70 {
        sv.assert %67, immediate label "assert__assert_17"
      }
      sv.if %70 {
        sv.assert %68, immediate label "assert__assert_18"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_19"
      }
      sv.if %75 {
        sv.assert %77, immediate label "assert__assert_20"
      }
      sv.if %75 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %75 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %75 {
        sv.assert %78, immediate label "assert__assert_23"
      }
      sv.if %75 {
        sv.assert %79, immediate label "assert__assert_24"
      }
      sv.if %75 {
        sv.assert %68, immediate label "assert__assert_25"
      }
      sv.if %82 {
        sv.assert %81, immediate label "assert__assert_26"
      }
      sv.if %82 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %82 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %82 {
        sv.assert %78, immediate label "assert__assert_29"
      }
      sv.if %82 {
        sv.assert %79, immediate label "assert__assert_30"
      }
      sv.if %84 {
        sv.assert %81, immediate label "assert__assert_31"
      }
      sv.if %84 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %84 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %84 {
        sv.assert %78, immediate label "assert__assert_34"
      }
      sv.if %84 {
        sv.assert %87, immediate label "assert__assert_35"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %89 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %89 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %89 {
        sv.assert %90, immediate label "assert__assert_39"
      }
      sv.if %89 {
        sv.assert %79, immediate label "assert__assert_40"
      }
      sv.if %92 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %92 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %92 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %92 {
        sv.assert %94, immediate label "assert__assert_44"
      }
      sv.if %92 {
        sv.assert %79, immediate label "assert__assert_45"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %96 {
        sv.assert %97, immediate label "assert__assert_49"
      }
      sv.if %96 {
        sv.assert %79, immediate label "assert__assert_50"
      }
      sv.if %96 {
        sv.assert %68, immediate label "assert__assert_51"
      }
      sv.if %99 {
        sv.assert %98, immediate label "assert__assert_52"
      }
      sv.if %105 {
        sv.assert %103, immediate label "assert__assert_53"
      }
      sv.if %105 {
        sv.assert %106, immediate label "assert__assert_54"
      }
      sv.if %108 {
        sv.assert %103, immediate label "assert__assert_58"
      }
      sv.if %108 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %108 {
        sv.assert %106, immediate label "assert__assert_60"
      }
      sv.if %110 {
        sv.assert %103, immediate label "assert__assert_65"
      }
      sv.if %110 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %110 {
        sv.assert %106, immediate label "assert__assert_67"
      }
      sv.if %112 {
        sv.assert %103, immediate label "assert__assert_72"
      }
      sv.if %114 {
        sv.assert %103, immediate label "assert__assert_76"
      }
      sv.if %116 {
        sv.assert %103, immediate label "assert__assert_80"
      }
      sv.if %129 {
        sv.assert %128, immediate label "assert__assert_87"
      }
      sv.if %129 {
        sv.assert %130, immediate label "assert__assert_88"
      }
      sv.if %129 {
        sv.assert %131, immediate label "assert__assert_89"
      }
      sv.if %129 {
        sv.assert %132, immediate label "assert__assert_90"
      }
      sv.if %129 {
        sv.assert %133, immediate label "assert__assert_91"
      }
      sv.if %153 {
        sv.assert %152, immediate label "assert__assert_92"
      }
      sv.if %153 {
        sv.assert %154, immediate label "assert__assert_94"
      }
      sv.if %153 {
        sv.assert %155, immediate label "assert__assert_95"
      }
      sv.if %207 {
        sv.assert %206, immediate label "assert__assert_98"
      }
      sv.if %233 {
        sv.assert %232, immediate label "assert__assert_99"
      }
      sv.if %239 {
        sv.assert %238, immediate label "assert__assert_100"
      }
      sv.if %239 {
        sv.assert %240, immediate label "assert__assert_101"
      }
      sv.if %247 {
        sv.assert %246, immediate label "assert__assert_102"
      }
      sv.if %247 {
        sv.assert %248, immediate label "assert__assert_103"
      }
      sv.if %252 {
        sv.assert %251, immediate label "assert__assert_104"
      }
      sv.if %61 {
        sv.assert %255, immediate label "assert__assert_105"
      }
      sv.if %61 {
        sv.assert %268, immediate label "assert__assert_106"
      }
      sv.if %291 {
        sv.assert %290, immediate label "assert__assert_108"
      }
      sv.if %291 {
        sv.assert %292, immediate label "assert__assert_110"
      }
      sv.if %61 {
        sv.assert %300, immediate label "assert__assert_113"
      }
    }
    %301 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %302 = comb.mux bin %140, %c0_i32, %301 : i32
    hw.output
  }
  hw.module private @Repeater(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i28, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i28, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %12 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %13 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %14 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64} : i28
    %saved_mask = seq.firreg %17 clock %clock {firrtl.random_init_start = 40 : ui64} : i8
    %saved_corrupt = seq.firreg %18 clock %clock {firrtl.random_init_start = 112 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i28
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %13 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %14 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i28
    %17 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %18 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i28, i8, i1
  }
  hw.module private @TLFragmenter(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_9(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and bin %7, %17 {sv.namehint = "dFirst_size_lo"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "_dFirst_size_T_7"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or bin %21, %18 {sv.namehint = "_dFirst_size_T_8"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_1"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "_dFirst_size_T_9"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or bin %25, %26 {sv.namehint = "_dFirst_size_T_10"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub bin %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "nodeOut_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_nodeIn_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "nodeIn_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "nodeIn_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "nodeIn_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i28, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i28, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux bin %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor bin %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "aFragnum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "aToggle"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or bin %55, %63 {sv.namehint = "_nodeOut_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_nodeOut_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i28) -> i22
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i28) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "nodeOut_a_bits_address"} : i22, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "nodeOut_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52 : i1
    %74 = comb.xor bin %reset, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75 : i1
    sv.always posedge %0 {
      sv.if %74 {
        sv.assert %73, immediate label "assert__assert_1"
      }
      sv.if %74 {
        sv.assert %76, immediate label "assert__assert_2"
      }
    }
    %77 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "nodeOut_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %77, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i28, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_6(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i28, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i28, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "tlIn_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i28, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_10(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i26, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-512_i10 = hw.constant -512 : i10
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %8 = comb.shl bin %c63_i13, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %10 = comb.xor bin %9, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %11 = comb.extract %io_in_a_bits_address from 0 : (i26) -> i6
    %12 = comb.and bin %11, %10 : i6
    %13 = comb.icmp bin eq %12, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i26) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i26) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i26) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.extract %io_in_a_bits_address from 16 : (i26) -> i10
    %61 = comb.xor bin %reset, %true : i1
    %62 = comb.and bin %io_in_a_valid, %59, %61 : i1
    %63 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %64 = comb.icmp eq %60, %c-512_i10 : i10
    %65 = comb.and bin %3, %63, %64 : i1
    %66 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %67 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %68 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %69 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %70 = comb.and bin %io_in_a_valid, %69, %61 : i1
    %71 = comb.and bin %3, %63, %64 : i1
    %72 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %74 = comb.or bin %3, %4, %5 : i1
    %75 = comb.and bin %io_in_a_valid, %73, %61 : i1
    %76 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %77 = comb.and bin %76, %64 : i1
    %78 = comb.xor bin %72, %true : i1
    %79 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %80 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %81 = comb.and bin %74, %77 : i1
    %82 = comb.and bin %io_in_a_valid, %80, %61 : i1
    %83 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %84 = comb.and bin %io_in_a_valid, %83, %61 : i1
    %85 = comb.xor bin %58, %c-1_i8 : i8
    %86 = comb.and bin %io_in_a_bits_mask, %85 : i8
    %87 = comb.icmp bin eq %86, %c0_i8 : i8
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %61 : i1
    %90 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %91 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %92 = comb.and bin %io_in_a_valid, %91, %61 : i1
    %93 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %96 = comb.and bin %io_in_a_valid, %95, %61 : i1
    %97 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %98 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %99 = comb.and bin %io_in_d_valid, %61 : i1
    %100 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %101 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %102 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %103 = comb.or bin %100, %101, %102 {sv.namehint = "source_ok_1"} : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %61 : i1
    %106 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %107 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %108 = comb.and bin %io_in_d_valid, %107, %61 : i1
    %109 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %110 = comb.and bin %io_in_d_valid, %109, %61 : i1
    %111 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %112 = comb.and bin %io_in_d_valid, %111, %61 : i1
    %113 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %114 = comb.and bin %io_in_d_valid, %113, %61 : i1
    %115 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %116 = comb.and bin %io_in_d_valid, %115, %61 : i1
    %117 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %118 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %119 = comb.extract %118 from 3 : (i13) -> i3
    %120 = comb.xor bin %119, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %121 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %122 = comb.mux bin %121, %c0_i3, %120 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %127 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %123 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %124 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %125 = comb.xor bin %124, %true {sv.namehint = "a_first"} : i1
    %126 = comb.mux bin %124, %123, %122 {sv.namehint = "_a_first_counter_T"} : i3
    %127 = comb.mux bin %117, %126, %a_first_counter : i3
    %opcode = seq.firreg %135 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %136 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %137 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %138 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %139 clock %clock {firrtl.random_init_start = 14 : ui64} : i26
    %128 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %129 = comb.and bin %io_in_a_valid, %124, %61 : i1
    %130 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %131 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %132 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %133 = comb.icmp bin eq %io_in_a_bits_address, %address : i26
    %134 = comb.and bin %117, %125 : i1
    %135 = comb.mux bin %134, %io_in_a_bits_opcode, %opcode : i3
    %136 = comb.mux bin %134, %io_in_a_bits_param, %param : i3
    %137 = comb.mux bin %134, %io_in_a_bits_size, %size : i3
    %138 = comb.mux bin %134, %io_in_a_bits_source, %source : i2
    %139 = comb.mux bin %134, %io_in_a_bits_address, %address : i26
    %140 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %141 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %142 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %143 = comb.extract %142 from 3 : (i13) -> i3
    %144 = comb.xor bin %143, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %145 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %146 = comb.mux bin %145, %144, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %151 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 40 : ui64} : i3
    %147 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %148 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %149 = comb.xor bin %148, %true {sv.namehint = "d_first"} : i1
    %150 = comb.mux bin %148, %147, %146 {sv.namehint = "_d_first_counter_T"} : i3
    %151 = comb.mux bin %140, %150, %d_first_counter : i3
    %opcode_1 = seq.firreg %157 clock %clock {firrtl.random_init_start = 43 : ui64} : i3
    %size_1 = seq.firreg %158 clock %clock {firrtl.random_init_start = 48 : ui64} : i3
    %source_1 = seq.firreg %159 clock %clock {firrtl.random_init_start = 51 : ui64} : i2
    %152 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %153 = comb.and bin %io_in_d_valid, %148, %61 : i1
    %154 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %155 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %156 = comb.and bin %140, %149 : i1
    %157 = comb.mux bin %156, %io_in_d_bits_opcode, %opcode_1 : i3
    %158 = comb.mux bin %156, %io_in_d_bits_size, %size_1 : i3
    %159 = comb.mux bin %156, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %248 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 55 : ui64} : i3
    %inflight_opcodes = seq.firreg %251 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 58 : ui64} : i12
    %inflight_sizes = seq.firreg %254 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 70 : ui64} : i12
    %160 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %161 = comb.extract %160 from 3 : (i13) -> i3
    %162 = comb.xor bin %161, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %163 = comb.mux bin %121, %c0_i3, %162 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %167 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 82 : ui64} : i3
    %164 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %165 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %166 = comb.mux bin %165, %163, %164 {sv.namehint = "_a_first_counter_T_1"} : i3
    %167 = comb.mux bin %117, %166, %a_first_counter_1 : i3
    %168 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %169 = comb.extract %168 from 3 : (i13) -> i3
    %170 = comb.xor bin %169, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %171 = comb.mux bin %145, %170, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %175 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 85 : ui64} : i3
    %172 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %173 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %174 = comb.mux bin %173, %171, %172 {sv.namehint = "_d_first_counter_T_1"} : i3
    %175 = comb.mux bin %140, %174, %d_first_counter_1 : i3
    %176 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %177 = comb.shru bin %inflight_opcodes, %176 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %178 = comb.extract %177 from 1 : (i12) -> i3
    %179 = comb.shru bin %inflight_sizes, %176 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %180 = comb.extract %179 from 1 : (i12) -> i3
    %181 = comb.and bin %117, %165 : i1
    %182 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %183 = comb.shl bin %c1_i4, %182 {sv.namehint = "_a_set_T"} : i4
    %184 = comb.extract %183 from 0 : (i4) -> i3
    %185 = comb.mux bin %181, %184, %c0_i3 {sv.namehint = "a_set"} : i3
    %186 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %187 = comb.mux bin %181, %186, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %188 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %189 = comb.mux bin %181, %188, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %190 = comb.concat %c0_i31, %187 : i31, i4
    %191 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %192 = comb.shl bin %190, %191 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %193 = comb.extract %192 from 0 : (i35) -> i12
    %194 = comb.mux bin %181, %193, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %195 = comb.concat %c0_i31, %189 : i31, i4
    %196 = comb.shl bin %195, %191 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %197 = comb.extract %196 from 0 : (i35) -> i12
    %198 = comb.mux bin %181, %197, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %199 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %200 = comb.shru bin %inflight, %199 : i3
    %201 = comb.extract %200 from 0 : (i3) -> i1
    %202 = comb.xor bin %201, %true : i1
    %203 = comb.and bin %181, %61 : i1
    %204 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %205 = comb.and bin %io_in_d_valid, %173 : i1
    %206 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %207 = comb.and bin %140, %173, %206 : i1
    %208 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %209 = comb.shl bin %c1_i4, %208 {sv.namehint = "_d_clr_T"} : i4
    %210 = comb.extract %209 from 0 : (i4) -> i3
    %211 = comb.mux bin %207, %210, %c0_i3 {sv.namehint = "d_clr"} : i3
    %212 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %213 = comb.shl bin %c15_i47, %212 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %214 = comb.extract %213 from 0 : (i47) -> i12
    %215 = comb.mux bin %207, %214, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %216 = comb.shl bin %c15_i47, %212 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %217 = comb.extract %216 from 0 : (i47) -> i12
    %218 = comb.mux bin %207, %217, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %219 = comb.and bin %205, %206 : i1
    %220 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %221 = comb.and bin %io_in_a_valid, %165, %220 {sv.namehint = "same_cycle_resp"} : i1
    %222 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %223 = comb.shru bin %inflight, %222 : i3
    %224 = comb.extract %223 from 0 : (i3) -> i1
    %225 = comb.or bin %224, %221 : i1
    %226 = comb.and bin %219, %61 : i1
    %227 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %228 = comb.icmp bin eq %io_in_d_bits_opcode, %227 : i3
    %229 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %230 = comb.icmp bin eq %io_in_d_bits_opcode, %229 : i3
    %231 = comb.or bin %228, %230 : i1
    %232 = comb.and bin %219, %221, %61 : i1
    %233 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %234 = comb.xor bin %221, %true : i1
    %235 = hw.array_get %1[%178] : !hw.array<8xi3>, i3
    %236 = comb.icmp bin eq %io_in_d_bits_opcode, %235 : i3
    %237 = hw.array_get %0[%178] : !hw.array<8xi3>, i3
    %238 = comb.icmp bin eq %io_in_d_bits_opcode, %237 : i3
    %239 = comb.or bin %236, %238 : i1
    %240 = comb.and bin %219, %234, %61 : i1
    %241 = comb.icmp bin eq %io_in_d_bits_size, %180 : i3
    %242 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %243 = comb.xor bin %io_in_d_ready, %true : i1
    %244 = comb.or bin %243, %io_in_a_ready : i1
    %245 = comb.and bin %205, %165, %io_in_a_valid, %242, %206, %61 : i1
    %246 = comb.or bin %inflight, %185 {sv.namehint = "_inflight_T"} : i3
    %247 = comb.xor bin %211, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %248 = comb.and bin %246, %247 {sv.namehint = "_inflight_T_2"} : i3
    %249 = comb.or bin %inflight_opcodes, %194 {sv.namehint = "_inflight_opcodes_T"} : i12
    %250 = comb.xor bin %215, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %251 = comb.and bin %249, %250 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %252 = comb.or bin %inflight_sizes, %198 {sv.namehint = "_inflight_sizes_T"} : i12
    %253 = comb.xor bin %218, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %254 = comb.and bin %252, %253 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %261 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 88 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %255 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %256 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %257 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %258 = comb.or bin %255, %256, %257 : i1
    %259 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %260 = comb.or bin %117, %140 : i1
    %261 = comb.mux bin %260, %c0_i32, %259 : i32
    %inflight_1 = seq.firreg %284 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 120 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %286 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 135 : ui64} : i12
    %262 = comb.shl bin %c63_i13, %141 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %263 = comb.extract %262 from 3 : (i13) -> i3
    %264 = comb.xor bin %263, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %265 = comb.mux bin %145, %264, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %269 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 150 : ui64} : i3
    %266 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %267 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %268 = comb.mux bin %267, %265, %266 {sv.namehint = "_d_first_counter_T_2"} : i3
    %269 = comb.mux bin %140, %268, %d_first_counter_2 : i3
    %270 = comb.shru bin %inflight_sizes_1, %176 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %271 = comb.extract %270 from 1 : (i12) -> i3
    %272 = comb.and bin %140, %267, %204 : i1
    %273 = comb.shl bin %c1_i4, %208 {sv.namehint = "_d_clr_T_1"} : i4
    %274 = comb.extract %273 from 0 : (i4) -> i3
    %275 = comb.mux bin %272, %274, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %276 = comb.shl bin %c15_i47, %212 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %277 = comb.extract %276 from 0 : (i47) -> i12
    %278 = comb.mux bin %272, %277, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %279 = comb.shru bin %inflight_1, %222 : i3
    %280 = comb.extract %279 from 0 : (i3) -> i1
    %281 = comb.and bin %io_in_d_valid, %267, %204, %61 : i1
    %282 = comb.icmp bin eq %io_in_d_bits_size, %271 : i3
    %283 = comb.xor bin %275, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %284 = comb.and bin %inflight_1, %283 {sv.namehint = "_inflight_T_5"} : i3
    %285 = comb.xor bin %278, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %286 = comb.and bin %inflight_sizes_1, %285 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %292 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 153 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %287 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %288 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %289 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %290 = comb.or bin %287, %288, %289 : i1
    sv.always posedge %2 {
      sv.if %62 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %62 {
        sv.assert %65, immediate label "assert__assert_3"
      }
      sv.if %62 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %62 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %62 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %62 {
        sv.assert %66, immediate label "assert__assert_7"
      }
      sv.if %62 {
        sv.assert %67, immediate label "assert__assert_8"
      }
      sv.if %62 {
        sv.assert %68, immediate label "assert__assert_9"
      }
      sv.if %70 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %70 {
        sv.assert %71, immediate label "assert__assert_11"
      }
      sv.if %70 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %70 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %70 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %70 {
        sv.assert %66, immediate label "assert__assert_15"
      }
      sv.if %70 {
        sv.assert %72, immediate label "assert__assert_16"
      }
      sv.if %70 {
        sv.assert %67, immediate label "assert__assert_17"
      }
      sv.if %70 {
        sv.assert %68, immediate label "assert__assert_18"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_19"
      }
      sv.if %75 {
        sv.assert %77, immediate label "assert__assert_20"
      }
      sv.if %75 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %75 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %75 {
        sv.assert %78, immediate label "assert__assert_23"
      }
      sv.if %75 {
        sv.assert %79, immediate label "assert__assert_24"
      }
      sv.if %75 {
        sv.assert %68, immediate label "assert__assert_25"
      }
      sv.if %82 {
        sv.assert %81, immediate label "assert__assert_26"
      }
      sv.if %82 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %82 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %82 {
        sv.assert %78, immediate label "assert__assert_29"
      }
      sv.if %82 {
        sv.assert %79, immediate label "assert__assert_30"
      }
      sv.if %84 {
        sv.assert %81, immediate label "assert__assert_31"
      }
      sv.if %84 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %84 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %84 {
        sv.assert %78, immediate label "assert__assert_34"
      }
      sv.if %84 {
        sv.assert %87, immediate label "assert__assert_35"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %89 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %89 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %89 {
        sv.assert %90, immediate label "assert__assert_39"
      }
      sv.if %89 {
        sv.assert %79, immediate label "assert__assert_40"
      }
      sv.if %92 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %92 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %92 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %92 {
        sv.assert %94, immediate label "assert__assert_44"
      }
      sv.if %92 {
        sv.assert %79, immediate label "assert__assert_45"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %96 {
        sv.assert %97, immediate label "assert__assert_49"
      }
      sv.if %96 {
        sv.assert %79, immediate label "assert__assert_50"
      }
      sv.if %96 {
        sv.assert %68, immediate label "assert__assert_51"
      }
      sv.if %99 {
        sv.assert %98, immediate label "assert__assert_52"
      }
      sv.if %105 {
        sv.assert %103, immediate label "assert__assert_53"
      }
      sv.if %105 {
        sv.assert %106, immediate label "assert__assert_54"
      }
      sv.if %108 {
        sv.assert %103, immediate label "assert__assert_58"
      }
      sv.if %108 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %108 {
        sv.assert %106, immediate label "assert__assert_60"
      }
      sv.if %110 {
        sv.assert %103, immediate label "assert__assert_65"
      }
      sv.if %110 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %110 {
        sv.assert %106, immediate label "assert__assert_67"
      }
      sv.if %112 {
        sv.assert %103, immediate label "assert__assert_72"
      }
      sv.if %114 {
        sv.assert %103, immediate label "assert__assert_76"
      }
      sv.if %116 {
        sv.assert %103, immediate label "assert__assert_80"
      }
      sv.if %129 {
        sv.assert %128, immediate label "assert__assert_87"
      }
      sv.if %129 {
        sv.assert %130, immediate label "assert__assert_88"
      }
      sv.if %129 {
        sv.assert %131, immediate label "assert__assert_89"
      }
      sv.if %129 {
        sv.assert %132, immediate label "assert__assert_90"
      }
      sv.if %129 {
        sv.assert %133, immediate label "assert__assert_91"
      }
      sv.if %153 {
        sv.assert %152, immediate label "assert__assert_92"
      }
      sv.if %153 {
        sv.assert %154, immediate label "assert__assert_94"
      }
      sv.if %153 {
        sv.assert %155, immediate label "assert__assert_95"
      }
      sv.if %203 {
        sv.assert %202, immediate label "assert__assert_98"
      }
      sv.if %226 {
        sv.assert %225, immediate label "assert__assert_99"
      }
      sv.if %232 {
        sv.assert %231, immediate label "assert__assert_100"
      }
      sv.if %232 {
        sv.assert %233, immediate label "assert__assert_101"
      }
      sv.if %240 {
        sv.assert %239, immediate label "assert__assert_102"
      }
      sv.if %240 {
        sv.assert %241, immediate label "assert__assert_103"
      }
      sv.if %245 {
        sv.assert %244, immediate label "assert__assert_104"
      }
      sv.if %61 {
        sv.assert %258, immediate label "assert__assert_105"
      }
      sv.if %281 {
        sv.assert %280, immediate label "assert__assert_107"
      }
      sv.if %281 {
        sv.assert %282, immediate label "assert__assert_109"
      }
      sv.if %61 {
        sv.assert %290, immediate label "assert__assert_111"
      }
    }
    %291 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %292 = comb.mux bin %140, %c0_i32, %291 : i32
    hw.output
  }
  hw.module private @Repeater_1(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i26, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i26, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %12 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %13 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %14 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64} : i26
    %saved_mask = seq.firreg %17 clock %clock {firrtl.random_init_start = 38 : ui64} : i8
    %saved_corrupt = seq.firreg %18 clock %clock {firrtl.random_init_start = 110 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i26
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %13 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %14 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i26
    %17 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %18 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i26, i8, i1
  }
  hw.module private @TLFragmenter_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i26, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i26, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_10(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i26, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and bin %7, %17 {sv.namehint = "dFirst_size_lo"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "_dFirst_size_T_7"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or bin %21, %18 {sv.namehint = "_dFirst_size_T_8"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_1"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "_dFirst_size_T_9"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or bin %25, %26 {sv.namehint = "_dFirst_size_T_10"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub bin %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "nodeOut_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_nodeIn_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "nodeIn_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "nodeIn_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "nodeIn_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_1(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i26, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i26, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux bin %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor bin %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "aFragnum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "aToggle"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or bin %55, %63 {sv.namehint = "_nodeOut_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_nodeOut_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i26) -> i20
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i26) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "nodeOut_a_bits_address"} : i20, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "nodeOut_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52 : i1
    %74 = comb.xor bin %reset, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75 : i1
    sv.always posedge %0 {
      sv.if %74 {
        sv.assert %73, immediate label "assert__assert_1"
      }
      sv.if %74 {
        sv.assert %76, immediate label "assert__assert_2"
      }
    }
    %77 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "nodeOut_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %77, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i26, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_7(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i26, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i26, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i26, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i26, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "tlIn_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i26, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_11(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i12, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %8 = comb.shl bin %c63_i13, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %10 = comb.xor bin %9, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %11 = comb.extract %io_in_a_bits_address from 0 : (i12) -> i6
    %12 = comb.and bin %11, %10 : i6
    %13 = comb.icmp bin eq %12, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i12) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i12) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i12) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.xor bin %reset, %true : i1
    %61 = comb.and bin %io_in_a_valid, %59, %60 : i1
    %62 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %63 = comb.and %3, %62 : i1
    %64 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %65 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %66 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %67 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %68 = comb.and bin %io_in_a_valid, %67, %60 : i1
    %69 = comb.and %3, %62 : i1
    %70 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %72 = comb.or bin %3, %4, %5 : i1
    %73 = comb.and bin %io_in_a_valid, %71, %60 : i1
    %74 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %75 = comb.xor bin %70, %true : i1
    %76 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %77 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %78 = comb.and bin %72, %74 : i1
    %79 = comb.and bin %io_in_a_valid, %77, %60 : i1
    %80 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %81 = comb.and bin %io_in_a_valid, %80, %60 : i1
    %82 = comb.xor bin %58, %c-1_i8 : i8
    %83 = comb.and bin %io_in_a_bits_mask, %82 : i8
    %84 = comb.icmp bin eq %83, %c0_i8 : i8
    %85 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %86 = comb.and bin %io_in_a_valid, %85, %60 : i1
    %87 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %60 : i1
    %90 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %91 = comb.xor bin %90, %true : i1
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92, %60 : i1
    %94 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %95 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %60 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %98 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %99 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %100 = comb.or bin %97, %98, %99 {sv.namehint = "source_ok_1"} : i1
    %101 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %102 = comb.and bin %io_in_d_valid, %101, %60 : i1
    %103 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %60 : i1
    %106 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %107 = comb.and bin %io_in_d_valid, %106, %60 : i1
    %108 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %109 = comb.and bin %io_in_d_valid, %108, %60 : i1
    %110 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %111 = comb.and bin %io_in_d_valid, %110, %60 : i1
    %112 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %113 = comb.and bin %io_in_d_valid, %112, %60 : i1
    %114 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %115 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %116 = comb.extract %115 from 3 : (i13) -> i3
    %117 = comb.xor bin %116, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %118 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %119 = comb.mux bin %118, %c0_i3, %117 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %124 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %120 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %121 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %122 = comb.xor bin %121, %true {sv.namehint = "a_first"} : i1
    %123 = comb.mux bin %121, %120, %119 {sv.namehint = "_a_first_counter_T"} : i3
    %124 = comb.mux bin %114, %123, %a_first_counter : i3
    %opcode = seq.firreg %132 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %133 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %134 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %135 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %136 clock %clock {firrtl.random_init_start = 14 : ui64} : i12
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %126 = comb.and bin %io_in_a_valid, %121, %60 : i1
    %127 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %128 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %129 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %130 = comb.icmp bin eq %io_in_a_bits_address, %address : i12
    %131 = comb.and bin %114, %122 : i1
    %132 = comb.mux bin %131, %io_in_a_bits_opcode, %opcode : i3
    %133 = comb.mux bin %131, %io_in_a_bits_param, %param : i3
    %134 = comb.mux bin %131, %io_in_a_bits_size, %size : i3
    %135 = comb.mux bin %131, %io_in_a_bits_source, %source : i2
    %136 = comb.mux bin %131, %io_in_a_bits_address, %address : i12
    %137 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %138 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %139 = comb.shl bin %c63_i13, %138 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %140 = comb.extract %139 from 3 : (i13) -> i3
    %141 = comb.xor bin %140, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %142 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %143 = comb.mux bin %142, %141, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %148 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 26 : ui64} : i3
    %144 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %145 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %146 = comb.xor bin %145, %true {sv.namehint = "d_first"} : i1
    %147 = comb.mux bin %145, %144, %143 {sv.namehint = "_d_first_counter_T"} : i3
    %148 = comb.mux bin %137, %147, %d_first_counter : i3
    %opcode_1 = seq.firreg %154 clock %clock {firrtl.random_init_start = 29 : ui64} : i3
    %size_1 = seq.firreg %155 clock %clock {firrtl.random_init_start = 34 : ui64} : i3
    %source_1 = seq.firreg %156 clock %clock {firrtl.random_init_start = 37 : ui64} : i2
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %150 = comb.and bin %io_in_d_valid, %145, %60 : i1
    %151 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %152 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %153 = comb.and bin %137, %146 : i1
    %154 = comb.mux bin %153, %io_in_d_bits_opcode, %opcode_1 : i3
    %155 = comb.mux bin %153, %io_in_d_bits_size, %size_1 : i3
    %156 = comb.mux bin %153, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %245 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 41 : ui64} : i3
    %inflight_opcodes = seq.firreg %248 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 44 : ui64} : i12
    %inflight_sizes = seq.firreg %251 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 56 : ui64} : i12
    %157 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %158 = comb.extract %157 from 3 : (i13) -> i3
    %159 = comb.xor bin %158, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %160 = comb.mux bin %118, %c0_i3, %159 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %164 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 68 : ui64} : i3
    %161 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %162 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %163 = comb.mux bin %162, %160, %161 {sv.namehint = "_a_first_counter_T_1"} : i3
    %164 = comb.mux bin %114, %163, %a_first_counter_1 : i3
    %165 = comb.shl bin %c63_i13, %138 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %166 = comb.extract %165 from 3 : (i13) -> i3
    %167 = comb.xor bin %166, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %168 = comb.mux bin %142, %167, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %172 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %169 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %170 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %171 = comb.mux bin %170, %168, %169 {sv.namehint = "_d_first_counter_T_1"} : i3
    %172 = comb.mux bin %137, %171, %d_first_counter_1 : i3
    %173 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %174 = comb.shru bin %inflight_opcodes, %173 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %175 = comb.extract %174 from 1 : (i12) -> i3
    %176 = comb.shru bin %inflight_sizes, %173 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %177 = comb.extract %176 from 1 : (i12) -> i3
    %178 = comb.and bin %114, %162 : i1
    %179 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %180 = comb.shl bin %c1_i4, %179 {sv.namehint = "_a_set_T"} : i4
    %181 = comb.extract %180 from 0 : (i4) -> i3
    %182 = comb.mux bin %178, %181, %c0_i3 {sv.namehint = "a_set"} : i3
    %183 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %184 = comb.mux bin %178, %183, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %185 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %186 = comb.mux bin %178, %185, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %187 = comb.concat %c0_i31, %184 : i31, i4
    %188 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %189 = comb.shl bin %187, %188 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %190 = comb.extract %189 from 0 : (i35) -> i12
    %191 = comb.mux bin %178, %190, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %192 = comb.concat %c0_i31, %186 : i31, i4
    %193 = comb.shl bin %192, %188 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %194 = comb.extract %193 from 0 : (i35) -> i12
    %195 = comb.mux bin %178, %194, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %196 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %197 = comb.shru bin %inflight, %196 : i3
    %198 = comb.extract %197 from 0 : (i3) -> i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %178, %60 : i1
    %201 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %202 = comb.and bin %io_in_d_valid, %170 : i1
    %203 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %204 = comb.and bin %137, %170, %203 : i1
    %205 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %206 = comb.shl bin %c1_i4, %205 {sv.namehint = "_d_clr_T"} : i4
    %207 = comb.extract %206 from 0 : (i4) -> i3
    %208 = comb.mux bin %204, %207, %c0_i3 {sv.namehint = "d_clr"} : i3
    %209 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %210 = comb.shl bin %c15_i47, %209 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %211 = comb.extract %210 from 0 : (i47) -> i12
    %212 = comb.mux bin %204, %211, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %213 = comb.shl bin %c15_i47, %209 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %214 = comb.extract %213 from 0 : (i47) -> i12
    %215 = comb.mux bin %204, %214, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %216 = comb.and bin %202, %203 : i1
    %217 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %218 = comb.and bin %io_in_a_valid, %162, %217 {sv.namehint = "same_cycle_resp"} : i1
    %219 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %220 = comb.shru bin %inflight, %219 : i3
    %221 = comb.extract %220 from 0 : (i3) -> i1
    %222 = comb.or bin %221, %218 : i1
    %223 = comb.and bin %216, %60 : i1
    %224 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %225 = comb.icmp bin eq %io_in_d_bits_opcode, %224 : i3
    %226 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %227 = comb.icmp bin eq %io_in_d_bits_opcode, %226 : i3
    %228 = comb.or bin %225, %227 : i1
    %229 = comb.and bin %216, %218, %60 : i1
    %230 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %231 = comb.xor bin %218, %true : i1
    %232 = hw.array_get %1[%175] : !hw.array<8xi3>, i3
    %233 = comb.icmp bin eq %io_in_d_bits_opcode, %232 : i3
    %234 = hw.array_get %0[%175] : !hw.array<8xi3>, i3
    %235 = comb.icmp bin eq %io_in_d_bits_opcode, %234 : i3
    %236 = comb.or bin %233, %235 : i1
    %237 = comb.and bin %216, %231, %60 : i1
    %238 = comb.icmp bin eq %io_in_d_bits_size, %177 : i3
    %239 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %240 = comb.xor bin %io_in_d_ready, %true : i1
    %241 = comb.or bin %240, %io_in_a_ready : i1
    %242 = comb.and bin %202, %162, %io_in_a_valid, %239, %203, %60 : i1
    %243 = comb.or bin %inflight, %182 {sv.namehint = "_inflight_T"} : i3
    %244 = comb.xor bin %208, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %245 = comb.and bin %243, %244 {sv.namehint = "_inflight_T_2"} : i3
    %246 = comb.or bin %inflight_opcodes, %191 {sv.namehint = "_inflight_opcodes_T"} : i12
    %247 = comb.xor bin %212, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %248 = comb.and bin %246, %247 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %249 = comb.or bin %inflight_sizes, %195 {sv.namehint = "_inflight_sizes_T"} : i12
    %250 = comb.xor bin %215, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %251 = comb.and bin %249, %250 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %258 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 74 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %252 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %253 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %254 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %255 = comb.or bin %252, %253, %254 : i1
    %256 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %257 = comb.or bin %114, %137 : i1
    %258 = comb.mux bin %257, %c0_i32, %256 : i32
    %inflight_1 = seq.firreg %281 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 106 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %283 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 121 : ui64} : i12
    %259 = comb.shl bin %c63_i13, %138 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %260 = comb.extract %259 from 3 : (i13) -> i3
    %261 = comb.xor bin %260, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %262 = comb.mux bin %142, %261, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %266 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 136 : ui64} : i3
    %263 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %264 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %265 = comb.mux bin %264, %262, %263 {sv.namehint = "_d_first_counter_T_2"} : i3
    %266 = comb.mux bin %137, %265, %d_first_counter_2 : i3
    %267 = comb.shru bin %inflight_sizes_1, %173 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %268 = comb.extract %267 from 1 : (i12) -> i3
    %269 = comb.and bin %137, %264, %201 : i1
    %270 = comb.shl bin %c1_i4, %205 {sv.namehint = "_d_clr_T_1"} : i4
    %271 = comb.extract %270 from 0 : (i4) -> i3
    %272 = comb.mux bin %269, %271, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %273 = comb.shl bin %c15_i47, %209 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %274 = comb.extract %273 from 0 : (i47) -> i12
    %275 = comb.mux bin %269, %274, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %276 = comb.shru bin %inflight_1, %219 : i3
    %277 = comb.extract %276 from 0 : (i3) -> i1
    %278 = comb.and bin %io_in_d_valid, %264, %201, %60 : i1
    %279 = comb.icmp bin eq %io_in_d_bits_size, %268 : i3
    %280 = comb.xor bin %272, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %281 = comb.and bin %inflight_1, %280 {sv.namehint = "_inflight_T_5"} : i3
    %282 = comb.xor bin %275, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %283 = comb.and bin %inflight_sizes_1, %282 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %289 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 139 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %284 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %285 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %286 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %287 = comb.or bin %284, %285, %286 : i1
    sv.always posedge %2 {
      sv.if %61 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %61 {
        sv.assert %63, immediate label "assert__assert_3"
      }
      sv.if %61 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %61 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %61 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %61 {
        sv.assert %64, immediate label "assert__assert_7"
      }
      sv.if %61 {
        sv.assert %65, immediate label "assert__assert_8"
      }
      sv.if %61 {
        sv.assert %66, immediate label "assert__assert_9"
      }
      sv.if %68 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %68 {
        sv.assert %69, immediate label "assert__assert_11"
      }
      sv.if %68 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %68 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %68 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %68 {
        sv.assert %64, immediate label "assert__assert_15"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_16"
      }
      sv.if %68 {
        sv.assert %65, immediate label "assert__assert_17"
      }
      sv.if %68 {
        sv.assert %66, immediate label "assert__assert_18"
      }
      sv.if %73 {
        sv.assert %72, immediate label "assert__assert_19"
      }
      sv.if %73 {
        sv.assert %74, immediate label "assert__assert_20"
      }
      sv.if %73 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %73 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %73 {
        sv.assert %75, immediate label "assert__assert_23"
      }
      sv.if %73 {
        sv.assert %76, immediate label "assert__assert_24"
      }
      sv.if %73 {
        sv.assert %66, immediate label "assert__assert_25"
      }
      sv.if %79 {
        sv.assert %78, immediate label "assert__assert_26"
      }
      sv.if %79 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %79 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %79 {
        sv.assert %75, immediate label "assert__assert_29"
      }
      sv.if %79 {
        sv.assert %76, immediate label "assert__assert_30"
      }
      sv.if %81 {
        sv.assert %78, immediate label "assert__assert_31"
      }
      sv.if %81 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %81 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %81 {
        sv.assert %75, immediate label "assert__assert_34"
      }
      sv.if %81 {
        sv.assert %84, immediate label "assert__assert_35"
      }
      sv.if %86 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %86 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %86 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %86 {
        sv.assert %87, immediate label "assert__assert_39"
      }
      sv.if %86 {
        sv.assert %76, immediate label "assert__assert_40"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %89 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %89 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %89 {
        sv.assert %91, immediate label "assert__assert_44"
      }
      sv.if %89 {
        sv.assert %76, immediate label "assert__assert_45"
      }
      sv.if %93 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %93 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %93 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %93 {
        sv.assert %94, immediate label "assert__assert_49"
      }
      sv.if %93 {
        sv.assert %76, immediate label "assert__assert_50"
      }
      sv.if %93 {
        sv.assert %66, immediate label "assert__assert_51"
      }
      sv.if %96 {
        sv.assert %95, immediate label "assert__assert_52"
      }
      sv.if %102 {
        sv.assert %100, immediate label "assert__assert_53"
      }
      sv.if %102 {
        sv.assert %103, immediate label "assert__assert_54"
      }
      sv.if %105 {
        sv.assert %100, immediate label "assert__assert_58"
      }
      sv.if %105 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %105 {
        sv.assert %103, immediate label "assert__assert_60"
      }
      sv.if %107 {
        sv.assert %100, immediate label "assert__assert_65"
      }
      sv.if %107 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %107 {
        sv.assert %103, immediate label "assert__assert_67"
      }
      sv.if %109 {
        sv.assert %100, immediate label "assert__assert_72"
      }
      sv.if %111 {
        sv.assert %100, immediate label "assert__assert_76"
      }
      sv.if %113 {
        sv.assert %100, immediate label "assert__assert_80"
      }
      sv.if %126 {
        sv.assert %125, immediate label "assert__assert_87"
      }
      sv.if %126 {
        sv.assert %127, immediate label "assert__assert_88"
      }
      sv.if %126 {
        sv.assert %128, immediate label "assert__assert_89"
      }
      sv.if %126 {
        sv.assert %129, immediate label "assert__assert_90"
      }
      sv.if %126 {
        sv.assert %130, immediate label "assert__assert_91"
      }
      sv.if %150 {
        sv.assert %149, immediate label "assert__assert_92"
      }
      sv.if %150 {
        sv.assert %151, immediate label "assert__assert_94"
      }
      sv.if %150 {
        sv.assert %152, immediate label "assert__assert_95"
      }
      sv.if %200 {
        sv.assert %199, immediate label "assert__assert_98"
      }
      sv.if %223 {
        sv.assert %222, immediate label "assert__assert_99"
      }
      sv.if %229 {
        sv.assert %228, immediate label "assert__assert_100"
      }
      sv.if %229 {
        sv.assert %230, immediate label "assert__assert_101"
      }
      sv.if %237 {
        sv.assert %236, immediate label "assert__assert_102"
      }
      sv.if %237 {
        sv.assert %238, immediate label "assert__assert_103"
      }
      sv.if %242 {
        sv.assert %241, immediate label "assert__assert_104"
      }
      sv.if %60 {
        sv.assert %255, immediate label "assert__assert_105"
      }
      sv.if %278 {
        sv.assert %277, immediate label "assert__assert_107"
      }
      sv.if %278 {
        sv.assert %279, immediate label "assert__assert_109"
      }
      sv.if %60 {
        sv.assert %287, immediate label "assert__assert_111"
      }
    }
    %288 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %289 = comb.mux bin %137, %c0_i32, %288 : i32
    hw.output
  }
  hw.module private @Repeater_2(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i12, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i12, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %12 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %13 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %14 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64} : i12
    %saved_mask = seq.firreg %17 clock %clock {firrtl.random_init_start = 24 : ui64} : i8
    %saved_corrupt = seq.firreg %18 clock %clock {firrtl.random_init_start = 96 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i12
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %13 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %14 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i12
    %17 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %18 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i12, i8, i1
  }
  hw.module private @TLFragmenter_2(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i12, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i12, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_11(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i12, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and bin %7, %17 {sv.namehint = "dFirst_size_lo"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "_dFirst_size_T_7"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or bin %21, %18 {sv.namehint = "_dFirst_size_T_8"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_1"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "_dFirst_size_T_9"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or bin %25, %26 {sv.namehint = "_dFirst_size_T_10"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub bin %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "nodeOut_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_nodeIn_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "nodeIn_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "nodeIn_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "nodeIn_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_2(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i12, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i12, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux bin %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor bin %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "aFragnum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "aToggle"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or bin %55, %63 {sv.namehint = "_nodeOut_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_nodeOut_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i12) -> i6
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i12) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "nodeOut_a_bits_address"} : i6, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "nodeOut_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52 : i1
    %74 = comb.xor bin %reset, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75 : i1
    sv.always posedge %0 {
      sv.if %74 {
        sv.assert %73, immediate label "assert__assert_1"
      }
      sv.if %74 {
        sv.assert %76, immediate label "assert__assert_2"
      }
    }
    %77 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "nodeOut_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %77, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i12, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_9(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i12, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i12, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_2(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i12, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i12, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "tlIn_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i12, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_12(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i17, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %false = hw.constant false
    %c1_i3 = hw.constant 1 : i3
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %8 = comb.shl bin %c63_i13, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %10 = comb.xor bin %9, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %11 = comb.extract %io_in_a_bits_address from 0 : (i17) -> i6
    %12 = comb.and bin %11, %10 : i6
    %13 = comb.icmp bin eq %12, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i17) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i17) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i17) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.extract %io_in_a_bits_address from 16 : (i17) -> i1
    %61 = comb.xor bin %reset, %true : i1
    %62 = comb.and bin %io_in_a_valid, %59, %61 : i1
    %63 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %64 = comb.and bin %3, %63, %60 : i1
    %65 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %66 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %67 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %68 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %69 = comb.and bin %io_in_a_valid, %68, %61 : i1
    %70 = comb.and bin %3, %63, %60 : i1
    %71 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %72 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %73 = comb.or bin %3, %4, %5 : i1
    %74 = comb.and bin %io_in_a_valid, %72, %61 : i1
    %75 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %76 = comb.and bin %75, %60 : i1
    %77 = comb.xor bin %71, %true : i1
    %78 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79, %61 : i1
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %61 : i1
    %83 = comb.xor bin %58, %c-1_i8 : i8
    %84 = comb.and bin %io_in_a_bits_mask, %83 : i8
    %85 = comb.icmp bin eq %84, %c0_i8 : i8
    %86 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %87 = comb.and bin %io_in_a_valid, %86, %61 : i1
    %88 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %89 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %90 = comb.and bin %io_in_a_valid, %89, %61 : i1
    %91 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %92 = comb.xor bin %91, %true : i1
    %93 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %94 = comb.and bin %io_in_a_valid, %93, %61 : i1
    %95 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %96 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %97 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %98 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %99 = comb.or bin %96, %97, %98 {sv.namehint = "source_ok_1"} : i1
    %100 = comb.and bin %io_in_d_valid, %61 : i1
    %101 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %106 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %102 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %103 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %104 = comb.xor bin %103, %true {sv.namehint = "a_first"} : i1
    %105 = comb.mux bin %103, %102, %c0_i3 {sv.namehint = "_a_first_counter_T"} : i3
    %106 = comb.mux bin %101, %105, %a_first_counter : i3
    %opcode = seq.firreg %114 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %115 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %116 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %117 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %118 clock %clock {firrtl.random_init_start = 14 : ui64} : i17
    %107 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %108 = comb.and bin %io_in_a_valid, %103, %61 : i1
    %109 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %110 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %111 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %112 = comb.icmp bin eq %io_in_a_bits_address, %address : i17
    %113 = comb.and bin %101, %104 : i1
    %114 = comb.mux bin %113, %io_in_a_bits_opcode, %opcode : i3
    %115 = comb.mux bin %113, %io_in_a_bits_param, %param : i3
    %116 = comb.mux bin %113, %io_in_a_bits_size, %size : i3
    %117 = comb.mux bin %113, %io_in_a_bits_source, %source : i2
    %118 = comb.mux bin %113, %io_in_a_bits_address, %address : i17
    %119 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %120 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %121 = comb.shl bin %c63_i13, %120 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %122 = comb.extract %121 from 3 : (i13) -> i3
    %123 = comb.xor bin %122, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %d_first_counter = seq.firreg %128 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 31 : ui64} : i3
    %124 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %125 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %126 = comb.xor bin %125, %true {sv.namehint = "d_first"} : i1
    %127 = comb.mux bin %125, %124, %123 {sv.namehint = "_d_first_counter_T"} : i3
    %128 = comb.mux bin %119, %127, %d_first_counter : i3
    %size_1 = seq.firreg %133 clock %clock {firrtl.random_init_start = 39 : ui64} : i3
    %source_1 = seq.firreg %134 clock %clock {firrtl.random_init_start = 42 : ui64} : i2
    %129 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %130 = comb.and bin %io_in_d_valid, %125, %61 : i1
    %131 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %132 = comb.and bin %119, %126 : i1
    %133 = comb.mux bin %132, %io_in_d_bits_size, %size_1 : i3
    %134 = comb.mux bin %132, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %215 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 46 : ui64} : i3
    %inflight_opcodes = seq.firreg %218 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 49 : ui64} : i12
    %inflight_sizes = seq.firreg %221 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 61 : ui64} : i12
    %a_first_counter_1 = seq.firreg %138 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 73 : ui64} : i3
    %135 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %136 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %137 = comb.mux bin %136, %c0_i3, %135 {sv.namehint = "_a_first_counter_T_1"} : i3
    %138 = comb.mux bin %101, %137, %a_first_counter_1 : i3
    %139 = comb.shl bin %c63_i13, %120 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %140 = comb.extract %139 from 3 : (i13) -> i3
    %141 = comb.xor bin %140, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %d_first_counter_1 = seq.firreg %145 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 76 : ui64} : i3
    %142 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %143 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %144 = comb.mux bin %143, %141, %142 {sv.namehint = "_d_first_counter_T_1"} : i3
    %145 = comb.mux bin %119, %144, %d_first_counter_1 : i3
    %146 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %147 = comb.shru bin %inflight_opcodes, %146 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %148 = comb.extract %147 from 1 : (i12) -> i3
    %149 = comb.shru bin %inflight_sizes, %146 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %150 = comb.extract %149 from 1 : (i12) -> i3
    %151 = comb.and bin %101, %136 : i1
    %152 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %153 = comb.shl bin %c1_i4, %152 {sv.namehint = "_a_set_T"} : i4
    %154 = comb.extract %153 from 0 : (i4) -> i3
    %155 = comb.mux bin %151, %154, %c0_i3 {sv.namehint = "a_set"} : i3
    %156 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %157 = comb.mux bin %151, %156, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %158 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %159 = comb.mux bin %151, %158, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %160 = comb.concat %c0_i31, %157 : i31, i4
    %161 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %162 = comb.shl bin %160, %161 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %163 = comb.extract %162 from 0 : (i35) -> i12
    %164 = comb.mux bin %151, %163, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %165 = comb.concat %c0_i31, %159 : i31, i4
    %166 = comb.shl bin %165, %161 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %167 = comb.extract %166 from 0 : (i35) -> i12
    %168 = comb.mux bin %151, %167, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %169 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %170 = comb.shru bin %inflight, %169 : i3
    %171 = comb.extract %170 from 0 : (i3) -> i1
    %172 = comb.xor bin %171, %true : i1
    %173 = comb.and bin %151, %61 : i1
    %174 = comb.and bin %io_in_d_valid, %143 : i1
    %175 = comb.and bin %119, %143 : i1
    %176 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %177 = comb.shl bin %c1_i4, %176 {sv.namehint = "_d_clr_T"} : i4
    %178 = comb.extract %177 from 0 : (i4) -> i3
    %179 = comb.mux bin %175, %178, %c0_i3 {sv.namehint = "d_clr"} : i3
    %180 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %181 = comb.shl bin %c15_i47, %180 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %182 = comb.extract %181 from 0 : (i47) -> i12
    %183 = comb.mux bin %175, %182, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %184 = comb.shl bin %c15_i47, %180 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %185 = comb.extract %184 from 0 : (i47) -> i12
    %186 = comb.mux bin %175, %185, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %187 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %188 = comb.and bin %io_in_a_valid, %136, %187 {sv.namehint = "same_cycle_resp"} : i1
    %189 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %190 = comb.shru bin %inflight, %189 : i3
    %191 = comb.extract %190 from 0 : (i3) -> i1
    %192 = comb.or bin %191, %188 : i1
    %193 = comb.and bin %174, %61 : i1
    %194 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %195 = comb.icmp bin eq %194, %c1_i3 : i3
    %196 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %197 = comb.icmp bin eq %196, %c1_i3 : i3
    %198 = comb.or bin %195, %197 : i1
    %199 = comb.and bin %174, %188, %61 : i1
    %200 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %201 = comb.xor bin %188, %true : i1
    %202 = hw.array_get %1[%148] : !hw.array<8xi3>, i3
    %203 = comb.icmp bin eq %202, %c1_i3 : i3
    %204 = hw.array_get %0[%148] : !hw.array<8xi3>, i3
    %205 = comb.icmp bin eq %204, %c1_i3 : i3
    %206 = comb.or bin %203, %205 : i1
    %207 = comb.and bin %174, %201, %61 : i1
    %208 = comb.icmp bin eq %io_in_d_bits_size, %150 : i3
    %209 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %210 = comb.xor bin %io_in_d_ready, %true : i1
    %211 = comb.or bin %210, %io_in_a_ready : i1
    %212 = comb.and bin %174, %136, %io_in_a_valid, %209, %61 : i1
    %213 = comb.or bin %inflight, %155 {sv.namehint = "_inflight_T"} : i3
    %214 = comb.xor bin %179, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %215 = comb.and bin %213, %214 {sv.namehint = "_inflight_T_2"} : i3
    %216 = comb.or bin %inflight_opcodes, %164 {sv.namehint = "_inflight_opcodes_T"} : i12
    %217 = comb.xor bin %183, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %218 = comb.and bin %216, %217 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %219 = comb.or bin %inflight_sizes, %168 {sv.namehint = "_inflight_sizes_T"} : i12
    %220 = comb.xor bin %186, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %221 = comb.and bin %219, %220 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %228 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 79 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %222 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %223 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %224 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %225 = comb.or bin %222, %223, %224 : i1
    sv.always posedge %2 {
      sv.if %62 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %62 {
        sv.assert %64, immediate label "assert__assert_3"
      }
      sv.if %62 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %62 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %62 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %62 {
        sv.assert %65, immediate label "assert__assert_7"
      }
      sv.if %62 {
        sv.assert %66, immediate label "assert__assert_8"
      }
      sv.if %62 {
        sv.assert %67, immediate label "assert__assert_9"
      }
      sv.if %69 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %69 {
        sv.assert %70, immediate label "assert__assert_11"
      }
      sv.if %69 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %69 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %69 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %69 {
        sv.assert %65, immediate label "assert__assert_15"
      }
      sv.if %69 {
        sv.assert %71, immediate label "assert__assert_16"
      }
      sv.if %69 {
        sv.assert %66, immediate label "assert__assert_17"
      }
      sv.if %69 {
        sv.assert %67, immediate label "assert__assert_18"
      }
      sv.if %74 {
        sv.assert %73, immediate label "assert__assert_19"
      }
      sv.if %74 {
        sv.assert %76, immediate label "assert__assert_20"
      }
      sv.if %74 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %74 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %74 {
        sv.assert %77, immediate label "assert__assert_23"
      }
      sv.if %74 {
        sv.assert %78, immediate label "assert__assert_24"
      }
      sv.if %74 {
        sv.assert %67, immediate label "assert__assert_25"
      }
      sv.if %80 {
        sv.assert %false, immediate label "assert__assert_26"
      }
      sv.if %80 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %80 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %80 {
        sv.assert %77, immediate label "assert__assert_29"
      }
      sv.if %80 {
        sv.assert %78, immediate label "assert__assert_30"
      }
      sv.if %82 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %82 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %82 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %82 {
        sv.assert %77, immediate label "assert__assert_34"
      }
      sv.if %82 {
        sv.assert %85, immediate label "assert__assert_35"
      }
      sv.if %87 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %87 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %87 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %87 {
        sv.assert %88, immediate label "assert__assert_39"
      }
      sv.if %87 {
        sv.assert %78, immediate label "assert__assert_40"
      }
      sv.if %90 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %90 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %90 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %90 {
        sv.assert %92, immediate label "assert__assert_44"
      }
      sv.if %90 {
        sv.assert %78, immediate label "assert__assert_45"
      }
      sv.if %94 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %94 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %94 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %94 {
        sv.assert %95, immediate label "assert__assert_49"
      }
      sv.if %94 {
        sv.assert %78, immediate label "assert__assert_50"
      }
      sv.if %94 {
        sv.assert %67, immediate label "assert__assert_51"
      }
      sv.if %100 {
        sv.assert %99, immediate label "assert__assert_76"
      }
      sv.if %108 {
        sv.assert %107, immediate label "assert__assert_87"
      }
      sv.if %108 {
        sv.assert %109, immediate label "assert__assert_88"
      }
      sv.if %108 {
        sv.assert %110, immediate label "assert__assert_89"
      }
      sv.if %108 {
        sv.assert %111, immediate label "assert__assert_90"
      }
      sv.if %108 {
        sv.assert %112, immediate label "assert__assert_91"
      }
      sv.if %130 {
        sv.assert %129, immediate label "assert__assert_94"
      }
      sv.if %130 {
        sv.assert %131, immediate label "assert__assert_95"
      }
      sv.if %173 {
        sv.assert %172, immediate label "assert__assert_98"
      }
      sv.if %193 {
        sv.assert %192, immediate label "assert__assert_99"
      }
      sv.if %199 {
        sv.assert %198, immediate label "assert__assert_100"
      }
      sv.if %199 {
        sv.assert %200, immediate label "assert__assert_101"
      }
      sv.if %207 {
        sv.assert %206, immediate label "assert__assert_102"
      }
      sv.if %207 {
        sv.assert %208, immediate label "assert__assert_103"
      }
      sv.if %212 {
        sv.assert %211, immediate label "assert__assert_104"
      }
      sv.if %61 {
        sv.assert %225, immediate label "assert__assert_105"
      }
    }
    %226 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %227 = comb.or bin %101, %119 : i1
    %228 = comb.mux bin %227, %c0_i32, %226 : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    hw.output
  }
  hw.module private @Repeater_3(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i17, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i17, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %12 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %13 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %14 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64} : i17
    %saved_mask = seq.firreg %17 clock %clock {firrtl.random_init_start = 29 : ui64} : i8
    %saved_corrupt = seq.firreg %18 clock %clock {firrtl.random_init_start = 101 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i17
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %13 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %14 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i17
    %17 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %18 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i17, i8, i1
  }
  hw.module private @TLFragmenter_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i17, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i17, out auto_out_a_bits_mask : i8, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_12(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i17, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_size: %34: i3, io_in_d_bits_source: %33: i2) -> ()
    %acknum = seq.firreg %28 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %30 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %32 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %4 = comb.shl bin %c7_i6, %3 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %5 = comb.extract %4 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %6 = comb.xor bin %5, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %7 = comb.xor %1, %c-1_i3 : i3
    %8 = comb.extract %7 from 1 : (i3) -> i2
    %9 = comb.concat %true, %8 : i1, i2
    %10 = comb.and bin %1, %9 {sv.namehint = "dFirst_size_hi"} : i3
    %11 = comb.extract %7 from 0 : (i3) -> i1
    %12 = comb.extract %4 from 1 : (i6) -> i2
    %13 = comb.concat %11, %12 : i1, i2
    %14 = comb.and bin %6, %13 {sv.namehint = "dFirst_size_lo"} : i3
    %15 = comb.icmp bin ne %10, %c0_i3 {sv.namehint = "_dFirst_size_T_7"} : i3
    %16 = comb.extract %10 from 1 : (i3) -> i2
    %17 = comb.concat %false, %16 : i1, i2
    %18 = comb.or bin %17, %14 {sv.namehint = "_dFirst_size_T_8"} : i3
    %19 = comb.extract %18 from 1 {sv.namehint = "dFirst_size_hi_1"} : (i3) -> i2
    %20 = comb.icmp bin ne %19, %c0_i2 {sv.namehint = "_dFirst_size_T_9"} : i2
    %21 = comb.extract %18 from 2 : (i3) -> i1
    %22 = comb.extract %18 from 0 : (i3) -> i1
    %23 = comb.or bin %21, %22 {sv.namehint = "_dFirst_size_T_10"} : i1
    %24 = comb.concat %15, %20, %23 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %25 = comb.and bin %auto_in_d_ready, %auto_out_d_valid : i1
    %26 = comb.add %acknum, %c-1_i3 {sv.namehint = "_acknum_T"} : i3
    %27 = comb.mux bin %2, %1, %26 {sv.namehint = "_acknum_T_2"} : i3
    %28 = comb.mux bin %25, %27, %acknum : i3
    %29 = comb.and bin %25, %2 : i1
    %30 = comb.mux bin %29, %24, %dOrig : i3
    %31 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %32 = comb.mux bin %29, %31, %dToggle : i1
    %33 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "nodeIn_d_bits_source"} : (i6) -> i2
    %34 = comb.mux bin %2, %24, %dOrig {sv.namehint = "nodeIn_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_3(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %50: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i17, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i17, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %35 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %36 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %37 = comb.mux bin %35, %c-1_i2, %36 {sv.namehint = "aFrag"} : i2
    %38 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %39 = comb.shl bin %c63_i13, %38 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %40 = comb.extract %39 from 3 : (i13) -> i3
    %41 = comb.xor bin %40, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %gennum = seq.firreg %49 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %42 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %43 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %44 = comb.mux bin %42, %41, %43 {sv.namehint = "aFragnum"} : i3
    %aToggle_r = seq.firreg %45 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %45 = comb.mux bin %42, %dToggle, %aToggle_r : i1
    %46 = comb.mux bin %42, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %47 = comb.xor bin %46, %true {sv.namehint = "aToggle"} : i1
    %48 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %49 = comb.mux bin %48, %44, %gennum : i3
    %50 = comb.icmp bin ne %44, %c0_i3 {sv.namehint = "repeater.io_repeat"} : i3
    %51 = comb.extract %39 from 3 : (i13) -> i3
    %52 = comb.or bin %44, %51 {sv.namehint = "_nodeOut_a_bits_address_T_2"} : i3
    %53 = comb.xor %52, %c-1_i3 : i3
    %54 = comb.concat %53, %c0_i3 {sv.namehint = "_nodeOut_a_bits_address_T_5"} : i3, i3
    %55 = comb.extract %repeater.io_deq_bits_address from 6 : (i17) -> i11
    %56 = comb.extract %repeater.io_deq_bits_address from 0 : (i17) -> i6
    %57 = comb.or bin %56, %54 : i6
    %58 = comb.concat %55, %57 {sv.namehint = "nodeOut_a_bits_address"} : i11, i6
    %59 = comb.concat %repeater.io_deq_bits_source, %47, %44 {sv.namehint = "nodeOut_a_bits_source"} : i2, i1, i3
    %60 = comb.xor bin %repeater.io_full, %true : i1
    %61 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %62 = comb.or bin %60, %61 : i1
    %63 = comb.xor bin %reset, %true : i1
    sv.always posedge %0 {
      sv.if %63 {
        sv.assert %62, immediate label "assert__assert_2"
      }
    }
    %64 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "nodeOut_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %auto_out_d_valid, %34, %33, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %37, %59, %58, %64, %repeater.io_deq_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i64, i1, i3, i3, i2, i6, i17, i8, i1, i1
  }
  hw.module private @TLInterconnectCoupler_10(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i17, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i17, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_3(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i17, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i17, auto_out_a_bits_mask: i8, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "tlIn_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i17, i8, i1, i1, i1, i1, i3, i2, i64
  }
  hw.module private @PeripheryBus_1(in %auto_coupler_to_bootrom_fragmenter_out_a_ready : i1, out auto_coupler_to_bootrom_fragmenter_out_a_valid : i1, out auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_bootrom_fragmenter_out_a_bits_param : i3, out auto_coupler_to_bootrom_fragmenter_out_a_bits_size : i2, out auto_coupler_to_bootrom_fragmenter_out_a_bits_source : i6, out auto_coupler_to_bootrom_fragmenter_out_a_bits_address : i17, out auto_coupler_to_bootrom_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_bootrom_fragmenter_out_d_ready : i1, in %auto_coupler_to_bootrom_fragmenter_out_d_valid : i1, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_debug_fragmenter_out_a_ready : i1, out auto_coupler_to_debug_fragmenter_out_a_valid : i1, out auto_coupler_to_debug_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_debug_fragmenter_out_a_bits_param : i3, out auto_coupler_to_debug_fragmenter_out_a_bits_size : i2, out auto_coupler_to_debug_fragmenter_out_a_bits_source : i6, out auto_coupler_to_debug_fragmenter_out_a_bits_address : i12, out auto_coupler_to_debug_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_debug_fragmenter_out_a_bits_data : i64, out auto_coupler_to_debug_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_debug_fragmenter_out_d_ready : i1, in %auto_coupler_to_debug_fragmenter_out_d_valid : i1, in %auto_coupler_to_debug_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_debug_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_debug_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_debug_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_clint_fragmenter_out_a_ready : i1, out auto_coupler_to_clint_fragmenter_out_a_valid : i1, out auto_coupler_to_clint_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_clint_fragmenter_out_a_bits_param : i3, out auto_coupler_to_clint_fragmenter_out_a_bits_size : i2, out auto_coupler_to_clint_fragmenter_out_a_bits_source : i6, out auto_coupler_to_clint_fragmenter_out_a_bits_address : i26, out auto_coupler_to_clint_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_clint_fragmenter_out_a_bits_data : i64, out auto_coupler_to_clint_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_clint_fragmenter_out_d_ready : i1, in %auto_coupler_to_clint_fragmenter_out_d_valid : i1, in %auto_coupler_to_clint_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_clint_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_clint_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_clint_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_plic_fragmenter_out_a_ready : i1, out auto_coupler_to_plic_fragmenter_out_a_valid : i1, out auto_coupler_to_plic_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_plic_fragmenter_out_a_bits_param : i3, out auto_coupler_to_plic_fragmenter_out_a_bits_size : i2, out auto_coupler_to_plic_fragmenter_out_a_bits_source : i6, out auto_coupler_to_plic_fragmenter_out_a_bits_address : i28, out auto_coupler_to_plic_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_plic_fragmenter_out_a_bits_data : i64, out auto_coupler_to_plic_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_plic_fragmenter_out_d_ready : i1, in %auto_coupler_to_plic_fragmenter_out_d_valid : i1, in %auto_coupler_to_plic_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_plic_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_plic_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_plic_fragmenter_out_d_bits_data : i64, out auto_fixedClockNode_out_2_clock : !seq.clock, out auto_fixedClockNode_out_2_reset : i1, out auto_fixedClockNode_out_0_clock : !seq.clock, out auto_fixedClockNode_out_0_reset : i1, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock : !seq.clock, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset : i1, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock : !seq.clock, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset : i1, out auto_bus_xing_in_a_ready : i1, in %auto_bus_xing_in_a_valid : i1, in %auto_bus_xing_in_a_bits_opcode : i3, in %auto_bus_xing_in_a_bits_param : i3, in %auto_bus_xing_in_a_bits_size : i4, in %auto_bus_xing_in_a_bits_source : i2, in %auto_bus_xing_in_a_bits_address : i28, in %auto_bus_xing_in_a_bits_mask : i8, in %auto_bus_xing_in_a_bits_data : i64, in %auto_bus_xing_in_a_bits_corrupt : i1, in %auto_bus_xing_in_d_ready : i1, out auto_bus_xing_in_d_valid : i1, out auto_bus_xing_in_d_bits_opcode : i3, out auto_bus_xing_in_d_bits_param : i2, out auto_bus_xing_in_d_bits_size : i4, out auto_bus_xing_in_d_bits_source : i2, out auto_bus_xing_in_d_bits_sink : i1, out auto_bus_xing_in_d_bits_denied : i1, out auto_bus_xing_in_d_bits_data : i64, out auto_bus_xing_in_d_bits_corrupt : i1, out clock : !seq.clock, out reset : i1) {
    %subsystem_cbus_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_cbus_clock_groups.auto_out_1_member_subsystem_pbus_0_reset, %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_clock, %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_cbus_clock_groups" @ClockGroupAggregator_3(auto_in_member_subsystem_cbus_1_clock: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock: !seq.clock, auto_in_member_subsystem_cbus_1_reset: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset: i1, auto_in_member_subsystem_cbus_0_clock: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_cbus_0_reset: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset: i1) -> (auto_out_1_member_subsystem_pbus_0_clock: !seq.clock, auto_out_1_member_subsystem_pbus_0_reset: i1, auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_cbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_3_clock, %fixedClockNode.auto_out_3_reset, %fixedClockNode.auto_out_1_clock, %fixedClockNode.auto_out_1_reset, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_3(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_3_clock: !seq.clock, auto_out_3_reset: i1, auto_out_1_clock: !seq.clock, auto_out_1_reset: i1, auto_out_0_clock: !seq.clock, auto_out_0_reset: i1) {sv.namehint = "clockSinkNodeIn_reset"}
    %fixer.auto_in_a_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_param, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_sink, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_a_bits_corrupt, %fixer.auto_out_d_ready = hw.instance "fixer" @TLFIFOFixer_2(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer.auto_out_d_ready: i1, auto_out_a_ready: %out_xbar.auto_in_a_ready: i1, auto_out_d_valid: %out_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %out_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %out_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %out_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %out_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %out_xbar.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %out_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %out_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %out_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "fixer.auto_in_d_valid"}
    %in_xbar.auto_in_a_ready, %in_xbar.auto_in_d_valid, %in_xbar.auto_in_d_bits_opcode, %in_xbar.auto_in_d_bits_param, %in_xbar.auto_in_d_bits_size, %in_xbar.auto_in_d_bits_source, %in_xbar.auto_in_d_bits_sink, %in_xbar.auto_in_d_bits_denied, %in_xbar.auto_in_d_bits_data, %in_xbar.auto_in_d_bits_corrupt, %in_xbar.auto_out_a_valid, %in_xbar.auto_out_a_bits_opcode, %in_xbar.auto_out_a_bits_param, %in_xbar.auto_out_a_bits_size, %in_xbar.auto_out_a_bits_source, %in_xbar.auto_out_a_bits_address, %in_xbar.auto_out_a_bits_mask, %in_xbar.auto_out_a_bits_data, %in_xbar.auto_out_a_bits_corrupt, %in_xbar.auto_out_d_ready = hw.instance "in_xbar" @TLXbar_4(auto_in_a_valid: %buffer_1.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer_1.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer_1.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer_1.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer_1.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer_1.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %buffer_1.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer_1.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer_1.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer_1.auto_out_d_ready: i1, auto_out_a_ready: %atomics.auto_in_a_ready: i1, auto_out_d_valid: %atomics.auto_in_d_valid: i1, auto_out_d_bits_opcode: %atomics.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %atomics.auto_in_d_bits_param: i2, auto_out_d_bits_size: %atomics.auto_in_d_bits_size: i4, auto_out_d_bits_source: %atomics.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %atomics.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %atomics.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %atomics.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %atomics.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "atomics.auto_in_d_ready"}
    %out_xbar.auto_in_a_ready, %out_xbar.auto_in_d_valid, %out_xbar.auto_in_d_bits_opcode, %out_xbar.auto_in_d_bits_param, %out_xbar.auto_in_d_bits_size, %out_xbar.auto_in_d_bits_source, %out_xbar.auto_in_d_bits_sink, %out_xbar.auto_in_d_bits_denied, %out_xbar.auto_in_d_bits_data, %out_xbar.auto_in_d_bits_corrupt, %out_xbar.auto_out_4_a_valid, %out_xbar.auto_out_4_a_bits_opcode, %out_xbar.auto_out_4_a_bits_param, %out_xbar.auto_out_4_a_bits_size, %out_xbar.auto_out_4_a_bits_source, %out_xbar.auto_out_4_a_bits_address, %out_xbar.auto_out_4_a_bits_mask, %out_xbar.auto_out_4_a_bits_corrupt, %out_xbar.auto_out_4_d_ready, %out_xbar.auto_out_3_a_valid, %out_xbar.auto_out_3_a_bits_opcode, %out_xbar.auto_out_3_a_bits_param, %out_xbar.auto_out_3_a_bits_size, %out_xbar.auto_out_3_a_bits_source, %out_xbar.auto_out_3_a_bits_address, %out_xbar.auto_out_3_a_bits_mask, %out_xbar.auto_out_3_a_bits_data, %out_xbar.auto_out_3_a_bits_corrupt, %out_xbar.auto_out_3_d_ready, %out_xbar.auto_out_2_a_valid, %out_xbar.auto_out_2_a_bits_opcode, %out_xbar.auto_out_2_a_bits_param, %out_xbar.auto_out_2_a_bits_size, %out_xbar.auto_out_2_a_bits_source, %out_xbar.auto_out_2_a_bits_address, %out_xbar.auto_out_2_a_bits_mask, %out_xbar.auto_out_2_a_bits_data, %out_xbar.auto_out_2_a_bits_corrupt, %out_xbar.auto_out_2_d_ready, %out_xbar.auto_out_1_a_valid, %out_xbar.auto_out_1_a_bits_opcode, %out_xbar.auto_out_1_a_bits_param, %out_xbar.auto_out_1_a_bits_size, %out_xbar.auto_out_1_a_bits_source, %out_xbar.auto_out_1_a_bits_address, %out_xbar.auto_out_1_a_bits_mask, %out_xbar.auto_out_1_a_bits_data, %out_xbar.auto_out_1_a_bits_corrupt, %out_xbar.auto_out_1_d_ready, %out_xbar.auto_out_0_a_valid, %out_xbar.auto_out_0_a_bits_opcode, %out_xbar.auto_out_0_a_bits_param, %out_xbar.auto_out_0_a_bits_size, %out_xbar.auto_out_0_a_bits_source, %out_xbar.auto_out_0_a_bits_address, %out_xbar.auto_out_0_a_bits_mask, %out_xbar.auto_out_0_a_bits_data, %out_xbar.auto_out_0_a_bits_corrupt, %out_xbar.auto_out_0_d_ready = hw.instance "out_xbar" @TLXbar_5(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %fixer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_out_4_a_ready: %coupler_to_bootrom.auto_tl_in_a_ready: i1, auto_out_4_d_valid: %coupler_to_bootrom.auto_tl_in_d_valid: i1, auto_out_4_d_bits_size: %coupler_to_bootrom.auto_tl_in_d_bits_size: i3, auto_out_4_d_bits_source: %coupler_to_bootrom.auto_tl_in_d_bits_source: i2, auto_out_4_d_bits_data: %coupler_to_bootrom.auto_tl_in_d_bits_data: i64, auto_out_3_a_ready: %coupler_to_debug.auto_tl_in_a_ready: i1, auto_out_3_d_valid: %coupler_to_debug.auto_tl_in_d_valid: i1, auto_out_3_d_bits_opcode: %coupler_to_debug.auto_tl_in_d_bits_opcode: i3, auto_out_3_d_bits_size: %coupler_to_debug.auto_tl_in_d_bits_size: i3, auto_out_3_d_bits_source: %coupler_to_debug.auto_tl_in_d_bits_source: i2, auto_out_3_d_bits_data: %coupler_to_debug.auto_tl_in_d_bits_data: i64, auto_out_2_a_ready: %coupler_to_clint.auto_tl_in_a_ready: i1, auto_out_2_d_valid: %coupler_to_clint.auto_tl_in_d_valid: i1, auto_out_2_d_bits_opcode: %coupler_to_clint.auto_tl_in_d_bits_opcode: i3, auto_out_2_d_bits_size: %coupler_to_clint.auto_tl_in_d_bits_size: i3, auto_out_2_d_bits_source: %coupler_to_clint.auto_tl_in_d_bits_source: i2, auto_out_2_d_bits_data: %coupler_to_clint.auto_tl_in_d_bits_data: i64, auto_out_1_a_ready: %coupler_to_plic.auto_tl_in_a_ready: i1, auto_out_1_d_valid: %coupler_to_plic.auto_tl_in_d_valid: i1, auto_out_1_d_bits_opcode: %coupler_to_plic.auto_tl_in_d_bits_opcode: i3, auto_out_1_d_bits_size: %coupler_to_plic.auto_tl_in_d_bits_size: i3, auto_out_1_d_bits_source: %coupler_to_plic.auto_tl_in_d_bits_source: i2, auto_out_1_d_bits_data: %coupler_to_plic.auto_tl_in_d_bits_data: i64, auto_out_0_a_ready: %wrapped_error_device.auto_buffer_in_a_ready: i1, auto_out_0_d_valid: %wrapped_error_device.auto_buffer_in_d_valid: i1, auto_out_0_d_bits_opcode: %wrapped_error_device.auto_buffer_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %wrapped_error_device.auto_buffer_in_d_bits_param: i2, auto_out_0_d_bits_size: %wrapped_error_device.auto_buffer_in_d_bits_size: i4, auto_out_0_d_bits_source: %wrapped_error_device.auto_buffer_in_d_bits_source: i2, auto_out_0_d_bits_sink: %wrapped_error_device.auto_buffer_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %wrapped_error_device.auto_buffer_in_d_bits_denied: i1, auto_out_0_d_bits_data: %wrapped_error_device.auto_buffer_in_d_bits_data: i64, auto_out_0_d_bits_corrupt: %wrapped_error_device.auto_buffer_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_4_a_valid: i1, auto_out_4_a_bits_opcode: i3, auto_out_4_a_bits_param: i3, auto_out_4_a_bits_size: i3, auto_out_4_a_bits_source: i2, auto_out_4_a_bits_address: i17, auto_out_4_a_bits_mask: i8, auto_out_4_a_bits_corrupt: i1, auto_out_4_d_ready: i1, auto_out_3_a_valid: i1, auto_out_3_a_bits_opcode: i3, auto_out_3_a_bits_param: i3, auto_out_3_a_bits_size: i3, auto_out_3_a_bits_source: i2, auto_out_3_a_bits_address: i12, auto_out_3_a_bits_mask: i8, auto_out_3_a_bits_data: i64, auto_out_3_a_bits_corrupt: i1, auto_out_3_d_ready: i1, auto_out_2_a_valid: i1, auto_out_2_a_bits_opcode: i3, auto_out_2_a_bits_param: i3, auto_out_2_a_bits_size: i3, auto_out_2_a_bits_source: i2, auto_out_2_a_bits_address: i26, auto_out_2_a_bits_mask: i8, auto_out_2_a_bits_data: i64, auto_out_2_a_bits_corrupt: i1, auto_out_2_d_ready: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_param: i3, auto_out_1_a_bits_size: i3, auto_out_1_a_bits_source: i2, auto_out_1_a_bits_address: i28, auto_out_1_a_bits_mask: i8, auto_out_1_a_bits_data: i64, auto_out_1_a_bits_corrupt: i1, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_param: i3, auto_out_0_a_bits_size: i4, auto_out_0_a_bits_source: i2, auto_out_0_a_bits_address: i14, auto_out_0_a_bits_mask: i8, auto_out_0_a_bits_data: i64, auto_out_0_a_bits_corrupt: i1, auto_out_0_d_ready: i1) {sv.namehint = "out_xbar.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_3(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %atomics.auto_out_a_valid: i1, auto_in_a_bits_opcode: %atomics.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %atomics.auto_out_a_bits_param: i3, auto_in_a_bits_size: %atomics.auto_out_a_bits_size: i4, auto_in_a_bits_source: %atomics.auto_out_a_bits_source: i2, auto_in_a_bits_address: %atomics.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %atomics.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %atomics.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %atomics.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %atomics.auto_out_d_ready: i1, auto_out_a_ready: %fixer.auto_in_a_ready: i1, auto_out_d_valid: %fixer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %fixer.auto_in_d_bits_param: i2, auto_out_d_bits_size: %fixer.auto_in_d_bits_size: i4, auto_out_d_bits_source: %fixer.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %fixer.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "buffer.auto_in_d_valid"}
    %atomics.auto_in_a_ready, %atomics.auto_in_d_valid, %atomics.auto_in_d_bits_opcode, %atomics.auto_in_d_bits_param, %atomics.auto_in_d_bits_size, %atomics.auto_in_d_bits_source, %atomics.auto_in_d_bits_sink, %atomics.auto_in_d_bits_denied, %atomics.auto_in_d_bits_data, %atomics.auto_in_d_bits_corrupt, %atomics.auto_out_a_valid, %atomics.auto_out_a_bits_opcode, %atomics.auto_out_a_bits_param, %atomics.auto_out_a_bits_size, %atomics.auto_out_a_bits_source, %atomics.auto_out_a_bits_address, %atomics.auto_out_a_bits_mask, %atomics.auto_out_a_bits_data, %atomics.auto_out_a_bits_corrupt, %atomics.auto_out_d_ready = hw.instance "atomics" @TLAtomicAutomata_1(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %in_xbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %in_xbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %in_xbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %in_xbar.auto_out_a_bits_size: i4, auto_in_a_bits_source: %in_xbar.auto_out_a_bits_source: i2, auto_in_a_bits_address: %in_xbar.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %in_xbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %in_xbar.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %in_xbar.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %in_xbar.auto_out_d_ready: i1, auto_out_a_ready: %buffer.auto_in_a_ready: i1, auto_out_d_valid: %buffer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %buffer.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %buffer.auto_in_d_bits_param: i2, auto_out_d_bits_size: %buffer.auto_in_d_bits_size: i4, auto_out_d_bits_source: %buffer.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %buffer.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %buffer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %buffer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %buffer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "atomics.auto_in_d_valid"}
    %wrapped_error_device.auto_buffer_in_a_ready, %wrapped_error_device.auto_buffer_in_d_valid, %wrapped_error_device.auto_buffer_in_d_bits_opcode, %wrapped_error_device.auto_buffer_in_d_bits_param, %wrapped_error_device.auto_buffer_in_d_bits_size, %wrapped_error_device.auto_buffer_in_d_bits_source, %wrapped_error_device.auto_buffer_in_d_bits_sink, %wrapped_error_device.auto_buffer_in_d_bits_denied, %wrapped_error_device.auto_buffer_in_d_bits_data, %wrapped_error_device.auto_buffer_in_d_bits_corrupt = hw.instance "wrapped_error_device" @ErrorDeviceWrapper(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_buffer_in_a_valid: %out_xbar.auto_out_0_a_valid: i1, auto_buffer_in_a_bits_opcode: %out_xbar.auto_out_0_a_bits_opcode: i3, auto_buffer_in_a_bits_param: %out_xbar.auto_out_0_a_bits_param: i3, auto_buffer_in_a_bits_size: %out_xbar.auto_out_0_a_bits_size: i4, auto_buffer_in_a_bits_source: %out_xbar.auto_out_0_a_bits_source: i2, auto_buffer_in_a_bits_address: %out_xbar.auto_out_0_a_bits_address: i14, auto_buffer_in_a_bits_mask: %out_xbar.auto_out_0_a_bits_mask: i8, auto_buffer_in_a_bits_data: %out_xbar.auto_out_0_a_bits_data: i64, auto_buffer_in_a_bits_corrupt: %out_xbar.auto_out_0_a_bits_corrupt: i1, auto_buffer_in_d_ready: %out_xbar.auto_out_0_d_ready: i1) -> (auto_buffer_in_a_ready: i1, auto_buffer_in_d_valid: i1, auto_buffer_in_d_bits_opcode: i3, auto_buffer_in_d_bits_param: i2, auto_buffer_in_d_bits_size: i4, auto_buffer_in_d_bits_source: i2, auto_buffer_in_d_bits_sink: i1, auto_buffer_in_d_bits_denied: i1, auto_buffer_in_d_bits_data: i64, auto_buffer_in_d_bits_corrupt: i1) {sv.namehint = "wrapped_error_device.auto_buffer_in_d_valid"}
    %buffer_1.auto_in_a_ready, %buffer_1.auto_in_d_valid, %buffer_1.auto_in_d_bits_opcode, %buffer_1.auto_in_d_bits_param, %buffer_1.auto_in_d_bits_size, %buffer_1.auto_in_d_bits_source, %buffer_1.auto_in_d_bits_sink, %buffer_1.auto_in_d_bits_denied, %buffer_1.auto_in_d_bits_data, %buffer_1.auto_in_d_bits_corrupt, %buffer_1.auto_out_a_valid, %buffer_1.auto_out_a_bits_opcode, %buffer_1.auto_out_a_bits_param, %buffer_1.auto_out_a_bits_size, %buffer_1.auto_out_a_bits_source, %buffer_1.auto_out_a_bits_address, %buffer_1.auto_out_a_bits_mask, %buffer_1.auto_out_a_bits_data, %buffer_1.auto_out_a_bits_corrupt, %buffer_1.auto_out_d_ready = hw.instance "buffer_1" @TLBuffer_5(auto_in_a_valid: %auto_bus_xing_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bus_xing_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bus_xing_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bus_xing_in_a_bits_size: i4, auto_in_a_bits_source: %auto_bus_xing_in_a_bits_source: i2, auto_in_a_bits_address: %auto_bus_xing_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_bus_xing_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_bus_xing_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_bus_xing_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_bus_xing_in_d_ready: i1, auto_out_a_ready: %in_xbar.auto_in_a_ready: i1, auto_out_d_valid: %in_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %in_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %in_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %in_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %in_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %in_xbar.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %in_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %in_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %in_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bus_xingIn_d_valid"}
    %coupler_to_plic.auto_fragmenter_out_a_valid, %coupler_to_plic.auto_fragmenter_out_a_bits_opcode, %coupler_to_plic.auto_fragmenter_out_a_bits_param, %coupler_to_plic.auto_fragmenter_out_a_bits_size, %coupler_to_plic.auto_fragmenter_out_a_bits_source, %coupler_to_plic.auto_fragmenter_out_a_bits_address, %coupler_to_plic.auto_fragmenter_out_a_bits_mask, %coupler_to_plic.auto_fragmenter_out_a_bits_data, %coupler_to_plic.auto_fragmenter_out_a_bits_corrupt, %coupler_to_plic.auto_fragmenter_out_d_ready, %coupler_to_plic.auto_tl_in_a_ready, %coupler_to_plic.auto_tl_in_d_valid, %coupler_to_plic.auto_tl_in_d_bits_opcode, %coupler_to_plic.auto_tl_in_d_bits_size, %coupler_to_plic.auto_tl_in_d_bits_source, %coupler_to_plic.auto_tl_in_d_bits_data = hw.instance "coupler_to_plic" @TLInterconnectCoupler_6(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_plic_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_plic_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_plic_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_plic_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_plic_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_plic_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_1_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_1_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_1_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_1_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_1_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_1_a_bits_address: i28, auto_tl_in_a_bits_mask: %out_xbar.auto_out_1_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_1_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_1_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_1_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i28, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_plic.auto_tl_in_d_valid"}
    %coupler_to_clint.auto_fragmenter_out_a_valid, %coupler_to_clint.auto_fragmenter_out_a_bits_opcode, %coupler_to_clint.auto_fragmenter_out_a_bits_param, %coupler_to_clint.auto_fragmenter_out_a_bits_size, %coupler_to_clint.auto_fragmenter_out_a_bits_source, %coupler_to_clint.auto_fragmenter_out_a_bits_address, %coupler_to_clint.auto_fragmenter_out_a_bits_mask, %coupler_to_clint.auto_fragmenter_out_a_bits_data, %coupler_to_clint.auto_fragmenter_out_a_bits_corrupt, %coupler_to_clint.auto_fragmenter_out_d_ready, %coupler_to_clint.auto_tl_in_a_ready, %coupler_to_clint.auto_tl_in_d_valid, %coupler_to_clint.auto_tl_in_d_bits_opcode, %coupler_to_clint.auto_tl_in_d_bits_size, %coupler_to_clint.auto_tl_in_d_bits_source, %coupler_to_clint.auto_tl_in_d_bits_data = hw.instance "coupler_to_clint" @TLInterconnectCoupler_7(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_clint_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_clint_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_clint_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_clint_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_clint_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_clint_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_2_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_2_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_2_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_2_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_2_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_2_a_bits_address: i26, auto_tl_in_a_bits_mask: %out_xbar.auto_out_2_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_2_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_2_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_2_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i26, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_clint.auto_tl_in_d_valid"}
    %coupler_to_debug.auto_fragmenter_out_a_valid, %coupler_to_debug.auto_fragmenter_out_a_bits_opcode, %coupler_to_debug.auto_fragmenter_out_a_bits_param, %coupler_to_debug.auto_fragmenter_out_a_bits_size, %coupler_to_debug.auto_fragmenter_out_a_bits_source, %coupler_to_debug.auto_fragmenter_out_a_bits_address, %coupler_to_debug.auto_fragmenter_out_a_bits_mask, %coupler_to_debug.auto_fragmenter_out_a_bits_data, %coupler_to_debug.auto_fragmenter_out_a_bits_corrupt, %coupler_to_debug.auto_fragmenter_out_d_ready, %coupler_to_debug.auto_tl_in_a_ready, %coupler_to_debug.auto_tl_in_d_valid, %coupler_to_debug.auto_tl_in_d_bits_opcode, %coupler_to_debug.auto_tl_in_d_bits_size, %coupler_to_debug.auto_tl_in_d_bits_source, %coupler_to_debug.auto_tl_in_d_bits_data = hw.instance "coupler_to_debug" @TLInterconnectCoupler_9(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_debug_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_debug_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_debug_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_debug_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_debug_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_debug_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_3_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_3_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_3_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_3_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_3_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_3_a_bits_address: i12, auto_tl_in_a_bits_mask: %out_xbar.auto_out_3_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_3_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_3_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_3_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i12, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_debug.auto_tl_in_d_valid"}
    %coupler_to_bootrom.auto_fragmenter_out_a_valid, %coupler_to_bootrom.auto_fragmenter_out_a_bits_opcode, %coupler_to_bootrom.auto_fragmenter_out_a_bits_param, %coupler_to_bootrom.auto_fragmenter_out_a_bits_size, %coupler_to_bootrom.auto_fragmenter_out_a_bits_source, %coupler_to_bootrom.auto_fragmenter_out_a_bits_address, %coupler_to_bootrom.auto_fragmenter_out_a_bits_mask, %coupler_to_bootrom.auto_fragmenter_out_a_bits_corrupt, %coupler_to_bootrom.auto_fragmenter_out_d_ready, %coupler_to_bootrom.auto_tl_in_a_ready, %coupler_to_bootrom.auto_tl_in_d_valid, %coupler_to_bootrom.auto_tl_in_d_bits_size, %coupler_to_bootrom.auto_tl_in_d_bits_source, %coupler_to_bootrom.auto_tl_in_d_bits_data = hw.instance "coupler_to_bootrom" @TLInterconnectCoupler_10(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_bootrom_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_bootrom_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_size: %auto_coupler_to_bootrom_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_bootrom_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_bootrom_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_4_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_4_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_4_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_4_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_4_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_4_a_bits_address: i17, auto_tl_in_a_bits_mask: %out_xbar.auto_out_4_a_bits_mask: i8, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_4_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_4_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i17, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_bootrom.auto_tl_in_d_valid"}
    hw.output %coupler_to_bootrom.auto_fragmenter_out_a_valid, %coupler_to_bootrom.auto_fragmenter_out_a_bits_opcode, %coupler_to_bootrom.auto_fragmenter_out_a_bits_param, %coupler_to_bootrom.auto_fragmenter_out_a_bits_size, %coupler_to_bootrom.auto_fragmenter_out_a_bits_source, %coupler_to_bootrom.auto_fragmenter_out_a_bits_address, %coupler_to_bootrom.auto_fragmenter_out_a_bits_mask, %coupler_to_bootrom.auto_fragmenter_out_a_bits_corrupt, %coupler_to_bootrom.auto_fragmenter_out_d_ready, %coupler_to_debug.auto_fragmenter_out_a_valid, %coupler_to_debug.auto_fragmenter_out_a_bits_opcode, %coupler_to_debug.auto_fragmenter_out_a_bits_param, %coupler_to_debug.auto_fragmenter_out_a_bits_size, %coupler_to_debug.auto_fragmenter_out_a_bits_source, %coupler_to_debug.auto_fragmenter_out_a_bits_address, %coupler_to_debug.auto_fragmenter_out_a_bits_mask, %coupler_to_debug.auto_fragmenter_out_a_bits_data, %coupler_to_debug.auto_fragmenter_out_a_bits_corrupt, %coupler_to_debug.auto_fragmenter_out_d_ready, %coupler_to_clint.auto_fragmenter_out_a_valid, %coupler_to_clint.auto_fragmenter_out_a_bits_opcode, %coupler_to_clint.auto_fragmenter_out_a_bits_param, %coupler_to_clint.auto_fragmenter_out_a_bits_size, %coupler_to_clint.auto_fragmenter_out_a_bits_source, %coupler_to_clint.auto_fragmenter_out_a_bits_address, %coupler_to_clint.auto_fragmenter_out_a_bits_mask, %coupler_to_clint.auto_fragmenter_out_a_bits_data, %coupler_to_clint.auto_fragmenter_out_a_bits_corrupt, %coupler_to_clint.auto_fragmenter_out_d_ready, %coupler_to_plic.auto_fragmenter_out_a_valid, %coupler_to_plic.auto_fragmenter_out_a_bits_opcode, %coupler_to_plic.auto_fragmenter_out_a_bits_param, %coupler_to_plic.auto_fragmenter_out_a_bits_size, %coupler_to_plic.auto_fragmenter_out_a_bits_source, %coupler_to_plic.auto_fragmenter_out_a_bits_address, %coupler_to_plic.auto_fragmenter_out_a_bits_mask, %coupler_to_plic.auto_fragmenter_out_a_bits_data, %coupler_to_plic.auto_fragmenter_out_a_bits_corrupt, %coupler_to_plic.auto_fragmenter_out_d_ready, %fixedClockNode.auto_out_3_clock, %fixedClockNode.auto_out_3_reset, %fixedClockNode.auto_out_1_clock, %fixedClockNode.auto_out_1_reset, %buffer_1.auto_in_a_ready, %buffer_1.auto_in_d_valid, %buffer_1.auto_in_d_bits_opcode, %buffer_1.auto_in_d_bits_param, %buffer_1.auto_in_d_bits_size, %buffer_1.auto_in_d_bits_source, %buffer_1.auto_in_d_bits_sink, %buffer_1.auto_in_d_bits_denied, %buffer_1.auto_in_d_bits_data, %buffer_1.auto_in_d_bits_corrupt, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset : i1, i3, i3, i2, i6, i17, i8, i1, i1, i1, i3, i3, i2, i6, i12, i8, i64, i1, i1, i1, i3, i3, i2, i6, i26, i8, i64, i1, i1, i1, i3, i3, i2, i6, i28, i8, i64, i1, i1, !seq.clock, i1, !seq.clock, i1, i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, !seq.clock, i1
  }
  hw.module private @TLXbar_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i8, i64, i1
  }
  hw.module private @TLMonitor_13(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i4, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i4, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i137 = hw.constant 0 : i137
    %c0_i125 = hw.constant 0 : i125
    %c0_i58 = hw.constant 0 : i58
    %c-8_i4 = hw.constant -8 : i4
    %c15_i143 = hw.constant 15 : i143
    %c1_i16 = hw.constant 1 : i16
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i32 = hw.constant 0 : i32
    %c0_i64 = hw.constant 0 : i64
    %c0_i16 = hw.constant 0 : i16
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c0_i2 = hw.constant 0 : i2
    %c-1_i64 = hw.constant -1 : i64
    %c-1_i16 = hw.constant -1 : i16
    %c0_i127 = hw.constant 0 : i127
    %c0_i12 = hw.constant 0 : i12
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %4 = comb.shl bin %c63_i13, %3 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %5 = comb.extract %4 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %6 = comb.xor bin %5, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %7 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %8 = comb.and bin %7, %6 : i6
    %9 = comb.icmp bin eq %8, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %10 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %11 = comb.concat %c0_i2, %10 : i2, i2
    %12 = comb.shl bin %c1_i4, %11 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %13 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %14 = comb.extract %12 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %15 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %16 = comb.xor bin %15, %true {sv.namehint = "mask_eq"} : i1
    %17 = comb.and bin %14, %16 {sv.namehint = "_mask_acc_T"} : i1
    %18 = comb.or bin %13, %17 {sv.namehint = "mask_acc"} : i1
    %19 = comb.and bin %14, %15 {sv.namehint = "_mask_acc_T_1"} : i1
    %20 = comb.or bin %13, %19 {sv.namehint = "mask_acc_1"} : i1
    %21 = comb.extract %12 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %22 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %23 = comb.xor bin %22, %true {sv.namehint = "mask_nbit_1"} : i1
    %24 = comb.and bin %16, %23 {sv.namehint = "mask_eq_2"} : i1
    %25 = comb.and bin %21, %24 {sv.namehint = "_mask_acc_T_2"} : i1
    %26 = comb.or bin %18, %25 {sv.namehint = "mask_acc_2"} : i1
    %27 = comb.and bin %16, %22 {sv.namehint = "mask_eq_3"} : i1
    %28 = comb.and bin %21, %27 {sv.namehint = "_mask_acc_T_3"} : i1
    %29 = comb.or bin %18, %28 {sv.namehint = "mask_acc_3"} : i1
    %30 = comb.and bin %15, %23 {sv.namehint = "mask_eq_4"} : i1
    %31 = comb.and bin %21, %30 {sv.namehint = "_mask_acc_T_4"} : i1
    %32 = comb.or bin %20, %31 {sv.namehint = "mask_acc_4"} : i1
    %33 = comb.and bin %15, %22 {sv.namehint = "mask_eq_5"} : i1
    %34 = comb.and bin %21, %33 {sv.namehint = "_mask_acc_T_5"} : i1
    %35 = comb.or bin %20, %34 {sv.namehint = "mask_acc_5"} : i1
    %36 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %37 = comb.xor bin %36, %true {sv.namehint = "mask_nbit_2"} : i1
    %38 = comb.and bin %24, %37 {sv.namehint = "mask_eq_6"} : i1
    %39 = comb.or bin %26, %38 {sv.namehint = "mask_acc_6"} : i1
    %40 = comb.and bin %24, %36 {sv.namehint = "mask_eq_7"} : i1
    %41 = comb.or bin %26, %40 {sv.namehint = "mask_acc_7"} : i1
    %42 = comb.and bin %27, %37 {sv.namehint = "mask_eq_8"} : i1
    %43 = comb.or bin %29, %42 {sv.namehint = "mask_acc_8"} : i1
    %44 = comb.and bin %27, %36 {sv.namehint = "mask_eq_9"} : i1
    %45 = comb.or bin %29, %44 {sv.namehint = "mask_acc_9"} : i1
    %46 = comb.and bin %30, %37 {sv.namehint = "mask_eq_10"} : i1
    %47 = comb.or bin %32, %46 {sv.namehint = "mask_acc_10"} : i1
    %48 = comb.and bin %30, %36 {sv.namehint = "mask_eq_11"} : i1
    %49 = comb.or bin %32, %48 {sv.namehint = "mask_acc_11"} : i1
    %50 = comb.and bin %33, %37 {sv.namehint = "mask_eq_12"} : i1
    %51 = comb.or bin %35, %50 {sv.namehint = "mask_acc_12"} : i1
    %52 = comb.and bin %33, %36 {sv.namehint = "mask_eq_13"} : i1
    %53 = comb.or bin %35, %52 {sv.namehint = "mask_acc_13"} : i1
    %54 = comb.concat %53, %51, %49, %47, %45, %43, %41, %39 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %55 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %56 = comb.xor bin %reset, %true : i1
    %57 = comb.and bin %io_in_a_valid, %55, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %59 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %60 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %61 = comb.and bin %io_in_a_valid, %60, %56 : i1
    %62 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %63 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %64 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %65 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %66 = comb.icmp eq %65, %c-8_i4 : i4
    %67 = comb.and bin %64, %66 : i1
    %68 = comb.and bin %io_in_a_valid, %63, %56 : i1
    %69 = comb.xor bin %62, %true : i1
    %70 = comb.icmp bin eq %io_in_a_bits_mask, %54 : i8
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %72 = comb.and bin %io_in_a_valid, %71, %56 : i1
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %74 = comb.and bin %io_in_a_valid, %73, %56 : i1
    %75 = comb.xor bin %54, %c-1_i8 : i8
    %76 = comb.and bin %io_in_a_bits_mask, %75 : i8
    %77 = comb.icmp bin eq %76, %c0_i8 : i8
    %78 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %79 = comb.and bin %io_in_a_valid, %78, %56 : i1
    %80 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %56 : i1
    %83 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %86 = comb.and bin %io_in_a_valid, %85, %56 : i1
    %87 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %88 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %89 = comb.and bin %io_in_d_valid, %56 : i1
    %90 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %91 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %92 = comb.and bin %io_in_d_valid, %90, %56 : i1
    %93 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %94 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %95, %56 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %98 = comb.and bin %io_in_d_valid, %97, %56 : i1
    %99 = comb.or bin %94, %io_in_d_bits_corrupt : i1
    %100 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %101 = comb.and bin %io_in_d_valid, %100, %56 : i1
    %102 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %103 = comb.and bin %io_in_d_valid, %102, %56 : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %56 : i1
    %106 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %107 = comb.shl bin %c63_i13, %3 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %108 = comb.extract %107 from 3 : (i13) -> i3
    %109 = comb.xor bin %108, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %110 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %111 = comb.mux bin %110, %c0_i3, %109 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %116 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %112 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %113 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %114 = comb.xor bin %113, %true {sv.namehint = "a_first"} : i1
    %115 = comb.mux bin %113, %112, %111 {sv.namehint = "_a_first_counter_T"} : i3
    %116 = comb.mux bin %106, %115, %a_first_counter : i3
    %opcode = seq.firreg %124 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %125 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %126 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %127 clock %clock {firrtl.random_init_start = 12 : ui64} : i4
    %address = seq.firreg %128 clock %clock {firrtl.random_init_start = 16 : ui64} : i32
    %117 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %118 = comb.and bin %io_in_a_valid, %113, %56 : i1
    %119 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %120 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %121 = comb.icmp bin eq %io_in_a_bits_source, %source : i4
    %122 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %123 = comb.and bin %106, %114 : i1
    %124 = comb.mux bin %123, %io_in_a_bits_opcode, %opcode : i3
    %125 = comb.mux bin %123, %io_in_a_bits_param, %param : i3
    %126 = comb.mux bin %123, %io_in_a_bits_size, %size : i3
    %127 = comb.mux bin %123, %io_in_a_bits_source, %source : i4
    %128 = comb.mux bin %123, %io_in_a_bits_address, %address : i32
    %129 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %130 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %131 = comb.shl bin %c63_i13, %130 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %132 = comb.extract %131 from 3 : (i13) -> i3
    %133 = comb.xor bin %132, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %134 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %135 = comb.mux bin %134, %133, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %140 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 48 : ui64} : i3
    %136 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %137 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %138 = comb.xor bin %137, %true {sv.namehint = "d_first"} : i1
    %139 = comb.mux bin %137, %136, %135 {sv.namehint = "_d_first_counter_T"} : i3
    %140 = comb.mux bin %129, %139, %d_first_counter : i3
    %opcode_1 = seq.firreg %147 clock %clock {firrtl.random_init_start = 51 : ui64} : i3
    %size_1 = seq.firreg %148 clock %clock {firrtl.random_init_start = 56 : ui64} : i3
    %source_1 = seq.firreg %149 clock %clock {firrtl.random_init_start = 59 : ui64} : i4
    %denied = seq.firreg %150 clock %clock {firrtl.random_init_start = 64 : ui64} : i1
    %141 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %142 = comb.and bin %io_in_d_valid, %137, %56 : i1
    %143 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %144 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i4
    %145 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %146 = comb.and bin %129, %138 : i1
    %147 = comb.mux bin %146, %io_in_d_bits_opcode, %opcode_1 : i3
    %148 = comb.mux bin %146, %io_in_d_bits_size, %size_1 : i3
    %149 = comb.mux bin %146, %io_in_d_bits_source, %source_1 : i4
    %150 = comb.mux bin %146, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %243 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 65 : ui64} : i16
    %inflight_opcodes = seq.firreg %246 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 81 : ui64} : i64
    %inflight_sizes = seq.firreg %249 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 145 : ui64} : i64
    %151 = comb.shl bin %c63_i13, %3 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %152 = comb.extract %151 from 3 : (i13) -> i3
    %153 = comb.xor bin %152, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %154 = comb.mux bin %110, %c0_i3, %153 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %158 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 209 : ui64} : i3
    %155 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %156 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %157 = comb.mux bin %156, %154, %155 {sv.namehint = "_a_first_counter_T_1"} : i3
    %158 = comb.mux bin %106, %157, %a_first_counter_1 : i3
    %159 = comb.shl bin %c63_i13, %130 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %160 = comb.extract %159 from 3 : (i13) -> i3
    %161 = comb.xor bin %160, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %162 = comb.mux bin %134, %161, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %166 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 212 : ui64} : i3
    %163 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %164 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %165 = comb.mux bin %164, %162, %163 {sv.namehint = "_d_first_counter_T_1"} : i3
    %166 = comb.mux bin %129, %165, %d_first_counter_1 : i3
    %167 = comb.concat %c0_i58, %io_in_d_bits_source, %c0_i2 : i58, i4, i2
    %168 = comb.shru bin %inflight_opcodes, %167 {sv.namehint = "_a_opcode_lookup_T_1"} : i64
    %169 = comb.extract %168 from 1 : (i64) -> i3
    %170 = comb.shru bin %inflight_sizes, %167 {sv.namehint = "_a_size_lookup_T_1"} : i64
    %171 = comb.extract %170 from 1 : (i64) -> i3
    %172 = comb.and bin %io_in_a_valid, %156 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %173 = comb.concat %c0_i12, %io_in_a_bits_source : i12, i4
    %174 = comb.shl bin %c1_i16, %173 {sv.namehint = "_a_set_wo_ready_T"} : i16
    %175 = comb.mux bin %172, %174, %c0_i16 {sv.namehint = "a_set_wo_ready"} : i16
    %176 = comb.and bin %106, %156 : i1
    %177 = comb.shl bin %c1_i16, %173 {sv.namehint = "_a_set_T"} : i16
    %178 = comb.mux bin %176, %177, %c0_i16 {sv.namehint = "a_set"} : i16
    %179 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %180 = comb.mux bin %176, %179, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %181 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %182 = comb.mux bin %176, %181, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %183 = comb.concat %c0_i127, %180 : i127, i4
    %184 = comb.concat %c0_i125, %io_in_a_bits_source, %c0_i2 : i125, i4, i2
    %185 = comb.shl bin %183, %184 {sv.namehint = "_a_opcodes_set_T_1"} : i131
    %186 = comb.extract %185 from 0 : (i131) -> i64
    %187 = comb.mux bin %176, %186, %c0_i64 {sv.namehint = "a_opcodes_set"} : i64
    %188 = comb.concat %c0_i127, %182 : i127, i4
    %189 = comb.shl bin %188, %184 {sv.namehint = "_a_sizes_set_T_1"} : i131
    %190 = comb.extract %189 from 0 : (i131) -> i64
    %191 = comb.mux bin %176, %190, %c0_i64 {sv.namehint = "a_sizes_set"} : i64
    %192 = comb.shru bin %inflight, %173 : i16
    %193 = comb.extract %192 from 0 : (i16) -> i1
    %194 = comb.xor bin %193, %true : i1
    %195 = comb.and bin %176, %56 : i1
    %196 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %197 = comb.and bin %io_in_d_valid, %164 : i1
    %198 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %199 = comb.and bin %197, %198 : i1
    %200 = comb.concat %c0_i12, %io_in_d_bits_source : i12, i4
    %201 = comb.shl bin %c1_i16, %200 {sv.namehint = "_d_clr_wo_ready_T"} : i16
    %202 = comb.mux bin %199, %201, %c0_i16 {sv.namehint = "d_clr_wo_ready"} : i16
    %203 = comb.and bin %129, %164, %198 : i1
    %204 = comb.shl bin %c1_i16, %200 {sv.namehint = "_d_clr_T"} : i16
    %205 = comb.mux bin %203, %204, %c0_i16 {sv.namehint = "d_clr"} : i16
    %206 = comb.concat %c0_i137, %io_in_d_bits_source, %c0_i2 : i137, i4, i2
    %207 = comb.shl bin %c15_i143, %206 {sv.namehint = "_d_opcodes_clr_T_5"} : i143
    %208 = comb.extract %207 from 0 : (i143) -> i64
    %209 = comb.mux bin %203, %208, %c0_i64 {sv.namehint = "d_opcodes_clr"} : i64
    %210 = comb.shl bin %c15_i143, %206 {sv.namehint = "_d_sizes_clr_T_5"} : i143
    %211 = comb.extract %210 from 0 : (i143) -> i64
    %212 = comb.mux bin %203, %211, %c0_i64 {sv.namehint = "d_sizes_clr"} : i64
    %213 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i4
    %214 = comb.and bin %172, %213 {sv.namehint = "same_cycle_resp"} : i1
    %215 = comb.shru bin %inflight, %200 : i16
    %216 = comb.extract %215 from 0 : (i16) -> i1
    %217 = comb.or bin %216, %214 : i1
    %218 = comb.and bin %199, %56 : i1
    %219 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %220 = comb.icmp bin eq %io_in_d_bits_opcode, %219 : i3
    %221 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %222 = comb.icmp bin eq %io_in_d_bits_opcode, %221 : i3
    %223 = comb.or bin %220, %222 : i1
    %224 = comb.and bin %199, %214, %56 : i1
    %225 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %226 = comb.xor bin %214, %true : i1
    %227 = hw.array_get %1[%169] : !hw.array<8xi3>, i3
    %228 = comb.icmp bin eq %io_in_d_bits_opcode, %227 : i3
    %229 = hw.array_get %0[%169] : !hw.array<8xi3>, i3
    %230 = comb.icmp bin eq %io_in_d_bits_opcode, %229 : i3
    %231 = comb.or bin %228, %230 : i1
    %232 = comb.and bin %199, %226, %56 : i1
    %233 = comb.icmp bin eq %io_in_d_bits_size, %171 : i3
    %234 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i4
    %235 = comb.xor bin %io_in_d_ready, %true : i1
    %236 = comb.or bin %235, %io_in_a_ready : i1
    %237 = comb.and bin %197, %156, %io_in_a_valid, %234, %198, %56 : i1
    %238 = comb.icmp bin ne %175, %202 : i16
    %239 = comb.icmp bin eq %175, %c0_i16 : i16
    %240 = comb.or bin %238, %239 : i1
    %241 = comb.or bin %inflight, %178 {sv.namehint = "_inflight_T"} : i16
    %242 = comb.xor bin %205, %c-1_i16 {sv.namehint = "_inflight_T_1"} : i16
    %243 = comb.and bin %241, %242 {sv.namehint = "_inflight_T_2"} : i16
    %244 = comb.or bin %inflight_opcodes, %187 {sv.namehint = "_inflight_opcodes_T"} : i64
    %245 = comb.xor bin %209, %c-1_i64 {sv.namehint = "_inflight_opcodes_T_1"} : i64
    %246 = comb.and bin %244, %245 {sv.namehint = "_inflight_opcodes_T_2"} : i64
    %247 = comb.or bin %inflight_sizes, %191 {sv.namehint = "_inflight_sizes_T"} : i64
    %248 = comb.xor bin %212, %c-1_i64 {sv.namehint = "_inflight_sizes_T_1"} : i64
    %249 = comb.and bin %247, %248 {sv.namehint = "_inflight_sizes_T_2"} : i64
    %watchdog = seq.firreg %256 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 215 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %250 = comb.icmp bin eq %inflight, %c0_i16 : i16
    %251 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %252 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %253 = comb.or bin %250, %251, %252 : i1
    %254 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %255 = comb.or bin %106, %129 : i1
    %256 = comb.mux bin %255, %c0_i32, %254 : i32
    %inflight_1 = seq.firreg %278 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 247 : ui64} : i16
    %inflight_sizes_1 = seq.firreg %280 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 327 : ui64} : i64
    %257 = comb.shl bin %c63_i13, %130 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %258 = comb.extract %257 from 3 : (i13) -> i3
    %259 = comb.xor bin %258, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %260 = comb.mux bin %134, %259, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %264 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 394 : ui64} : i3
    %261 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %262 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %263 = comb.mux bin %262, %260, %261 {sv.namehint = "_d_first_counter_T_2"} : i3
    %264 = comb.mux bin %129, %263, %d_first_counter_2 : i3
    %265 = comb.shru bin %inflight_sizes_1, %167 {sv.namehint = "_c_size_lookup_T_1"} : i64
    %266 = comb.extract %265 from 1 : (i64) -> i3
    %267 = comb.and bin %129, %262, %196 : i1
    %268 = comb.shl bin %c1_i16, %200 {sv.namehint = "_d_clr_T_1"} : i16
    %269 = comb.mux bin %267, %268, %c0_i16 {sv.namehint = "d_clr_1"} : i16
    %270 = comb.shl bin %c15_i143, %206 {sv.namehint = "_d_sizes_clr_T_11"} : i143
    %271 = comb.extract %270 from 0 : (i143) -> i64
    %272 = comb.mux bin %267, %271, %c0_i64 {sv.namehint = "d_sizes_clr_1"} : i64
    %273 = comb.shru bin %inflight_1, %200 : i16
    %274 = comb.extract %273 from 0 : (i16) -> i1
    %275 = comb.and bin %io_in_d_valid, %262, %196, %56 : i1
    %276 = comb.icmp bin eq %io_in_d_bits_size, %266 : i3
    %277 = comb.xor bin %269, %c-1_i16 {sv.namehint = "_inflight_T_4"} : i16
    %278 = comb.and bin %inflight_1, %277 {sv.namehint = "_inflight_T_5"} : i16
    %279 = comb.xor bin %272, %c-1_i64 {sv.namehint = "_inflight_sizes_T_4"} : i64
    %280 = comb.and bin %inflight_sizes_1, %279 {sv.namehint = "_inflight_sizes_T_5"} : i64
    %watchdog_1 = seq.firreg %286 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 397 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %281 = comb.icmp bin eq %inflight_1, %c0_i16 : i16
    %282 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %283 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %284 = comb.or bin %281, %282, %283 : i1
    sv.always posedge %2 {
      sv.if %57 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %57 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %57 {
        sv.assert %13, immediate label "assert__assert_5"
      }
      sv.if %57 {
        sv.assert %9, immediate label "assert__assert_6"
      }
      sv.if %57 {
        sv.assert %58, immediate label "assert__assert_7"
      }
      sv.if %57 {
        sv.assert %59, immediate label "assert__assert_8"
      }
      sv.if %61 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %61 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %61 {
        sv.assert %13, immediate label "assert__assert_13"
      }
      sv.if %61 {
        sv.assert %9, immediate label "assert__assert_14"
      }
      sv.if %61 {
        sv.assert %58, immediate label "assert__assert_15"
      }
      sv.if %61 {
        sv.assert %62, immediate label "assert__assert_16"
      }
      sv.if %61 {
        sv.assert %59, immediate label "assert__assert_17"
      }
      sv.if %68 {
        sv.assert %67, immediate label "assert__assert_20"
      }
      sv.if %68 {
        sv.assert %9, immediate label "assert__assert_22"
      }
      sv.if %68 {
        sv.assert %69, immediate label "assert__assert_23"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_24"
      }
      sv.if %72 {
        sv.assert %67, immediate label "assert__assert_26"
      }
      sv.if %72 {
        sv.assert %9, immediate label "assert__assert_28"
      }
      sv.if %72 {
        sv.assert %69, immediate label "assert__assert_29"
      }
      sv.if %72 {
        sv.assert %70, immediate label "assert__assert_30"
      }
      sv.if %74 {
        sv.assert %67, immediate label "assert__assert_31"
      }
      sv.if %74 {
        sv.assert %9, immediate label "assert__assert_33"
      }
      sv.if %74 {
        sv.assert %69, immediate label "assert__assert_34"
      }
      sv.if %74 {
        sv.assert %77, immediate label "assert__assert_35"
      }
      sv.if %79 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %79 {
        sv.assert %9, immediate label "assert__assert_38"
      }
      sv.if %79 {
        sv.assert %80, immediate label "assert__assert_39"
      }
      sv.if %79 {
        sv.assert %70, immediate label "assert__assert_40"
      }
      sv.if %82 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %82 {
        sv.assert %9, immediate label "assert__assert_43"
      }
      sv.if %82 {
        sv.assert %84, immediate label "assert__assert_44"
      }
      sv.if %82 {
        sv.assert %70, immediate label "assert__assert_45"
      }
      sv.if %86 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %86 {
        sv.assert %9, immediate label "assert__assert_48"
      }
      sv.if %86 {
        sv.assert %87, immediate label "assert__assert_49"
      }
      sv.if %86 {
        sv.assert %70, immediate label "assert__assert_50"
      }
      sv.if %89 {
        sv.assert %88, immediate label "assert__assert_52"
      }
      sv.if %92 {
        sv.assert %91, immediate label "assert__assert_54"
      }
      sv.if %92 {
        sv.assert %93, immediate label "assert__assert_56"
      }
      sv.if %92 {
        sv.assert %94, immediate label "assert__assert_57"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %96 {
        sv.assert %91, immediate label "assert__assert_60"
      }
      sv.if %96 {
        sv.assert %93, immediate label "assert__assert_63"
      }
      sv.if %98 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %98 {
        sv.assert %91, immediate label "assert__assert_67"
      }
      sv.if %98 {
        sv.assert %99, immediate label "assert__assert_70"
      }
      sv.if %101 {
        sv.assert %93, immediate label "assert__assert_74"
      }
      sv.if %103 {
        sv.assert %99, immediate label "assert__assert_78"
      }
      sv.if %105 {
        sv.assert %93, immediate label "assert__assert_82"
      }
      sv.if %118 {
        sv.assert %117, immediate label "assert__assert_87"
      }
      sv.if %118 {
        sv.assert %119, immediate label "assert__assert_88"
      }
      sv.if %118 {
        sv.assert %120, immediate label "assert__assert_89"
      }
      sv.if %118 {
        sv.assert %121, immediate label "assert__assert_90"
      }
      sv.if %118 {
        sv.assert %122, immediate label "assert__assert_91"
      }
      sv.if %142 {
        sv.assert %141, immediate label "assert__assert_92"
      }
      sv.if %142 {
        sv.assert %143, immediate label "assert__assert_94"
      }
      sv.if %142 {
        sv.assert %144, immediate label "assert__assert_95"
      }
      sv.if %142 {
        sv.assert %145, immediate label "assert__assert_97"
      }
      sv.if %195 {
        sv.assert %194, immediate label "assert__assert_98"
      }
      sv.if %218 {
        sv.assert %217, immediate label "assert__assert_99"
      }
      sv.if %224 {
        sv.assert %223, immediate label "assert__assert_100"
      }
      sv.if %224 {
        sv.assert %225, immediate label "assert__assert_101"
      }
      sv.if %232 {
        sv.assert %231, immediate label "assert__assert_102"
      }
      sv.if %232 {
        sv.assert %233, immediate label "assert__assert_103"
      }
      sv.if %237 {
        sv.assert %236, immediate label "assert__assert_104"
      }
      sv.if %56 {
        sv.assert %240, immediate label "assert__assert_105"
      }
      sv.if %56 {
        sv.assert %253, immediate label "assert__assert_106"
      }
      sv.if %275 {
        sv.assert %274, immediate label "assert__assert_108"
      }
      sv.if %275 {
        sv.assert %276, immediate label "assert__assert_110"
      }
      sv.if %56 {
        sv.assert %284, immediate label "assert__assert_113"
      }
    }
    %285 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %286 = comb.mux bin %129, %c0_i32, %285 : i32
    hw.output
  }
  hw.module private @TLFIFOFixer_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %auto_out_d_bits_size: i3, io_in_d_bits_source: %auto_out_d_bits_source: i4, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i8, i64, i1
  }
  hw.module private @ProbePicker(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %auto_out_d_bits_size: i3, io_in_d_bits_source: %auto_out_d_bits_source: i4, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLBuffer_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i8, i64, i1
  }
  hw.module private @Queue1_BundleMap_6(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_tl_state_size : i4, in %io_enq_bits_tl_state_source : i4, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_tl_state_size : i4, out io_deq_bits_tl_state_source : i4) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.concat %io_enq_bits_tl_state_size, %io_enq_bits_tl_state_source : i4, i4
    %1 = comb.extract %ram from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_size"} : (i8) -> i4
    %2 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_source"} : (i8) -> i4
    %full = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %3 = comb.and bin %7, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %4 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %5 = comb.icmp bin eq %3, %4 : i1
    %6 = comb.mux bin %5, %full, %3 : i1
    %7 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %8 clock %clock {sv.namehint = "ram"} : i8
    %8 = comb.mux bin %3, %0, %ram : i8
    hw.output %7, %full, %1, %2 : i1, i1, i4, i4
  }
  hw.module private @AXI4UserYanker_1(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i32, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i4, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i32, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i4, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %c1_i16 = hw.constant 1 : i16
    %true = hw.constant true
    %c0_i12 = hw.constant 0 : i12
    %0 = seq.from_clock %clock
    %Queue1_BundleMap.io_enq_ready, %Queue1_BundleMap.io_deq_valid, %Queue1_BundleMap.io_deq_bits_tl_state_size, %Queue1_BundleMap.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %53: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %51: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap.io_deq_valid"}
    %Queue1_BundleMap_1.io_enq_ready, %Queue1_BundleMap_1.io_deq_valid, %Queue1_BundleMap_1.io_deq_bits_tl_state_size, %Queue1_BundleMap_1.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_1" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %55: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %54: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_1.io_deq_valid"}
    %Queue1_BundleMap_2.io_enq_ready, %Queue1_BundleMap_2.io_deq_valid, %Queue1_BundleMap_2.io_deq_bits_tl_state_size, %Queue1_BundleMap_2.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_2" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %57: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %56: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_2.io_deq_valid"}
    %Queue1_BundleMap_3.io_enq_ready, %Queue1_BundleMap_3.io_deq_valid, %Queue1_BundleMap_3.io_deq_bits_tl_state_size, %Queue1_BundleMap_3.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_3" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %59: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %58: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_3.io_deq_valid"}
    %Queue1_BundleMap_4.io_enq_ready, %Queue1_BundleMap_4.io_deq_valid, %Queue1_BundleMap_4.io_deq_bits_tl_state_size, %Queue1_BundleMap_4.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_4" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %61: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %60: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_4.io_deq_valid"}
    %Queue1_BundleMap_5.io_enq_ready, %Queue1_BundleMap_5.io_deq_valid, %Queue1_BundleMap_5.io_deq_bits_tl_state_size, %Queue1_BundleMap_5.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_5" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %63: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %62: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_5.io_deq_valid"}
    %Queue1_BundleMap_6.io_enq_ready, %Queue1_BundleMap_6.io_deq_valid, %Queue1_BundleMap_6.io_deq_bits_tl_state_size, %Queue1_BundleMap_6.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_6" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %65: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %64: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_6.io_deq_valid"}
    %Queue1_BundleMap_7.io_enq_ready, %Queue1_BundleMap_7.io_deq_valid, %Queue1_BundleMap_7.io_deq_bits_tl_state_size, %Queue1_BundleMap_7.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_7" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %67: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %66: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_7.io_deq_valid"}
    %Queue1_BundleMap_8.io_enq_ready, %Queue1_BundleMap_8.io_deq_valid, %Queue1_BundleMap_8.io_deq_bits_tl_state_size, %Queue1_BundleMap_8.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_8" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %69: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %68: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_8.io_deq_valid"}
    %Queue1_BundleMap_9.io_enq_ready, %Queue1_BundleMap_9.io_deq_valid, %Queue1_BundleMap_9.io_deq_bits_tl_state_size, %Queue1_BundleMap_9.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_9" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %71: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %70: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_9.io_deq_valid"}
    %Queue1_BundleMap_10.io_enq_ready, %Queue1_BundleMap_10.io_deq_valid, %Queue1_BundleMap_10.io_deq_bits_tl_state_size, %Queue1_BundleMap_10.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_10" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %73: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %72: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_10.io_deq_valid"}
    %Queue1_BundleMap_11.io_enq_ready, %Queue1_BundleMap_11.io_deq_valid, %Queue1_BundleMap_11.io_deq_bits_tl_state_size, %Queue1_BundleMap_11.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_11" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %75: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %74: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_11.io_deq_valid"}
    %Queue1_BundleMap_12.io_enq_ready, %Queue1_BundleMap_12.io_deq_valid, %Queue1_BundleMap_12.io_deq_bits_tl_state_size, %Queue1_BundleMap_12.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_12" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %77: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %76: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_12.io_deq_valid"}
    %Queue1_BundleMap_13.io_enq_ready, %Queue1_BundleMap_13.io_deq_valid, %Queue1_BundleMap_13.io_deq_bits_tl_state_size, %Queue1_BundleMap_13.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_13" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %79: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %78: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_13.io_deq_valid"}
    %Queue1_BundleMap_14.io_enq_ready, %Queue1_BundleMap_14.io_deq_valid, %Queue1_BundleMap_14.io_deq_bits_tl_state_size, %Queue1_BundleMap_14.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_14" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %81: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %80: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_14.io_deq_valid"}
    %Queue1_BundleMap_15.io_enq_ready, %Queue1_BundleMap_15.io_deq_valid, %Queue1_BundleMap_15.io_deq_bits_tl_state_size, %Queue1_BundleMap_15.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_15" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %83: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %82: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_15.io_deq_valid"}
    %Queue1_BundleMap_16.io_enq_ready, %Queue1_BundleMap_16.io_deq_valid, %Queue1_BundleMap_16.io_deq_bits_tl_state_size, %Queue1_BundleMap_16.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_16" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %135: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %133: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_16.io_deq_valid"}
    %Queue1_BundleMap_17.io_enq_ready, %Queue1_BundleMap_17.io_deq_valid, %Queue1_BundleMap_17.io_deq_bits_tl_state_size, %Queue1_BundleMap_17.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_17" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %137: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %136: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_17.io_deq_valid"}
    %Queue1_BundleMap_18.io_enq_ready, %Queue1_BundleMap_18.io_deq_valid, %Queue1_BundleMap_18.io_deq_bits_tl_state_size, %Queue1_BundleMap_18.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_18" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %139: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %138: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_18.io_deq_valid"}
    %Queue1_BundleMap_19.io_enq_ready, %Queue1_BundleMap_19.io_deq_valid, %Queue1_BundleMap_19.io_deq_bits_tl_state_size, %Queue1_BundleMap_19.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_19" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %141: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %140: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_19.io_deq_valid"}
    %Queue1_BundleMap_20.io_enq_ready, %Queue1_BundleMap_20.io_deq_valid, %Queue1_BundleMap_20.io_deq_bits_tl_state_size, %Queue1_BundleMap_20.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_20" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %143: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %142: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_20.io_deq_valid"}
    %Queue1_BundleMap_21.io_enq_ready, %Queue1_BundleMap_21.io_deq_valid, %Queue1_BundleMap_21.io_deq_bits_tl_state_size, %Queue1_BundleMap_21.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_21" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %145: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %144: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_21.io_deq_valid"}
    %Queue1_BundleMap_22.io_enq_ready, %Queue1_BundleMap_22.io_deq_valid, %Queue1_BundleMap_22.io_deq_bits_tl_state_size, %Queue1_BundleMap_22.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_22" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %147: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %146: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_22.io_deq_valid"}
    %Queue1_BundleMap_23.io_enq_ready, %Queue1_BundleMap_23.io_deq_valid, %Queue1_BundleMap_23.io_deq_bits_tl_state_size, %Queue1_BundleMap_23.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_23" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %149: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %148: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_23.io_deq_valid"}
    %Queue1_BundleMap_24.io_enq_ready, %Queue1_BundleMap_24.io_deq_valid, %Queue1_BundleMap_24.io_deq_bits_tl_state_size, %Queue1_BundleMap_24.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_24" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %151: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %150: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_24.io_deq_valid"}
    %Queue1_BundleMap_25.io_enq_ready, %Queue1_BundleMap_25.io_deq_valid, %Queue1_BundleMap_25.io_deq_bits_tl_state_size, %Queue1_BundleMap_25.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_25" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %153: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %152: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_25.io_deq_valid"}
    %Queue1_BundleMap_26.io_enq_ready, %Queue1_BundleMap_26.io_deq_valid, %Queue1_BundleMap_26.io_deq_bits_tl_state_size, %Queue1_BundleMap_26.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_26" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %155: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %154: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_26.io_deq_valid"}
    %Queue1_BundleMap_27.io_enq_ready, %Queue1_BundleMap_27.io_deq_valid, %Queue1_BundleMap_27.io_deq_bits_tl_state_size, %Queue1_BundleMap_27.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_27" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %157: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %156: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_27.io_deq_valid"}
    %Queue1_BundleMap_28.io_enq_ready, %Queue1_BundleMap_28.io_deq_valid, %Queue1_BundleMap_28.io_deq_bits_tl_state_size, %Queue1_BundleMap_28.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_28" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %159: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %158: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_28.io_deq_valid"}
    %Queue1_BundleMap_29.io_enq_ready, %Queue1_BundleMap_29.io_deq_valid, %Queue1_BundleMap_29.io_deq_bits_tl_state_size, %Queue1_BundleMap_29.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_29" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %161: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %160: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_29.io_deq_valid"}
    %Queue1_BundleMap_30.io_enq_ready, %Queue1_BundleMap_30.io_deq_valid, %Queue1_BundleMap_30.io_deq_bits_tl_state_size, %Queue1_BundleMap_30.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_30" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %163: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %162: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_30.io_deq_valid"}
    %Queue1_BundleMap_31.io_enq_ready, %Queue1_BundleMap_31.io_deq_valid, %Queue1_BundleMap_31.io_deq_bits_tl_state_size, %Queue1_BundleMap_31.io_deq_bits_tl_state_source = hw.instance "Queue1_BundleMap_31" @Queue1_BundleMap_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %165: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %164: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "Queue1_BundleMap_31.io_deq_valid"}
    %1 = hw.array_create %Queue1_BundleMap_15.io_enq_ready, %Queue1_BundleMap_14.io_enq_ready, %Queue1_BundleMap_13.io_enq_ready, %Queue1_BundleMap_12.io_enq_ready, %Queue1_BundleMap_11.io_enq_ready, %Queue1_BundleMap_10.io_enq_ready, %Queue1_BundleMap_9.io_enq_ready, %Queue1_BundleMap_8.io_enq_ready, %Queue1_BundleMap_7.io_enq_ready, %Queue1_BundleMap_6.io_enq_ready, %Queue1_BundleMap_5.io_enq_ready, %Queue1_BundleMap_4.io_enq_ready, %Queue1_BundleMap_3.io_enq_ready, %Queue1_BundleMap_2.io_enq_ready, %Queue1_BundleMap_1.io_enq_ready, %Queue1_BundleMap.io_enq_ready : i1
    %2 = hw.array_get %1[%auto_in_ar_bits_id] : !hw.array<16xi1>, i4
    %3 = comb.and bin %auto_out_ar_ready, %2 {sv.namehint = "nodeIn_ar_ready"} : i1
    %4 = comb.and bin %auto_in_ar_valid, %2 {sv.namehint = "nodeOut_ar_valid"} : i1
    %5 = comb.xor bin %auto_out_r_valid, %true : i1
    %6 = hw.array_create %Queue1_BundleMap_15.io_deq_valid, %Queue1_BundleMap_14.io_deq_valid, %Queue1_BundleMap_13.io_deq_valid, %Queue1_BundleMap_12.io_deq_valid, %Queue1_BundleMap_11.io_deq_valid, %Queue1_BundleMap_10.io_deq_valid, %Queue1_BundleMap_9.io_deq_valid, %Queue1_BundleMap_8.io_deq_valid, %Queue1_BundleMap_7.io_deq_valid, %Queue1_BundleMap_6.io_deq_valid, %Queue1_BundleMap_5.io_deq_valid, %Queue1_BundleMap_4.io_deq_valid, %Queue1_BundleMap_3.io_deq_valid, %Queue1_BundleMap_2.io_deq_valid, %Queue1_BundleMap_1.io_deq_valid, %Queue1_BundleMap.io_deq_valid : i1
    %7 = hw.array_get %6[%auto_out_r_bits_id] : !hw.array<16xi1>, i4
    %8 = comb.or bin %5, %7 : i1
    %9 = comb.xor bin %reset, %true : i1
    %10 = hw.array_create %Queue1_BundleMap_15.io_deq_bits_tl_state_size, %Queue1_BundleMap_14.io_deq_bits_tl_state_size, %Queue1_BundleMap_13.io_deq_bits_tl_state_size, %Queue1_BundleMap_12.io_deq_bits_tl_state_size, %Queue1_BundleMap_11.io_deq_bits_tl_state_size, %Queue1_BundleMap_10.io_deq_bits_tl_state_size, %Queue1_BundleMap_9.io_deq_bits_tl_state_size, %Queue1_BundleMap_8.io_deq_bits_tl_state_size, %Queue1_BundleMap_7.io_deq_bits_tl_state_size, %Queue1_BundleMap_6.io_deq_bits_tl_state_size, %Queue1_BundleMap_5.io_deq_bits_tl_state_size, %Queue1_BundleMap_4.io_deq_bits_tl_state_size, %Queue1_BundleMap_3.io_deq_bits_tl_state_size, %Queue1_BundleMap_2.io_deq_bits_tl_state_size, %Queue1_BundleMap_1.io_deq_bits_tl_state_size, %Queue1_BundleMap.io_deq_bits_tl_state_size : i4
    %11 = hw.array_get %10[%auto_out_r_bits_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %12 = hw.array_create %Queue1_BundleMap_15.io_deq_bits_tl_state_source, %Queue1_BundleMap_14.io_deq_bits_tl_state_source, %Queue1_BundleMap_13.io_deq_bits_tl_state_source, %Queue1_BundleMap_12.io_deq_bits_tl_state_source, %Queue1_BundleMap_11.io_deq_bits_tl_state_source, %Queue1_BundleMap_10.io_deq_bits_tl_state_source, %Queue1_BundleMap_9.io_deq_bits_tl_state_source, %Queue1_BundleMap_8.io_deq_bits_tl_state_source, %Queue1_BundleMap_7.io_deq_bits_tl_state_source, %Queue1_BundleMap_6.io_deq_bits_tl_state_source, %Queue1_BundleMap_5.io_deq_bits_tl_state_source, %Queue1_BundleMap_4.io_deq_bits_tl_state_source, %Queue1_BundleMap_3.io_deq_bits_tl_state_source, %Queue1_BundleMap_2.io_deq_bits_tl_state_source, %Queue1_BundleMap_1.io_deq_bits_tl_state_source, %Queue1_BundleMap.io_deq_bits_tl_state_source : i4
    %13 = hw.array_get %12[%auto_out_r_bits_id] {sv.namehint = "nodeIn_r_bits_echo_tl_state_source"} : !hw.array<16xi4>, i4
    %14 = comb.concat %c0_i12, %auto_in_ar_bits_id : i12, i4
    %15 = comb.shl bin %c1_i16, %14 {sv.namehint = "_arsel_T_1"} : i16
    %16 = comb.extract %15 from 0 {sv.namehint = "arsel_0"} : (i16) -> i1
    %17 = comb.extract %15 from 1 {sv.namehint = "arsel_1"} : (i16) -> i1
    %18 = comb.extract %15 from 2 {sv.namehint = "arsel_2"} : (i16) -> i1
    %19 = comb.extract %15 from 3 {sv.namehint = "arsel_3"} : (i16) -> i1
    %20 = comb.extract %15 from 4 {sv.namehint = "arsel_4"} : (i16) -> i1
    %21 = comb.extract %15 from 5 {sv.namehint = "arsel_5"} : (i16) -> i1
    %22 = comb.extract %15 from 6 {sv.namehint = "arsel_6"} : (i16) -> i1
    %23 = comb.extract %15 from 7 {sv.namehint = "arsel_7"} : (i16) -> i1
    %24 = comb.extract %15 from 8 {sv.namehint = "arsel_8"} : (i16) -> i1
    %25 = comb.extract %15 from 9 {sv.namehint = "arsel_9"} : (i16) -> i1
    %26 = comb.extract %15 from 10 {sv.namehint = "arsel_10"} : (i16) -> i1
    %27 = comb.extract %15 from 11 {sv.namehint = "arsel_11"} : (i16) -> i1
    %28 = comb.extract %15 from 12 {sv.namehint = "arsel_12"} : (i16) -> i1
    %29 = comb.extract %15 from 13 {sv.namehint = "arsel_13"} : (i16) -> i1
    %30 = comb.extract %15 from 14 {sv.namehint = "arsel_14"} : (i16) -> i1
    %31 = comb.extract %15 from 15 {sv.namehint = "arsel_15"} : (i16) -> i1
    %32 = comb.concat %c0_i12, %auto_out_r_bits_id : i12, i4
    %33 = comb.shl bin %c1_i16, %32 {sv.namehint = "_rsel_T_1"} : i16
    %34 = comb.extract %33 from 0 {sv.namehint = "rsel_0"} : (i16) -> i1
    %35 = comb.extract %33 from 1 {sv.namehint = "rsel_1"} : (i16) -> i1
    %36 = comb.extract %33 from 2 {sv.namehint = "rsel_2"} : (i16) -> i1
    %37 = comb.extract %33 from 3 {sv.namehint = "rsel_3"} : (i16) -> i1
    %38 = comb.extract %33 from 4 {sv.namehint = "rsel_4"} : (i16) -> i1
    %39 = comb.extract %33 from 5 {sv.namehint = "rsel_5"} : (i16) -> i1
    %40 = comb.extract %33 from 6 {sv.namehint = "rsel_6"} : (i16) -> i1
    %41 = comb.extract %33 from 7 {sv.namehint = "rsel_7"} : (i16) -> i1
    %42 = comb.extract %33 from 8 {sv.namehint = "rsel_8"} : (i16) -> i1
    %43 = comb.extract %33 from 9 {sv.namehint = "rsel_9"} : (i16) -> i1
    %44 = comb.extract %33 from 10 {sv.namehint = "rsel_10"} : (i16) -> i1
    %45 = comb.extract %33 from 11 {sv.namehint = "rsel_11"} : (i16) -> i1
    %46 = comb.extract %33 from 12 {sv.namehint = "rsel_12"} : (i16) -> i1
    %47 = comb.extract %33 from 13 {sv.namehint = "rsel_13"} : (i16) -> i1
    %48 = comb.extract %33 from 14 {sv.namehint = "rsel_14"} : (i16) -> i1
    %49 = comb.extract %33 from 15 {sv.namehint = "rsel_15"} : (i16) -> i1
    %50 = comb.and bin %auto_out_r_valid, %auto_in_r_ready : i1
    %51 = comb.and bin %50, %34, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap.io_deq_ready"} : i1
    %52 = comb.and bin %auto_in_ar_valid, %auto_out_ar_ready : i1
    %53 = comb.and bin %52, %16 {sv.namehint = "Queue1_BundleMap.io_enq_valid"} : i1
    %54 = comb.and bin %50, %35, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_1.io_deq_ready"} : i1
    %55 = comb.and bin %52, %17 {sv.namehint = "Queue1_BundleMap_1.io_enq_valid"} : i1
    %56 = comb.and bin %50, %36, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_2.io_deq_ready"} : i1
    %57 = comb.and bin %52, %18 {sv.namehint = "Queue1_BundleMap_2.io_enq_valid"} : i1
    %58 = comb.and bin %50, %37, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_3.io_deq_ready"} : i1
    %59 = comb.and bin %52, %19 {sv.namehint = "Queue1_BundleMap_3.io_enq_valid"} : i1
    %60 = comb.and bin %50, %38, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_4.io_deq_ready"} : i1
    %61 = comb.and bin %52, %20 {sv.namehint = "Queue1_BundleMap_4.io_enq_valid"} : i1
    %62 = comb.and bin %50, %39, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_5.io_deq_ready"} : i1
    %63 = comb.and bin %52, %21 {sv.namehint = "Queue1_BundleMap_5.io_enq_valid"} : i1
    %64 = comb.and bin %50, %40, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_6.io_deq_ready"} : i1
    %65 = comb.and bin %52, %22 {sv.namehint = "Queue1_BundleMap_6.io_enq_valid"} : i1
    %66 = comb.and bin %50, %41, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_7.io_deq_ready"} : i1
    %67 = comb.and bin %52, %23 {sv.namehint = "Queue1_BundleMap_7.io_enq_valid"} : i1
    %68 = comb.and bin %50, %42, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_8.io_deq_ready"} : i1
    %69 = comb.and bin %52, %24 {sv.namehint = "Queue1_BundleMap_8.io_enq_valid"} : i1
    %70 = comb.and bin %50, %43, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_9.io_deq_ready"} : i1
    %71 = comb.and bin %52, %25 {sv.namehint = "Queue1_BundleMap_9.io_enq_valid"} : i1
    %72 = comb.and bin %50, %44, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_10.io_deq_ready"} : i1
    %73 = comb.and bin %52, %26 {sv.namehint = "Queue1_BundleMap_10.io_enq_valid"} : i1
    %74 = comb.and bin %50, %45, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_11.io_deq_ready"} : i1
    %75 = comb.and bin %52, %27 {sv.namehint = "Queue1_BundleMap_11.io_enq_valid"} : i1
    %76 = comb.and bin %50, %46, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_12.io_deq_ready"} : i1
    %77 = comb.and bin %52, %28 {sv.namehint = "Queue1_BundleMap_12.io_enq_valid"} : i1
    %78 = comb.and bin %50, %47, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_13.io_deq_ready"} : i1
    %79 = comb.and bin %52, %29 {sv.namehint = "Queue1_BundleMap_13.io_enq_valid"} : i1
    %80 = comb.and bin %50, %48, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_14.io_deq_ready"} : i1
    %81 = comb.and bin %52, %30 {sv.namehint = "Queue1_BundleMap_14.io_enq_valid"} : i1
    %82 = comb.and bin %50, %49, %auto_out_r_bits_last {sv.namehint = "Queue1_BundleMap_15.io_deq_ready"} : i1
    %83 = comb.and bin %52, %31 {sv.namehint = "Queue1_BundleMap_15.io_enq_valid"} : i1
    %84 = hw.array_create %Queue1_BundleMap_31.io_enq_ready, %Queue1_BundleMap_30.io_enq_ready, %Queue1_BundleMap_29.io_enq_ready, %Queue1_BundleMap_28.io_enq_ready, %Queue1_BundleMap_27.io_enq_ready, %Queue1_BundleMap_26.io_enq_ready, %Queue1_BundleMap_25.io_enq_ready, %Queue1_BundleMap_24.io_enq_ready, %Queue1_BundleMap_23.io_enq_ready, %Queue1_BundleMap_22.io_enq_ready, %Queue1_BundleMap_21.io_enq_ready, %Queue1_BundleMap_20.io_enq_ready, %Queue1_BundleMap_19.io_enq_ready, %Queue1_BundleMap_18.io_enq_ready, %Queue1_BundleMap_17.io_enq_ready, %Queue1_BundleMap_16.io_enq_ready : i1
    %85 = hw.array_get %84[%auto_in_aw_bits_id] : !hw.array<16xi1>, i4
    %86 = comb.and bin %auto_out_aw_ready, %85 {sv.namehint = "nodeIn_aw_ready"} : i1
    %87 = comb.and bin %auto_in_aw_valid, %85 {sv.namehint = "nodeOut_aw_valid"} : i1
    %88 = comb.xor bin %auto_out_b_valid, %true : i1
    %89 = hw.array_create %Queue1_BundleMap_31.io_deq_valid, %Queue1_BundleMap_30.io_deq_valid, %Queue1_BundleMap_29.io_deq_valid, %Queue1_BundleMap_28.io_deq_valid, %Queue1_BundleMap_27.io_deq_valid, %Queue1_BundleMap_26.io_deq_valid, %Queue1_BundleMap_25.io_deq_valid, %Queue1_BundleMap_24.io_deq_valid, %Queue1_BundleMap_23.io_deq_valid, %Queue1_BundleMap_22.io_deq_valid, %Queue1_BundleMap_21.io_deq_valid, %Queue1_BundleMap_20.io_deq_valid, %Queue1_BundleMap_19.io_deq_valid, %Queue1_BundleMap_18.io_deq_valid, %Queue1_BundleMap_17.io_deq_valid, %Queue1_BundleMap_16.io_deq_valid : i1
    %90 = hw.array_get %89[%auto_out_b_bits_id] : !hw.array<16xi1>, i4
    %91 = comb.or bin %88, %90 : i1
    sv.always posedge %0 {
      sv.if %9 {
        sv.assert %8, immediate label "assert__assert"
      }
      sv.if %9 {
        sv.assert %91, immediate label "assert__assert_1"
      }
    }
    %92 = hw.array_create %Queue1_BundleMap_31.io_deq_bits_tl_state_size, %Queue1_BundleMap_30.io_deq_bits_tl_state_size, %Queue1_BundleMap_29.io_deq_bits_tl_state_size, %Queue1_BundleMap_28.io_deq_bits_tl_state_size, %Queue1_BundleMap_27.io_deq_bits_tl_state_size, %Queue1_BundleMap_26.io_deq_bits_tl_state_size, %Queue1_BundleMap_25.io_deq_bits_tl_state_size, %Queue1_BundleMap_24.io_deq_bits_tl_state_size, %Queue1_BundleMap_23.io_deq_bits_tl_state_size, %Queue1_BundleMap_22.io_deq_bits_tl_state_size, %Queue1_BundleMap_21.io_deq_bits_tl_state_size, %Queue1_BundleMap_20.io_deq_bits_tl_state_size, %Queue1_BundleMap_19.io_deq_bits_tl_state_size, %Queue1_BundleMap_18.io_deq_bits_tl_state_size, %Queue1_BundleMap_17.io_deq_bits_tl_state_size, %Queue1_BundleMap_16.io_deq_bits_tl_state_size : i4
    %93 = hw.array_get %92[%auto_out_b_bits_id] {sv.namehint = "nodeIn_b_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %94 = hw.array_create %Queue1_BundleMap_31.io_deq_bits_tl_state_source, %Queue1_BundleMap_30.io_deq_bits_tl_state_source, %Queue1_BundleMap_29.io_deq_bits_tl_state_source, %Queue1_BundleMap_28.io_deq_bits_tl_state_source, %Queue1_BundleMap_27.io_deq_bits_tl_state_source, %Queue1_BundleMap_26.io_deq_bits_tl_state_source, %Queue1_BundleMap_25.io_deq_bits_tl_state_source, %Queue1_BundleMap_24.io_deq_bits_tl_state_source, %Queue1_BundleMap_23.io_deq_bits_tl_state_source, %Queue1_BundleMap_22.io_deq_bits_tl_state_source, %Queue1_BundleMap_21.io_deq_bits_tl_state_source, %Queue1_BundleMap_20.io_deq_bits_tl_state_source, %Queue1_BundleMap_19.io_deq_bits_tl_state_source, %Queue1_BundleMap_18.io_deq_bits_tl_state_source, %Queue1_BundleMap_17.io_deq_bits_tl_state_source, %Queue1_BundleMap_16.io_deq_bits_tl_state_source : i4
    %95 = hw.array_get %94[%auto_out_b_bits_id] {sv.namehint = "nodeIn_b_bits_echo_tl_state_source"} : !hw.array<16xi4>, i4
    %96 = comb.concat %c0_i12, %auto_in_aw_bits_id : i12, i4
    %97 = comb.shl bin %c1_i16, %96 {sv.namehint = "_awsel_T_1"} : i16
    %98 = comb.extract %97 from 0 {sv.namehint = "awsel_0"} : (i16) -> i1
    %99 = comb.extract %97 from 1 {sv.namehint = "awsel_1"} : (i16) -> i1
    %100 = comb.extract %97 from 2 {sv.namehint = "awsel_2"} : (i16) -> i1
    %101 = comb.extract %97 from 3 {sv.namehint = "awsel_3"} : (i16) -> i1
    %102 = comb.extract %97 from 4 {sv.namehint = "awsel_4"} : (i16) -> i1
    %103 = comb.extract %97 from 5 {sv.namehint = "awsel_5"} : (i16) -> i1
    %104 = comb.extract %97 from 6 {sv.namehint = "awsel_6"} : (i16) -> i1
    %105 = comb.extract %97 from 7 {sv.namehint = "awsel_7"} : (i16) -> i1
    %106 = comb.extract %97 from 8 {sv.namehint = "awsel_8"} : (i16) -> i1
    %107 = comb.extract %97 from 9 {sv.namehint = "awsel_9"} : (i16) -> i1
    %108 = comb.extract %97 from 10 {sv.namehint = "awsel_10"} : (i16) -> i1
    %109 = comb.extract %97 from 11 {sv.namehint = "awsel_11"} : (i16) -> i1
    %110 = comb.extract %97 from 12 {sv.namehint = "awsel_12"} : (i16) -> i1
    %111 = comb.extract %97 from 13 {sv.namehint = "awsel_13"} : (i16) -> i1
    %112 = comb.extract %97 from 14 {sv.namehint = "awsel_14"} : (i16) -> i1
    %113 = comb.extract %97 from 15 {sv.namehint = "awsel_15"} : (i16) -> i1
    %114 = comb.concat %c0_i12, %auto_out_b_bits_id : i12, i4
    %115 = comb.shl bin %c1_i16, %114 {sv.namehint = "_bsel_T_1"} : i16
    %116 = comb.extract %115 from 0 {sv.namehint = "bsel_0"} : (i16) -> i1
    %117 = comb.extract %115 from 1 {sv.namehint = "bsel_1"} : (i16) -> i1
    %118 = comb.extract %115 from 2 {sv.namehint = "bsel_2"} : (i16) -> i1
    %119 = comb.extract %115 from 3 {sv.namehint = "bsel_3"} : (i16) -> i1
    %120 = comb.extract %115 from 4 {sv.namehint = "bsel_4"} : (i16) -> i1
    %121 = comb.extract %115 from 5 {sv.namehint = "bsel_5"} : (i16) -> i1
    %122 = comb.extract %115 from 6 {sv.namehint = "bsel_6"} : (i16) -> i1
    %123 = comb.extract %115 from 7 {sv.namehint = "bsel_7"} : (i16) -> i1
    %124 = comb.extract %115 from 8 {sv.namehint = "bsel_8"} : (i16) -> i1
    %125 = comb.extract %115 from 9 {sv.namehint = "bsel_9"} : (i16) -> i1
    %126 = comb.extract %115 from 10 {sv.namehint = "bsel_10"} : (i16) -> i1
    %127 = comb.extract %115 from 11 {sv.namehint = "bsel_11"} : (i16) -> i1
    %128 = comb.extract %115 from 12 {sv.namehint = "bsel_12"} : (i16) -> i1
    %129 = comb.extract %115 from 13 {sv.namehint = "bsel_13"} : (i16) -> i1
    %130 = comb.extract %115 from 14 {sv.namehint = "bsel_14"} : (i16) -> i1
    %131 = comb.extract %115 from 15 {sv.namehint = "bsel_15"} : (i16) -> i1
    %132 = comb.and bin %auto_out_b_valid, %auto_in_b_ready : i1
    %133 = comb.and bin %132, %116 {sv.namehint = "Queue1_BundleMap_16.io_deq_ready"} : i1
    %134 = comb.and bin %auto_in_aw_valid, %auto_out_aw_ready : i1
    %135 = comb.and bin %134, %98 {sv.namehint = "Queue1_BundleMap_16.io_enq_valid"} : i1
    %136 = comb.and bin %132, %117 {sv.namehint = "Queue1_BundleMap_17.io_deq_ready"} : i1
    %137 = comb.and bin %134, %99 {sv.namehint = "Queue1_BundleMap_17.io_enq_valid"} : i1
    %138 = comb.and bin %132, %118 {sv.namehint = "Queue1_BundleMap_18.io_deq_ready"} : i1
    %139 = comb.and bin %134, %100 {sv.namehint = "Queue1_BundleMap_18.io_enq_valid"} : i1
    %140 = comb.and bin %132, %119 {sv.namehint = "Queue1_BundleMap_19.io_deq_ready"} : i1
    %141 = comb.and bin %134, %101 {sv.namehint = "Queue1_BundleMap_19.io_enq_valid"} : i1
    %142 = comb.and bin %132, %120 {sv.namehint = "Queue1_BundleMap_20.io_deq_ready"} : i1
    %143 = comb.and bin %134, %102 {sv.namehint = "Queue1_BundleMap_20.io_enq_valid"} : i1
    %144 = comb.and bin %132, %121 {sv.namehint = "Queue1_BundleMap_21.io_deq_ready"} : i1
    %145 = comb.and bin %134, %103 {sv.namehint = "Queue1_BundleMap_21.io_enq_valid"} : i1
    %146 = comb.and bin %132, %122 {sv.namehint = "Queue1_BundleMap_22.io_deq_ready"} : i1
    %147 = comb.and bin %134, %104 {sv.namehint = "Queue1_BundleMap_22.io_enq_valid"} : i1
    %148 = comb.and bin %132, %123 {sv.namehint = "Queue1_BundleMap_23.io_deq_ready"} : i1
    %149 = comb.and bin %134, %105 {sv.namehint = "Queue1_BundleMap_23.io_enq_valid"} : i1
    %150 = comb.and bin %132, %124 {sv.namehint = "Queue1_BundleMap_24.io_deq_ready"} : i1
    %151 = comb.and bin %134, %106 {sv.namehint = "Queue1_BundleMap_24.io_enq_valid"} : i1
    %152 = comb.and bin %132, %125 {sv.namehint = "Queue1_BundleMap_25.io_deq_ready"} : i1
    %153 = comb.and bin %134, %107 {sv.namehint = "Queue1_BundleMap_25.io_enq_valid"} : i1
    %154 = comb.and bin %132, %126 {sv.namehint = "Queue1_BundleMap_26.io_deq_ready"} : i1
    %155 = comb.and bin %134, %108 {sv.namehint = "Queue1_BundleMap_26.io_enq_valid"} : i1
    %156 = comb.and bin %132, %127 {sv.namehint = "Queue1_BundleMap_27.io_deq_ready"} : i1
    %157 = comb.and bin %134, %109 {sv.namehint = "Queue1_BundleMap_27.io_enq_valid"} : i1
    %158 = comb.and bin %132, %128 {sv.namehint = "Queue1_BundleMap_28.io_deq_ready"} : i1
    %159 = comb.and bin %134, %110 {sv.namehint = "Queue1_BundleMap_28.io_enq_valid"} : i1
    %160 = comb.and bin %132, %129 {sv.namehint = "Queue1_BundleMap_29.io_deq_ready"} : i1
    %161 = comb.and bin %134, %111 {sv.namehint = "Queue1_BundleMap_29.io_enq_valid"} : i1
    %162 = comb.and bin %132, %130 {sv.namehint = "Queue1_BundleMap_30.io_deq_ready"} : i1
    %163 = comb.and bin %134, %112 {sv.namehint = "Queue1_BundleMap_30.io_enq_valid"} : i1
    %164 = comb.and bin %132, %131 {sv.namehint = "Queue1_BundleMap_31.io_deq_ready"} : i1
    %165 = comb.and bin %134, %113 {sv.namehint = "Queue1_BundleMap_31.io_enq_valid"} : i1
    hw.output %86, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %93, %95, %3, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %11, %13, %auto_out_r_bits_last, %87, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %4, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i4, i1, i1, i4, i64, i2, i4, i4, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @AXI4IdIndexer_1(out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i32, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i4, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i32, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i4, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i4, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i4, in %auto_out_r_bits_last : i1) {
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %auto_out_r_bits_echo_tl_state_size, %auto_out_r_bits_echo_tl_state_source, %auto_out_r_bits_last, %auto_in_aw_valid, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i4, i1, i1, i4, i64, i2, i4, i4, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @Queue1_AXI4BundleARW_1(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_addr : i32, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_cache : i4, in %io_enq_bits_prot : i3, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i4, in %io_enq_bits_wen : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_addr : i32, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i4, out io_deq_bits_wen : i1) {
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %c2_i3 = hw.constant 2 : i3
    %0 = comb.concat %io_enq_bits_id, %io_enq_bits_addr, %io_enq_bits_len, %io_enq_bits_size, %c2_i3, %io_enq_bits_cache, %io_enq_bits_prot, %c0_i4, %io_enq_bits_echo_tl_state_size, %io_enq_bits_echo_tl_state_source, %io_enq_bits_wen : i4, i32, i8, i3, i3, i4, i3, i4, i4, i4, i1
    %1 = comb.extract %ram from 66 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i70) -> i4
    %2 = comb.extract %ram from 34 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i70) -> i32
    %3 = comb.extract %ram from 26 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i70) -> i8
    %4 = comb.extract %ram from 23 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i70) -> i3
    %5 = comb.extract %ram from 21 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i70) -> i2
    %6 = comb.extract %ram from 20 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i70) -> i1
    %7 = comb.extract %ram from 16 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i70) -> i4
    %8 = comb.extract %ram from 13 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i70) -> i3
    %9 = comb.extract %ram from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i70) -> i4
    %10 = comb.extract %ram from 5 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i70) -> i4
    %11 = comb.extract %ram from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i70) -> i4
    %12 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_wen"} : (i70) -> i1
    %full = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %13 = comb.and bin %18, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %15 = comb.icmp bin eq %13, %14 : i1
    %16 = comb.mux bin %15, %full, %13 : i1
    %17 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %18 = comb.or %io_deq_ready, %17 {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %19 clock %clock {sv.namehint = "ram"} : i70
    %19 = comb.mux bin %13, %0, %ram : i70
    hw.output %18, %full, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12 : i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @TLToAXI4_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i4, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i4, in %auto_out_r_bits_last : i1) {
    %c2_i3 = hw.constant 2 : i3
    %c-1_i8 = hw.constant -1 : i8
    %0 = hw.aggregate_constant [-1 : i4, -2 : i4, -3 : i4, -4 : i4, -5 : i4, -6 : i4, -7 : i4, -8 : i4, 7 : i4, 6 : i4, 5 : i4, 4 : i4, 3 : i4, 2 : i4, 1 : i4, 0 : i4] : !hw.array<16xi4>
    %c1_i16 = hw.constant 1 : i16
    %c2047_i18 = hw.constant 2047 : i18
    %c63_i13 = hw.constant 63 : i13
    %false = hw.constant false
    %c3_i3 = hw.constant 3 : i3
    %c0_i3 = hw.constant 0 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %c0_i15 = hw.constant 0 : i15
    %c-1_i3 = hw.constant -1 : i3
    %c0_i12 = hw.constant 0 : i12
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %41: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %60: i1, io_in_d_bits_opcode: %70: i3, io_in_d_bits_size: %71: i3, io_in_d_bits_source: %72: i4, io_in_d_bits_denied: %73: i1, io_in_d_bits_corrupt: %74: i1) -> ()
    %2 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_beats1_opdata_T"} : (i3) -> i1
    %3 = comb.xor bin %2, %true {sv.namehint = "a_isPut"} : i1
    %4 = comb.and bin %41, %auto_in_a_valid : i1
    %5 = comb.concat %c0_i10, %auto_in_a_bits_size : i10, i3
    %6 = comb.shl bin %c63_i13, %5 {sv.namehint = "_beats1_decode_T_1"} : i13
    %7 = comb.extract %6 from 3 : (i13) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "_beats1_decode_T_3"} : i3
    %9 = comb.mux bin %2, %c0_i3, %8 {sv.namehint = "beats1"} : i3
    %counter = seq.firreg %16 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %10 = comb.add %counter, %c-1_i3 {sv.namehint = "_counter1_T"} : i3
    %11 = comb.icmp bin eq %counter, %c0_i3 {sv.namehint = "a_first"} : i3
    %12 = comb.icmp bin eq %counter, %c1_i3 {sv.namehint = "_last_T"} : i3
    %13 = comb.icmp bin eq %9, %c0_i3 {sv.namehint = "_last_T_1"} : i3
    %14 = comb.or bin %12, %13 {sv.namehint = "a_last"} : i1
    %15 = comb.mux bin %11, %9, %10 {sv.namehint = "_counter_T"} : i3
    %16 = comb.mux bin %4, %15, %counter : i3
    %nodeOut_w_deq_q.io_enq_ready, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last = hw.instance "nodeOut_w_deq_q" @Queue1_AXI4BundleW(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %46: i1, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_strb: %auto_in_a_bits_mask: i8, io_enq_bits_last: %14: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "nodeOut_w_irr_valid"}
    %queue_arw_deq_q.io_enq_ready, %queue_arw_deq_q.io_deq_valid, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %queue_arw_deq_q.io_deq_bits_wen = hw.instance "queue_arw_deq_q" @Queue1_AXI4BundleARW_1(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %45: i1, io_enq_bits_id: %23: i4, io_enq_bits_addr: %auto_in_a_bits_address: i32, io_enq_bits_len: %27: i8, io_enq_bits_size: %29: i3, io_enq_bits_cache: %33: i4, io_enq_bits_prot: %32: i3, io_enq_bits_echo_tl_state_size: %30: i4, io_enq_bits_echo_tl_state_source: %auto_in_a_bits_source: i4, io_enq_bits_wen: %3: i1, io_deq_ready: %20: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i32, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i4, io_deq_bits_wen: i1) {sv.namehint = "queue_arw_valid"}
    %17 = comb.xor bin %queue_arw_deq_q.io_deq_bits_wen, %true {sv.namehint = "_nodeOut_ar_valid_T"} : i1
    %18 = comb.and bin %queue_arw_deq_q.io_deq_valid, %17 {sv.namehint = "nodeOut_ar_valid"} : i1
    %19 = comb.and bin %queue_arw_deq_q.io_deq_valid, %queue_arw_deq_q.io_deq_bits_wen {sv.namehint = "nodeOut_aw_valid"} : i1
    %20 = comb.mux bin %queue_arw_deq_q.io_deq_bits_wen, %auto_out_aw_ready, %auto_out_ar_ready {sv.namehint = "queue_arw_ready"} : i1
    %doneAW = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %21 = comb.xor bin %14, %true {sv.namehint = "_doneAW_T"} : i1
    %22 = comb.mux bin %4, %21, %doneAW : i1
    %23 = hw.array_get %0[%auto_in_a_bits_source] {sv.namehint = "a_sel_shiftAmount"} : !hw.array<16xi4>, i4
    %24 = comb.concat %c0_i15, %auto_in_a_bits_size : i15, i3
    %25 = comb.shl bin %c2047_i18, %24 {sv.namehint = "_out_arw_bits_len_T_1"} : i18
    %26 = comb.extract %25 from 3 : (i18) -> i8
    %27 = comb.xor bin %26, %c-1_i8 {sv.namehint = "_out_arw_bits_len_T_3"} : i8
    %28 = comb.icmp bin ugt %auto_in_a_bits_size, %c2_i3 {sv.namehint = "_out_arw_bits_size_T"} : i3
    %29 = comb.mux bin %28, %c3_i3, %auto_in_a_bits_size {sv.namehint = "out_arw_bits_size"} : i3
    %30 = comb.concat %false, %auto_in_a_bits_size {sv.namehint = "out_arw_bits_echo_tl_state_size"} : i1, i3
    %31 = comb.xor bin %auto_in_a_bits_user_amba_prot_secure, %true {sv.namehint = "prot_1"} : i1
    %32 = comb.concat %false, %31, %auto_in_a_bits_user_amba_prot_privileged {sv.namehint = "out_arw_bits_prot"} : i1, i1, i1
    %33 = comb.concat %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_bufferable {sv.namehint = "out_arw_bits_cache"} : i1, i1, i1, i1
    %34 = hw.array_create %count_16, %count_15, %count_14, %count_13, %count_12, %count_11, %count_10, %count_9, %count_8, %count_7, %count_6, %count_5, %count_4, %count_3, %count_2, %count_1 : i1
    %35 = hw.array_get %34[%auto_in_a_bits_source] : !hw.array<16xi1>, i4
    %36 = comb.and bin %35, %11 {sv.namehint = "stall"} : i1
    %37 = comb.xor bin %36, %true {sv.namehint = "_out_w_valid_T"} : i1
    %38 = comb.or bin %doneAW, %queue_arw_deq_q.io_enq_ready {sv.namehint = "_out_w_valid_T_3"} : i1
    %39 = comb.and bin %38, %nodeOut_w_deq_q.io_enq_ready {sv.namehint = "_nodeIn_a_ready_T_2"} : i1
    %40 = comb.mux bin %2, %queue_arw_deq_q.io_enq_ready, %39 {sv.namehint = "_nodeIn_a_ready_T_3"} : i1
    %41 = comb.and bin %37, %40 {sv.namehint = "nodeIn_a_ready"} : i1
    %42 = comb.xor bin %doneAW, %true {sv.namehint = "_out_arw_valid_T_2"} : i1
    %43 = comb.and bin %42, %nodeOut_w_deq_q.io_enq_ready {sv.namehint = "_out_arw_valid_T_3"} : i1
    %44 = comb.or %2, %43 {sv.namehint = "_out_arw_valid_T_4"} : i1
    %45 = comb.and bin %37, %auto_in_a_valid, %44 {sv.namehint = "out_arw_valid"} : i1
    %46 = comb.and bin %37, %auto_in_a_valid, %3, %38 {sv.namehint = "out_w_valid"} : i1
    %r_holds_d = seq.firreg %49 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %47 = comb.and bin %57, %auto_out_r_valid : i1
    %48 = comb.xor bin %auto_out_r_bits_last, %true {sv.namehint = "_r_holds_d_T"} : i1
    %49 = comb.mux bin %47, %48, %r_holds_d : i1
    %b_delay = seq.firreg %53 clock %clock {firrtl.random_init_start = 5 : ui64} : i3
    %50 = comb.xor bin %59, %true : i1
    %51 = comb.and bin %auto_out_b_valid, %50 : i1
    %52 = comb.add bin %b_delay, %c1_i3 {sv.namehint = "_b_delay_T"} : i3
    %53 = comb.mux bin %51, %52, %c0_i3 : i3
    %54 = comb.icmp bin ne %b_delay, %c-1_i3 {sv.namehint = "_r_wins_T"} : i3
    %55 = comb.and bin %auto_out_r_valid, %54 {sv.namehint = "_r_wins_T_1"} : i1
    %56 = comb.or bin %55, %r_holds_d {sv.namehint = "r_wins"} : i1
    %57 = comb.and bin %auto_in_d_ready, %56 {sv.namehint = "nodeOut_r_ready"} : i1
    %58 = comb.xor bin %56, %true {sv.namehint = "_nodeOut_b_ready_T"} : i1
    %59 = comb.and bin %auto_in_d_ready, %58 {sv.namehint = "nodeOut_b_ready"} : i1
    %60 = comb.mux bin %56, %auto_out_r_valid, %auto_out_b_valid {sv.namehint = "nodeIn_d_valid"} : i1
    %r_first = seq.firreg %61 clock %clock reset sync %reset, %true {firrtl.random_init_start = 8 : ui64} : i1
    %61 = comb.mux bin %47, %auto_out_r_bits_last, %r_first : i1
    %62 = comb.icmp bin eq %auto_out_r_bits_resp, %c-1_i2 {sv.namehint = "_r_denied_T"} : i2
    %r_denied_r = seq.firreg %63 clock %clock {firrtl.random_init_start = 9 : ui64} : i1
    %63 = comb.mux bin %r_first, %62, %r_denied_r : i1
    %64 = comb.mux bin %r_first, %62, %r_denied_r {sv.namehint = "r_denied"} : i1
    %65 = comb.icmp bin ne %auto_out_r_bits_resp, %c0_i2 {sv.namehint = "r_corrupt"} : i2
    %66 = comb.icmp bin ne %auto_out_b_bits_resp, %c0_i2 {sv.namehint = "b_denied"} : i2
    %67 = comb.or bin %65, %64 {sv.namehint = "r_d_corrupt"} : i1
    %68 = comb.extract %auto_out_r_bits_echo_tl_state_size from 0 {sv.namehint = "r_d_size"} : (i4) -> i3
    %69 = comb.extract %auto_out_b_bits_echo_tl_state_size from 0 {sv.namehint = "b_d_size"} : (i4) -> i3
    %70 = comb.concat %c0_i2, %56 {sv.namehint = "nodeIn_d_bits_opcode"} : i2, i1
    %71 = comb.mux bin %56, %68, %69 {sv.namehint = "nodeIn_d_bits_size"} : i3
    %72 = comb.mux bin %56, %auto_out_r_bits_echo_tl_state_source, %auto_out_b_bits_echo_tl_state_source {sv.namehint = "nodeIn_d_bits_source"} : i4
    %73 = comb.mux bin %56, %64, %66 {sv.namehint = "nodeIn_d_bits_denied"} : i1
    %74 = comb.and %56, %67 {sv.namehint = "nodeIn_d_bits_corrupt"} : i1
    %75 = comb.concat %c0_i12, %23 : i12, i4
    %76 = comb.shl bin %c1_i16, %75 {sv.namehint = "_a_sel_T_1"} : i16
    %77 = comb.extract %76 from 0 {sv.namehint = "a_sel_0"} : (i16) -> i1
    %78 = comb.extract %76 from 1 {sv.namehint = "a_sel_1"} : (i16) -> i1
    %79 = comb.extract %76 from 2 {sv.namehint = "a_sel_2"} : (i16) -> i1
    %80 = comb.extract %76 from 3 {sv.namehint = "a_sel_3"} : (i16) -> i1
    %81 = comb.extract %76 from 4 {sv.namehint = "a_sel_4"} : (i16) -> i1
    %82 = comb.extract %76 from 5 {sv.namehint = "a_sel_5"} : (i16) -> i1
    %83 = comb.extract %76 from 6 {sv.namehint = "a_sel_6"} : (i16) -> i1
    %84 = comb.extract %76 from 7 {sv.namehint = "a_sel_7"} : (i16) -> i1
    %85 = comb.extract %76 from 8 {sv.namehint = "a_sel_8"} : (i16) -> i1
    %86 = comb.extract %76 from 9 {sv.namehint = "a_sel_9"} : (i16) -> i1
    %87 = comb.extract %76 from 10 {sv.namehint = "a_sel_10"} : (i16) -> i1
    %88 = comb.extract %76 from 11 {sv.namehint = "a_sel_11"} : (i16) -> i1
    %89 = comb.extract %76 from 12 {sv.namehint = "a_sel_12"} : (i16) -> i1
    %90 = comb.extract %76 from 13 {sv.namehint = "a_sel_13"} : (i16) -> i1
    %91 = comb.extract %76 from 14 {sv.namehint = "a_sel_14"} : (i16) -> i1
    %92 = comb.extract %76 from 15 {sv.namehint = "a_sel_15"} : (i16) -> i1
    %93 = comb.mux bin %56, %auto_out_r_bits_id, %auto_out_b_bits_id {sv.namehint = "d_sel_shiftAmount"} : i4
    %94 = comb.concat %c0_i12, %93 : i12, i4
    %95 = comb.shl bin %c1_i16, %94 {sv.namehint = "_d_sel_T_2"} : i16
    %96 = comb.extract %95 from 0 {sv.namehint = "d_sel_0"} : (i16) -> i1
    %97 = comb.extract %95 from 1 {sv.namehint = "d_sel_1"} : (i16) -> i1
    %98 = comb.extract %95 from 2 {sv.namehint = "d_sel_2"} : (i16) -> i1
    %99 = comb.extract %95 from 3 {sv.namehint = "d_sel_3"} : (i16) -> i1
    %100 = comb.extract %95 from 4 {sv.namehint = "d_sel_4"} : (i16) -> i1
    %101 = comb.extract %95 from 5 {sv.namehint = "d_sel_5"} : (i16) -> i1
    %102 = comb.extract %95 from 6 {sv.namehint = "d_sel_6"} : (i16) -> i1
    %103 = comb.extract %95 from 7 {sv.namehint = "d_sel_7"} : (i16) -> i1
    %104 = comb.extract %95 from 8 {sv.namehint = "d_sel_8"} : (i16) -> i1
    %105 = comb.extract %95 from 9 {sv.namehint = "d_sel_9"} : (i16) -> i1
    %106 = comb.extract %95 from 10 {sv.namehint = "d_sel_10"} : (i16) -> i1
    %107 = comb.extract %95 from 11 {sv.namehint = "d_sel_11"} : (i16) -> i1
    %108 = comb.extract %95 from 12 {sv.namehint = "d_sel_12"} : (i16) -> i1
    %109 = comb.extract %95 from 13 {sv.namehint = "d_sel_13"} : (i16) -> i1
    %110 = comb.extract %95 from 14 {sv.namehint = "d_sel_14"} : (i16) -> i1
    %111 = comb.extract %95 from 15 {sv.namehint = "d_sel_15"} : (i16) -> i1
    %112 = comb.xor %56, %true : i1
    %113 = comb.or %112, %auto_out_r_bits_last {sv.namehint = "d_last"} : i1
    %count_1 = seq.firreg %119 clock %clock reset sync %reset, %false {firrtl.random_init_start = 10 : ui64, sv.namehint = "count_1"} : i1
    %114 = comb.and bin %queue_arw_deq_q.io_enq_ready, %45 {sv.namehint = "_inc_T_15"} : i1
    %115 = comb.and bin %77, %114 {sv.namehint = "inc"} : i1
    %116 = comb.and bin %auto_in_d_ready, %60 {sv.namehint = "_dec_T_31"} : i1
    %117 = comb.and bin %96, %113, %116 {sv.namehint = "dec"} : i1
    %118 = comb.add bin %count_1, %115 {sv.namehint = "_count_T_1"} : i1
    %119 = comb.sub bin %118, %117 {sv.namehint = "_count_T_3"} : i1
    %120 = comb.xor bin %117, %true : i1
    %121 = comb.or bin %120, %count_1 : i1
    %122 = comb.xor bin %reset, %true : i1
    %123 = comb.xor bin %115, %true : i1
    %124 = comb.xor bin %count_1, %true : i1
    %125 = comb.or bin %123, %124 : i1
    %count_2 = seq.firreg %129 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64, sv.namehint = "count_2"} : i1
    %126 = comb.and bin %78, %114 {sv.namehint = "inc_1"} : i1
    %127 = comb.and bin %97, %113, %116 {sv.namehint = "dec_1"} : i1
    %128 = comb.add bin %count_2, %126 {sv.namehint = "_count_T_5"} : i1
    %129 = comb.sub bin %128, %127 {sv.namehint = "_count_T_7"} : i1
    %130 = comb.xor bin %127, %true : i1
    %131 = comb.or bin %130, %count_2 : i1
    %132 = comb.xor bin %126, %true : i1
    %133 = comb.xor bin %count_2, %true : i1
    %134 = comb.or bin %132, %133 : i1
    %count_3 = seq.firreg %138 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64, sv.namehint = "count_3"} : i1
    %135 = comb.and bin %79, %114 {sv.namehint = "inc_2"} : i1
    %136 = comb.and bin %98, %113, %116 {sv.namehint = "dec_2"} : i1
    %137 = comb.add bin %count_3, %135 {sv.namehint = "_count_T_9"} : i1
    %138 = comb.sub bin %137, %136 {sv.namehint = "_count_T_11"} : i1
    %139 = comb.xor bin %136, %true : i1
    %140 = comb.or bin %139, %count_3 : i1
    %141 = comb.xor bin %135, %true : i1
    %142 = comb.xor bin %count_3, %true : i1
    %143 = comb.or bin %141, %142 : i1
    %count_4 = seq.firreg %147 clock %clock reset sync %reset, %false {firrtl.random_init_start = 16 : ui64, sv.namehint = "count_4"} : i1
    %144 = comb.and bin %80, %114 {sv.namehint = "inc_3"} : i1
    %145 = comb.and bin %99, %113, %116 {sv.namehint = "dec_3"} : i1
    %146 = comb.add bin %count_4, %144 {sv.namehint = "_count_T_13"} : i1
    %147 = comb.sub bin %146, %145 {sv.namehint = "_count_T_15"} : i1
    %148 = comb.xor bin %145, %true : i1
    %149 = comb.or bin %148, %count_4 : i1
    %150 = comb.xor bin %144, %true : i1
    %151 = comb.xor bin %count_4, %true : i1
    %152 = comb.or bin %150, %151 : i1
    %count_5 = seq.firreg %156 clock %clock reset sync %reset, %false {firrtl.random_init_start = 18 : ui64, sv.namehint = "count_5"} : i1
    %153 = comb.and bin %81, %114 {sv.namehint = "inc_4"} : i1
    %154 = comb.and bin %100, %113, %116 {sv.namehint = "dec_4"} : i1
    %155 = comb.add bin %count_5, %153 {sv.namehint = "_count_T_17"} : i1
    %156 = comb.sub bin %155, %154 {sv.namehint = "_count_T_19"} : i1
    %157 = comb.xor bin %154, %true : i1
    %158 = comb.or bin %157, %count_5 : i1
    %159 = comb.xor bin %153, %true : i1
    %160 = comb.xor bin %count_5, %true : i1
    %161 = comb.or bin %159, %160 : i1
    %count_6 = seq.firreg %165 clock %clock reset sync %reset, %false {firrtl.random_init_start = 20 : ui64, sv.namehint = "count_6"} : i1
    %162 = comb.and bin %82, %114 {sv.namehint = "inc_5"} : i1
    %163 = comb.and bin %101, %113, %116 {sv.namehint = "dec_5"} : i1
    %164 = comb.add bin %count_6, %162 {sv.namehint = "_count_T_21"} : i1
    %165 = comb.sub bin %164, %163 {sv.namehint = "_count_T_23"} : i1
    %166 = comb.xor bin %163, %true : i1
    %167 = comb.or bin %166, %count_6 : i1
    %168 = comb.xor bin %162, %true : i1
    %169 = comb.xor bin %count_6, %true : i1
    %170 = comb.or bin %168, %169 : i1
    %count_7 = seq.firreg %174 clock %clock reset sync %reset, %false {firrtl.random_init_start = 22 : ui64, sv.namehint = "count_7"} : i1
    %171 = comb.and bin %83, %114 {sv.namehint = "inc_6"} : i1
    %172 = comb.and bin %102, %113, %116 {sv.namehint = "dec_6"} : i1
    %173 = comb.add bin %count_7, %171 {sv.namehint = "_count_T_25"} : i1
    %174 = comb.sub bin %173, %172 {sv.namehint = "_count_T_27"} : i1
    %175 = comb.xor bin %172, %true : i1
    %176 = comb.or bin %175, %count_7 : i1
    %177 = comb.xor bin %171, %true : i1
    %178 = comb.xor bin %count_7, %true : i1
    %179 = comb.or bin %177, %178 : i1
    %count_8 = seq.firreg %183 clock %clock reset sync %reset, %false {firrtl.random_init_start = 24 : ui64, sv.namehint = "count_8"} : i1
    %180 = comb.and bin %84, %114 {sv.namehint = "inc_7"} : i1
    %181 = comb.and bin %103, %113, %116 {sv.namehint = "dec_7"} : i1
    %182 = comb.add bin %count_8, %180 {sv.namehint = "_count_T_29"} : i1
    %183 = comb.sub bin %182, %181 {sv.namehint = "_count_T_31"} : i1
    %184 = comb.xor bin %181, %true : i1
    %185 = comb.or bin %184, %count_8 : i1
    %186 = comb.xor bin %180, %true : i1
    %187 = comb.xor bin %count_8, %true : i1
    %188 = comb.or bin %186, %187 : i1
    %count_9 = seq.firreg %192 clock %clock reset sync %reset, %false {firrtl.random_init_start = 26 : ui64, sv.namehint = "count_9"} : i1
    %189 = comb.and bin %85, %114 {sv.namehint = "inc_8"} : i1
    %190 = comb.and bin %104, %113, %116 {sv.namehint = "dec_8"} : i1
    %191 = comb.add bin %count_9, %189 {sv.namehint = "_count_T_33"} : i1
    %192 = comb.sub bin %191, %190 {sv.namehint = "_count_T_35"} : i1
    %193 = comb.xor bin %190, %true : i1
    %194 = comb.or bin %193, %count_9 : i1
    %195 = comb.xor bin %189, %true : i1
    %196 = comb.xor bin %count_9, %true : i1
    %197 = comb.or bin %195, %196 : i1
    %count_10 = seq.firreg %201 clock %clock reset sync %reset, %false {firrtl.random_init_start = 28 : ui64, sv.namehint = "count_10"} : i1
    %198 = comb.and bin %86, %114 {sv.namehint = "inc_9"} : i1
    %199 = comb.and bin %105, %113, %116 {sv.namehint = "dec_9"} : i1
    %200 = comb.add bin %count_10, %198 {sv.namehint = "_count_T_37"} : i1
    %201 = comb.sub bin %200, %199 {sv.namehint = "_count_T_39"} : i1
    %202 = comb.xor bin %199, %true : i1
    %203 = comb.or bin %202, %count_10 : i1
    %204 = comb.xor bin %198, %true : i1
    %205 = comb.xor bin %count_10, %true : i1
    %206 = comb.or bin %204, %205 : i1
    %count_11 = seq.firreg %210 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64, sv.namehint = "count_11"} : i1
    %207 = comb.and bin %87, %114 {sv.namehint = "inc_10"} : i1
    %208 = comb.and bin %106, %113, %116 {sv.namehint = "dec_10"} : i1
    %209 = comb.add bin %count_11, %207 {sv.namehint = "_count_T_41"} : i1
    %210 = comb.sub bin %209, %208 {sv.namehint = "_count_T_43"} : i1
    %211 = comb.xor bin %208, %true : i1
    %212 = comb.or bin %211, %count_11 : i1
    %213 = comb.xor bin %207, %true : i1
    %214 = comb.xor bin %count_11, %true : i1
    %215 = comb.or bin %213, %214 : i1
    %count_12 = seq.firreg %219 clock %clock reset sync %reset, %false {firrtl.random_init_start = 32 : ui64, sv.namehint = "count_12"} : i1
    %216 = comb.and bin %88, %114 {sv.namehint = "inc_11"} : i1
    %217 = comb.and bin %107, %113, %116 {sv.namehint = "dec_11"} : i1
    %218 = comb.add bin %count_12, %216 {sv.namehint = "_count_T_45"} : i1
    %219 = comb.sub bin %218, %217 {sv.namehint = "_count_T_47"} : i1
    %220 = comb.xor bin %217, %true : i1
    %221 = comb.or bin %220, %count_12 : i1
    %222 = comb.xor bin %216, %true : i1
    %223 = comb.xor bin %count_12, %true : i1
    %224 = comb.or bin %222, %223 : i1
    %count_13 = seq.firreg %228 clock %clock reset sync %reset, %false {firrtl.random_init_start = 34 : ui64, sv.namehint = "count_13"} : i1
    %225 = comb.and bin %89, %114 {sv.namehint = "inc_12"} : i1
    %226 = comb.and bin %108, %113, %116 {sv.namehint = "dec_12"} : i1
    %227 = comb.add bin %count_13, %225 {sv.namehint = "_count_T_49"} : i1
    %228 = comb.sub bin %227, %226 {sv.namehint = "_count_T_51"} : i1
    %229 = comb.xor bin %226, %true : i1
    %230 = comb.or bin %229, %count_13 : i1
    %231 = comb.xor bin %225, %true : i1
    %232 = comb.xor bin %count_13, %true : i1
    %233 = comb.or bin %231, %232 : i1
    %count_14 = seq.firreg %237 clock %clock reset sync %reset, %false {firrtl.random_init_start = 36 : ui64, sv.namehint = "count_14"} : i1
    %234 = comb.and bin %90, %114 {sv.namehint = "inc_13"} : i1
    %235 = comb.and bin %109, %113, %116 {sv.namehint = "dec_13"} : i1
    %236 = comb.add bin %count_14, %234 {sv.namehint = "_count_T_53"} : i1
    %237 = comb.sub bin %236, %235 {sv.namehint = "_count_T_55"} : i1
    %238 = comb.xor bin %235, %true : i1
    %239 = comb.or bin %238, %count_14 : i1
    %240 = comb.xor bin %234, %true : i1
    %241 = comb.xor bin %count_14, %true : i1
    %242 = comb.or bin %240, %241 : i1
    %count_15 = seq.firreg %246 clock %clock reset sync %reset, %false {firrtl.random_init_start = 38 : ui64, sv.namehint = "count_15"} : i1
    %243 = comb.and bin %91, %114 {sv.namehint = "inc_14"} : i1
    %244 = comb.and bin %110, %113, %116 {sv.namehint = "dec_14"} : i1
    %245 = comb.add bin %count_15, %243 {sv.namehint = "_count_T_57"} : i1
    %246 = comb.sub bin %245, %244 {sv.namehint = "_count_T_59"} : i1
    %247 = comb.xor bin %244, %true : i1
    %248 = comb.or bin %247, %count_15 : i1
    %249 = comb.xor bin %243, %true : i1
    %250 = comb.xor bin %count_15, %true : i1
    %251 = comb.or bin %249, %250 : i1
    %count_16 = seq.firreg %255 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64, sv.namehint = "count_16"} : i1
    %252 = comb.and bin %92, %114 {sv.namehint = "inc_15"} : i1
    %253 = comb.and bin %111, %113, %116 {sv.namehint = "dec_15"} : i1
    %254 = comb.add bin %count_16, %252 {sv.namehint = "_count_T_61"} : i1
    %255 = comb.sub bin %254, %253 {sv.namehint = "_count_T_63"} : i1
    %256 = comb.xor bin %253, %true : i1
    %257 = comb.or bin %256, %count_16 : i1
    %258 = comb.xor bin %252, %true : i1
    %259 = comb.xor bin %count_16, %true : i1
    %260 = comb.or bin %258, %259 : i1
    sv.always posedge %1 {
      sv.if %122 {
        sv.assert %121, immediate label "assert__assert"
      }
      sv.if %122 {
        sv.assert %125, immediate label "assert__assert_1"
      }
      sv.if %122 {
        sv.assert %131, immediate label "assert__assert_2"
      }
      sv.if %122 {
        sv.assert %134, immediate label "assert__assert_3"
      }
      sv.if %122 {
        sv.assert %140, immediate label "assert__assert_4"
      }
      sv.if %122 {
        sv.assert %143, immediate label "assert__assert_5"
      }
      sv.if %122 {
        sv.assert %149, immediate label "assert__assert_6"
      }
      sv.if %122 {
        sv.assert %152, immediate label "assert__assert_7"
      }
      sv.if %122 {
        sv.assert %158, immediate label "assert__assert_8"
      }
      sv.if %122 {
        sv.assert %161, immediate label "assert__assert_9"
      }
      sv.if %122 {
        sv.assert %167, immediate label "assert__assert_10"
      }
      sv.if %122 {
        sv.assert %170, immediate label "assert__assert_11"
      }
      sv.if %122 {
        sv.assert %176, immediate label "assert__assert_12"
      }
      sv.if %122 {
        sv.assert %179, immediate label "assert__assert_13"
      }
      sv.if %122 {
        sv.assert %185, immediate label "assert__assert_14"
      }
      sv.if %122 {
        sv.assert %188, immediate label "assert__assert_15"
      }
      sv.if %122 {
        sv.assert %194, immediate label "assert__assert_16"
      }
      sv.if %122 {
        sv.assert %197, immediate label "assert__assert_17"
      }
      sv.if %122 {
        sv.assert %203, immediate label "assert__assert_18"
      }
      sv.if %122 {
        sv.assert %206, immediate label "assert__assert_19"
      }
      sv.if %122 {
        sv.assert %212, immediate label "assert__assert_20"
      }
      sv.if %122 {
        sv.assert %215, immediate label "assert__assert_21"
      }
      sv.if %122 {
        sv.assert %221, immediate label "assert__assert_22"
      }
      sv.if %122 {
        sv.assert %224, immediate label "assert__assert_23"
      }
      sv.if %122 {
        sv.assert %230, immediate label "assert__assert_24"
      }
      sv.if %122 {
        sv.assert %233, immediate label "assert__assert_25"
      }
      sv.if %122 {
        sv.assert %239, immediate label "assert__assert_26"
      }
      sv.if %122 {
        sv.assert %242, immediate label "assert__assert_27"
      }
      sv.if %122 {
        sv.assert %248, immediate label "assert__assert_28"
      }
      sv.if %122 {
        sv.assert %251, immediate label "assert__assert_29"
      }
      sv.if %122 {
        sv.assert %257, immediate label "assert__assert_30"
      }
      sv.if %122 {
        sv.assert %260, immediate label "assert__assert_31"
      }
    }
    hw.output %41, %60, %70, %71, %72, %73, %auto_out_r_bits_data, %74, %19, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %nodeOut_w_deq_q.io_deq_valid, %nodeOut_w_deq_q.io_deq_bits_data, %nodeOut_w_deq_q.io_deq_bits_strb, %nodeOut_w_deq_q.io_deq_bits_last, %59, %18, %queue_arw_deq_q.io_deq_bits_id, %queue_arw_deq_q.io_deq_bits_addr, %queue_arw_deq_q.io_deq_bits_len, %queue_arw_deq_q.io_deq_bits_size, %queue_arw_deq_q.io_deq_bits_burst, %queue_arw_deq_q.io_deq_bits_lock, %queue_arw_deq_q.io_deq_bits_cache, %queue_arw_deq_q.io_deq_bits_prot, %queue_arw_deq_q.io_deq_bits_qos, %queue_arw_deq_q.io_deq_bits_echo_tl_state_size, %queue_arw_deq_q.io_deq_bits_echo_tl_state_source, %57 : i1, i1, i3, i3, i4, i1, i64, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @TLWidthWidget_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLInterconnectCoupler_11(in %clock : !seq.clock, in %reset : i1, out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i3, in %auto_widget_in_a_bits_source : i4, in %auto_widget_in_a_bits_address : i32, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_size : i3, out auto_widget_in_d_bits_source : i4, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_axi4yank_out_aw_ready : i1, out auto_axi4yank_out_aw_valid : i1, out auto_axi4yank_out_aw_bits_id : i4, out auto_axi4yank_out_aw_bits_addr : i32, out auto_axi4yank_out_aw_bits_len : i8, out auto_axi4yank_out_aw_bits_size : i3, out auto_axi4yank_out_aw_bits_burst : i2, out auto_axi4yank_out_aw_bits_lock : i1, out auto_axi4yank_out_aw_bits_cache : i4, out auto_axi4yank_out_aw_bits_prot : i3, out auto_axi4yank_out_aw_bits_qos : i4, in %auto_axi4yank_out_w_ready : i1, out auto_axi4yank_out_w_valid : i1, out auto_axi4yank_out_w_bits_data : i64, out auto_axi4yank_out_w_bits_strb : i8, out auto_axi4yank_out_w_bits_last : i1, out auto_axi4yank_out_b_ready : i1, in %auto_axi4yank_out_b_valid : i1, in %auto_axi4yank_out_b_bits_id : i4, in %auto_axi4yank_out_b_bits_resp : i2, in %auto_axi4yank_out_ar_ready : i1, out auto_axi4yank_out_ar_valid : i1, out auto_axi4yank_out_ar_bits_id : i4, out auto_axi4yank_out_ar_bits_addr : i32, out auto_axi4yank_out_ar_bits_len : i8, out auto_axi4yank_out_ar_bits_size : i3, out auto_axi4yank_out_ar_bits_burst : i2, out auto_axi4yank_out_ar_bits_lock : i1, out auto_axi4yank_out_ar_bits_cache : i4, out auto_axi4yank_out_ar_bits_prot : i3, out auto_axi4yank_out_ar_bits_qos : i4, out auto_axi4yank_out_r_ready : i1, in %auto_axi4yank_out_r_valid : i1, in %auto_axi4yank_out_r_bits_id : i4, in %auto_axi4yank_out_r_bits_data : i64, in %auto_axi4yank_out_r_bits_resp : i2, in %auto_axi4yank_out_r_bits_last : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i4, in %auto_tl_in_a_bits_address : i32, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i4, out auto_tl_in_d_bits_denied : i1, out auto_tl_in_d_bits_data : i64, out auto_tl_in_d_bits_corrupt : i1, in %auto_tl_out_a_ready : i1, out auto_tl_out_a_valid : i1, out auto_tl_out_a_bits_opcode : i3, out auto_tl_out_a_bits_param : i3, out auto_tl_out_a_bits_size : i3, out auto_tl_out_a_bits_source : i4, out auto_tl_out_a_bits_address : i32, out auto_tl_out_a_bits_mask : i8, out auto_tl_out_a_bits_data : i64, out auto_tl_out_d_ready : i1, in %auto_tl_out_d_valid : i1, in %auto_tl_out_d_bits_opcode : i3, in %auto_tl_out_d_bits_size : i3, in %auto_tl_out_d_bits_source : i4, in %auto_tl_out_d_bits_denied : i1, in %auto_tl_out_d_bits_data : i64, in %auto_tl_out_d_bits_corrupt : i1) {
    %false = hw.constant false
    %axi4yank.auto_in_aw_ready, %axi4yank.auto_in_w_ready, %axi4yank.auto_in_b_valid, %axi4yank.auto_in_b_bits_id, %axi4yank.auto_in_b_bits_resp, %axi4yank.auto_in_b_bits_echo_tl_state_size, %axi4yank.auto_in_b_bits_echo_tl_state_source, %axi4yank.auto_in_ar_ready, %axi4yank.auto_in_r_valid, %axi4yank.auto_in_r_bits_id, %axi4yank.auto_in_r_bits_data, %axi4yank.auto_in_r_bits_resp, %axi4yank.auto_in_r_bits_echo_tl_state_size, %axi4yank.auto_in_r_bits_echo_tl_state_source, %axi4yank.auto_in_r_bits_last, %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready = hw.instance "axi4yank" @AXI4UserYanker_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4index.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4index.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4index.auto_out_aw_bits_addr: i32, auto_in_aw_bits_len: %axi4index.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4index.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4index.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4index.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4index.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4index.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4index.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4index.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4index.auto_out_aw_bits_echo_tl_state_source: i4, auto_in_w_valid: %axi4index.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4index.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4index.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4index.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4index.auto_out_b_ready: i1, auto_in_ar_valid: %axi4index.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4index.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4index.auto_out_ar_bits_addr: i32, auto_in_ar_bits_len: %axi4index.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4index.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4index.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4index.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4index.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4index.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4index.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4index.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4index.auto_out_ar_bits_echo_tl_state_source: i4, auto_in_r_ready: %axi4index.auto_out_r_ready: i1, auto_out_aw_ready: %auto_axi4yank_out_aw_ready: i1, auto_out_w_ready: %auto_axi4yank_out_w_ready: i1, auto_out_b_valid: %auto_axi4yank_out_b_valid: i1, auto_out_b_bits_id: %auto_axi4yank_out_b_bits_id: i4, auto_out_b_bits_resp: %auto_axi4yank_out_b_bits_resp: i2, auto_out_ar_ready: %auto_axi4yank_out_ar_ready: i1, auto_out_r_valid: %auto_axi4yank_out_r_valid: i1, auto_out_r_bits_id: %auto_axi4yank_out_r_bits_id: i4, auto_out_r_bits_data: %auto_axi4yank_out_r_bits_data: i64, auto_out_r_bits_resp: %auto_axi4yank_out_r_bits_resp: i2, auto_out_r_bits_last: %auto_axi4yank_out_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i4, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i4, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4yank.auto_in_r_valid"}
    %axi4index.auto_in_aw_ready, %axi4index.auto_in_w_ready, %axi4index.auto_in_b_valid, %axi4index.auto_in_b_bits_id, %axi4index.auto_in_b_bits_resp, %axi4index.auto_in_b_bits_echo_tl_state_size, %axi4index.auto_in_b_bits_echo_tl_state_source, %axi4index.auto_in_ar_ready, %axi4index.auto_in_r_valid, %axi4index.auto_in_r_bits_id, %axi4index.auto_in_r_bits_data, %axi4index.auto_in_r_bits_resp, %axi4index.auto_in_r_bits_echo_tl_state_size, %axi4index.auto_in_r_bits_echo_tl_state_source, %axi4index.auto_in_r_bits_last, %axi4index.auto_out_aw_valid, %axi4index.auto_out_aw_bits_id, %axi4index.auto_out_aw_bits_addr, %axi4index.auto_out_aw_bits_len, %axi4index.auto_out_aw_bits_size, %axi4index.auto_out_aw_bits_burst, %axi4index.auto_out_aw_bits_lock, %axi4index.auto_out_aw_bits_cache, %axi4index.auto_out_aw_bits_prot, %axi4index.auto_out_aw_bits_qos, %axi4index.auto_out_aw_bits_echo_tl_state_size, %axi4index.auto_out_aw_bits_echo_tl_state_source, %axi4index.auto_out_w_valid, %axi4index.auto_out_w_bits_data, %axi4index.auto_out_w_bits_strb, %axi4index.auto_out_w_bits_last, %axi4index.auto_out_b_ready, %axi4index.auto_out_ar_valid, %axi4index.auto_out_ar_bits_id, %axi4index.auto_out_ar_bits_addr, %axi4index.auto_out_ar_bits_len, %axi4index.auto_out_ar_bits_size, %axi4index.auto_out_ar_bits_burst, %axi4index.auto_out_ar_bits_lock, %axi4index.auto_out_ar_bits_cache, %axi4index.auto_out_ar_bits_prot, %axi4index.auto_out_ar_bits_qos, %axi4index.auto_out_ar_bits_echo_tl_state_size, %axi4index.auto_out_ar_bits_echo_tl_state_source, %axi4index.auto_out_r_ready = hw.instance "axi4index" @AXI4IdIndexer_1(auto_in_aw_valid: %tl2axi4.auto_out_aw_valid: i1, auto_in_aw_bits_id: %tl2axi4.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %tl2axi4.auto_out_aw_bits_addr: i32, auto_in_aw_bits_len: %tl2axi4.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %tl2axi4.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %tl2axi4.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %tl2axi4.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %tl2axi4.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %tl2axi4.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %tl2axi4.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %tl2axi4.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %tl2axi4.auto_out_aw_bits_echo_tl_state_source: i4, auto_in_w_valid: %tl2axi4.auto_out_w_valid: i1, auto_in_w_bits_data: %tl2axi4.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %tl2axi4.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %tl2axi4.auto_out_w_bits_last: i1, auto_in_b_ready: %tl2axi4.auto_out_b_ready: i1, auto_in_ar_valid: %tl2axi4.auto_out_ar_valid: i1, auto_in_ar_bits_id: %tl2axi4.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %tl2axi4.auto_out_ar_bits_addr: i32, auto_in_ar_bits_len: %tl2axi4.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %tl2axi4.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %tl2axi4.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %tl2axi4.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %tl2axi4.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %tl2axi4.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %tl2axi4.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %tl2axi4.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %tl2axi4.auto_out_ar_bits_echo_tl_state_source: i4, auto_in_r_ready: %tl2axi4.auto_out_r_ready: i1, auto_out_aw_ready: %axi4yank.auto_in_aw_ready: i1, auto_out_w_ready: %axi4yank.auto_in_w_ready: i1, auto_out_b_valid: %axi4yank.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4yank.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4yank.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4yank.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4yank.auto_in_b_bits_echo_tl_state_source: i4, auto_out_ar_ready: %axi4yank.auto_in_ar_ready: i1, auto_out_r_valid: %axi4yank.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4yank.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4yank.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4yank.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4yank.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4yank.auto_in_r_bits_echo_tl_state_source: i4, auto_out_r_bits_last: %axi4yank.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i4, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i4, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i4, auto_out_r_ready: i1) {sv.namehint = "tl2axi4.auto_out_r_valid"}
    %tl2axi4.auto_in_a_ready, %tl2axi4.auto_in_d_valid, %tl2axi4.auto_in_d_bits_opcode, %tl2axi4.auto_in_d_bits_size, %tl2axi4.auto_in_d_bits_source, %tl2axi4.auto_in_d_bits_denied, %tl2axi4.auto_in_d_bits_data, %tl2axi4.auto_in_d_bits_corrupt, %tl2axi4.auto_out_aw_valid, %tl2axi4.auto_out_aw_bits_id, %tl2axi4.auto_out_aw_bits_addr, %tl2axi4.auto_out_aw_bits_len, %tl2axi4.auto_out_aw_bits_size, %tl2axi4.auto_out_aw_bits_burst, %tl2axi4.auto_out_aw_bits_lock, %tl2axi4.auto_out_aw_bits_cache, %tl2axi4.auto_out_aw_bits_prot, %tl2axi4.auto_out_aw_bits_qos, %tl2axi4.auto_out_aw_bits_echo_tl_state_size, %tl2axi4.auto_out_aw_bits_echo_tl_state_source, %tl2axi4.auto_out_w_valid, %tl2axi4.auto_out_w_bits_data, %tl2axi4.auto_out_w_bits_strb, %tl2axi4.auto_out_w_bits_last, %tl2axi4.auto_out_b_ready, %tl2axi4.auto_out_ar_valid, %tl2axi4.auto_out_ar_bits_id, %tl2axi4.auto_out_ar_bits_addr, %tl2axi4.auto_out_ar_bits_len, %tl2axi4.auto_out_ar_bits_size, %tl2axi4.auto_out_ar_bits_burst, %tl2axi4.auto_out_ar_bits_lock, %tl2axi4.auto_out_ar_bits_cache, %tl2axi4.auto_out_ar_bits_prot, %tl2axi4.auto_out_ar_bits_qos, %tl2axi4.auto_out_ar_bits_echo_tl_state_size, %tl2axi4.auto_out_ar_bits_echo_tl_state_source, %tl2axi4.auto_out_r_ready = hw.instance "tl2axi4" @TLToAXI4_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %widget.auto_out_a_valid: i1, auto_in_a_bits_opcode: %widget.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %widget.auto_out_a_bits_param: i3, auto_in_a_bits_size: %widget.auto_out_a_bits_size: i3, auto_in_a_bits_source: %widget.auto_out_a_bits_source: i4, auto_in_a_bits_address: %widget.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %widget.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %widget.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %widget.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %widget.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %widget.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %widget.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_mask: %widget.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %widget.auto_out_a_bits_data: i64, auto_in_d_ready: %widget.auto_out_d_ready: i1, auto_out_aw_ready: %axi4index.auto_in_aw_ready: i1, auto_out_w_ready: %axi4index.auto_in_w_ready: i1, auto_out_b_valid: %axi4index.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4index.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4index.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4index.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4index.auto_in_b_bits_echo_tl_state_source: i4, auto_out_ar_ready: %axi4index.auto_in_ar_ready: i1, auto_out_r_valid: %axi4index.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4index.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4index.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4index.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4index.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4index.auto_in_r_bits_echo_tl_state_source: i4, auto_out_r_bits_last: %axi4index.auto_in_r_bits_last: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i4, auto_out_r_ready: i1) {sv.namehint = "widget.auto_out_d_valid"}
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_6(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i3, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i4, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %false: i1, auto_in_a_bits_user_amba_prot_modifiable: %false: i1, auto_in_a_bits_user_amba_prot_readalloc: %false: i1, auto_in_a_bits_user_amba_prot_writealloc: %false: i1, auto_in_a_bits_user_amba_prot_privileged: %false: i1, auto_in_a_bits_user_amba_prot_secure: %false: i1, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_out_a_ready: %tl2axi4.auto_in_a_ready: i1, auto_out_d_valid: %tl2axi4.auto_in_d_valid: i1, auto_out_d_bits_opcode: %tl2axi4.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %tl2axi4.auto_in_d_bits_size: i3, auto_out_d_bits_source: %tl2axi4.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %tl2axi4.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %tl2axi4.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %tl2axi4.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "widget.auto_in_d_valid"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready, %auto_tl_out_a_ready, %auto_tl_out_d_valid, %auto_tl_out_d_bits_opcode, %auto_tl_out_d_bits_size, %auto_tl_out_d_bits_source, %auto_tl_out_d_bits_denied, %auto_tl_out_d_bits_data, %auto_tl_out_d_bits_corrupt, %auto_tl_in_a_valid, %auto_tl_in_a_bits_opcode, %auto_tl_in_a_bits_param, %auto_tl_in_a_bits_size, %auto_tl_in_a_bits_source, %auto_tl_in_a_bits_address, %auto_tl_in_a_bits_mask, %auto_tl_in_a_bits_data, %auto_tl_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i8, i64, i1
  }
  hw.module private @MemoryBus(in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr : i32, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst : i2, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data : i64, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp : i2, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr : i32, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst : i2, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data : i64, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp : i2, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last : i1, in %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock : !seq.clock, in %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset : i1, out auto_bus_xing_in_a_ready : i1, in %auto_bus_xing_in_a_valid : i1, in %auto_bus_xing_in_a_bits_opcode : i3, in %auto_bus_xing_in_a_bits_param : i3, in %auto_bus_xing_in_a_bits_size : i3, in %auto_bus_xing_in_a_bits_source : i4, in %auto_bus_xing_in_a_bits_address : i32, in %auto_bus_xing_in_a_bits_mask : i8, in %auto_bus_xing_in_a_bits_data : i64, in %auto_bus_xing_in_d_ready : i1, out auto_bus_xing_in_d_valid : i1, out auto_bus_xing_in_d_bits_opcode : i3, out auto_bus_xing_in_d_bits_size : i3, out auto_bus_xing_in_d_bits_source : i4, out auto_bus_xing_in_d_bits_denied : i1, out auto_bus_xing_in_d_bits_data : i64, out auto_bus_xing_in_d_bits_corrupt : i1) {
    %false = hw.constant false
    %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_clock, %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_reset = hw.instance "subsystem_mbus_clock_groups" @ClockGroupAggregator_1(auto_in_member_subsystem_pbus_0_clock: %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock: !seq.clock, auto_in_member_subsystem_pbus_0_reset: %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset: i1) -> (auto_out_member_subsystem_pbus_0_clock: !seq.clock, auto_out_member_subsystem_pbus_0_reset: i1) {sv.namehint = "auto_out_member_subsystem_mbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_clock, %fixedClockNode.auto_out_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_1(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockSinkNodeIn_reset"}
    %subsystem_mbus_xbar.auto_in_a_ready, %subsystem_mbus_xbar.auto_in_d_valid, %subsystem_mbus_xbar.auto_in_d_bits_opcode, %subsystem_mbus_xbar.auto_in_d_bits_size, %subsystem_mbus_xbar.auto_in_d_bits_source, %subsystem_mbus_xbar.auto_in_d_bits_denied, %subsystem_mbus_xbar.auto_in_d_bits_data, %subsystem_mbus_xbar.auto_in_d_bits_corrupt, %subsystem_mbus_xbar.auto_out_a_valid, %subsystem_mbus_xbar.auto_out_a_bits_opcode, %subsystem_mbus_xbar.auto_out_a_bits_param, %subsystem_mbus_xbar.auto_out_a_bits_size, %subsystem_mbus_xbar.auto_out_a_bits_source, %subsystem_mbus_xbar.auto_out_a_bits_address, %subsystem_mbus_xbar.auto_out_a_bits_mask, %subsystem_mbus_xbar.auto_out_a_bits_data, %subsystem_mbus_xbar.auto_out_d_ready = hw.instance "subsystem_mbus_xbar" @TLXbar_6(auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i3, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i4, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_out_a_ready: %picker.auto_in_a_ready: i1, auto_out_d_valid: %picker.auto_in_d_valid: i1, auto_out_d_bits_opcode: %picker.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %picker.auto_in_d_bits_size: i3, auto_out_d_bits_source: %picker.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %picker.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %picker.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %picker.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "picker.auto_in_d_ready"}
    %fixer.auto_in_a_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_d_ready = hw.instance "fixer" @TLFIFOFixer_3(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i3, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i4, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_d_ready: %buffer.auto_out_d_ready: i1, auto_out_a_ready: %subsystem_mbus_xbar.auto_in_a_ready: i1, auto_out_d_valid: %subsystem_mbus_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %subsystem_mbus_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %subsystem_mbus_xbar.auto_in_d_bits_size: i3, auto_out_d_bits_source: %subsystem_mbus_xbar.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %subsystem_mbus_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %subsystem_mbus_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %subsystem_mbus_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "fixer.auto_in_d_valid"}
    %picker.auto_in_a_ready, %picker.auto_in_d_valid, %picker.auto_in_d_bits_opcode, %picker.auto_in_d_bits_size, %picker.auto_in_d_bits_source, %picker.auto_in_d_bits_denied, %picker.auto_in_d_bits_data, %picker.auto_in_d_bits_corrupt, %picker.auto_out_a_valid, %picker.auto_out_a_bits_opcode, %picker.auto_out_a_bits_param, %picker.auto_out_a_bits_size, %picker.auto_out_a_bits_source, %picker.auto_out_a_bits_address, %picker.auto_out_a_bits_user_amba_prot_bufferable, %picker.auto_out_a_bits_user_amba_prot_modifiable, %picker.auto_out_a_bits_user_amba_prot_readalloc, %picker.auto_out_a_bits_user_amba_prot_writealloc, %picker.auto_out_a_bits_user_amba_prot_privileged, %picker.auto_out_a_bits_user_amba_prot_secure, %picker.auto_out_a_bits_mask, %picker.auto_out_a_bits_data, %picker.auto_out_d_ready = hw.instance "picker" @ProbePicker(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %subsystem_mbus_xbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %subsystem_mbus_xbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %subsystem_mbus_xbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %subsystem_mbus_xbar.auto_out_a_bits_size: i3, auto_in_a_bits_source: %subsystem_mbus_xbar.auto_out_a_bits_source: i4, auto_in_a_bits_address: %subsystem_mbus_xbar.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %false: i1, auto_in_a_bits_user_amba_prot_modifiable: %false: i1, auto_in_a_bits_user_amba_prot_readalloc: %false: i1, auto_in_a_bits_user_amba_prot_writealloc: %false: i1, auto_in_a_bits_user_amba_prot_privileged: %false: i1, auto_in_a_bits_user_amba_prot_secure: %false: i1, auto_in_a_bits_mask: %subsystem_mbus_xbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %subsystem_mbus_xbar.auto_out_a_bits_data: i64, auto_in_d_ready: %subsystem_mbus_xbar.auto_out_d_ready: i1, auto_out_a_ready: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_a_ready: i1, auto_out_d_valid: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid: i1, auto_out_d_bits_opcode: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_opcode: i3, auto_out_d_bits_size: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_size: i3, auto_out_d_bits_source: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_source: i4, auto_out_d_bits_denied: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_denied: i1, auto_out_d_bits_data: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_data: i64, auto_out_d_bits_corrupt: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "picker.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_6(auto_in_a_valid: %auto_bus_xing_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bus_xing_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bus_xing_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bus_xing_in_a_bits_size: i3, auto_in_a_bits_source: %auto_bus_xing_in_a_bits_source: i4, auto_in_a_bits_address: %auto_bus_xing_in_a_bits_address: i32, auto_in_a_bits_mask: %auto_bus_xing_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_bus_xing_in_a_bits_data: i64, auto_in_d_ready: %auto_bus_xing_in_d_ready: i1, auto_out_a_ready: %fixer.auto_in_a_ready: i1, auto_out_d_valid: %fixer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %fixer.auto_in_d_bits_size: i3, auto_out_d_bits_source: %fixer.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "bus_xingIn_d_valid"}
    %xbar.auto_in_a_ready, %xbar.auto_in_d_valid, %xbar.auto_in_d_bits_opcode, %xbar.auto_in_d_bits_size, %xbar.auto_in_d_bits_source, %xbar.auto_in_d_bits_denied, %xbar.auto_in_d_bits_data, %xbar.auto_in_d_bits_corrupt, %xbar.auto_out_a_valid, %xbar.auto_out_a_bits_opcode, %xbar.auto_out_a_bits_param, %xbar.auto_out_a_bits_size, %xbar.auto_out_a_bits_source, %xbar.auto_out_a_bits_address, %xbar.auto_out_a_bits_mask, %xbar.auto_out_a_bits_data, %xbar.auto_out_d_ready = hw.instance "xbar" @TLXbar_6(auto_in_a_valid: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_valid: i1, auto_in_a_bits_opcode: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_opcode: i3, auto_in_a_bits_param: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_param: i3, auto_in_a_bits_size: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_size: i3, auto_in_a_bits_source: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_source: i4, auto_in_a_bits_address: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_address: i32, auto_in_a_bits_mask: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_mask: i8, auto_in_a_bits_data: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_data: i64, auto_in_d_ready: %coupler_to_memory_controller_port_named_axi4.auto_tl_out_d_ready: i1, auto_out_a_ready: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_a_ready: i1, auto_out_d_valid: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_valid: i1, auto_out_d_bits_opcode: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_opcode: i3, auto_out_d_bits_size: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_size: i3, auto_out_d_bits_source: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_source: i4, auto_out_d_bits_denied: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_denied: i1, auto_out_d_bits_data: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_data: i64, auto_out_d_bits_corrupt: %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "xbar.auto_in_d_valid"}
    %coupler_to_memory_controller_port_named_axi4.auto_widget_in_a_ready, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_valid, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_opcode, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_source, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_denied, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_widget_in_d_bits_corrupt, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_strb, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_last, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_b_ready, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_r_ready, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_a_ready, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_opcode, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_source, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_denied, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_corrupt, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_valid, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_opcode, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_param, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_source, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_address, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_mask, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_a_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_tl_out_d_ready = hw.instance "coupler_to_memory_controller_port_named_axi4" @TLInterconnectCoupler_11(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_widget_in_a_valid: %xbar.auto_out_a_valid: i1, auto_widget_in_a_bits_opcode: %xbar.auto_out_a_bits_opcode: i3, auto_widget_in_a_bits_param: %xbar.auto_out_a_bits_param: i3, auto_widget_in_a_bits_size: %xbar.auto_out_a_bits_size: i3, auto_widget_in_a_bits_source: %xbar.auto_out_a_bits_source: i4, auto_widget_in_a_bits_address: %xbar.auto_out_a_bits_address: i32, auto_widget_in_a_bits_mask: %xbar.auto_out_a_bits_mask: i8, auto_widget_in_a_bits_data: %xbar.auto_out_a_bits_data: i64, auto_widget_in_d_ready: %xbar.auto_out_d_ready: i1, auto_axi4yank_out_aw_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready: i1, auto_axi4yank_out_w_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready: i1, auto_axi4yank_out_b_valid: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid: i1, auto_axi4yank_out_b_bits_id: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id: i4, auto_axi4yank_out_b_bits_resp: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp: i2, auto_axi4yank_out_ar_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready: i1, auto_axi4yank_out_r_valid: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid: i1, auto_axi4yank_out_r_bits_id: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id: i4, auto_axi4yank_out_r_bits_data: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data: i64, auto_axi4yank_out_r_bits_resp: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp: i2, auto_axi4yank_out_r_bits_last: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last: i1, auto_tl_in_a_valid: %picker.auto_out_a_valid: i1, auto_tl_in_a_bits_opcode: %picker.auto_out_a_bits_opcode: i3, auto_tl_in_a_bits_param: %picker.auto_out_a_bits_param: i3, auto_tl_in_a_bits_size: %picker.auto_out_a_bits_size: i3, auto_tl_in_a_bits_source: %picker.auto_out_a_bits_source: i4, auto_tl_in_a_bits_address: %picker.auto_out_a_bits_address: i32, auto_tl_in_a_bits_mask: %picker.auto_out_a_bits_mask: i8, auto_tl_in_a_bits_data: %picker.auto_out_a_bits_data: i64, auto_tl_in_d_ready: %picker.auto_out_d_ready: i1, auto_tl_out_a_ready: %xbar.auto_in_a_ready: i1, auto_tl_out_d_valid: %xbar.auto_in_d_valid: i1, auto_tl_out_d_bits_opcode: %xbar.auto_in_d_bits_opcode: i3, auto_tl_out_d_bits_size: %xbar.auto_in_d_bits_size: i3, auto_tl_out_d_bits_source: %xbar.auto_in_d_bits_source: i4, auto_tl_out_d_bits_denied: %xbar.auto_in_d_bits_denied: i1, auto_tl_out_d_bits_data: %xbar.auto_in_d_bits_data: i64, auto_tl_out_d_bits_corrupt: %xbar.auto_in_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_size: i3, auto_widget_in_d_bits_source: i4, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_axi4yank_out_aw_valid: i1, auto_axi4yank_out_aw_bits_id: i4, auto_axi4yank_out_aw_bits_addr: i32, auto_axi4yank_out_aw_bits_len: i8, auto_axi4yank_out_aw_bits_size: i3, auto_axi4yank_out_aw_bits_burst: i2, auto_axi4yank_out_aw_bits_lock: i1, auto_axi4yank_out_aw_bits_cache: i4, auto_axi4yank_out_aw_bits_prot: i3, auto_axi4yank_out_aw_bits_qos: i4, auto_axi4yank_out_w_valid: i1, auto_axi4yank_out_w_bits_data: i64, auto_axi4yank_out_w_bits_strb: i8, auto_axi4yank_out_w_bits_last: i1, auto_axi4yank_out_b_ready: i1, auto_axi4yank_out_ar_valid: i1, auto_axi4yank_out_ar_bits_id: i4, auto_axi4yank_out_ar_bits_addr: i32, auto_axi4yank_out_ar_bits_len: i8, auto_axi4yank_out_ar_bits_size: i3, auto_axi4yank_out_ar_bits_burst: i2, auto_axi4yank_out_ar_bits_lock: i1, auto_axi4yank_out_ar_bits_cache: i4, auto_axi4yank_out_ar_bits_prot: i3, auto_axi4yank_out_ar_bits_qos: i4, auto_axi4yank_out_r_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i4, auto_tl_in_d_bits_denied: i1, auto_tl_in_d_bits_data: i64, auto_tl_in_d_bits_corrupt: i1, auto_tl_out_a_valid: i1, auto_tl_out_a_bits_opcode: i3, auto_tl_out_a_bits_param: i3, auto_tl_out_a_bits_size: i3, auto_tl_out_a_bits_source: i4, auto_tl_out_a_bits_address: i32, auto_tl_out_a_bits_mask: i8, auto_tl_out_a_bits_data: i64, auto_tl_out_d_ready: i1) {sv.namehint = "coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid"}
    hw.output %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_strb, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_last, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_b_ready, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_r_ready, %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt : i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i3, i4, i1, i64, i1
  }
  hw.module private @TLMonitor_16(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_param : i2, in %io_in_b_bits_address : i32, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i3, in %io_in_c_bits_source : i2, in %io_in_c_bits_address : i32, in %io_in_c_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i2 = hw.constant -1 : i2
    %c-8_i4 = hw.constant -8 : i4
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %c-2_i3 = hw.constant -2 : i3
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i4 = hw.constant 0 : i4
    %c0_i12 = hw.constant 0 : i12
    %c3_i3 = hw.constant 3 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.or bin %3, %4, %5 {sv.namehint = "source_ok"} : i1
    %7 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %8 = comb.shl bin %c63_i13, %7 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %9 = comb.extract %8 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %10 = comb.xor bin %9, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %11 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %12 = comb.and bin %11, %10 : i6
    %13 = comb.icmp bin eq %12, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %14 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %15 = comb.concat %c0_i2, %14 : i2, i2
    %16 = comb.shl bin %c1_i4, %15 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %17 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %18 = comb.extract %16 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %19 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_eq"} : i1
    %21 = comb.and bin %18, %20 {sv.namehint = "_mask_acc_T"} : i1
    %22 = comb.or bin %17, %21 {sv.namehint = "mask_acc"} : i1
    %23 = comb.and bin %18, %19 {sv.namehint = "_mask_acc_T_1"} : i1
    %24 = comb.or bin %17, %23 {sv.namehint = "mask_acc_1"} : i1
    %25 = comb.extract %16 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %26 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %27 = comb.xor bin %26, %true {sv.namehint = "mask_nbit_1"} : i1
    %28 = comb.and bin %20, %27 {sv.namehint = "mask_eq_2"} : i1
    %29 = comb.and bin %25, %28 {sv.namehint = "_mask_acc_T_2"} : i1
    %30 = comb.or bin %22, %29 {sv.namehint = "mask_acc_2"} : i1
    %31 = comb.and bin %20, %26 {sv.namehint = "mask_eq_3"} : i1
    %32 = comb.and bin %25, %31 {sv.namehint = "_mask_acc_T_3"} : i1
    %33 = comb.or bin %22, %32 {sv.namehint = "mask_acc_3"} : i1
    %34 = comb.and bin %19, %27 {sv.namehint = "mask_eq_4"} : i1
    %35 = comb.and bin %25, %34 {sv.namehint = "_mask_acc_T_4"} : i1
    %36 = comb.or bin %24, %35 {sv.namehint = "mask_acc_4"} : i1
    %37 = comb.and bin %19, %26 {sv.namehint = "mask_eq_5"} : i1
    %38 = comb.and bin %25, %37 {sv.namehint = "_mask_acc_T_5"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_acc_5"} : i1
    %40 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %41 = comb.xor bin %40, %true {sv.namehint = "mask_nbit_2"} : i1
    %42 = comb.and bin %28, %41 {sv.namehint = "mask_eq_6"} : i1
    %43 = comb.or bin %30, %42 {sv.namehint = "mask_acc_6"} : i1
    %44 = comb.and bin %28, %40 {sv.namehint = "mask_eq_7"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_acc_7"} : i1
    %46 = comb.and bin %31, %41 {sv.namehint = "mask_eq_8"} : i1
    %47 = comb.or bin %33, %46 {sv.namehint = "mask_acc_8"} : i1
    %48 = comb.and bin %31, %40 {sv.namehint = "mask_eq_9"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_acc_9"} : i1
    %50 = comb.and bin %34, %41 {sv.namehint = "mask_eq_10"} : i1
    %51 = comb.or bin %36, %50 {sv.namehint = "mask_acc_10"} : i1
    %52 = comb.and bin %34, %40 {sv.namehint = "mask_eq_11"} : i1
    %53 = comb.or bin %36, %52 {sv.namehint = "mask_acc_11"} : i1
    %54 = comb.and bin %37, %41 {sv.namehint = "mask_eq_12"} : i1
    %55 = comb.or bin %39, %54 {sv.namehint = "mask_acc_12"} : i1
    %56 = comb.and bin %37, %40 {sv.namehint = "mask_eq_13"} : i1
    %57 = comb.or bin %39, %56 {sv.namehint = "mask_acc_13"} : i1
    %58 = comb.concat %57, %55, %53, %51, %49, %47, %45, %43 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %60 = comb.or bin %3, %4, %5 : i1
    %61 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %62 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %63 = comb.icmp eq %62, %c-8_i4 : i4
    %64 = comb.and bin %61, %63 : i1
    %65 = comb.and bin %60, %64 : i1
    %66 = comb.xor bin %reset, %true : i1
    %67 = comb.and bin %io_in_a_valid, %59, %66 : i1
    %68 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %69 = comb.and bin %3, %68, %63 : i1
    %70 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %71 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %72 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %74 = comb.and bin %io_in_a_valid, %73, %66 : i1
    %75 = comb.and bin %3, %68, %63 : i1
    %76 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %77 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %78 = comb.and bin %io_in_a_valid, %77, %66 : i1
    %79 = comb.xor bin %76, %true : i1
    %80 = comb.icmp bin eq %io_in_a_bits_mask, %58 : i8
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %66 : i1
    %83 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %84 = comb.and bin %io_in_a_valid, %83, %66 : i1
    %85 = comb.xor bin %58, %c-1_i8 : i8
    %86 = comb.and bin %io_in_a_bits_mask, %85 : i8
    %87 = comb.icmp bin eq %86, %c0_i8 : i8
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %66 : i1
    %90 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %91 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %92 = comb.and bin %io_in_a_valid, %91, %66 : i1
    %93 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %96 = comb.and bin %io_in_a_valid, %95, %66 : i1
    %97 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %98 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %99 = comb.and bin %io_in_d_valid, %66 : i1
    %100 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %101 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %102 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %103 = comb.or bin %100, %101, %102 {sv.namehint = "source_ok_1"} : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %66 : i1
    %106 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %107 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %108 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %109 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %110 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %111 = comb.and bin %io_in_d_valid, %110, %66 : i1
    %112 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %113 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %114 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %115 = comb.and bin %io_in_d_valid, %114, %66 : i1
    %116 = comb.or bin %109, %io_in_d_bits_corrupt : i1
    %117 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %118 = comb.and bin %io_in_d_valid, %117, %66 : i1
    %119 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %120 = comb.and bin %io_in_d_valid, %119, %66 : i1
    %121 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %122 = comb.and bin %io_in_d_valid, %121, %66 : i1
    %123 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %124 = comb.icmp ne %123, %c-8_i4 : i4
    %125 = comb.xor bin %124, %true {sv.namehint = "_address_ok_T_4"} : i1
    %126 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i6
    %127 = comb.icmp bin eq %126, %c0_i6 {sv.namehint = "is_aligned_1"} : i6
    %128 = comb.xor bin %124, %true : i1
    %129 = comb.and bin %io_in_b_valid, %66 : i1
    %130 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %131 = comb.icmp bin eq %io_in_c_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_8"} : i2
    %132 = comb.icmp bin eq %io_in_c_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_9"} : i2
    %133 = comb.icmp bin eq %io_in_c_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_10"} : i2
    %134 = comb.or bin %131, %132, %133 {sv.namehint = "source_ok_2"} : i1
    %135 = comb.concat %c0_i10, %io_in_c_bits_size : i10, i3
    %136 = comb.shl bin %c63_i13, %135 {sv.namehint = "_is_aligned_mask_T_7"} : i13
    %137 = comb.extract %136 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i13) -> i6
    %138 = comb.xor bin %137, %c-1_i6 {sv.namehint = "is_aligned_mask_2"} : i6
    %139 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i6
    %140 = comb.and bin %139, %138 : i6
    %141 = comb.icmp bin eq %140, %c0_i6 {sv.namehint = "is_aligned_2"} : i6
    %142 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %143 = comb.icmp ne %142, %c-8_i4 : i4
    %144 = comb.xor bin %143, %true {sv.namehint = "_address_ok_T_9"} : i1
    %145 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %146 = comb.and bin %io_in_c_valid, %145, %66 : i1
    %147 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i3 : i3
    %148 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %149 = comb.icmp bin ne %148, %c-1_i2 : i2
    %150 = comb.xor bin %io_in_c_bits_corrupt, %true : i1
    %151 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %152 = comb.and bin %io_in_c_valid, %151, %66 : i1
    %153 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %154 = comb.or bin %131, %132, %133 : i1
    %155 = comb.icmp bin ne %io_in_c_bits_size, %c-1_i3 : i3
    %156 = comb.xor bin %143, %true : i1
    %157 = comb.and bin %154, %155, %156 : i1
    %158 = comb.and bin %io_in_c_valid, %153, %66 : i1
    %159 = comb.icmp bin eq %io_in_c_bits_size, %c-2_i3 : i3
    %160 = comb.and bin %131, %159, %156 : i1
    %161 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %162 = comb.and bin %io_in_c_valid, %161, %66 : i1
    %163 = comb.and bin %131, %159, %156 : i1
    %164 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %165 = comb.and bin %io_in_c_valid, %164, %66 : i1
    %166 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %167 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %168 = comb.and bin %io_in_c_valid, %167, %66 : i1
    %169 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %170 = comb.and bin %io_in_c_valid, %169, %66 : i1
    %171 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %172 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %173 = comb.extract %172 from 3 : (i13) -> i3
    %174 = comb.xor bin %173, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %175 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %176 = comb.mux bin %175, %c0_i3, %174 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %181 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %177 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %178 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %179 = comb.xor bin %178, %true {sv.namehint = "a_first"} : i1
    %180 = comb.mux bin %178, %177, %176 {sv.namehint = "_a_first_counter_T"} : i3
    %181 = comb.mux bin %171, %180, %a_first_counter : i3
    %opcode = seq.firreg %189 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %190 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %191 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %192 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %193 clock %clock {firrtl.random_init_start = 14 : ui64} : i32
    %182 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %183 = comb.and bin %io_in_a_valid, %178, %66 : i1
    %184 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %185 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %186 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %187 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %188 = comb.and bin %171, %179 : i1
    %189 = comb.mux bin %188, %io_in_a_bits_opcode, %opcode : i3
    %190 = comb.mux bin %188, %io_in_a_bits_param, %param : i3
    %191 = comb.mux bin %188, %io_in_a_bits_size, %size : i3
    %192 = comb.mux bin %188, %io_in_a_bits_source, %source : i2
    %193 = comb.mux bin %188, %io_in_a_bits_address, %address : i32
    %194 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %195 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %196 = comb.shl bin %c63_i13, %195 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %197 = comb.extract %196 from 3 : (i13) -> i3
    %198 = comb.xor bin %197, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %199 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %200 = comb.mux bin %199, %198, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %205 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 46 : ui64} : i3
    %201 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %202 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %203 = comb.xor bin %202, %true {sv.namehint = "d_first"} : i1
    %204 = comb.mux bin %202, %201, %200 {sv.namehint = "_d_first_counter_T"} : i3
    %205 = comb.mux bin %194, %204, %d_first_counter : i3
    %opcode_1 = seq.firreg %214 clock %clock {firrtl.random_init_start = 49 : ui64} : i3
    %param_1 = seq.firreg %215 clock %clock {firrtl.random_init_start = 52 : ui64} : i2
    %size_1 = seq.firreg %216 clock %clock {firrtl.random_init_start = 54 : ui64} : i3
    %source_1 = seq.firreg %217 clock %clock {firrtl.random_init_start = 57 : ui64} : i2
    %sink = seq.firreg %218 clock %clock {firrtl.random_init_start = 59 : ui64} : i2
    %denied = seq.firreg %219 clock %clock {firrtl.random_init_start = 61 : ui64} : i1
    %206 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %207 = comb.and bin %io_in_d_valid, %202, %66 : i1
    %208 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %209 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %210 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %211 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %212 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %213 = comb.and bin %194, %203 : i1
    %214 = comb.mux bin %213, %io_in_d_bits_opcode, %opcode_1 : i3
    %215 = comb.mux bin %213, %io_in_d_bits_param, %param_1 : i2
    %216 = comb.mux bin %213, %io_in_d_bits_size, %size_1 : i3
    %217 = comb.mux bin %213, %io_in_d_bits_source, %source_1 : i2
    %218 = comb.mux bin %213, %io_in_d_bits_sink, %sink : i2
    %219 = comb.mux bin %213, %io_in_d_bits_denied, %denied : i1
    %220 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %225 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 62 : ui64} : i3
    %221 = comb.add %b_first_counter, %c-1_i3 {sv.namehint = "_b_first_counter1_T"} : i3
    %222 = comb.icmp bin ne %b_first_counter, %c0_i3 : i3
    %223 = comb.xor bin %222, %true {sv.namehint = "b_first"} : i1
    %224 = comb.mux bin %222, %221, %c0_i3 {sv.namehint = "_b_first_counter_T"} : i3
    %225 = comb.mux bin %220, %224, %b_first_counter : i3
    %param_2 = seq.firreg %230 clock %clock {firrtl.random_init_start = 68 : ui64} : i2
    %address_1 = seq.firreg %231 clock %clock {firrtl.random_init_start = 75 : ui64} : i32
    %226 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %227 = comb.and bin %io_in_b_valid, %222, %66 : i1
    %228 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %229 = comb.and bin %220, %223 : i1
    %230 = comb.mux bin %229, %io_in_b_bits_param, %param_2 : i2
    %231 = comb.mux bin %229, %io_in_b_bits_address, %address_1 : i32
    %232 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %233 = comb.shl bin %c63_i13, %135 {sv.namehint = "_c_first_beats1_decode_T_1"} : i13
    %234 = comb.extract %233 from 3 : (i13) -> i3
    %235 = comb.xor bin %234, %c-1_i3 {sv.namehint = "_c_first_beats1_decode_T_3"} : i3
    %236 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %237 = comb.mux bin %236, %235, %c0_i3 {sv.namehint = "c_first_beats1"} : i3
    %c_first_counter = seq.firreg %242 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 107 : ui64} : i3
    %238 = comb.add %c_first_counter, %c-1_i3 {sv.namehint = "_c_first_counter1_T"} : i3
    %239 = comb.icmp bin ne %c_first_counter, %c0_i3 : i3
    %240 = comb.xor bin %239, %true {sv.namehint = "c_first"} : i1
    %241 = comb.mux bin %239, %238, %237 {sv.namehint = "_c_first_counter_T"} : i3
    %242 = comb.mux bin %232, %241, %c_first_counter : i3
    %opcode_3 = seq.firreg %250 clock %clock {firrtl.random_init_start = 110 : ui64} : i3
    %param_3 = seq.firreg %251 clock %clock {firrtl.random_init_start = 113 : ui64} : i3
    %size_3 = seq.firreg %252 clock %clock {firrtl.random_init_start = 116 : ui64} : i3
    %source_3 = seq.firreg %253 clock %clock {firrtl.random_init_start = 119 : ui64} : i2
    %address_2 = seq.firreg %254 clock %clock {firrtl.random_init_start = 121 : ui64} : i32
    %243 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %244 = comb.and bin %io_in_c_valid, %239, %66 : i1
    %245 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %246 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i3
    %247 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i2
    %248 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %249 = comb.and bin %232, %240 : i1
    %250 = comb.mux bin %249, %io_in_c_bits_opcode, %opcode_3 : i3
    %251 = comb.mux bin %249, %io_in_c_bits_param, %param_3 : i3
    %252 = comb.mux bin %249, %io_in_c_bits_size, %size_3 : i3
    %253 = comb.mux bin %249, %io_in_c_bits_source, %source_3 : i2
    %254 = comb.mux bin %249, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %353 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 153 : ui64} : i3
    %inflight_opcodes = seq.firreg %356 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 156 : ui64} : i12
    %inflight_sizes = seq.firreg %359 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 168 : ui64} : i12
    %255 = comb.shl bin %c63_i13, %7 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %256 = comb.extract %255 from 3 : (i13) -> i3
    %257 = comb.xor bin %256, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %258 = comb.mux bin %175, %c0_i3, %257 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %262 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 180 : ui64} : i3
    %259 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %260 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %261 = comb.mux bin %260, %258, %259 {sv.namehint = "_a_first_counter_T_1"} : i3
    %262 = comb.mux bin %171, %261, %a_first_counter_1 : i3
    %263 = comb.shl bin %c63_i13, %195 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %264 = comb.extract %263 from 3 : (i13) -> i3
    %265 = comb.xor bin %264, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %266 = comb.mux bin %199, %265, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %270 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 183 : ui64} : i3
    %267 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %268 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %269 = comb.mux bin %268, %266, %267 {sv.namehint = "_d_first_counter_T_1"} : i3
    %270 = comb.mux bin %194, %269, %d_first_counter_1 : i3
    %271 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %272 = comb.shru bin %inflight_opcodes, %271 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %273 = comb.extract %272 from 1 : (i12) -> i3
    %274 = comb.shru bin %inflight_sizes, %271 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %275 = comb.extract %274 from 1 : (i12) -> i3
    %276 = comb.and bin %io_in_a_valid, %260 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %277 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %278 = comb.shl bin %c1_i4, %277 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %279 = comb.extract %278 from 0 : (i4) -> i3
    %280 = comb.mux bin %276, %279, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %281 = comb.and bin %171, %260 : i1
    %282 = comb.shl bin %c1_i4, %277 {sv.namehint = "_a_set_T"} : i4
    %283 = comb.extract %282 from 0 : (i4) -> i3
    %284 = comb.mux bin %281, %283, %c0_i3 {sv.namehint = "a_set"} : i3
    %285 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %286 = comb.mux bin %281, %285, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %287 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %288 = comb.mux bin %281, %287, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %289 = comb.concat %c0_i31, %286 : i31, i4
    %290 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %291 = comb.shl bin %289, %290 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %292 = comb.extract %291 from 0 : (i35) -> i12
    %293 = comb.mux bin %281, %292, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %294 = comb.concat %c0_i31, %288 : i31, i4
    %295 = comb.shl bin %294, %290 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %296 = comb.extract %295 from 0 : (i35) -> i12
    %297 = comb.mux bin %281, %296, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %298 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %299 = comb.shru bin %inflight, %298 : i3
    %300 = comb.extract %299 from 0 : (i3) -> i1
    %301 = comb.xor bin %300, %true : i1
    %302 = comb.and bin %281, %66 : i1
    %303 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %304 = comb.and bin %io_in_d_valid, %268 : i1
    %305 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %306 = comb.and bin %304, %305 : i1
    %307 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %308 = comb.shl bin %c1_i4, %307 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %309 = comb.extract %308 from 0 : (i4) -> i3
    %310 = comb.mux bin %306, %309, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %311 = comb.and bin %194, %268, %305 : i1
    %312 = comb.shl bin %c1_i4, %307 {sv.namehint = "_d_clr_T"} : i4
    %313 = comb.extract %312 from 0 : (i4) -> i3
    %314 = comb.mux bin %311, %313, %c0_i3 {sv.namehint = "d_clr"} : i3
    %315 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %316 = comb.shl bin %c15_i47, %315 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %317 = comb.extract %316 from 0 : (i47) -> i12
    %318 = comb.mux bin %311, %317, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %319 = comb.shl bin %c15_i47, %315 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %320 = comb.extract %319 from 0 : (i47) -> i12
    %321 = comb.mux bin %311, %320, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %322 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %323 = comb.and bin %276, %322 {sv.namehint = "same_cycle_resp"} : i1
    %324 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %325 = comb.shru bin %inflight, %324 : i3
    %326 = comb.extract %325 from 0 : (i3) -> i1
    %327 = comb.or bin %326, %323 : i1
    %328 = comb.and bin %306, %66 : i1
    %329 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %330 = comb.icmp bin eq %io_in_d_bits_opcode, %329 : i3
    %331 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %332 = comb.icmp bin eq %io_in_d_bits_opcode, %331 : i3
    %333 = comb.or bin %330, %332 : i1
    %334 = comb.and bin %306, %323, %66 : i1
    %335 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %336 = comb.xor bin %323, %true : i1
    %337 = hw.array_get %1[%273] : !hw.array<8xi3>, i3
    %338 = comb.icmp bin eq %io_in_d_bits_opcode, %337 : i3
    %339 = hw.array_get %0[%273] : !hw.array<8xi3>, i3
    %340 = comb.icmp bin eq %io_in_d_bits_opcode, %339 : i3
    %341 = comb.or bin %338, %340 : i1
    %342 = comb.and bin %306, %336, %66 : i1
    %343 = comb.icmp bin eq %io_in_d_bits_size, %275 : i3
    %344 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %345 = comb.xor bin %io_in_d_ready, %true : i1
    %346 = comb.or bin %345, %io_in_a_ready : i1
    %347 = comb.and bin %304, %260, %io_in_a_valid, %344, %305, %66 : i1
    %348 = comb.icmp bin ne %280, %310 : i3
    %349 = comb.icmp bin eq %280, %c0_i3 : i3
    %350 = comb.or bin %348, %349 : i1
    %351 = comb.or bin %inflight, %284 {sv.namehint = "_inflight_T"} : i3
    %352 = comb.xor bin %314, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %353 = comb.and bin %351, %352 {sv.namehint = "_inflight_T_2"} : i3
    %354 = comb.or bin %inflight_opcodes, %293 {sv.namehint = "_inflight_opcodes_T"} : i12
    %355 = comb.xor bin %318, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %356 = comb.and bin %354, %355 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %357 = comb.or bin %inflight_sizes, %297 {sv.namehint = "_inflight_sizes_T"} : i12
    %358 = comb.xor bin %321, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %359 = comb.and bin %357, %358 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %366 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 186 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %360 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %361 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %362 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %363 = comb.or bin %360, %361, %362 : i1
    %364 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %365 = comb.or bin %171, %194 : i1
    %366 = comb.mux bin %365, %c0_i32, %364 : i32
    %inflight_1 = seq.firreg %445 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 218 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %448 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 233 : ui64} : i12
    %367 = comb.shl bin %c63_i13, %135 {sv.namehint = "_c_first_beats1_decode_T_5"} : i13
    %368 = comb.extract %367 from 3 : (i13) -> i3
    %369 = comb.xor bin %368, %c-1_i3 {sv.namehint = "_c_first_beats1_decode_T_7"} : i3
    %370 = comb.mux bin %236, %369, %c0_i3 {sv.namehint = "c_first_beats1_1"} : i3
    %c_first_counter_1 = seq.firreg %374 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 245 : ui64} : i3
    %371 = comb.add %c_first_counter_1, %c-1_i3 {sv.namehint = "_c_first_counter1_T_1"} : i3
    %372 = comb.icmp bin eq %c_first_counter_1, %c0_i3 {sv.namehint = "c_first_1"} : i3
    %373 = comb.mux bin %372, %370, %371 {sv.namehint = "_c_first_counter_T_1"} : i3
    %374 = comb.mux bin %232, %373, %c_first_counter_1 : i3
    %375 = comb.shl bin %c63_i13, %195 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %376 = comb.extract %375 from 3 : (i13) -> i3
    %377 = comb.xor bin %376, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %378 = comb.mux bin %199, %377, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %382 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 248 : ui64} : i3
    %379 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %380 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %381 = comb.mux bin %380, %378, %379 {sv.namehint = "_d_first_counter_T_2"} : i3
    %382 = comb.mux bin %194, %381, %d_first_counter_2 : i3
    %383 = comb.shru bin %inflight_sizes_1, %271 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %384 = comb.extract %383 from 1 : (i12) -> i3
    %385 = comb.and bin %io_in_c_valid, %372 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %386 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %387 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %388 = comb.and bin %386, %387 : i1
    %389 = comb.and bin %385, %388 : i1
    %390 = comb.concat %c0_i2, %io_in_c_bits_source : i2, i2
    %391 = comb.shl bin %c1_i4, %390 {sv.namehint = "_c_set_wo_ready_T"} : i4
    %392 = comb.extract %391 from 0 : (i4) -> i3
    %393 = comb.mux bin %389, %392, %c0_i3 {sv.namehint = "c_set_wo_ready"} : i3
    %394 = comb.and bin %232, %372, %388 : i1
    %395 = comb.shl bin %c1_i4, %390 {sv.namehint = "_c_set_T"} : i4
    %396 = comb.extract %395 from 0 : (i4) -> i3
    %397 = comb.mux bin %394, %396, %c0_i3 {sv.namehint = "c_set"} : i3
    %398 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i3, i1
    %399 = comb.mux bin %394, %398, %c0_i4 {sv.namehint = "c_sizes_set_interm"} : i4
    %400 = comb.concat %c0_i31, %399 : i31, i4
    %401 = comb.concat %c0_i31, %io_in_c_bits_source, %c0_i2 : i31, i2, i2
    %402 = comb.shl bin %400, %401 {sv.namehint = "_c_sizes_set_T_1"} : i35
    %403 = comb.extract %402 from 0 : (i35) -> i12
    %404 = comb.mux bin %394, %403, %c0_i12 {sv.namehint = "c_sizes_set"} : i12
    %405 = comb.concat %false, %io_in_c_bits_source : i1, i2
    %406 = comb.shru bin %inflight_1, %405 : i3
    %407 = comb.extract %406 from 0 : (i3) -> i1
    %408 = comb.xor bin %407, %true : i1
    %409 = comb.and bin %394, %66 : i1
    %410 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 {sv.namehint = "_c_probe_ack_T"} : i3
    %411 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 {sv.namehint = "_c_probe_ack_T_1"} : i3
    %412 = comb.or bin %410, %411 {sv.namehint = "c_probe_ack"} : i1
    %413 = comb.and bin %io_in_d_valid, %380 : i1
    %414 = comb.and bin %413, %303 : i1
    %415 = comb.shl bin %c1_i4, %307 {sv.namehint = "_d_clr_wo_ready_T_1"} : i4
    %416 = comb.extract %415 from 0 : (i4) -> i3
    %417 = comb.mux bin %414, %416, %c0_i3 {sv.namehint = "d_clr_wo_ready_1"} : i3
    %418 = comb.and bin %194, %380, %303 : i1
    %419 = comb.shl bin %c1_i4, %307 {sv.namehint = "_d_clr_T_1"} : i4
    %420 = comb.extract %419 from 0 : (i4) -> i3
    %421 = comb.mux bin %418, %420, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %422 = comb.shl bin %c15_i47, %315 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %423 = comb.extract %422 from 0 : (i47) -> i12
    %424 = comb.mux bin %418, %423, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %425 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i2
    %426 = comb.and bin %385, %386, %387, %425 {sv.namehint = "same_cycle_resp_1"} : i1
    %427 = comb.shru bin %inflight_1, %324 : i3
    %428 = comb.extract %427 from 0 : (i3) -> i1
    %429 = comb.or bin %428, %426 : i1
    %430 = comb.and bin %414, %66 : i1
    %431 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i3
    %432 = comb.and bin %414, %426, %66 : i1
    %433 = comb.xor bin %426, %true : i1
    %434 = comb.icmp bin eq %io_in_d_bits_size, %384 : i3
    %435 = comb.and bin %414, %433, %66 : i1
    %436 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i2
    %437 = comb.xor bin %412, %true : i1
    %438 = comb.or bin %345, %io_in_c_ready : i1
    %439 = comb.and bin %413, %372, %io_in_c_valid, %436, %303, %437, %66 : i1
    %440 = comb.icmp bin ne %393, %c0_i3 : i3
    %441 = comb.icmp bin ne %393, %417 : i3
    %442 = comb.and bin %440, %66 : i1
    %443 = comb.or bin %inflight_1, %397 {sv.namehint = "_inflight_T_3"} : i3
    %444 = comb.xor bin %421, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %445 = comb.and bin %443, %444 {sv.namehint = "_inflight_T_5"} : i3
    %446 = comb.or bin %inflight_sizes_1, %404 {sv.namehint = "_inflight_sizes_T_3"} : i12
    %447 = comb.xor bin %424, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %448 = comb.and bin %446, %447 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %455 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 251 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %449 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %450 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %451 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %452 = comb.or bin %449, %450, %451 : i1
    %453 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %454 = comb.or bin %232, %194 : i1
    %455 = comb.mux bin %454, %c0_i32, %453 : i32
    %inflight_2 = seq.firreg %484 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 283 : ui64} : i4
    %456 = comb.shl bin %c63_i13, %195 {sv.namehint = "_d_first_beats1_decode_T_13"} : i13
    %457 = comb.extract %456 from 3 : (i13) -> i3
    %458 = comb.xor bin %457, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_15"} : i3
    %459 = comb.mux bin %199, %458, %c0_i3 {sv.namehint = "d_first_beats1_3"} : i3
    %d_first_counter_3 = seq.firreg %463 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 287 : ui64} : i3
    %460 = comb.add %d_first_counter_3, %c-1_i3 {sv.namehint = "_d_first_counter1_T_3"} : i3
    %461 = comb.icmp bin eq %d_first_counter_3, %c0_i3 {sv.namehint = "d_first_3"} : i3
    %462 = comb.mux bin %461, %459, %460 {sv.namehint = "_d_first_counter_T_3"} : i3
    %463 = comb.mux bin %194, %462, %d_first_counter_3 : i3
    %464 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %465 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %466 = comb.xor bin %465, %true : i1
    %467 = comb.and bin %194, %461, %464, %466 : i1
    %468 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %469 = comb.shl bin %c1_i4, %468 {sv.namehint = "_d_set_T"} : i4
    %470 = comb.mux bin %467, %469, %c0_i4 {sv.namehint = "d_set"} : i4
    %471 = comb.shru bin %inflight_2, %468 : i4
    %472 = comb.extract %471 from 0 : (i4) -> i1
    %473 = comb.xor bin %472, %true : i1
    %474 = comb.and bin %467, %66 : i1
    %475 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %476 = comb.shl bin %c1_i4, %475 {sv.namehint = "_e_clr_T"} : i4
    %477 = comb.mux bin %io_in_e_valid, %476, %c0_i4 {sv.namehint = "e_clr"} : i4
    %478 = comb.or bin %470, %inflight_2 : i4
    %479 = comb.shru bin %478, %475 : i4
    %480 = comb.extract %479 from 0 : (i4) -> i1
    %481 = comb.and bin %io_in_e_valid, %66 : i1
    sv.always posedge %2 {
      sv.if %67 {
        sv.assert %65, immediate label "assert__assert_2"
      }
      sv.if %67 {
        sv.assert %69, immediate label "assert__assert_3"
      }
      sv.if %67 {
        sv.assert %6, immediate label "assert__assert_4"
      }
      sv.if %67 {
        sv.assert %17, immediate label "assert__assert_5"
      }
      sv.if %67 {
        sv.assert %13, immediate label "assert__assert_6"
      }
      sv.if %67 {
        sv.assert %70, immediate label "assert__assert_7"
      }
      sv.if %67 {
        sv.assert %71, immediate label "assert__assert_8"
      }
      sv.if %67 {
        sv.assert %72, immediate label "assert__assert_9"
      }
      sv.if %74 {
        sv.assert %65, immediate label "assert__assert_10"
      }
      sv.if %74 {
        sv.assert %75, immediate label "assert__assert_11"
      }
      sv.if %74 {
        sv.assert %6, immediate label "assert__assert_12"
      }
      sv.if %74 {
        sv.assert %17, immediate label "assert__assert_13"
      }
      sv.if %74 {
        sv.assert %13, immediate label "assert__assert_14"
      }
      sv.if %74 {
        sv.assert %70, immediate label "assert__assert_15"
      }
      sv.if %74 {
        sv.assert %76, immediate label "assert__assert_16"
      }
      sv.if %74 {
        sv.assert %71, immediate label "assert__assert_17"
      }
      sv.if %74 {
        sv.assert %72, immediate label "assert__assert_18"
      }
      sv.if %78 {
        sv.assert %60, immediate label "assert__assert_19"
      }
      sv.if %78 {
        sv.assert %64, immediate label "assert__assert_20"
      }
      sv.if %78 {
        sv.assert %6, immediate label "assert__assert_21"
      }
      sv.if %78 {
        sv.assert %13, immediate label "assert__assert_22"
      }
      sv.if %78 {
        sv.assert %79, immediate label "assert__assert_23"
      }
      sv.if %78 {
        sv.assert %80, immediate label "assert__assert_24"
      }
      sv.if %78 {
        sv.assert %72, immediate label "assert__assert_25"
      }
      sv.if %82 {
        sv.assert %65, immediate label "assert__assert_26"
      }
      sv.if %82 {
        sv.assert %6, immediate label "assert__assert_27"
      }
      sv.if %82 {
        sv.assert %13, immediate label "assert__assert_28"
      }
      sv.if %82 {
        sv.assert %79, immediate label "assert__assert_29"
      }
      sv.if %82 {
        sv.assert %80, immediate label "assert__assert_30"
      }
      sv.if %84 {
        sv.assert %65, immediate label "assert__assert_31"
      }
      sv.if %84 {
        sv.assert %6, immediate label "assert__assert_32"
      }
      sv.if %84 {
        sv.assert %13, immediate label "assert__assert_33"
      }
      sv.if %84 {
        sv.assert %79, immediate label "assert__assert_34"
      }
      sv.if %84 {
        sv.assert %87, immediate label "assert__assert_35"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %89 {
        sv.assert %6, immediate label "assert__assert_37"
      }
      sv.if %89 {
        sv.assert %13, immediate label "assert__assert_38"
      }
      sv.if %89 {
        sv.assert %90, immediate label "assert__assert_39"
      }
      sv.if %89 {
        sv.assert %80, immediate label "assert__assert_40"
      }
      sv.if %92 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %92 {
        sv.assert %6, immediate label "assert__assert_42"
      }
      sv.if %92 {
        sv.assert %13, immediate label "assert__assert_43"
      }
      sv.if %92 {
        sv.assert %94, immediate label "assert__assert_44"
      }
      sv.if %92 {
        sv.assert %80, immediate label "assert__assert_45"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %96 {
        sv.assert %6, immediate label "assert__assert_47"
      }
      sv.if %96 {
        sv.assert %13, immediate label "assert__assert_48"
      }
      sv.if %96 {
        sv.assert %97, immediate label "assert__assert_49"
      }
      sv.if %96 {
        sv.assert %80, immediate label "assert__assert_50"
      }
      sv.if %96 {
        sv.assert %72, immediate label "assert__assert_51"
      }
      sv.if %99 {
        sv.assert %98, immediate label "assert__assert_52"
      }
      sv.if %105 {
        sv.assert %103, immediate label "assert__assert_53"
      }
      sv.if %105 {
        sv.assert %106, immediate label "assert__assert_54"
      }
      sv.if %105 {
        sv.assert %107, immediate label "assert__assert_55"
      }
      sv.if %105 {
        sv.assert %108, immediate label "assert__assert_56"
      }
      sv.if %105 {
        sv.assert %109, immediate label "assert__assert_57"
      }
      sv.if %111 {
        sv.assert %103, immediate label "assert__assert_58"
      }
      sv.if %111 {
        sv.assert %106, immediate label "assert__assert_60"
      }
      sv.if %111 {
        sv.assert %112, immediate label "assert__assert_61"
      }
      sv.if %111 {
        sv.assert %113, immediate label "assert__assert_62"
      }
      sv.if %111 {
        sv.assert %108, immediate label "assert__assert_63"
      }
      sv.if %115 {
        sv.assert %103, immediate label "assert__assert_65"
      }
      sv.if %115 {
        sv.assert %106, immediate label "assert__assert_67"
      }
      sv.if %115 {
        sv.assert %112, immediate label "assert__assert_68"
      }
      sv.if %115 {
        sv.assert %113, immediate label "assert__assert_69"
      }
      sv.if %115 {
        sv.assert %116, immediate label "assert__assert_70"
      }
      sv.if %118 {
        sv.assert %103, immediate label "assert__assert_72"
      }
      sv.if %118 {
        sv.assert %107, immediate label "assert__assert_73"
      }
      sv.if %118 {
        sv.assert %108, immediate label "assert__assert_74"
      }
      sv.if %120 {
        sv.assert %103, immediate label "assert__assert_76"
      }
      sv.if %120 {
        sv.assert %107, immediate label "assert__assert_77"
      }
      sv.if %120 {
        sv.assert %116, immediate label "assert__assert_78"
      }
      sv.if %122 {
        sv.assert %103, immediate label "assert__assert_80"
      }
      sv.if %122 {
        sv.assert %107, immediate label "assert__assert_81"
      }
      sv.if %122 {
        sv.assert %108, immediate label "assert__assert_82"
      }
      sv.if %129 {
        sv.assert %128, immediate label "assert__assert_86"
      }
      sv.if %129 {
        sv.assert %125, immediate label "assert__assert_87"
      }
      sv.if %129 {
        sv.assert %127, immediate label "assert__assert_89"
      }
      sv.if %129 {
        sv.assert %130, immediate label "assert__assert_90"
      }
      sv.if %146 {
        sv.assert %144, immediate label "assert__assert_132"
      }
      sv.if %146 {
        sv.assert %134, immediate label "assert__assert_133"
      }
      sv.if %146 {
        sv.assert %147, immediate label "assert__assert_134"
      }
      sv.if %146 {
        sv.assert %141, immediate label "assert__assert_135"
      }
      sv.if %146 {
        sv.assert %149, immediate label "assert__assert_136"
      }
      sv.if %146 {
        sv.assert %150, immediate label "assert__assert_137"
      }
      sv.if %152 {
        sv.assert %144, immediate label "assert__assert_138"
      }
      sv.if %152 {
        sv.assert %134, immediate label "assert__assert_139"
      }
      sv.if %152 {
        sv.assert %147, immediate label "assert__assert_140"
      }
      sv.if %152 {
        sv.assert %141, immediate label "assert__assert_141"
      }
      sv.if %152 {
        sv.assert %149, immediate label "assert__assert_142"
      }
      sv.if %158 {
        sv.assert %157, immediate label "assert__assert_143"
      }
      sv.if %158 {
        sv.assert %160, immediate label "assert__assert_144"
      }
      sv.if %158 {
        sv.assert %134, immediate label "assert__assert_145"
      }
      sv.if %158 {
        sv.assert %147, immediate label "assert__assert_146"
      }
      sv.if %158 {
        sv.assert %141, immediate label "assert__assert_147"
      }
      sv.if %158 {
        sv.assert %149, immediate label "assert__assert_148"
      }
      sv.if %158 {
        sv.assert %150, immediate label "assert__assert_149"
      }
      sv.if %162 {
        sv.assert %157, immediate label "assert__assert_150"
      }
      sv.if %162 {
        sv.assert %163, immediate label "assert__assert_151"
      }
      sv.if %162 {
        sv.assert %134, immediate label "assert__assert_152"
      }
      sv.if %162 {
        sv.assert %147, immediate label "assert__assert_153"
      }
      sv.if %162 {
        sv.assert %141, immediate label "assert__assert_154"
      }
      sv.if %162 {
        sv.assert %149, immediate label "assert__assert_155"
      }
      sv.if %165 {
        sv.assert %144, immediate label "assert__assert_156"
      }
      sv.if %165 {
        sv.assert %134, immediate label "assert__assert_157"
      }
      sv.if %165 {
        sv.assert %141, immediate label "assert__assert_158"
      }
      sv.if %165 {
        sv.assert %166, immediate label "assert__assert_159"
      }
      sv.if %165 {
        sv.assert %150, immediate label "assert__assert_160"
      }
      sv.if %168 {
        sv.assert %144, immediate label "assert__assert_161"
      }
      sv.if %168 {
        sv.assert %134, immediate label "assert__assert_162"
      }
      sv.if %168 {
        sv.assert %141, immediate label "assert__assert_163"
      }
      sv.if %168 {
        sv.assert %166, immediate label "assert__assert_164"
      }
      sv.if %170 {
        sv.assert %144, immediate label "assert__assert_165"
      }
      sv.if %170 {
        sv.assert %134, immediate label "assert__assert_166"
      }
      sv.if %170 {
        sv.assert %141, immediate label "assert__assert_167"
      }
      sv.if %170 {
        sv.assert %166, immediate label "assert__assert_168"
      }
      sv.if %170 {
        sv.assert %150, immediate label "assert__assert_169"
      }
      sv.if %183 {
        sv.assert %182, immediate label "assert__assert_171"
      }
      sv.if %183 {
        sv.assert %184, immediate label "assert__assert_172"
      }
      sv.if %183 {
        sv.assert %185, immediate label "assert__assert_173"
      }
      sv.if %183 {
        sv.assert %186, immediate label "assert__assert_174"
      }
      sv.if %183 {
        sv.assert %187, immediate label "assert__assert_175"
      }
      sv.if %207 {
        sv.assert %206, immediate label "assert__assert_176"
      }
      sv.if %207 {
        sv.assert %208, immediate label "assert__assert_177"
      }
      sv.if %207 {
        sv.assert %209, immediate label "assert__assert_178"
      }
      sv.if %207 {
        sv.assert %210, immediate label "assert__assert_179"
      }
      sv.if %207 {
        sv.assert %211, immediate label "assert__assert_180"
      }
      sv.if %207 {
        sv.assert %212, immediate label "assert__assert_181"
      }
      sv.if %227 {
        sv.assert %226, immediate label "assert__assert_183"
      }
      sv.if %227 {
        sv.assert %228, immediate label "assert__assert_186"
      }
      sv.if %244 {
        sv.assert %243, immediate label "assert__assert_187"
      }
      sv.if %244 {
        sv.assert %245, immediate label "assert__assert_188"
      }
      sv.if %244 {
        sv.assert %246, immediate label "assert__assert_189"
      }
      sv.if %244 {
        sv.assert %247, immediate label "assert__assert_190"
      }
      sv.if %244 {
        sv.assert %248, immediate label "assert__assert_191"
      }
      sv.if %302 {
        sv.assert %301, immediate label "assert__assert_192"
      }
      sv.if %328 {
        sv.assert %327, immediate label "assert__assert_193"
      }
      sv.if %334 {
        sv.assert %333, immediate label "assert__assert_194"
      }
      sv.if %334 {
        sv.assert %335, immediate label "assert__assert_195"
      }
      sv.if %342 {
        sv.assert %341, immediate label "assert__assert_196"
      }
      sv.if %342 {
        sv.assert %343, immediate label "assert__assert_197"
      }
      sv.if %347 {
        sv.assert %346, immediate label "assert__assert_198"
      }
      sv.if %66 {
        sv.assert %350, immediate label "assert__assert_199"
      }
      sv.if %66 {
        sv.assert %363, immediate label "assert__assert_200"
      }
      sv.if %409 {
        sv.assert %408, immediate label "assert__assert_201"
      }
      sv.if %430 {
        sv.assert %429, immediate label "assert__assert_202"
      }
      sv.if %432 {
        sv.assert %431, immediate label "assert__assert_203"
      }
      sv.if %435 {
        sv.assert %434, immediate label "assert__assert_204"
      }
      sv.if %439 {
        sv.assert %438, immediate label "assert__assert_205"
      }
      sv.if %442 {
        sv.assert %441, immediate label "assert__assert_206"
      }
      sv.if %66 {
        sv.assert %452, immediate label "assert__assert_207"
      }
      sv.if %474 {
        sv.assert %473, immediate label "assert__assert_208"
      }
      sv.if %481 {
        sv.assert %480, immediate label "assert__assert_209"
      }
    }
    %482 = comb.or bin %inflight_2, %470 {sv.namehint = "_inflight_T_6"} : i4
    %483 = comb.xor bin %477, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %484 = comb.and bin %482, %483 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @BroadcastFilter(out io_request_ready : i1, in %io_request_valid : i1, in %io_request_bits_mshr : i2, in %io_request_bits_address : i32, in %io_request_bits_allocOH : i1, in %io_request_bits_needT : i1, in %io_response_ready : i1, out io_response_valid : i1, out io_response_bits_mshr : i2, out io_response_bits_address : i32, out io_response_bits_allocOH : i1, out io_response_bits_needT : i1) {
    hw.output %io_response_ready, %io_request_valid, %io_request_bits_mshr, %io_request_bits_address, %io_request_bits_allocOH, %io_request_bits_needT : i1, i1, i2, i32, i1, i1
  }
  hw.module private @Queue8_TLBroadcastData(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_mask : i8, out io_deq_bits_data : i64) {
    %c1_i3 = hw.constant 1 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <8 x 72>
    seq.firmem.write_port %ram[%enq_ptr_value] = %1, clock %clock enable %8 : <8 x 72>
    %0 = seq.firmem.read_port %ram[%deq_ptr_value], clock %clock : <8 x 72>
    %1 = comb.concat %io_enq_bits_mask, %io_enq_bits_data : i8, i64
    %2 = comb.extract %0 from 64 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i72) -> i8
    %3 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i72) -> i64
    %enq_ptr_value = seq.firreg %11 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64, sv.namehint = "enq_ptr_value"} : i3
    %deq_ptr_value = seq.firreg %13 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 3 : ui64, sv.namehint = "deq_ptr_value"} : i3
    %maybe_full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %4 = comb.icmp bin eq %enq_ptr_value, %deq_ptr_value {sv.namehint = "ptr_match"} : i3
    %5 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %6 = comb.and bin %4, %5 {sv.namehint = "empty"} : i1
    %7 = comb.and bin %4, %maybe_full {sv.namehint = "full"} : i1
    %8 = comb.and bin %17, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %9 = comb.and bin %io_deq_ready, %16 {sv.namehint = "do_deq"} : i1
    %10 = comb.add bin %enq_ptr_value, %c1_i3 {sv.namehint = "_value_T"} : i3
    %11 = comb.mux bin %8, %10, %enq_ptr_value : i3
    %12 = comb.add bin %deq_ptr_value, %c1_i3 {sv.namehint = "_value_T_2"} : i3
    %13 = comb.mux bin %9, %12, %deq_ptr_value : i3
    %14 = comb.icmp bin eq %8, %9 : i1
    %15 = comb.mux bin %14, %maybe_full, %8 : i1
    %16 = comb.xor bin %6, %true {sv.namehint = "io_deq_valid"} : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %17, %16, %2, %3 : i1, i1, i8, i64
  }
  hw.module private @TLBroadcastTracker(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %25 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %22 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %8 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %13 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %14 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %15 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %address = seq.firreg %17 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %31 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %36, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.xor bin %reset, %true : i1
    %4 = comb.and bin %2, %3 : i1
    %5 = comb.xor %2, %true : i1
    %6 = comb.and %5, %sent_d : i1
    %7 = comb.xor %2, %true : i1
    %8 = comb.and %7, %shared : i1
    %9 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %11 = comb.and bin %9, %10 {sv.namehint = "_got_e_T_2"} : i1
    %12 = comb.mux bin %2, %11, %got_e : i1
    %13 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %14 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %15 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %16 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %17 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %18 = comb.or %2, %count : i1
    %19 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %18 : i1
    %20 = comb.xor bin %sent_d, %true : i1
    %21 = comb.and bin %io_d_last, %3 : i1
    %22 = comb.or %io_d_last, %6 : i1
    %23 = comb.xor bin %got_e, %true : i1
    %24 = comb.and bin %io_e_last, %3 : i1
    %25 = comb.or %io_e_last, %12 : i1
    %26 = comb.or bin %io_probenack, %io_probedack : i1
    %27 = comb.and bin %26, %3 : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %1, immediate label "assert__assert"
      }
      sv.if %21 {
        sv.assert %20, immediate label "assert__assert_1"
      }
      sv.if %24 {
        sv.assert %23, immediate label "assert__assert_2"
      }
      sv.if %27 {
        sv.assert %count, immediate label "assert__assert_3"
      }
    }
    %28 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %29 = comb.xor %28, %true : i1
    %30 = comb.sub bin %count, %29 {sv.namehint = "_count_T_2"} : i1
    %31 = comb.mux bin %26, %30, %19 : i1
    %32 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %33 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data_q.io_enq_ready, %o_data_q.io_deq_valid, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data = hw.instance "o_data_q" @Queue8_TLBroadcastData(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %38: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %45: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data_q.io_deq_valid"}
    %34 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %35 = comb.or bin %1, %34 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %36 = comb.and bin %35, %o_data_q.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %37 = comb.or bin %1, %34 {sv.namehint = "_i_data_valid_T_1"} : i1
    %38 = comb.and bin %37, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %39 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %40 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %41 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %42 = comb.or bin %40, %41 {sv.namehint = "acquire"} : i1
    %43 = comb.xor %shared, %true : i1
    %44 = comb.concat %true, %43 {sv.namehint = "transform"} : i1, i1
    %45 = comb.and bin %io_out_a_ready, %39 {sv.namehint = "o_data_q.io_deq_ready"} : i1
    %46 = comb.and bin %o_data_q.io_deq_valid, %39 {sv.namehint = "io_out_a_valid"} : i1
    %47 = comb.mux bin %42, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %48 = comb.mux bin %42, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %49 = comb.mux bin %42, %44, %c0_i2 {sv.namehint = "_io_out_a_bits_source_T"} : i2
    %50 = comb.concat %49, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %36, %46, %47, %48, %size, %50, %address, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data, %source, %33, %1, %32 : i1, i1, i3, i3, i3, i4, i32, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_1(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c64_i32 = hw.constant 64 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %25 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %22 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %8 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %13 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %14 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %15 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %address = seq.firreg %17 clock %clock reset sync %reset, %c64_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %31 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %36, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.xor bin %reset, %true : i1
    %4 = comb.and bin %2, %3 : i1
    %5 = comb.xor %2, %true : i1
    %6 = comb.and %5, %sent_d : i1
    %7 = comb.xor %2, %true : i1
    %8 = comb.and %7, %shared : i1
    %9 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %11 = comb.and bin %9, %10 {sv.namehint = "_got_e_T_2"} : i1
    %12 = comb.mux bin %2, %11, %got_e : i1
    %13 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %14 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %15 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %16 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %17 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %18 = comb.or %2, %count : i1
    %19 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %18 : i1
    %20 = comb.xor bin %sent_d, %true : i1
    %21 = comb.and bin %io_d_last, %3 : i1
    %22 = comb.or %io_d_last, %6 : i1
    %23 = comb.xor bin %got_e, %true : i1
    %24 = comb.and bin %io_e_last, %3 : i1
    %25 = comb.or %io_e_last, %12 : i1
    %26 = comb.or bin %io_probenack, %io_probedack : i1
    %27 = comb.and bin %26, %3 : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %1, immediate label "assert__assert"
      }
      sv.if %21 {
        sv.assert %20, immediate label "assert__assert_1"
      }
      sv.if %24 {
        sv.assert %23, immediate label "assert__assert_2"
      }
      sv.if %27 {
        sv.assert %count, immediate label "assert__assert_3"
      }
    }
    %28 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %29 = comb.xor %28, %true : i1
    %30 = comb.sub bin %count, %29 {sv.namehint = "_count_T_2"} : i1
    %31 = comb.mux bin %26, %30, %19 : i1
    %32 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %33 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data_q.io_enq_ready, %o_data_q.io_deq_valid, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data = hw.instance "o_data_q" @Queue8_TLBroadcastData(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %38: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %45: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data_q.io_deq_valid"}
    %34 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %35 = comb.or bin %1, %34 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %36 = comb.and bin %35, %o_data_q.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %37 = comb.or bin %1, %34 {sv.namehint = "_i_data_valid_T_1"} : i1
    %38 = comb.and bin %37, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %39 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %40 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %41 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %42 = comb.or bin %40, %41 {sv.namehint = "acquire"} : i1
    %43 = comb.xor %shared, %true : i1
    %44 = comb.concat %true, %43 {sv.namehint = "transform"} : i1, i1
    %45 = comb.and bin %io_out_a_ready, %39 {sv.namehint = "o_data_q.io_deq_ready"} : i1
    %46 = comb.and bin %o_data_q.io_deq_valid, %39 {sv.namehint = "io_out_a_valid"} : i1
    %47 = comb.mux bin %42, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %48 = comb.mux bin %42, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %49 = comb.mux bin %42, %44, %c0_i2 {sv.namehint = "_io_out_a_bits_source_T"} : i2
    %50 = comb.concat %49, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %36, %46, %47, %48, %size, %50, %address, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data, %source, %33, %1, %32 : i1, i1, i3, i3, i3, i4, i32, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_2(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c128_i32 = hw.constant 128 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %25 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %22 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %8 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %13 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %14 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %15 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %address = seq.firreg %17 clock %clock reset sync %reset, %c128_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %31 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %36, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.xor bin %reset, %true : i1
    %4 = comb.and bin %2, %3 : i1
    %5 = comb.xor %2, %true : i1
    %6 = comb.and %5, %sent_d : i1
    %7 = comb.xor %2, %true : i1
    %8 = comb.and %7, %shared : i1
    %9 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %11 = comb.and bin %9, %10 {sv.namehint = "_got_e_T_2"} : i1
    %12 = comb.mux bin %2, %11, %got_e : i1
    %13 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %14 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %15 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %16 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %17 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %18 = comb.or %2, %count : i1
    %19 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %18 : i1
    %20 = comb.xor bin %sent_d, %true : i1
    %21 = comb.and bin %io_d_last, %3 : i1
    %22 = comb.or %io_d_last, %6 : i1
    %23 = comb.xor bin %got_e, %true : i1
    %24 = comb.and bin %io_e_last, %3 : i1
    %25 = comb.or %io_e_last, %12 : i1
    %26 = comb.or bin %io_probenack, %io_probedack : i1
    %27 = comb.and bin %26, %3 : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %1, immediate label "assert__assert"
      }
      sv.if %21 {
        sv.assert %20, immediate label "assert__assert_1"
      }
      sv.if %24 {
        sv.assert %23, immediate label "assert__assert_2"
      }
      sv.if %27 {
        sv.assert %count, immediate label "assert__assert_3"
      }
    }
    %28 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %29 = comb.xor %28, %true : i1
    %30 = comb.sub bin %count, %29 {sv.namehint = "_count_T_2"} : i1
    %31 = comb.mux bin %26, %30, %19 : i1
    %32 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %33 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data_q.io_enq_ready, %o_data_q.io_deq_valid, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data = hw.instance "o_data_q" @Queue8_TLBroadcastData(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %38: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %45: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data_q.io_deq_valid"}
    %34 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %35 = comb.or bin %1, %34 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %36 = comb.and bin %35, %o_data_q.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %37 = comb.or bin %1, %34 {sv.namehint = "_i_data_valid_T_1"} : i1
    %38 = comb.and bin %37, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %39 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %40 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %41 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %42 = comb.or bin %40, %41 {sv.namehint = "acquire"} : i1
    %43 = comb.xor %shared, %true : i1
    %44 = comb.concat %true, %43 {sv.namehint = "transform"} : i1, i1
    %45 = comb.and bin %io_out_a_ready, %39 {sv.namehint = "o_data_q.io_deq_ready"} : i1
    %46 = comb.and bin %o_data_q.io_deq_valid, %39 {sv.namehint = "io_out_a_valid"} : i1
    %47 = comb.mux bin %42, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %48 = comb.mux bin %42, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %49 = comb.mux bin %42, %44, %c0_i2 {sv.namehint = "_io_out_a_bits_source_T"} : i2
    %50 = comb.concat %49, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %36, %46, %47, %48, %size, %50, %address, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data, %source, %33, %1, %32 : i1, i1, i3, i3, i3, i4, i32, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_3(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c192_i32 = hw.constant 192 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %25 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %22 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %8 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %13 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %14 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %15 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %16 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %address = seq.firreg %17 clock %clock reset sync %reset, %c192_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %31 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %36, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.xor bin %reset, %true : i1
    %4 = comb.and bin %2, %3 : i1
    %5 = comb.xor %2, %true : i1
    %6 = comb.and %5, %sent_d : i1
    %7 = comb.xor %2, %true : i1
    %8 = comb.and %7, %shared : i1
    %9 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %11 = comb.and bin %9, %10 {sv.namehint = "_got_e_T_2"} : i1
    %12 = comb.mux bin %2, %11, %got_e : i1
    %13 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %14 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %15 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %16 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %17 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %18 = comb.or %2, %count : i1
    %19 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %18 : i1
    %20 = comb.xor bin %sent_d, %true : i1
    %21 = comb.and bin %io_d_last, %3 : i1
    %22 = comb.or %io_d_last, %6 : i1
    %23 = comb.xor bin %got_e, %true : i1
    %24 = comb.and bin %io_e_last, %3 : i1
    %25 = comb.or %io_e_last, %12 : i1
    %26 = comb.or bin %io_probenack, %io_probedack : i1
    %27 = comb.and bin %26, %3 : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %1, immediate label "assert__assert"
      }
      sv.if %21 {
        sv.assert %20, immediate label "assert__assert_1"
      }
      sv.if %24 {
        sv.assert %23, immediate label "assert__assert_2"
      }
      sv.if %27 {
        sv.assert %count, immediate label "assert__assert_3"
      }
    }
    %28 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %29 = comb.xor %28, %true : i1
    %30 = comb.sub bin %count, %29 {sv.namehint = "_count_T_2"} : i1
    %31 = comb.mux bin %26, %30, %19 : i1
    %32 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %33 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data_q.io_enq_ready, %o_data_q.io_deq_valid, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data = hw.instance "o_data_q" @Queue8_TLBroadcastData(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %38: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %45: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data_q.io_deq_valid"}
    %34 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %35 = comb.or bin %1, %34 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %36 = comb.and bin %35, %o_data_q.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %37 = comb.or bin %1, %34 {sv.namehint = "_i_data_valid_T_1"} : i1
    %38 = comb.and bin %37, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %39 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %40 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %41 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %42 = comb.or bin %40, %41 {sv.namehint = "acquire"} : i1
    %43 = comb.xor %shared, %true : i1
    %44 = comb.concat %true, %43 {sv.namehint = "transform"} : i1, i1
    %45 = comb.and bin %io_out_a_ready, %39 {sv.namehint = "o_data_q.io_deq_ready"} : i1
    %46 = comb.and bin %o_data_q.io_deq_valid, %39 {sv.namehint = "io_out_a_valid"} : i1
    %47 = comb.mux bin %42, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %48 = comb.mux bin %42, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %49 = comb.mux bin %42, %44, %c0_i2 {sv.namehint = "_io_out_a_bits_source_T"} : i2
    %50 = comb.concat %49, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %36, %46, %47, %48, %size, %50, %address, %o_data_q.io_deq_bits_mask, %o_data_q.io_deq_bits_data, %source, %33, %1, %32 : i1, i1, i3, i3, i3, i4, i32, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcast(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    %c-1_i4 = hw.constant -1 : i4
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c63_i13 = hw.constant 63 : i13
    %c1_i4 = hw.constant 1 : i4
    %false = hw.constant false {sv.namehint = "filter_io_request_bits_mshr_hi"}
    %c0_i2 = hw.constant 0 : i2
    %true = hw.constant true {sv.namehint = "putfull_bits_a_mask_size_2"}
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i32 = hw.constant 0 : i32
    %c0_i64 = hw.constant 0 : i64
    %c0_i8 = hw.constant 0 : i8
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-4_i3 = hw.constant -4 : i3
    %c1_i2 = hw.constant 1 : i2
    %c-3_i3 = hw.constant -3 : i3
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_16(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %394: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %probe_todo: i1, io_in_b_bits_param: %probe_perms: i2, io_in_b_bits_address: %354: i32, io_in_c_ready: %107: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i3, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %197: i1, io_in_d_bits_opcode: %212: i3, io_in_d_bits_param: %209: i2, io_in_d_bits_size: %207: i3, io_in_d_bits_source: %204: i2, io_in_d_bits_sink: %201: i2, io_in_d_bits_denied: %200: i1, io_in_d_bits_corrupt: %198: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %filter.io_request_ready, %filter.io_response_valid, %filter.io_response_bits_mshr, %filter.io_response_bits_address, %filter.io_response_bits_allocOH, %filter.io_response_bits_needT = hw.instance "filter" @BroadcastFilter(io_request_valid: %404: i1, io_request_bits_mshr: %410: i2, io_request_bits_address: %auto_in_a_bits_address: i32, io_request_bits_allocOH: %358: i1, io_request_bits_needT: %421: i1, io_response_ready: %423: i1) -> (io_request_ready: i1, io_response_valid: i1, io_response_bits_mshr: i2, io_response_bits_address: i32, io_response_bits_allocOH: i1, io_response_bits_needT: i1) {sv.namehint = "responseMSHR_shiftAmount"}
    %TLBroadcastTracker.io_in_a_ready, %TLBroadcastTracker.io_out_a_valid, %TLBroadcastTracker.io_out_a_bits_opcode, %TLBroadcastTracker.io_out_a_bits_param, %TLBroadcastTracker.io_out_a_bits_size, %TLBroadcastTracker.io_out_a_bits_source, %TLBroadcastTracker.io_out_a_bits_address, %TLBroadcastTracker.io_out_a_bits_mask, %TLBroadcastTracker.io_out_a_bits_data, %TLBroadcastTracker.io_source, %TLBroadcastTracker.io_line, %TLBroadcastTracker.io_idle, %TLBroadcastTracker.io_need_d = hw.instance "TLBroadcastTracker" @TLBroadcastTracker(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %368: i1, io_in_a_valid: %400: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %302: i1, io_probe_valid: %436: i1, io_probe_bits_count: %422: i1, io_probenack: %95: i1, io_probedack: %71: i1, io_probesack: %99: i1, io_d_last: %69: i1, io_e_last: %7: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "TLBroadcastTracker.io_idle"}
    %TLBroadcastTracker_1.io_in_a_ready, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_1.io_out_a_bits_opcode, %TLBroadcastTracker_1.io_out_a_bits_param, %TLBroadcastTracker_1.io_out_a_bits_size, %TLBroadcastTracker_1.io_out_a_bits_source, %TLBroadcastTracker_1.io_out_a_bits_address, %TLBroadcastTracker_1.io_out_a_bits_mask, %TLBroadcastTracker_1.io_out_a_bits_data, %TLBroadcastTracker_1.io_source, %TLBroadcastTracker_1.io_line, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker_1.io_need_d = hw.instance "TLBroadcastTracker_1" @TLBroadcastTracker_1(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %368: i1, io_in_a_valid: %401: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %303: i1, io_probe_valid: %437: i1, io_probe_bits_count: %422: i1, io_probenack: %100: i1, io_probedack: %73: i1, io_probesack: %101: i1, io_d_last: %72: i1, io_e_last: %8: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "TLBroadcastTracker_1.io_idle"}
    %TLBroadcastTracker_2.io_in_a_ready, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_bits_opcode, %TLBroadcastTracker_2.io_out_a_bits_param, %TLBroadcastTracker_2.io_out_a_bits_size, %TLBroadcastTracker_2.io_out_a_bits_source, %TLBroadcastTracker_2.io_out_a_bits_address, %TLBroadcastTracker_2.io_out_a_bits_mask, %TLBroadcastTracker_2.io_out_a_bits_data, %TLBroadcastTracker_2.io_source, %TLBroadcastTracker_2.io_line, %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_2.io_need_d = hw.instance "TLBroadcastTracker_2" @TLBroadcastTracker_2(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %368: i1, io_in_a_valid: %402: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %304: i1, io_probe_valid: %438: i1, io_probe_bits_count: %422: i1, io_probenack: %102: i1, io_probedack: %75: i1, io_probesack: %103: i1, io_d_last: %74: i1, io_e_last: %9: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "TLBroadcastTracker_2.io_idle"}
    %TLBroadcastTracker_3.io_in_a_ready, %TLBroadcastTracker_3.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_bits_opcode, %TLBroadcastTracker_3.io_out_a_bits_param, %TLBroadcastTracker_3.io_out_a_bits_size, %TLBroadcastTracker_3.io_out_a_bits_source, %TLBroadcastTracker_3.io_out_a_bits_address, %TLBroadcastTracker_3.io_out_a_bits_mask, %TLBroadcastTracker_3.io_out_a_bits_data, %TLBroadcastTracker_3.io_source, %TLBroadcastTracker_3.io_line, %TLBroadcastTracker_3.io_idle, %TLBroadcastTracker_3.io_need_d = hw.instance "TLBroadcastTracker_3" @TLBroadcastTracker_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %368: i1, io_in_a_valid: %403: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %305: i1, io_probe_valid: %439: i1, io_probe_bits_count: %422: i1, io_probenack: %104: i1, io_probedack: %77: i1, io_probesack: %105: i1, io_d_last: %76: i1, io_e_last: %10: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "TLBroadcastTracker_3.io_idle"}
    %1 = comb.concat %c0_i2, %auto_in_e_bits_sink : i2, i2
    %2 = comb.shl bin %c1_i4, %1 : i4
    %3 = comb.extract %2 from 0 : (i4) -> i1
    %4 = comb.extract %2 from 1 : (i4) -> i1
    %5 = comb.extract %2 from 2 : (i4) -> i1
    %6 = comb.extract %2 from 3 : (i4) -> i1
    %7 = comb.and bin %3, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker.io_e_last"} : i1
    %8 = comb.and bin %4, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_1.io_e_last"} : i1
    %9 = comb.and bin %5, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_2.io_e_last"} : i1
    %10 = comb.and bin %6, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_3.io_e_last"} : i1
    %11 = comb.extract %auto_out_d_bits_source from 2 {sv.namehint = "d_what"} : (i4) -> i2
    %12 = comb.icmp bin eq %11, %c1_i2 {sv.namehint = "d_drop"} : i2
    %13 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "d_hasData"} : (i3) -> i1
    %14 = comb.and bin %193, %45 : i1
    %15 = comb.concat %c0_i10, %auto_out_d_bits_size : i10, i3
    %16 = comb.shl bin %c63_i13, %15 {sv.namehint = "_beats1_decode_T_1"} : i13
    %17 = comb.extract %16 from 3 : (i13) -> i3
    %18 = comb.xor bin %17, %c-1_i3 {sv.namehint = "_beats1_decode_T_3"} : i3
    %19 = comb.extract %49 from 0 {sv.namehint = "opdata_1"} : (i3) -> i1
    %20 = comb.mux bin %19, %18, %c0_i3 {sv.namehint = "beats1"} : i3
    %counter = seq.firreg %27 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %21 = comb.add %counter, %c-1_i3 {sv.namehint = "_counter1_T"} : i3
    %22 = comb.icmp bin eq %counter, %c0_i3 {sv.namehint = "d_first"} : i3
    %23 = comb.icmp bin eq %counter, %c1_i3 {sv.namehint = "_last_T"} : i3
    %24 = comb.icmp bin eq %20, %c0_i3 {sv.namehint = "_last_T_1"} : i3
    %25 = comb.or bin %23, %24 {sv.namehint = "d_last"} : i1
    %26 = comb.mux bin %22, %20, %21 {sv.namehint = "_counter_T"} : i3
    %27 = comb.mux bin %14, %26, %counter : i3
    %28 = comb.icmp bin eq %TLBroadcastTracker.io_source, %46 {sv.namehint = "_d_trackerOH_T"} : i2
    %29 = comb.and bin %TLBroadcastTracker.io_need_d, %28 {sv.namehint = "_d_trackerOH_T_1"} : i1
    %30 = comb.icmp bin eq %TLBroadcastTracker_1.io_source, %46 {sv.namehint = "_d_trackerOH_T_2"} : i2
    %31 = comb.and bin %TLBroadcastTracker_1.io_need_d, %30 {sv.namehint = "_d_trackerOH_T_3"} : i1
    %32 = comb.icmp bin eq %TLBroadcastTracker_2.io_source, %46 {sv.namehint = "_d_trackerOH_T_4"} : i2
    %33 = comb.and bin %TLBroadcastTracker_2.io_need_d, %32 {sv.namehint = "_d_trackerOH_T_5"} : i1
    %34 = comb.icmp bin eq %TLBroadcastTracker_3.io_source, %46 {sv.namehint = "_d_trackerOH_T_6"} : i2
    %35 = comb.and bin %TLBroadcastTracker_3.io_need_d, %34 {sv.namehint = "_d_trackerOH_T_7"} : i1
    %36 = comb.concat %35, %33, %31, %29 {sv.namehint = "_d_trackerOH_T_8"} : i1, i1, i1, i1
    %d_trackerOH_r = seq.firreg %37 clock %clock {firrtl.random_init_start = 3 : ui64} : i4
    %37 = comb.mux bin %22, %36, %d_trackerOH_r : i4
    %38 = comb.mux bin %22, %36, %d_trackerOH_r {sv.namehint = "d_trackerOH"} : i4
    %39 = comb.xor bin %auto_out_d_valid, %true : i1
    %40 = comb.icmp bin ne %11, %c1_i2 {sv.namehint = "_filter_io_update_valid_T_1"} : i2
    %41 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 : i3
    %42 = comb.or bin %39, %40, %41 : i1
    %43 = comb.xor bin %reset, %true : i1
    %44 = comb.or bin %193, %12 {sv.namehint = "nodeOut_d_ready"} : i1
    %45 = comb.and bin %auto_out_d_valid, %40 {sv.namehint = "d_normal_valid"} : i1
    %46 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "d_normal_bits_source"} : (i4) -> i2
    %47 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_d_response_T"} : (i4) -> i1
    %48 = comb.mux bin %13, %c-3_i3, %c-2_i3 {sv.namehint = "_d_normal_bits_opcode_T"} : i3
    %49 = comb.mux bin %47, %48, %auto_out_d_bits_opcode {sv.namehint = "d_normal_bits_opcode"} : i3
    %50 = comb.extract %auto_out_d_bits_source from 2 {sv.namehint = "_d_normal_bits_param_T"} : (i4) -> i1
    %51 = comb.xor %50, %true : i1
    %52 = comb.concat %false, %51 {sv.namehint = "_d_normal_bits_param_T_1"} : i1, i1
    %53 = comb.extract %38 from 2 {sv.namehint = "d_mshr_hi"} : (i4) -> i2
    %54 = comb.icmp bin ne %53, %c0_i2 {sv.namehint = "_d_mshr_T"} : i2
    %55 = comb.extract %38 from 3 : (i4) -> i1
    %56 = comb.extract %38 from 1 : (i4) -> i1
    %57 = comb.or bin %55, %56 {sv.namehint = "_d_mshr_T_1"} : i1
    %58 = comb.concat %54, %57 {sv.namehint = "d_mshr"} : i1, i1
    %59 = comb.xor bin %45, %true : i1
    %60 = comb.icmp bin ne %38, %c0_i4 : i4
    %61 = comb.icmp bin eq %49, %c-2_i3 : i3
    %62 = comb.or bin %59, %60, %61 : i1
    %63 = comb.xor bin %47, %true {sv.namehint = "_d_response_T_1"} : i1
    %64 = comb.or bin %13, %63 {sv.namehint = "d_response"} : i1
    %65 = comb.extract %38 from 0 {sv.namehint = "_filter_io_update_bits_cacheOH_T"} : (i4) -> i1
    %66 = comb.extract %38 from 1 {sv.namehint = "_filter_io_update_bits_cacheOH_T_1"} : (i4) -> i1
    %67 = comb.extract %38 from 2 {sv.namehint = "_filter_io_update_bits_cacheOH_T_2"} : (i4) -> i1
    %68 = comb.extract %38 from 3 {sv.namehint = "_filter_io_update_bits_cacheOH_T_3"} : (i4) -> i1
    %69 = comb.and bin %65, %14, %64, %25 {sv.namehint = "TLBroadcastTracker.io_d_last"} : i1
    %70 = comb.and bin %44, %auto_out_d_valid : i1
    %71 = comb.and bin %65, %70, %12 {sv.namehint = "TLBroadcastTracker.io_probedack"} : i1
    %72 = comb.and bin %66, %14, %64, %25 {sv.namehint = "TLBroadcastTracker_1.io_d_last"} : i1
    %73 = comb.and bin %66, %70, %12 {sv.namehint = "TLBroadcastTracker_1.io_probedack"} : i1
    %74 = comb.and bin %67, %14, %64, %25 {sv.namehint = "TLBroadcastTracker_2.io_d_last"} : i1
    %75 = comb.and bin %67, %70, %12 {sv.namehint = "TLBroadcastTracker_2.io_probedack"} : i1
    %76 = comb.and bin %68, %14, %64, %25 {sv.namehint = "TLBroadcastTracker_3.io_d_last"} : i1
    %77 = comb.and bin %68, %70, %12 {sv.namehint = "TLBroadcastTracker_3.io_probedack"} : i1
    %78 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-4_i3 {sv.namehint = "c_probeack"} : i3
    %79 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-3_i3 {sv.namehint = "c_probeackdata"} : i3
    %80 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-1_i3 {sv.namehint = "c_releasedata"} : i3
    %81 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-2_i3 {sv.namehint = "c_release"} : i3
    %82 = comb.extract %auto_in_c_bits_address from 6 {sv.namehint = "_c_trackerOH_T_3"} : (i32) -> i26
    %83 = comb.icmp bin eq %TLBroadcastTracker.io_line, %82 {sv.namehint = "c_trackerOH_0"} : i26
    %84 = comb.icmp bin eq %TLBroadcastTracker_1.io_line, %82 {sv.namehint = "c_trackerOH_1"} : i26
    %85 = comb.icmp bin eq %TLBroadcastTracker_2.io_line, %82 {sv.namehint = "c_trackerOH_2"} : i26
    %86 = comb.icmp bin eq %TLBroadcastTracker_3.io_line, %82 {sv.namehint = "c_trackerOH_3"} : i26
    %87 = comb.mux bin %83, %TLBroadcastTracker.io_source, %c0_i2 {sv.namehint = "_c_trackerSrc_T"} : i2
    %88 = comb.mux bin %84, %TLBroadcastTracker_1.io_source, %c0_i2 {sv.namehint = "_c_trackerSrc_T_1"} : i2
    %89 = comb.mux bin %85, %TLBroadcastTracker_2.io_source, %c0_i2 {sv.namehint = "_c_trackerSrc_T_2"} : i2
    %90 = comb.mux bin %86, %TLBroadcastTracker_3.io_source, %c0_i2 {sv.namehint = "_c_trackerSrc_T_3"} : i2
    %91 = comb.or bin %87, %88, %89, %90 {sv.namehint = "c_trackerSrc"} : i2
    %92 = comb.and bin %107, %auto_in_c_valid {sv.namehint = "_c_first_T"} : i1
    %93 = comb.or bin %78, %79 {sv.namehint = "_clearOH_T_1"} : i1
    %94 = comb.and bin %92, %78 : i1
    %95 = comb.and bin %94, %83 {sv.namehint = "TLBroadcastTracker.io_probenack"} : i1
    %96 = comb.icmp bin eq %auto_in_c_bits_param, %c0_i3 {sv.namehint = "_filter_io_release_bits_keepB_T"} : i3
    %97 = comb.icmp bin eq %auto_in_c_bits_param, %c-4_i3 : i3
    %98 = comb.or bin %96, %97 : i1
    %99 = comb.and bin %92, %83, %93, %98 {sv.namehint = "TLBroadcastTracker.io_probesack"} : i1
    %100 = comb.and bin %94, %84 {sv.namehint = "TLBroadcastTracker_1.io_probenack"} : i1
    %101 = comb.and bin %92, %84, %93, %98 {sv.namehint = "TLBroadcastTracker_1.io_probesack"} : i1
    %102 = comb.and bin %94, %85 {sv.namehint = "TLBroadcastTracker_2.io_probenack"} : i1
    %103 = comb.and bin %92, %85, %93, %98 {sv.namehint = "TLBroadcastTracker_2.io_probesack"} : i1
    %104 = comb.and bin %94, %86 {sv.namehint = "TLBroadcastTracker_3.io_probenack"} : i1
    %105 = comb.and bin %92, %86, %93, %98 {sv.namehint = "TLBroadcastTracker_3.io_probesack"} : i1
    %106 = comb.mux bin %81, %192, %301 {sv.namehint = "_nodeIn_c_ready_T"} : i1
    %107 = comb.or bin %78, %106 {sv.namehint = "nodeIn_c_ready"} : i1
    %108 = comb.concat %c0_i10, %auto_in_c_bits_size : i10, i3
    %109 = comb.shl bin %c63_i13, %108 {sv.namehint = "_c_first_beats1_decode_T_1"} : i13
    %110 = comb.extract %109 from 3 : (i13) -> i3
    %111 = comb.xor bin %110, %c-1_i3 {sv.namehint = "_c_first_beats1_decode_T_3"} : i3
    %112 = comb.extract %auto_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %113 = comb.mux bin %112, %111, %c0_i3 {sv.namehint = "c_first_beats1"} : i3
    %c_first_counter = seq.firreg %117 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %114 = comb.add %c_first_counter, %c-1_i3 {sv.namehint = "_c_first_counter1_T"} : i3
    %115 = comb.icmp bin eq %c_first_counter, %c0_i3 {sv.namehint = "c_first"} : i3
    %116 = comb.mux bin %115, %113, %114 {sv.namehint = "_c_first_counter_T"} : i3
    %117 = comb.mux bin %92, %116, %c_first_counter : i3
    %118 = comb.and bin %auto_in_c_valid, %81 {sv.namehint = "winner_0"} : i1
    %119 = comb.mux bin %80, %c-2_i2, %c1_i2 {sv.namehint = "put_what"} : i2
    %120 = comb.mux bin %80, %auto_in_c_bits_source, %91 {sv.namehint = "put_who"} : i2
    %121 = comb.or bin %79, %80 {sv.namehint = "_putfull_valid_T_3"} : i1
    %122 = comb.and bin %auto_in_c_valid, %121 {sv.namehint = "putfull_valid"} : i1
    %123 = comb.concat %119, %120 {sv.namehint = "putfull_bits_a_source"} : i2, i2
    %124 = comb.extract %auto_in_c_bits_size from 0 {sv.namehint = "putfull_bits_a_mask_sizeOH_shiftAmount"} : (i3) -> i2
    %125 = comb.concat %c0_i2, %124 : i2, i2
    %126 = comb.shl bin %c1_i4, %125 {sv.namehint = "_putfull_bits_a_mask_sizeOH_T_1"} : i4
    %127 = comb.icmp bin ugt %auto_in_c_bits_size, %c2_i3 {sv.namehint = "_putfull_bits_a_mask_T"} : i3
    %128 = comb.extract %126 from 2 {sv.namehint = "putfull_bits_a_mask_size"} : (i4) -> i1
    %129 = comb.extract %auto_in_c_bits_address from 2 {sv.namehint = "putfull_bits_a_mask_bit"} : (i32) -> i1
    %130 = comb.xor bin %129, %true {sv.namehint = "putfull_bits_a_mask_eq"} : i1
    %131 = comb.and bin %128, %130 {sv.namehint = "_putfull_bits_a_mask_acc_T"} : i1
    %132 = comb.or bin %127, %131 {sv.namehint = "putfull_bits_a_mask_acc"} : i1
    %133 = comb.and bin %128, %129 {sv.namehint = "_putfull_bits_a_mask_acc_T_1"} : i1
    %134 = comb.or bin %127, %133 {sv.namehint = "putfull_bits_a_mask_acc_1"} : i1
    %135 = comb.extract %126 from 1 {sv.namehint = "putfull_bits_a_mask_size_1"} : (i4) -> i1
    %136 = comb.extract %auto_in_c_bits_address from 1 {sv.namehint = "putfull_bits_a_mask_bit_1"} : (i32) -> i1
    %137 = comb.xor bin %136, %true {sv.namehint = "putfull_bits_a_mask_nbit_1"} : i1
    %138 = comb.and bin %130, %137 {sv.namehint = "putfull_bits_a_mask_eq_2"} : i1
    %139 = comb.and bin %135, %138 {sv.namehint = "_putfull_bits_a_mask_acc_T_2"} : i1
    %140 = comb.or bin %132, %139 {sv.namehint = "putfull_bits_a_mask_acc_2"} : i1
    %141 = comb.and bin %130, %136 {sv.namehint = "putfull_bits_a_mask_eq_3"} : i1
    %142 = comb.and bin %135, %141 {sv.namehint = "_putfull_bits_a_mask_acc_T_3"} : i1
    %143 = comb.or bin %132, %142 {sv.namehint = "putfull_bits_a_mask_acc_3"} : i1
    %144 = comb.and bin %129, %137 {sv.namehint = "putfull_bits_a_mask_eq_4"} : i1
    %145 = comb.and bin %135, %144 {sv.namehint = "_putfull_bits_a_mask_acc_T_4"} : i1
    %146 = comb.or bin %134, %145 {sv.namehint = "putfull_bits_a_mask_acc_4"} : i1
    %147 = comb.and bin %129, %136 {sv.namehint = "putfull_bits_a_mask_eq_5"} : i1
    %148 = comb.and bin %135, %147 {sv.namehint = "_putfull_bits_a_mask_acc_T_5"} : i1
    %149 = comb.or bin %134, %148 {sv.namehint = "putfull_bits_a_mask_acc_5"} : i1
    %150 = comb.extract %auto_in_c_bits_address from 0 {sv.namehint = "putfull_bits_a_mask_bit_2"} : (i32) -> i1
    %151 = comb.xor bin %150, %true {sv.namehint = "putfull_bits_a_mask_nbit_2"} : i1
    %152 = comb.and bin %138, %151 {sv.namehint = "putfull_bits_a_mask_eq_6"} : i1
    %153 = comb.or bin %140, %152 {sv.namehint = "putfull_bits_a_mask_acc_6"} : i1
    %154 = comb.and bin %138, %150 {sv.namehint = "putfull_bits_a_mask_eq_7"} : i1
    %155 = comb.or bin %140, %154 {sv.namehint = "putfull_bits_a_mask_acc_7"} : i1
    %156 = comb.and bin %141, %151 {sv.namehint = "putfull_bits_a_mask_eq_8"} : i1
    %157 = comb.or bin %143, %156 {sv.namehint = "putfull_bits_a_mask_acc_8"} : i1
    %158 = comb.and bin %141, %150 {sv.namehint = "putfull_bits_a_mask_eq_9"} : i1
    %159 = comb.or bin %143, %158 {sv.namehint = "putfull_bits_a_mask_acc_9"} : i1
    %160 = comb.and bin %144, %151 {sv.namehint = "putfull_bits_a_mask_eq_10"} : i1
    %161 = comb.or bin %146, %160 {sv.namehint = "putfull_bits_a_mask_acc_10"} : i1
    %162 = comb.and bin %144, %150 {sv.namehint = "putfull_bits_a_mask_eq_11"} : i1
    %163 = comb.or bin %146, %162 {sv.namehint = "putfull_bits_a_mask_acc_11"} : i1
    %164 = comb.and bin %147, %151 {sv.namehint = "putfull_bits_a_mask_eq_12"} : i1
    %165 = comb.or bin %149, %164 {sv.namehint = "putfull_bits_a_mask_acc_12"} : i1
    %166 = comb.and bin %147, %150 {sv.namehint = "putfull_bits_a_mask_eq_13"} : i1
    %167 = comb.or bin %149, %166 {sv.namehint = "putfull_bits_a_mask_acc_13"} : i1
    %168 = comb.concat %167, %165, %163, %161, %159, %157, %155, %153 {sv.namehint = "putfull_bits_a_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %169 = comb.shl bin %c63_i13, %15 {sv.namehint = "_decode_T_5"} : i13
    %170 = comb.extract %169 from 3 : (i13) -> i3
    %171 = comb.xor bin %170, %c-1_i3 {sv.namehint = "_decode_T_7"} : i3
    %beatsLeft = seq.firreg %187 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 10 : ui64} : i3
    %172 = comb.icmp bin eq %beatsLeft, %c0_i3 {sv.namehint = "idle"} : i3
    %173 = comb.and bin %172, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %174 = comb.xor %118, %true {sv.namehint = "readys_1"} : i1
    %175 = comb.and bin %174, %45 {sv.namehint = "winner_1"} : i1
    %176 = comb.xor bin %118, %true : i1
    %177 = comb.xor bin %175, %true : i1
    %178 = comb.or bin %176, %177 : i1
    %179 = comb.or bin %118, %45 {sv.namehint = "_nodeIn_d_valid_T"} : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.or bin %180, %118, %175 : i1
    %182 = comb.and bin %175, %19 : i1
    %183 = comb.mux bin %182, %171, %c0_i3 {sv.namehint = "initBeats"} : i3
    %184 = comb.and bin %auto_in_d_ready, %197 {sv.namehint = "_beatsLeft_T"} : i1
    %185 = comb.concat %c0_i2, %184 : i2, i1
    %186 = comb.sub bin %beatsLeft, %185 {sv.namehint = "_beatsLeft_T_1"} : i3
    %187 = comb.mux bin %173, %183, %186 {sv.namehint = "_beatsLeft_T_3"} : i3
    %state_0 = seq.firreg %188 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64} : i1
    %state_1 = seq.firreg %189 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %188 = comb.mux bin %172, %118, %state_0 {sv.namehint = "muxState_0"} : i1
    %189 = comb.mux bin %172, %175, %state_1 {sv.namehint = "muxState_1"} : i1
    %190 = comb.or %172, %state_0 {sv.namehint = "allowed_0"} : i1
    %191 = comb.mux bin %172, %174, %state_1 {sv.namehint = "allowed_1"} : i1
    %192 = comb.and bin %auto_in_d_ready, %190 {sv.namehint = "releaseack_ready"} : i1
    %193 = comb.and bin %auto_in_d_ready, %191 {sv.namehint = "d_normal_ready"} : i1
    %194 = comb.and %state_0, %118 {sv.namehint = "_nodeIn_d_valid_T_1"} : i1
    %195 = comb.and %state_1, %45 {sv.namehint = "_nodeIn_d_valid_T_2"} : i1
    %196 = comb.or bin %194, %195 {sv.namehint = "_nodeIn_d_valid_T_3"} : i1
    %197 = comb.mux bin %172, %179, %196 {sv.namehint = "nodeIn_d_valid"} : i1
    %198 = comb.and %189, %auto_out_d_bits_corrupt {sv.namehint = "_nodeIn_d_bits_T_2"} : i1
    %199 = comb.mux bin %189, %auto_out_d_bits_data, %c0_i64 {sv.namehint = "_nodeIn_d_bits_T_5"} : i64
    %200 = comb.and %189, %auto_out_d_bits_denied {sv.namehint = "_nodeIn_d_bits_T_8"} : i1
    %201 = comb.mux bin %189, %58, %c0_i2 {sv.namehint = "_nodeIn_d_bits_T_11"} : i2
    %202 = comb.mux bin %188, %auto_in_c_bits_source, %c0_i2 {sv.namehint = "_nodeIn_d_bits_T_12"} : i2
    %203 = comb.mux bin %189, %46, %c0_i2 {sv.namehint = "_nodeIn_d_bits_T_13"} : i2
    %204 = comb.or bin %202, %203 {sv.namehint = "_nodeIn_d_bits_T_14"} : i2
    %205 = comb.mux bin %188, %auto_in_c_bits_size, %c0_i3 {sv.namehint = "_nodeIn_d_bits_T_15"} : i3
    %206 = comb.mux bin %189, %auto_out_d_bits_size, %c0_i3 {sv.namehint = "_nodeIn_d_bits_T_16"} : i3
    %207 = comb.or bin %205, %206 {sv.namehint = "_nodeIn_d_bits_T_17"} : i3
    %208 = comb.and %189, %47, %13 : i1
    %209 = comb.mux bin %208, %52, %c0_i2 {sv.namehint = "_nodeIn_d_bits_T_20"} : i2
    %210 = comb.mux bin %188, %c-2_i3, %c0_i3 {sv.namehint = "_nodeIn_d_bits_T_21"} : i3
    %211 = comb.mux bin %189, %49, %c0_i3 {sv.namehint = "_nodeIn_d_bits_T_22"} : i3
    %212 = comb.or bin %210, %211 {sv.namehint = "_nodeIn_d_bits_T_23"} : i3
    %213 = comb.shl bin %c63_i13, %108 {sv.namehint = "_decode_T_9"} : i13
    %214 = comb.extract %213 from 3 : (i13) -> i3
    %215 = comb.xor bin %214, %c-1_i3 {sv.namehint = "_decode_T_11"} : i3
    %216 = comb.concat %c0_i10, %TLBroadcastTracker.io_out_a_bits_size : i10, i3
    %217 = comb.shl bin %c63_i13, %216 {sv.namehint = "_decode_T_13"} : i13
    %218 = comb.extract %217 from 3 : (i13) -> i3
    %219 = comb.xor bin %218, %c-1_i3 {sv.namehint = "_decode_T_15"} : i3
    %220 = comb.extract %TLBroadcastTracker.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_1"} : (i3) -> i1
    %221 = comb.xor bin %220, %true {sv.namehint = "opdata_3"} : i1
    %222 = comb.concat %c0_i10, %TLBroadcastTracker_1.io_out_a_bits_size : i10, i3
    %223 = comb.shl bin %c63_i13, %222 {sv.namehint = "_decode_T_17"} : i13
    %224 = comb.extract %223 from 3 : (i13) -> i3
    %225 = comb.xor bin %224, %c-1_i3 {sv.namehint = "_decode_T_19"} : i3
    %226 = comb.extract %TLBroadcastTracker_1.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_2"} : (i3) -> i1
    %227 = comb.xor bin %226, %true {sv.namehint = "opdata_4"} : i1
    %228 = comb.concat %c0_i10, %TLBroadcastTracker_2.io_out_a_bits_size : i10, i3
    %229 = comb.shl bin %c63_i13, %228 {sv.namehint = "_decode_T_21"} : i13
    %230 = comb.extract %229 from 3 : (i13) -> i3
    %231 = comb.xor bin %230, %c-1_i3 {sv.namehint = "_decode_T_23"} : i3
    %232 = comb.extract %TLBroadcastTracker_2.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_3"} : (i3) -> i1
    %233 = comb.xor bin %232, %true {sv.namehint = "opdata_5"} : i1
    %234 = comb.concat %c0_i10, %TLBroadcastTracker_3.io_out_a_bits_size : i10, i3
    %235 = comb.shl bin %c63_i13, %234 {sv.namehint = "_decode_T_25"} : i13
    %236 = comb.extract %235 from 3 : (i13) -> i3
    %237 = comb.xor bin %236, %c-1_i3 {sv.namehint = "_decode_T_27"} : i3
    %238 = comb.extract %TLBroadcastTracker_3.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_4"} : (i3) -> i1
    %239 = comb.xor bin %238, %true {sv.namehint = "opdata_6"} : i1
    %beatsLeft_1 = seq.firreg %290 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 15 : ui64} : i3
    %240 = comb.icmp bin eq %beatsLeft_1, %c0_i3 {sv.namehint = "idle_1"} : i3
    %241 = comb.and bin %240, %auto_out_a_ready {sv.namehint = "latch_1"} : i1
    %242 = comb.concat %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker.io_out_a_valid, %122 : i1, i1, i1, i1
    %243 = comb.concat %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker.io_out_a_valid, %122, %false : i1, i1, i1, i1
    %244 = comb.or bin %242, %243 {sv.namehint = "_readys_T_13"} : i4
    %245 = comb.extract %244 from 0 : (i4) -> i2
    %246 = comb.concat %245, %c0_i2 : i2, i2
    %247 = comb.or bin %244, %246 {sv.namehint = "_readys_T_16"} : i4
    %248 = comb.xor %247, %c-1_i4 : i4
    %249 = comb.extract %248 from 0 {sv.namehint = "readys_1_1"} : (i4) -> i1
    %250 = comb.extract %248 from 1 {sv.namehint = "readys_1_2"} : (i4) -> i1
    %251 = comb.extract %248 from 2 {sv.namehint = "readys_1_3"} : (i4) -> i1
    %252 = comb.extract %248 from 3 {sv.namehint = "readys_1_4"} : (i4) -> i1
    %253 = comb.and bin %249, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "winner_1_1"} : i1
    %254 = comb.and bin %250, %TLBroadcastTracker_1.io_out_a_valid {sv.namehint = "winner_1_2"} : i1
    %255 = comb.and bin %251, %TLBroadcastTracker_2.io_out_a_valid {sv.namehint = "winner_1_3"} : i1
    %256 = comb.and bin %252, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "winner_1_4"} : i1
    %257 = comb.or bin %122, %253 {sv.namehint = "prefixOR_2"} : i1
    %258 = comb.or bin %257, %254 {sv.namehint = "prefixOR_3"} : i1
    %259 = comb.or bin %258, %255 {sv.namehint = "prefixOR_4"} : i1
    %260 = comb.xor bin %122, %true : i1
    %261 = comb.xor bin %253, %true : i1
    %262 = comb.or bin %260, %261 : i1
    %263 = comb.xor bin %257, %true : i1
    %264 = comb.xor bin %254, %true : i1
    %265 = comb.or bin %263, %264 : i1
    %266 = comb.xor bin %258, %true : i1
    %267 = comb.xor bin %255, %true : i1
    %268 = comb.or bin %266, %267 : i1
    %269 = comb.xor bin %259, %true : i1
    %270 = comb.xor bin %256, %true : i1
    %271 = comb.or bin %269, %270 : i1
    %272 = comb.and bin %262, %265, %268, %271 : i1
    %273 = comb.or bin %122, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T"} : i1
    %274 = comb.or bin %273, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_valid : i1
    %275 = comb.xor bin %274, %true : i1
    %276 = comb.or bin %275, %122, %253, %254, %255, %256 : i1
    sv.always posedge %0 {
      sv.if %43 {
        sv.assert %42, immediate label "assert__assert"
      }
      sv.if %43 {
        sv.assert %62, immediate label "assert__assert_1"
      }
      sv.if %43 {
        sv.assert %178, immediate label "assert__assert_2"
      }
      sv.if %43 {
        sv.assert %181, immediate label "assert__assert_3"
      }
      sv.if %43 {
        sv.assert %272, immediate label "assert__assert_4"
      }
      sv.if %43 {
        sv.assert %276, immediate label "assert__assert_5"
      }
    }
    %277 = comb.mux bin %122, %215, %c0_i3 {sv.namehint = "maskedBeats_0_1"} : i3
    %278 = comb.and bin %253, %221 : i1
    %279 = comb.mux bin %278, %219, %c0_i3 {sv.namehint = "maskedBeats_1_1"} : i3
    %280 = comb.and bin %254, %227 : i1
    %281 = comb.mux bin %280, %225, %c0_i3 {sv.namehint = "maskedBeats_2"} : i3
    %282 = comb.and bin %255, %233 : i1
    %283 = comb.mux bin %282, %231, %c0_i3 {sv.namehint = "maskedBeats_3"} : i3
    %284 = comb.and bin %256, %239 : i1
    %285 = comb.mux bin %284, %237, %c0_i3 {sv.namehint = "maskedBeats_4"} : i3
    %286 = comb.or bin %277, %279, %281, %283, %285 {sv.namehint = "initBeats_1"} : i3
    %287 = comb.and bin %auto_out_a_ready, %313 {sv.namehint = "_beatsLeft_T_4"} : i1
    %288 = comb.concat %c0_i2, %287 : i2, i1
    %289 = comb.sub bin %beatsLeft_1, %288 {sv.namehint = "_beatsLeft_T_5"} : i3
    %290 = comb.mux bin %241, %286, %289 {sv.namehint = "_beatsLeft_T_7"} : i3
    %state_1_0 = seq.firreg %291 clock %clock reset sync %reset, %false {firrtl.random_init_start = 18 : ui64} : i1
    %state_1_1 = seq.firreg %292 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %state_1_2 = seq.firreg %293 clock %clock reset sync %reset, %false {firrtl.random_init_start = 20 : ui64} : i1
    %state_1_3 = seq.firreg %294 clock %clock reset sync %reset, %false {firrtl.random_init_start = 21 : ui64} : i1
    %state_1_4 = seq.firreg %295 clock %clock reset sync %reset, %false {firrtl.random_init_start = 22 : ui64} : i1
    %291 = comb.mux bin %240, %122, %state_1_0 {sv.namehint = "muxState_1_0"} : i1
    %292 = comb.mux bin %240, %253, %state_1_1 {sv.namehint = "muxState_1_1"} : i1
    %293 = comb.mux bin %240, %254, %state_1_2 {sv.namehint = "muxState_1_2"} : i1
    %294 = comb.mux bin %240, %255, %state_1_3 {sv.namehint = "muxState_1_3"} : i1
    %295 = comb.mux bin %240, %256, %state_1_4 {sv.namehint = "muxState_1_4"} : i1
    %296 = comb.or %240, %state_1_0 {sv.namehint = "allowed_1_0"} : i1
    %297 = comb.mux bin %240, %249, %state_1_1 {sv.namehint = "allowed_1_1"} : i1
    %298 = comb.mux bin %240, %250, %state_1_2 {sv.namehint = "allowed_1_2"} : i1
    %299 = comb.mux bin %240, %251, %state_1_3 {sv.namehint = "allowed_1_3"} : i1
    %300 = comb.mux bin %240, %252, %state_1_4 {sv.namehint = "allowed_1_4"} : i1
    %301 = comb.and bin %auto_out_a_ready, %296 {sv.namehint = "putfull_ready"} : i1
    %302 = comb.and bin %auto_out_a_ready, %297 {sv.namehint = "TLBroadcastTracker.io_out_a_ready"} : i1
    %303 = comb.and bin %auto_out_a_ready, %298 {sv.namehint = "TLBroadcastTracker_1.io_out_a_ready"} : i1
    %304 = comb.and bin %auto_out_a_ready, %299 {sv.namehint = "TLBroadcastTracker_2.io_out_a_ready"} : i1
    %305 = comb.and bin %auto_out_a_ready, %300 {sv.namehint = "TLBroadcastTracker_3.io_out_a_ready"} : i1
    %306 = comb.or bin %273, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T_3"} : i1
    %307 = comb.and %state_1_0, %122 {sv.namehint = "_nodeOut_a_valid_T_4"} : i1
    %308 = comb.and %state_1_1, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T_5"} : i1
    %309 = comb.and %state_1_2, %TLBroadcastTracker_1.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T_6"} : i1
    %310 = comb.and %state_1_3, %TLBroadcastTracker_2.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T_7"} : i1
    %311 = comb.and %state_1_4, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "_nodeOut_a_valid_T_8"} : i1
    %312 = comb.or bin %307, %308, %309, %310, %311 {sv.namehint = "_nodeOut_a_valid_T_12"} : i1
    %313 = comb.mux bin %240, %306, %312 {sv.namehint = "nodeOut_a_valid"} : i1
    %314 = comb.mux bin %291, %auto_in_c_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_9"} : i64
    %315 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_10"} : i64
    %316 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_11"} : i64
    %317 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_12"} : i64
    %318 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_data, %c0_i64 {sv.namehint = "_nodeOut_a_bits_T_13"} : i64
    %319 = comb.or bin %314, %315, %316, %317, %318 {sv.namehint = "_nodeOut_a_bits_T_17"} : i64
    %320 = comb.mux bin %291, %168, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_18"} : i8
    %321 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_mask, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_19"} : i8
    %322 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_mask, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_20"} : i8
    %323 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_mask, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_21"} : i8
    %324 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_mask, %c0_i8 {sv.namehint = "_nodeOut_a_bits_T_22"} : i8
    %325 = comb.or bin %320, %321, %322, %323, %324 {sv.namehint = "_nodeOut_a_bits_T_26"} : i8
    %326 = comb.mux bin %291, %auto_in_c_bits_address, %c0_i32 {sv.namehint = "_nodeOut_a_bits_T_90"} : i32
    %327 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_address, %c0_i32 {sv.namehint = "_nodeOut_a_bits_T_91"} : i32
    %328 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_address, %c0_i32 {sv.namehint = "_nodeOut_a_bits_T_92"} : i32
    %329 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_address, %c0_i32 {sv.namehint = "_nodeOut_a_bits_T_93"} : i32
    %330 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_address, %c0_i32 {sv.namehint = "_nodeOut_a_bits_T_94"} : i32
    %331 = comb.or bin %326, %327, %328, %329, %330 {sv.namehint = "_nodeOut_a_bits_T_98"} : i32
    %332 = comb.mux bin %291, %123, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_99"} : i4
    %333 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_source, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_100"} : i4
    %334 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_source, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_101"} : i4
    %335 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_source, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_102"} : i4
    %336 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_source, %c0_i4 {sv.namehint = "_nodeOut_a_bits_T_103"} : i4
    %337 = comb.or bin %332, %333, %334, %335, %336 {sv.namehint = "_nodeOut_a_bits_T_107"} : i4
    %338 = comb.mux bin %291, %auto_in_c_bits_size, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_108"} : i3
    %339 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_size, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_109"} : i3
    %340 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_size, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_110"} : i3
    %341 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_size, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_111"} : i3
    %342 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_size, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_112"} : i3
    %343 = comb.or bin %338, %339, %340, %341, %342 {sv.namehint = "_nodeOut_a_bits_T_116"} : i3
    %344 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_param, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_122"} : i3
    %345 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_param, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_119"} : i3
    %346 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_param, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_120"} : i3
    %347 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_param, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_121"} : i3
    %348 = comb.or bin %344, %345, %346, %347 {sv.namehint = "_nodeOut_a_bits_T_125"} : i3
    %349 = comb.mux bin %292, %TLBroadcastTracker.io_out_a_bits_opcode, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_131"} : i3
    %350 = comb.mux bin %293, %TLBroadcastTracker_1.io_out_a_bits_opcode, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_128"} : i3
    %351 = comb.mux bin %294, %TLBroadcastTracker_2.io_out_a_bits_opcode, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_129"} : i3
    %352 = comb.mux bin %295, %TLBroadcastTracker_3.io_out_a_bits_opcode, %c0_i3 {sv.namehint = "_nodeOut_a_bits_T_130"} : i3
    %353 = comb.or bin %349, %350, %351, %352 {sv.namehint = "_nodeOut_a_bits_T_134"} : i3
    %probe_todo = seq.firreg %425 clock %clock reset sync %reset, %false {firrtl.random_init_start = 23 : ui64, sv.namehint = "probe_todo"} : i1
    %probe_line = seq.firreg %427 clock %clock {firrtl.random_init_start = 24 : ui64} : i26
    %probe_perms = seq.firreg %429 clock %clock {firrtl.random_init_start = 50 : ui64, sv.namehint = "probe_perms"} : i2
    %354 = comb.concat %probe_line, %c0_i6 {sv.namehint = "nodeIn_b_bits_b_address"} : i26, i6
    %355 = comb.and bin %auto_in_b_ready, %probe_todo : i1
    %356 = comb.xor %355, %true : i1
    %357 = comb.and %356, %probe_todo : i1
    %358 = comb.icmp bin eq %auto_in_a_bits_source, %c0_i2 {sv.namehint = "_a_cache_T"} : i2
    %359 = comb.and bin %394, %auto_in_a_valid {sv.namehint = "_a_first_T"} : i1
    %360 = comb.concat %c0_i10, %auto_in_a_bits_size : i10, i3
    %361 = comb.shl bin %c63_i13, %360 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %362 = comb.extract %361 from 3 : (i13) -> i3
    %363 = comb.xor bin %362, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %364 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T"} : (i3) -> i1
    %365 = comb.mux bin %364, %c0_i3, %363 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %370 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 52 : ui64} : i3
    %366 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %367 = comb.icmp bin ne %a_first_counter, %c0_i3 {sv.namehint = "_nodeIn_a_ready_T"} : i3
    %368 = comb.xor bin %367, %true {sv.namehint = "a_first"} : i1
    %369 = comb.mux bin %367, %366, %365 {sv.namehint = "_a_first_counter_T"} : i3
    %370 = comb.mux bin %359, %369, %a_first_counter : i3
    %371 = comb.concat %TLBroadcastTracker_3.io_idle, %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle {sv.namehint = "freeTrackers"} : i1, i1, i1, i1
    %372 = comb.extract %auto_in_a_bits_address from 6 {sv.namehint = "_matchTrackers_T_6"} : (i32) -> i26
    %373 = comb.icmp bin eq %TLBroadcastTracker.io_line, %372 {sv.namehint = "_matchTrackers_T_1"} : i26
    %374 = comb.icmp bin eq %TLBroadcastTracker_1.io_line, %372 {sv.namehint = "_matchTrackers_T_3"} : i26
    %375 = comb.icmp bin eq %TLBroadcastTracker_2.io_line, %372 {sv.namehint = "_matchTrackers_T_5"} : i26
    %376 = comb.icmp bin eq %TLBroadcastTracker_3.io_line, %372 {sv.namehint = "_matchTrackers_T_7"} : i26
    %377 = comb.concat %376, %375, %374, %373 {sv.namehint = "matchTrackers"} : i1, i1, i1, i1
    %378 = comb.icmp bin ne %377, %c0_i4 {sv.namehint = "matchTracker"} : i4
    %379 = comb.concat %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle : i1, i1, i1
    %380 = comb.concat %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle, %false : i1, i1, i1
    %381 = comb.or bin %379, %380 {sv.namehint = "_allocTracker_T_2"} : i3
    %382 = comb.extract %381 from 0 : (i3) -> i1
    %383 = comb.concat %382, %c0_i2 : i1, i2
    %384 = comb.or bin %381, %383 {sv.namehint = "_allocTracker_T_6"} : i3
    %385 = comb.xor %384, %c-1_i3 : i3
    %386 = comb.concat %385, %true : i3, i1
    %387 = comb.and bin %386, %371 : i4
    %388 = comb.concat %376, %375, %374, %373 : i1, i1, i1, i1
    %389 = comb.mux bin %378, %388, %387 {sv.namehint = "filter_io_request_bits_mshr_lo"} : i4
    %390 = comb.concat %TLBroadcastTracker_3.io_in_a_ready, %TLBroadcastTracker_2.io_in_a_ready, %TLBroadcastTracker_1.io_in_a_ready, %TLBroadcastTracker.io_in_a_ready {sv.namehint = "trackerReadys"} : i1, i1, i1, i1
    %391 = comb.and bin %389, %390 : i4
    %392 = comb.icmp bin ne %391, %c0_i4 {sv.namehint = "trackerReady"} : i4
    %393 = comb.or bin %367, %filter.io_request_ready {sv.namehint = "_nodeIn_a_ready_T_1"} : i1
    %394 = comb.and bin %393, %392 {sv.namehint = "nodeIn_a_ready"} : i1
    %395 = comb.extract %389 from 0 : (i4) -> i1
    %396 = comb.extract %389 from 1 : (i4) -> i1
    %397 = comb.extract %389 from 2 : (i4) -> i1
    %398 = comb.extract %389 from 3 : (i4) -> i1
    %399 = comb.or bin %367, %filter.io_request_ready : i1
    %400 = comb.and bin %auto_in_a_valid, %395, %399 {sv.namehint = "TLBroadcastTracker.io_in_a_valid"} : i1
    %401 = comb.and bin %auto_in_a_valid, %396, %399 {sv.namehint = "TLBroadcastTracker_1.io_in_a_valid"} : i1
    %402 = comb.and bin %auto_in_a_valid, %397, %399 {sv.namehint = "TLBroadcastTracker_2.io_in_a_valid"} : i1
    %403 = comb.and bin %auto_in_a_valid, %398, %399 {sv.namehint = "TLBroadcastTracker_3.io_in_a_valid"} : i1
    %404 = comb.and bin %auto_in_a_valid, %368, %392 {sv.namehint = "filter.io_request_valid"} : i1
    %405 = comb.extract %389 from 2 {sv.namehint = "filter_io_request_bits_mshr_hi_1"} : (i4) -> i2
    %406 = comb.icmp bin ne %405, %c0_i2 {sv.namehint = "_filter_io_request_bits_mshr_T_2"} : i2
    %407 = comb.extract %389 from 3 : (i4) -> i1
    %408 = comb.extract %389 from 1 : (i4) -> i1
    %409 = comb.or bin %407, %408 {sv.namehint = "_filter_io_request_bits_mshr_T_3"} : i1
    %410 = comb.concat %406, %409 {sv.namehint = "filter.io_request_bits_mshr"} : i1, i1
    %411 = comb.icmp bin eq %auto_in_a_bits_param, %c1_i3 {sv.namehint = "_filter_io_request_bits_needT_acq_needT_T_3"} : i3
    %412 = comb.icmp bin eq %auto_in_a_bits_param, %c2_i3 {sv.namehint = "_filter_io_request_bits_needT_acq_needT_T_4"} : i3
    %413 = comb.or %412, %411 {sv.namehint = "filter_io_request_bits_needT_acq_needT"} : i1
    %414 = comb.icmp bin eq %auto_in_a_bits_param, %c1_i3 {sv.namehint = "_filter_io_request_bits_needT_T_3"} : i3
    %415 = comb.icmp bin ne %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "_filter_io_request_bits_needT_T_11"} : i3
    %416 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-3_i3 {sv.namehint = "_filter_io_request_bits_needT_T_12"} : i3
    %417 = comb.mux bin %416, %414, %415 {sv.namehint = "_filter_io_request_bits_needT_T_13"} : i1
    %418 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_filter_io_request_bits_needT_T_14"} : i3
    %419 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_filter_io_request_bits_needT_T_16"} : i3
    %420 = comb.or bin %419, %418 : i1
    %421 = comb.mux bin %420, %413, %417 {sv.namehint = "filter.io_request_bits_needT"} : i1
    %422 = comb.xor bin %filter.io_response_bits_allocOH, %true {sv.namehint = "TLBroadcastTracker.io_probe_bits_count"} : i1
    %423 = comb.xor bin %probe_todo, %true {sv.namehint = "filter.io_response_ready"} : i1
    %424 = comb.and bin %423, %filter.io_response_valid {sv.namehint = "_sack_T"} : i1
    %425 = comb.mux bin %424, %422, %357 : i1
    %426 = comb.extract %filter.io_response_bits_address from 6 {sv.namehint = "_probe_line_T"} : (i32) -> i26
    %427 = comb.mux bin %424, %426, %probe_line : i26
    %428 = comb.mux bin %filter.io_response_bits_needT, %c-2_i2, %c1_i2 {sv.namehint = "_probe_perms_T"} : i2
    %429 = comb.mux bin %424, %428, %probe_perms : i2
    %430 = comb.concat %c0_i2, %filter.io_response_bits_mshr : i2, i2
    %431 = comb.shl bin %c1_i4, %430 {sv.namehint = "_responseMSHR_T_1"} : i4
    %432 = comb.extract %431 from 0 {sv.namehint = "responseMSHR_0"} : (i4) -> i1
    %433 = comb.extract %431 from 1 {sv.namehint = "responseMSHR_1"} : (i4) -> i1
    %434 = comb.extract %431 from 2 {sv.namehint = "responseMSHR_2"} : (i4) -> i1
    %435 = comb.extract %431 from 3 {sv.namehint = "responseMSHR_3"} : (i4) -> i1
    %436 = comb.and bin %424, %432 {sv.namehint = "TLBroadcastTracker.io_probe_valid"} : i1
    %437 = comb.and bin %424, %433 {sv.namehint = "TLBroadcastTracker_1.io_probe_valid"} : i1
    %438 = comb.and bin %424, %434 {sv.namehint = "TLBroadcastTracker_2.io_probe_valid"} : i1
    %439 = comb.and bin %424, %435 {sv.namehint = "TLBroadcastTracker_3.io_probe_valid"} : i1
    hw.output %394, %probe_todo, %probe_perms, %354, %107, %197, %212, %209, %207, %204, %201, %200, %199, %198, %313, %353, %348, %343, %337, %331, %291, %291, %291, %291, %291, %291, %325, %319, %44 : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLJbar(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i3, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_12(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i3, in %auto_widget_in_a_bits_source : i4, in %auto_widget_in_a_bits_address : i32, in %auto_widget_in_a_bits_user_amba_prot_bufferable : i1, in %auto_widget_in_a_bits_user_amba_prot_modifiable : i1, in %auto_widget_in_a_bits_user_amba_prot_readalloc : i1, in %auto_widget_in_a_bits_user_amba_prot_writealloc : i1, in %auto_widget_in_a_bits_user_amba_prot_privileged : i1, in %auto_widget_in_a_bits_user_amba_prot_secure : i1, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_size : i3, out auto_widget_in_d_bits_source : i4, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_bus_xing_out_a_ready : i1, out auto_bus_xing_out_a_valid : i1, out auto_bus_xing_out_a_bits_opcode : i3, out auto_bus_xing_out_a_bits_param : i3, out auto_bus_xing_out_a_bits_size : i3, out auto_bus_xing_out_a_bits_source : i4, out auto_bus_xing_out_a_bits_address : i32, out auto_bus_xing_out_a_bits_mask : i8, out auto_bus_xing_out_a_bits_data : i64, out auto_bus_xing_out_d_ready : i1, in %auto_bus_xing_out_d_valid : i1, in %auto_bus_xing_out_d_bits_opcode : i3, in %auto_bus_xing_out_d_bits_size : i3, in %auto_bus_xing_out_d_bits_source : i4, in %auto_bus_xing_out_d_bits_denied : i1, in %auto_bus_xing_out_d_bits_data : i64, in %auto_bus_xing_out_d_bits_corrupt : i1) {
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_6(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i3, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i4, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_widget_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_widget_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_widget_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_widget_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_widget_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_widget_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_out_a_ready: %auto_bus_xing_out_a_ready: i1, auto_out_d_valid: %auto_bus_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_bus_xing_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_bus_xing_out_d_bits_size: i3, auto_out_d_bits_source: %auto_bus_xing_out_d_bits_source: i4, auto_out_d_bits_denied: %auto_bus_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_bus_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_bus_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "bus_xingIn_d_ready"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i8, i64, i1
  }
  hw.module private @CoherenceManagerWrapper(in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source : i4, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address : i32, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size : i3, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source : i4, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt : i1, out auto_coherent_jbar_in_a_ready : i1, in %auto_coherent_jbar_in_a_valid : i1, in %auto_coherent_jbar_in_a_bits_opcode : i3, in %auto_coherent_jbar_in_a_bits_param : i3, in %auto_coherent_jbar_in_a_bits_size : i3, in %auto_coherent_jbar_in_a_bits_source : i2, in %auto_coherent_jbar_in_a_bits_address : i32, in %auto_coherent_jbar_in_a_bits_mask : i8, in %auto_coherent_jbar_in_a_bits_data : i64, in %auto_coherent_jbar_in_a_bits_corrupt : i1, in %auto_coherent_jbar_in_b_ready : i1, out auto_coherent_jbar_in_b_valid : i1, out auto_coherent_jbar_in_b_bits_param : i2, out auto_coherent_jbar_in_b_bits_address : i32, out auto_coherent_jbar_in_c_ready : i1, in %auto_coherent_jbar_in_c_valid : i1, in %auto_coherent_jbar_in_c_bits_opcode : i3, in %auto_coherent_jbar_in_c_bits_param : i3, in %auto_coherent_jbar_in_c_bits_size : i3, in %auto_coherent_jbar_in_c_bits_source : i2, in %auto_coherent_jbar_in_c_bits_address : i32, in %auto_coherent_jbar_in_c_bits_data : i64, in %auto_coherent_jbar_in_c_bits_corrupt : i1, in %auto_coherent_jbar_in_d_ready : i1, out auto_coherent_jbar_in_d_valid : i1, out auto_coherent_jbar_in_d_bits_opcode : i3, out auto_coherent_jbar_in_d_bits_param : i2, out auto_coherent_jbar_in_d_bits_size : i3, out auto_coherent_jbar_in_d_bits_source : i2, out auto_coherent_jbar_in_d_bits_sink : i2, out auto_coherent_jbar_in_d_bits_denied : i1, out auto_coherent_jbar_in_d_bits_data : i64, out auto_coherent_jbar_in_d_bits_corrupt : i1, in %auto_coherent_jbar_in_e_valid : i1, in %auto_coherent_jbar_in_e_bits_sink : i2, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock : !seq.clock, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset : i1, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock : !seq.clock, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset : i1, out auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock : !seq.clock, out auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset : i1) {
    %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_reset, %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_clock, %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_l2_clock_groups" @ClockGroupAggregator_3(auto_in_member_subsystem_cbus_1_clock: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock: !seq.clock, auto_in_member_subsystem_cbus_1_reset: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset: i1, auto_in_member_subsystem_cbus_0_clock: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock: !seq.clock, auto_in_member_subsystem_cbus_0_reset: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset: i1) -> (auto_out_1_member_subsystem_pbus_0_clock: !seq.clock, auto_out_1_member_subsystem_pbus_0_reset: i1, auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_l2_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_clock, %fixedClockNode.auto_out_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_1(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockSinkNodeIn_reset"}
    %broadcast_1.auto_in_a_ready, %broadcast_1.auto_in_b_valid, %broadcast_1.auto_in_b_bits_param, %broadcast_1.auto_in_b_bits_address, %broadcast_1.auto_in_c_ready, %broadcast_1.auto_in_d_valid, %broadcast_1.auto_in_d_bits_opcode, %broadcast_1.auto_in_d_bits_param, %broadcast_1.auto_in_d_bits_size, %broadcast_1.auto_in_d_bits_source, %broadcast_1.auto_in_d_bits_sink, %broadcast_1.auto_in_d_bits_denied, %broadcast_1.auto_in_d_bits_data, %broadcast_1.auto_in_d_bits_corrupt, %broadcast_1.auto_out_a_valid, %broadcast_1.auto_out_a_bits_opcode, %broadcast_1.auto_out_a_bits_param, %broadcast_1.auto_out_a_bits_size, %broadcast_1.auto_out_a_bits_source, %broadcast_1.auto_out_a_bits_address, %broadcast_1.auto_out_a_bits_user_amba_prot_bufferable, %broadcast_1.auto_out_a_bits_user_amba_prot_modifiable, %broadcast_1.auto_out_a_bits_user_amba_prot_readalloc, %broadcast_1.auto_out_a_bits_user_amba_prot_writealloc, %broadcast_1.auto_out_a_bits_user_amba_prot_privileged, %broadcast_1.auto_out_a_bits_user_amba_prot_secure, %broadcast_1.auto_out_a_bits_mask, %broadcast_1.auto_out_a_bits_data, %broadcast_1.auto_out_d_ready = hw.instance "broadcast_1" @TLBroadcast(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %coherent_jbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %coherent_jbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %coherent_jbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %coherent_jbar.auto_out_a_bits_size: i3, auto_in_a_bits_source: %coherent_jbar.auto_out_a_bits_source: i2, auto_in_a_bits_address: %coherent_jbar.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %coherent_jbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %coherent_jbar.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %coherent_jbar.auto_out_a_bits_corrupt: i1, auto_in_b_ready: %coherent_jbar.auto_out_b_ready: i1, auto_in_c_valid: %coherent_jbar.auto_out_c_valid: i1, auto_in_c_bits_opcode: %coherent_jbar.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %coherent_jbar.auto_out_c_bits_param: i3, auto_in_c_bits_size: %coherent_jbar.auto_out_c_bits_size: i3, auto_in_c_bits_source: %coherent_jbar.auto_out_c_bits_source: i2, auto_in_c_bits_address: %coherent_jbar.auto_out_c_bits_address: i32, auto_in_c_bits_data: %coherent_jbar.auto_out_c_bits_data: i64, auto_in_c_bits_corrupt: %coherent_jbar.auto_out_c_bits_corrupt: i1, auto_in_d_ready: %coherent_jbar.auto_out_d_ready: i1, auto_in_e_valid: %coherent_jbar.auto_out_e_valid: i1, auto_in_e_bits_sink: %coherent_jbar.auto_out_e_bits_sink: i2, auto_out_a_ready: %binder.auto_in_a_ready: i1, auto_out_d_valid: %binder.auto_in_d_valid: i1, auto_out_d_bits_opcode: %binder.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %binder.auto_in_d_bits_size: i3, auto_out_d_bits_source: %binder.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %binder.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %binder.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %binder.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "binder.auto_in_d_ready"}
    %coherent_jbar.auto_in_a_ready, %coherent_jbar.auto_in_b_valid, %coherent_jbar.auto_in_b_bits_param, %coherent_jbar.auto_in_b_bits_address, %coherent_jbar.auto_in_c_ready, %coherent_jbar.auto_in_d_valid, %coherent_jbar.auto_in_d_bits_opcode, %coherent_jbar.auto_in_d_bits_param, %coherent_jbar.auto_in_d_bits_size, %coherent_jbar.auto_in_d_bits_source, %coherent_jbar.auto_in_d_bits_sink, %coherent_jbar.auto_in_d_bits_denied, %coherent_jbar.auto_in_d_bits_data, %coherent_jbar.auto_in_d_bits_corrupt, %coherent_jbar.auto_out_a_valid, %coherent_jbar.auto_out_a_bits_opcode, %coherent_jbar.auto_out_a_bits_param, %coherent_jbar.auto_out_a_bits_size, %coherent_jbar.auto_out_a_bits_source, %coherent_jbar.auto_out_a_bits_address, %coherent_jbar.auto_out_a_bits_mask, %coherent_jbar.auto_out_a_bits_data, %coherent_jbar.auto_out_a_bits_corrupt, %coherent_jbar.auto_out_b_ready, %coherent_jbar.auto_out_c_valid, %coherent_jbar.auto_out_c_bits_opcode, %coherent_jbar.auto_out_c_bits_param, %coherent_jbar.auto_out_c_bits_size, %coherent_jbar.auto_out_c_bits_source, %coherent_jbar.auto_out_c_bits_address, %coherent_jbar.auto_out_c_bits_data, %coherent_jbar.auto_out_c_bits_corrupt, %coherent_jbar.auto_out_d_ready, %coherent_jbar.auto_out_e_valid, %coherent_jbar.auto_out_e_bits_sink = hw.instance "coherent_jbar" @TLJbar(auto_in_a_valid: %auto_coherent_jbar_in_a_valid: i1, auto_in_a_bits_opcode: %auto_coherent_jbar_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_coherent_jbar_in_a_bits_param: i3, auto_in_a_bits_size: %auto_coherent_jbar_in_a_bits_size: i3, auto_in_a_bits_source: %auto_coherent_jbar_in_a_bits_source: i2, auto_in_a_bits_address: %auto_coherent_jbar_in_a_bits_address: i32, auto_in_a_bits_mask: %auto_coherent_jbar_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_coherent_jbar_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_coherent_jbar_in_a_bits_corrupt: i1, auto_in_b_ready: %auto_coherent_jbar_in_b_ready: i1, auto_in_c_valid: %auto_coherent_jbar_in_c_valid: i1, auto_in_c_bits_opcode: %auto_coherent_jbar_in_c_bits_opcode: i3, auto_in_c_bits_param: %auto_coherent_jbar_in_c_bits_param: i3, auto_in_c_bits_size: %auto_coherent_jbar_in_c_bits_size: i3, auto_in_c_bits_source: %auto_coherent_jbar_in_c_bits_source: i2, auto_in_c_bits_address: %auto_coherent_jbar_in_c_bits_address: i32, auto_in_c_bits_data: %auto_coherent_jbar_in_c_bits_data: i64, auto_in_c_bits_corrupt: %auto_coherent_jbar_in_c_bits_corrupt: i1, auto_in_d_ready: %auto_coherent_jbar_in_d_ready: i1, auto_in_e_valid: %auto_coherent_jbar_in_e_valid: i1, auto_in_e_bits_sink: %auto_coherent_jbar_in_e_bits_sink: i2, auto_out_a_ready: %broadcast_1.auto_in_a_ready: i1, auto_out_b_valid: %broadcast_1.auto_in_b_valid: i1, auto_out_b_bits_param: %broadcast_1.auto_in_b_bits_param: i2, auto_out_b_bits_address: %broadcast_1.auto_in_b_bits_address: i32, auto_out_c_ready: %broadcast_1.auto_in_c_ready: i1, auto_out_d_valid: %broadcast_1.auto_in_d_valid: i1, auto_out_d_bits_opcode: %broadcast_1.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %broadcast_1.auto_in_d_bits_param: i2, auto_out_d_bits_size: %broadcast_1.auto_in_d_bits_size: i3, auto_out_d_bits_source: %broadcast_1.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %broadcast_1.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %broadcast_1.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %broadcast_1.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %broadcast_1.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i3, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "coherent_jbar.auto_in_d_valid"}
    %binder.auto_in_a_ready, %binder.auto_in_d_valid, %binder.auto_in_d_bits_opcode, %binder.auto_in_d_bits_size, %binder.auto_in_d_bits_source, %binder.auto_in_d_bits_denied, %binder.auto_in_d_bits_data, %binder.auto_in_d_bits_corrupt, %binder.auto_out_a_valid, %binder.auto_out_a_bits_opcode, %binder.auto_out_a_bits_param, %binder.auto_out_a_bits_size, %binder.auto_out_a_bits_source, %binder.auto_out_a_bits_address, %binder.auto_out_a_bits_user_amba_prot_bufferable, %binder.auto_out_a_bits_user_amba_prot_modifiable, %binder.auto_out_a_bits_user_amba_prot_readalloc, %binder.auto_out_a_bits_user_amba_prot_writealloc, %binder.auto_out_a_bits_user_amba_prot_privileged, %binder.auto_out_a_bits_user_amba_prot_secure, %binder.auto_out_a_bits_mask, %binder.auto_out_a_bits_data, %binder.auto_out_d_ready = hw.instance "binder" @ProbePicker(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %broadcast_1.auto_out_a_valid: i1, auto_in_a_bits_opcode: %broadcast_1.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %broadcast_1.auto_out_a_bits_param: i3, auto_in_a_bits_size: %broadcast_1.auto_out_a_bits_size: i3, auto_in_a_bits_source: %broadcast_1.auto_out_a_bits_source: i4, auto_in_a_bits_address: %broadcast_1.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %broadcast_1.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %broadcast_1.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %broadcast_1.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %broadcast_1.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %broadcast_1.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %broadcast_1.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_mask: %broadcast_1.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %broadcast_1.auto_out_a_bits_data: i64, auto_in_d_ready: %broadcast_1.auto_out_d_ready: i1, auto_out_a_ready: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_a_ready: i1, auto_out_d_valid: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid: i1, auto_out_d_bits_opcode: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_opcode: i3, auto_out_d_bits_size: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_size: i3, auto_out_d_bits_source: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_source: i4, auto_out_d_bits_denied: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_denied: i1, auto_out_d_bits_data: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_data: i64, auto_out_d_bits_corrupt: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "binder.auto_in_d_valid"}
    %coupler_to_bus_named_subsystem_mbus.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_d_ready = hw.instance "coupler_to_bus_named_subsystem_mbus" @TLInterconnectCoupler_12(auto_widget_in_a_valid: %binder.auto_out_a_valid: i1, auto_widget_in_a_bits_opcode: %binder.auto_out_a_bits_opcode: i3, auto_widget_in_a_bits_param: %binder.auto_out_a_bits_param: i3, auto_widget_in_a_bits_size: %binder.auto_out_a_bits_size: i3, auto_widget_in_a_bits_source: %binder.auto_out_a_bits_source: i4, auto_widget_in_a_bits_address: %binder.auto_out_a_bits_address: i32, auto_widget_in_a_bits_user_amba_prot_bufferable: %binder.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_widget_in_a_bits_user_amba_prot_modifiable: %binder.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_widget_in_a_bits_user_amba_prot_readalloc: %binder.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_widget_in_a_bits_user_amba_prot_writealloc: %binder.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_widget_in_a_bits_user_amba_prot_privileged: %binder.auto_out_a_bits_user_amba_prot_privileged: i1, auto_widget_in_a_bits_user_amba_prot_secure: %binder.auto_out_a_bits_user_amba_prot_secure: i1, auto_widget_in_a_bits_mask: %binder.auto_out_a_bits_mask: i8, auto_widget_in_a_bits_data: %binder.auto_out_a_bits_data: i64, auto_widget_in_d_ready: %binder.auto_out_d_ready: i1, auto_bus_xing_out_a_ready: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready: i1, auto_bus_xing_out_d_valid: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid: i1, auto_bus_xing_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode: i3, auto_bus_xing_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size: i3, auto_bus_xing_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source: i4, auto_bus_xing_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied: i1, auto_bus_xing_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data: i64, auto_bus_xing_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_size: i3, auto_widget_in_d_bits_source: i4, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_bus_xing_out_a_valid: i1, auto_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_out_a_bits_param: i3, auto_bus_xing_out_a_bits_size: i3, auto_bus_xing_out_a_bits_source: i4, auto_bus_xing_out_a_bits_address: i32, auto_bus_xing_out_a_bits_mask: i8, auto_bus_xing_out_a_bits_data: i64, auto_bus_xing_out_d_ready: i1) {sv.namehint = "coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid"}
    hw.output %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_d_ready, %coherent_jbar.auto_in_a_ready, %coherent_jbar.auto_in_b_valid, %coherent_jbar.auto_in_b_bits_param, %coherent_jbar.auto_in_b_bits_address, %coherent_jbar.auto_in_c_ready, %coherent_jbar.auto_in_d_valid, %coherent_jbar.auto_in_d_bits_opcode, %coherent_jbar.auto_in_d_bits_param, %coherent_jbar.auto_in_d_bits_size, %coherent_jbar.auto_in_d_bits_source, %coherent_jbar.auto_in_d_bits_sink, %coherent_jbar.auto_in_d_bits_denied, %coherent_jbar.auto_in_d_bits_data, %coherent_jbar.auto_in_d_bits_corrupt, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_reset : i1, i3, i3, i3, i4, i32, i8, i64, i1, i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, !seq.clock, i1
  }
  hw.module private @TLMonitor_18(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i1, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_opcode : i3, in %io_in_b_bits_param : i2, in %io_in_b_bits_size : i4, in %io_in_b_bits_source : i1, in %io_in_b_bits_address : i32, in %io_in_b_bits_mask : i8, in %io_in_b_bits_corrupt : i1, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i4, in %io_in_c_bits_source : i1, in %io_in_c_bits_address : i32, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_ready : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c0_i6 = hw.constant 0 : i6
    %c0_i20 = hw.constant 0 : i20
    %c-8_i4 = hw.constant -8 : i4
    %c7_i4 = hw.constant 7 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i31 = hw.constant 255 : i31
    %c15_i31 = hw.constant 15 : i31
    %c1_i2 = hw.constant 1 : i2
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i12 = hw.constant -1 : i12
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i16 = hw.constant 0 : i16
    %c0_i8 = hw.constant 0 : i8
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i2 = hw.constant -1 : i2
    %false = hw.constant false
    %c0_i15 = hw.constant 0 : i15
    %c0_i23 = hw.constant 0 : i23
    %c0_i12 = hw.constant 0 : i12
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i16 = hw.constant -1 : i16
    %c0_i27 = hw.constant 0 : i27
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.xor bin %io_in_a_bits_source, %true {sv.namehint = "_source_ok_T"} : i1
    %4 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %5 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %6 = comb.extract %5 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %7 = comb.xor bin %6, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %8 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i12
    %9 = comb.and bin %8, %7 : i12
    %10 = comb.icmp bin eq %9, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %11 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %12 = comb.concat %c0_i2, %11 : i2, i2
    %13 = comb.shl bin %c1_i4, %12 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.extract %13 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.extract %13 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_acc_6"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_acc_7"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_acc_8"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_acc_9"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_acc_10"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_acc_11"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_acc_12"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_acc_13"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %58 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %59 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %60 = comb.xor bin %59, %c-1_i2 : i2
    %61 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %62 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %63 = comb.xor bin %62, %true : i1
    %64 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %65 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %66 = comb.xor bin %65, %c-512_i10 : i10
    %67 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %68 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %69 = comb.xor bin %68, %c-1_i2 : i2
    %70 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %71 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %72 = comb.xor bin %71, %c-1_i2 : i2
    %73 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %74 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %75 = comb.icmp eq %74, %c-8_i4 : i4
    %76 = comb.and bin %57, %73, %75 : i1
    %77 = comb.xor bin %reset, %true : i1
    %78 = comb.and bin %io_in_a_valid, %56, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %80 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %81 = comb.icmp bin eq %80, %c0_i20 : i20
    %82 = comb.concat %58, %60 : i18, i2
    %83 = comb.icmp bin eq %82, %c0_i20 : i20
    %84 = comb.concat %61, %63 : i15, i1
    %85 = comb.icmp bin eq %84, %c0_i16 : i16
    %86 = comb.concat %64, %66 : i6, i10
    %87 = comb.icmp bin eq %86, %c0_i16 : i16
    %88 = comb.concat %67, %69 : i4, i2
    %89 = comb.icmp bin eq %88, %c0_i6 : i6
    %90 = comb.concat %70, %72 : i1, i2
    %91 = comb.icmp bin eq %90, %c0_i3 : i3
    %92 = comb.or bin %81, %83 : i1
    %93 = comb.or bin %92, %85, %87, %89, %91, %75 : i1
    %94 = comb.and bin %57, %93 : i1
    %95 = comb.and bin %3, %79, %94 : i1
    %96 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %97 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %98 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %99 = comb.and bin %io_in_a_valid, %98, %77 : i1
    %100 = comb.and bin %3, %79, %94 : i1
    %101 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %102 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %103 = comb.and bin %io_in_a_valid, %102, %77 : i1
    %104 = comb.and bin %57, %83 : i1
    %105 = comb.or bin %81, %85, %87, %89, %91, %75 : i1
    %106 = comb.and bin %73, %105 : i1
    %107 = comb.or bin %104, %106 : i1
    %108 = comb.xor bin %101, %true : i1
    %109 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %110 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %111 = comb.or bin %81, %87, %89, %75 : i1
    %112 = comb.and bin %73, %111 : i1
    %113 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %114 = comb.and bin %113, %91 : i1
    %115 = comb.or bin %104, %112, %114 : i1
    %116 = comb.and bin %57, %115 : i1
    %117 = comb.and bin %io_in_a_valid, %110, %77 : i1
    %118 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %119 = comb.and bin %io_in_a_valid, %118, %77 : i1
    %120 = comb.xor bin %55, %c-1_i8 : i8
    %121 = comb.and bin %io_in_a_bits_mask, %120 : i8
    %122 = comb.icmp bin eq %121, %c0_i8 : i8
    %123 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %124 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %125 = comb.or bin %92, %87, %89 : i1
    %126 = comb.and bin %57, %124, %125 : i1
    %127 = comb.and bin %io_in_a_valid, %123, %77 : i1
    %128 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %129 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %130 = comb.and bin %io_in_a_valid, %129, %77 : i1
    %131 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %132 = comb.xor bin %131, %true : i1
    %133 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %134 = comb.and bin %io_in_a_valid, %133, %77 : i1
    %135 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %136 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %137 = comb.and bin %io_in_d_valid, %77 : i1
    %138 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %139 = comb.and bin %io_in_d_valid, %138, %77 : i1
    %140 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %141 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %142 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %143 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %144 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %145 = comb.and bin %io_in_d_valid, %144, %77 : i1
    %146 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %147 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %148 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %149 = comb.and bin %io_in_d_valid, %148, %77 : i1
    %150 = comb.or bin %143, %io_in_d_bits_corrupt : i1
    %151 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %152 = comb.and bin %io_in_d_valid, %151, %77 : i1
    %153 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %154 = comb.and bin %io_in_d_valid, %153, %77 : i1
    %155 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %156 = comb.and bin %io_in_d_valid, %155, %77 : i1
    %157 = comb.icmp bin ne %io_in_b_bits_opcode, %c-1_i3 : i3
    %158 = comb.and bin %io_in_b_valid, %77 : i1
    %159 = comb.xor bin %io_in_b_bits_source, %true {sv.namehint = "_legal_source_T"} : i1
    %160 = comb.extract %io_in_b_bits_address from 14 : (i32) -> i18
    %161 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i2
    %162 = comb.xor bin %161, %c-1_i2 : i2
    %163 = comb.concat %160, %162 : i18, i2
    %164 = comb.icmp bin ne %163, %c0_i20 : i20
    %165 = comb.xor bin %164, %true {sv.namehint = "_address_ok_T_4"} : i1
    %166 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %167 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i2
    %168 = comb.xor bin %167, %c-1_i2 : i2
    %169 = comb.concat %166, %168 : i4, i2
    %170 = comb.icmp bin ne %169, %c0_i6 : i6
    %171 = comb.xor bin %170, %true {sv.namehint = "_address_ok_T_9"} : i1
    %172 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i6
    %173 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i10
    %174 = comb.xor bin %173, %c-512_i10 : i10
    %175 = comb.concat %172, %174 : i6, i10
    %176 = comb.icmp bin ne %175, %c0_i16 : i16
    %177 = comb.xor bin %176, %true {sv.namehint = "_address_ok_T_14"} : i1
    %178 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i20
    %179 = comb.icmp bin ne %178, %c0_i20 : i20
    %180 = comb.xor bin %179, %true {sv.namehint = "_address_ok_T_19"} : i1
    %181 = comb.extract %io_in_b_bits_address from 17 : (i32) -> i15
    %182 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i1
    %183 = comb.xor bin %182, %true : i1
    %184 = comb.concat %181, %183 : i15, i1
    %185 = comb.icmp bin ne %184, %c0_i16 : i16
    %186 = comb.xor bin %185, %true {sv.namehint = "_address_ok_T_24"} : i1
    %187 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %188 = comb.icmp ne %187, %c-8_i4 : i4
    %189 = comb.xor bin %188, %true {sv.namehint = "_address_ok_T_29"} : i1
    %190 = comb.extract %io_in_b_bits_address from 31 : (i32) -> i1
    %191 = comb.extract %io_in_b_bits_address from 29 : (i32) -> i2
    %192 = comb.xor bin %191, %c-1_i2 : i2
    %193 = comb.concat %190, %192 : i1, i2
    %194 = comb.icmp bin ne %193, %c0_i3 : i3
    %195 = comb.xor bin %194, %true {sv.namehint = "_address_ok_T_34"} : i1
    %196 = comb.or bin %165, %171, %177, %180, %186, %189, %195 {sv.namehint = "address_ok"} : i1
    %197 = comb.concat %c0_i23, %io_in_b_bits_size : i23, i4
    %198 = comb.shl bin %c4095_i27, %197 {sv.namehint = "_is_aligned_mask_T_4"} : i27
    %199 = comb.extract %198 from 0 {sv.namehint = "_is_aligned_mask_T_5"} : (i27) -> i12
    %200 = comb.xor bin %199, %c-1_i12 {sv.namehint = "is_aligned_mask_1"} : i12
    %201 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i12
    %202 = comb.and bin %201, %200 : i12
    %203 = comb.icmp bin eq %202, %c0_i12 {sv.namehint = "is_aligned_1"} : i12
    %204 = comb.extract %io_in_b_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount_1"} : (i4) -> i2
    %205 = comb.concat %c0_i2, %204 : i2, i2
    %206 = comb.shl bin %c1_i4, %205 {sv.namehint = "_mask_sizeOH_T_4"} : i4
    %207 = comb.icmp bin ugt %io_in_b_bits_size, %c2_i4 {sv.namehint = "_mask_T_1"} : i4
    %208 = comb.extract %206 from 2 {sv.namehint = "mask_size_3"} : (i4) -> i1
    %209 = comb.extract %io_in_b_bits_address from 2 {sv.namehint = "mask_bit_3"} : (i32) -> i1
    %210 = comb.xor bin %209, %true {sv.namehint = "mask_eq_14"} : i1
    %211 = comb.and bin %208, %210 {sv.namehint = "_mask_acc_T_14"} : i1
    %212 = comb.or bin %207, %211 {sv.namehint = "mask_acc_14"} : i1
    %213 = comb.and bin %208, %209 {sv.namehint = "_mask_acc_T_15"} : i1
    %214 = comb.or bin %207, %213 {sv.namehint = "mask_acc_15"} : i1
    %215 = comb.extract %206 from 1 {sv.namehint = "mask_size_4"} : (i4) -> i1
    %216 = comb.extract %io_in_b_bits_address from 1 {sv.namehint = "mask_bit_4"} : (i32) -> i1
    %217 = comb.xor bin %216, %true {sv.namehint = "mask_nbit_4"} : i1
    %218 = comb.and bin %210, %217 {sv.namehint = "mask_eq_16"} : i1
    %219 = comb.and bin %215, %218 {sv.namehint = "_mask_acc_T_16"} : i1
    %220 = comb.or bin %212, %219 {sv.namehint = "mask_acc_16"} : i1
    %221 = comb.and bin %210, %216 {sv.namehint = "mask_eq_17"} : i1
    %222 = comb.and bin %215, %221 {sv.namehint = "_mask_acc_T_17"} : i1
    %223 = comb.or bin %212, %222 {sv.namehint = "mask_acc_17"} : i1
    %224 = comb.and bin %209, %217 {sv.namehint = "mask_eq_18"} : i1
    %225 = comb.and bin %215, %224 {sv.namehint = "_mask_acc_T_18"} : i1
    %226 = comb.or bin %214, %225 {sv.namehint = "mask_acc_18"} : i1
    %227 = comb.and bin %209, %216 {sv.namehint = "mask_eq_19"} : i1
    %228 = comb.and bin %215, %227 {sv.namehint = "_mask_acc_T_19"} : i1
    %229 = comb.or bin %214, %228 {sv.namehint = "mask_acc_19"} : i1
    %230 = comb.extract %io_in_b_bits_address from 0 {sv.namehint = "mask_bit_5"} : (i32) -> i1
    %231 = comb.xor bin %230, %true {sv.namehint = "mask_nbit_5"} : i1
    %232 = comb.and bin %218, %231 {sv.namehint = "mask_eq_20"} : i1
    %233 = comb.or bin %220, %232 {sv.namehint = "mask_acc_20"} : i1
    %234 = comb.and bin %218, %230 {sv.namehint = "mask_eq_21"} : i1
    %235 = comb.or bin %220, %234 {sv.namehint = "mask_acc_21"} : i1
    %236 = comb.and bin %221, %231 {sv.namehint = "mask_eq_22"} : i1
    %237 = comb.or bin %223, %236 {sv.namehint = "mask_acc_22"} : i1
    %238 = comb.and bin %221, %230 {sv.namehint = "mask_eq_23"} : i1
    %239 = comb.or bin %223, %238 {sv.namehint = "mask_acc_23"} : i1
    %240 = comb.and bin %224, %231 {sv.namehint = "mask_eq_24"} : i1
    %241 = comb.or bin %226, %240 {sv.namehint = "mask_acc_24"} : i1
    %242 = comb.and bin %224, %230 {sv.namehint = "mask_eq_25"} : i1
    %243 = comb.or bin %226, %242 {sv.namehint = "mask_acc_25"} : i1
    %244 = comb.and bin %227, %231 {sv.namehint = "mask_eq_26"} : i1
    %245 = comb.or bin %229, %244 {sv.namehint = "mask_acc_26"} : i1
    %246 = comb.and bin %227, %230 {sv.namehint = "mask_eq_27"} : i1
    %247 = comb.or bin %229, %246 {sv.namehint = "mask_acc_27"} : i1
    %248 = comb.concat %247, %245, %243, %241, %239, %237, %235, %233 {sv.namehint = "mask_1"} : i1, i1, i1, i1, i1, i1, i1, i1
    %249 = comb.icmp bin eq %io_in_b_bits_opcode, %c-2_i3 : i3
    %250 = comb.icmp bin eq %io_in_b_bits_size, %c6_i4 : i4
    %251 = comb.icmp bin ult %io_in_b_bits_size, %c-3_i4 : i4
    %252 = comb.xor bin %179, %true : i1
    %253 = comb.xor bin %164, %true : i1
    %254 = comb.xor bin %185, %true : i1
    %255 = comb.xor bin %176, %true : i1
    %256 = comb.xor bin %170, %true : i1
    %257 = comb.xor bin %194, %true : i1
    %258 = comb.xor bin %188, %true : i1
    %259 = comb.or bin %252, %253, %254, %255, %256, %257, %258 : i1
    %260 = comb.and bin %159, %250, %251, %259 : i1
    %261 = comb.and bin %io_in_b_valid, %249, %77 : i1
    %262 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %263 = comb.icmp bin eq %io_in_b_bits_mask, %248 : i8
    %264 = comb.xor bin %io_in_b_bits_corrupt, %true : i1
    %265 = comb.icmp bin eq %io_in_b_bits_opcode, %c-4_i3 : i3
    %266 = comb.and bin %io_in_b_valid, %265, %77 : i1
    %267 = comb.icmp bin eq %io_in_b_bits_param, %c0_i2 : i2
    %268 = comb.icmp bin eq %io_in_b_bits_opcode, %c0_i3 : i3
    %269 = comb.and bin %io_in_b_valid, %268, %77 : i1
    %270 = comb.icmp bin eq %io_in_b_bits_opcode, %c1_i3 : i3
    %271 = comb.and bin %io_in_b_valid, %270, %77 : i1
    %272 = comb.xor bin %248, %c-1_i8 : i8
    %273 = comb.and bin %io_in_b_bits_mask, %272 : i8
    %274 = comb.icmp bin eq %273, %c0_i8 : i8
    %275 = comb.icmp bin eq %io_in_b_bits_opcode, %c2_i3 : i3
    %276 = comb.and bin %io_in_b_valid, %275, %77 : i1
    %277 = comb.icmp bin eq %io_in_b_bits_opcode, %c3_i3 : i3
    %278 = comb.and bin %io_in_b_valid, %277, %77 : i1
    %279 = comb.icmp bin eq %io_in_b_bits_opcode, %c-3_i3 : i3
    %280 = comb.and bin %io_in_b_valid, %279, %77 : i1
    %281 = comb.xor bin %io_in_c_bits_source, %true {sv.namehint = "_source_ok_T_4"} : i1
    %282 = comb.concat %c0_i23, %io_in_c_bits_size : i23, i4
    %283 = comb.shl bin %c4095_i27, %282 {sv.namehint = "_is_aligned_mask_T_7"} : i27
    %284 = comb.extract %283 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i27) -> i12
    %285 = comb.xor bin %284, %c-1_i12 {sv.namehint = "is_aligned_mask_2"} : i12
    %286 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i12
    %287 = comb.and bin %286, %285 : i12
    %288 = comb.icmp bin eq %287, %c0_i12 {sv.namehint = "is_aligned_2"} : i12
    %289 = comb.extract %io_in_c_bits_address from 14 : (i32) -> i18
    %290 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i2
    %291 = comb.xor bin %290, %c-1_i2 : i2
    %292 = comb.concat %289, %291 : i18, i2
    %293 = comb.icmp bin ne %292, %c0_i20 : i20
    %294 = comb.xor bin %293, %true {sv.namehint = "_address_ok_T_44"} : i1
    %295 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %296 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i2
    %297 = comb.xor bin %296, %c-1_i2 : i2
    %298 = comb.concat %295, %297 : i4, i2
    %299 = comb.icmp bin ne %298, %c0_i6 : i6
    %300 = comb.xor bin %299, %true {sv.namehint = "_address_ok_T_49"} : i1
    %301 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i6
    %302 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i10
    %303 = comb.xor bin %302, %c-512_i10 : i10
    %304 = comb.concat %301, %303 : i6, i10
    %305 = comb.icmp bin ne %304, %c0_i16 : i16
    %306 = comb.xor bin %305, %true {sv.namehint = "_address_ok_T_54"} : i1
    %307 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i20
    %308 = comb.icmp bin ne %307, %c0_i20 : i20
    %309 = comb.xor bin %308, %true {sv.namehint = "_address_ok_T_59"} : i1
    %310 = comb.extract %io_in_c_bits_address from 17 : (i32) -> i15
    %311 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i1
    %312 = comb.xor bin %311, %true : i1
    %313 = comb.concat %310, %312 : i15, i1
    %314 = comb.icmp bin ne %313, %c0_i16 : i16
    %315 = comb.xor bin %314, %true {sv.namehint = "_address_ok_T_64"} : i1
    %316 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %317 = comb.icmp ne %316, %c-8_i4 : i4
    %318 = comb.xor bin %317, %true {sv.namehint = "_address_ok_T_69"} : i1
    %319 = comb.extract %io_in_c_bits_address from 31 : (i32) -> i1
    %320 = comb.extract %io_in_c_bits_address from 29 : (i32) -> i2
    %321 = comb.xor bin %320, %c-1_i2 : i2
    %322 = comb.concat %319, %321 : i1, i2
    %323 = comb.icmp bin ne %322, %c0_i3 : i3
    %324 = comb.xor bin %323, %true {sv.namehint = "_address_ok_T_74"} : i1
    %325 = comb.or bin %294, %300, %306, %309, %315, %318, %324 {sv.namehint = "address_ok_1"} : i1
    %326 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %327 = comb.and bin %io_in_c_valid, %326, %77 : i1
    %328 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i4 : i4
    %329 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %330 = comb.icmp bin ne %329, %c-1_i2 : i2
    %331 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %332 = comb.and bin %io_in_c_valid, %331, %77 : i1
    %333 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %334 = comb.icmp bin ult %io_in_c_bits_size, %c-3_i4 : i4
    %335 = comb.icmp bin ult %io_in_c_bits_size, %c7_i4 : i4
    %336 = comb.xor bin %317, %true : i1
    %337 = comb.and bin %334, %335, %336 : i1
    %338 = comb.and bin %io_in_c_valid, %333, %77 : i1
    %339 = comb.icmp bin eq %io_in_c_bits_size, %c6_i4 : i4
    %340 = comb.xor bin %308, %true : i1
    %341 = comb.xor bin %293, %true : i1
    %342 = comb.xor bin %314, %true : i1
    %343 = comb.xor bin %305, %true : i1
    %344 = comb.xor bin %299, %true : i1
    %345 = comb.xor bin %323, %true : i1
    %346 = comb.or bin %340, %341, %342, %343, %344, %345, %336 : i1
    %347 = comb.and bin %334, %346 : i1
    %348 = comb.and bin %281, %339, %347 : i1
    %349 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %350 = comb.and bin %io_in_c_valid, %349, %77 : i1
    %351 = comb.and bin %281, %339, %347 : i1
    %352 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %353 = comb.and bin %io_in_c_valid, %352, %77 : i1
    %354 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %355 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %356 = comb.and bin %io_in_c_valid, %355, %77 : i1
    %357 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %358 = comb.and bin %io_in_c_valid, %357, %77 : i1
    %359 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %360 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %361 = comb.extract %360 from 3 : (i27) -> i9
    %362 = comb.xor bin %361, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %363 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %364 = comb.mux bin %363, %c0_i9, %362 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %369 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %365 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %366 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %367 = comb.xor bin %366, %true {sv.namehint = "a_first"} : i1
    %368 = comb.mux bin %366, %365, %364 {sv.namehint = "_a_first_counter_T"} : i9
    %369 = comb.mux bin %359, %368, %a_first_counter : i9
    %opcode = seq.firreg %377 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %378 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %379 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %380 clock %clock {firrtl.random_init_start = 19 : ui64} : i1
    %address = seq.firreg %381 clock %clock {firrtl.random_init_start = 20 : ui64} : i32
    %370 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %371 = comb.and bin %io_in_a_valid, %366, %77 : i1
    %372 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %373 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %374 = comb.icmp bin eq %io_in_a_bits_source, %source : i1
    %375 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %376 = comb.and bin %359, %367 : i1
    %377 = comb.mux bin %376, %io_in_a_bits_opcode, %opcode : i3
    %378 = comb.mux bin %376, %io_in_a_bits_param, %param : i3
    %379 = comb.mux bin %376, %io_in_a_bits_size, %size : i4
    %380 = comb.mux bin %376, %io_in_a_bits_source, %source : i1
    %381 = comb.mux bin %376, %io_in_a_bits_address, %address : i32
    %382 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %383 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %384 = comb.shl bin %c4095_i27, %383 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %385 = comb.extract %384 from 3 : (i27) -> i9
    %386 = comb.xor bin %385, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %387 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %388 = comb.mux bin %387, %386, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %393 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 52 : ui64} : i9
    %389 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %390 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %391 = comb.xor bin %390, %true {sv.namehint = "d_first"} : i1
    %392 = comb.mux bin %390, %389, %388 {sv.namehint = "_d_first_counter_T"} : i9
    %393 = comb.mux bin %382, %392, %d_first_counter : i9
    %opcode_1 = seq.firreg %402 clock %clock {firrtl.random_init_start = 61 : ui64} : i3
    %param_1 = seq.firreg %403 clock %clock {firrtl.random_init_start = 64 : ui64} : i2
    %size_1 = seq.firreg %404 clock %clock {firrtl.random_init_start = 66 : ui64} : i4
    %source_1 = seq.firreg %405 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %sink = seq.firreg %406 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %denied = seq.firreg %407 clock %clock {firrtl.random_init_start = 73 : ui64} : i1
    %394 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %395 = comb.and bin %io_in_d_valid, %390, %77 : i1
    %396 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %397 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %398 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %399 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %400 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %401 = comb.and bin %382, %391 : i1
    %402 = comb.mux bin %401, %io_in_d_bits_opcode, %opcode_1 : i3
    %403 = comb.mux bin %401, %io_in_d_bits_param, %param_1 : i2
    %404 = comb.mux bin %401, %io_in_d_bits_size, %size_1 : i4
    %405 = comb.mux bin %401, %io_in_d_bits_source, %source_1 : i1
    %406 = comb.mux bin %401, %io_in_d_bits_sink, %sink : i2
    %407 = comb.mux bin %401, %io_in_d_bits_denied, %denied : i1
    %408 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %413 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 74 : ui64} : i9
    %409 = comb.add %b_first_counter, %c-1_i9 {sv.namehint = "_b_first_counter1_T"} : i9
    %410 = comb.icmp bin ne %b_first_counter, %c0_i9 : i9
    %411 = comb.xor bin %410, %true {sv.namehint = "b_first"} : i1
    %412 = comb.mux bin %410, %409, %c0_i9 {sv.namehint = "_b_first_counter_T"} : i9
    %413 = comb.mux bin %408, %412, %b_first_counter : i9
    %opcode_2 = seq.firreg %421 clock %clock {firrtl.random_init_start = 83 : ui64} : i3
    %param_2 = seq.firreg %422 clock %clock {firrtl.random_init_start = 86 : ui64} : i2
    %size_2 = seq.firreg %423 clock %clock {firrtl.random_init_start = 88 : ui64} : i4
    %source_2 = seq.firreg %424 clock %clock {firrtl.random_init_start = 92 : ui64} : i1
    %address_1 = seq.firreg %425 clock %clock {firrtl.random_init_start = 93 : ui64} : i32
    %414 = comb.icmp bin eq %io_in_b_bits_opcode, %opcode_2 : i3
    %415 = comb.and bin %io_in_b_valid, %410, %77 : i1
    %416 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %417 = comb.icmp bin eq %io_in_b_bits_size, %size_2 : i4
    %418 = comb.icmp bin eq %io_in_b_bits_source, %source_2 : i1
    %419 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %420 = comb.and bin %408, %411 : i1
    %421 = comb.mux bin %420, %io_in_b_bits_opcode, %opcode_2 : i3
    %422 = comb.mux bin %420, %io_in_b_bits_param, %param_2 : i2
    %423 = comb.mux bin %420, %io_in_b_bits_size, %size_2 : i4
    %424 = comb.mux bin %420, %io_in_b_bits_source, %source_2 : i1
    %425 = comb.mux bin %420, %io_in_b_bits_address, %address_1 : i32
    %426 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %427 = comb.shl bin %c4095_i27, %282 {sv.namehint = "_c_first_beats1_decode_T_1"} : i27
    %428 = comb.extract %427 from 3 : (i27) -> i9
    %429 = comb.xor bin %428, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_3"} : i9
    %430 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %431 = comb.mux bin %430, %429, %c0_i9 {sv.namehint = "c_first_beats1"} : i9
    %c_first_counter = seq.firreg %436 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 125 : ui64} : i9
    %432 = comb.add %c_first_counter, %c-1_i9 {sv.namehint = "_c_first_counter1_T"} : i9
    %433 = comb.icmp bin ne %c_first_counter, %c0_i9 : i9
    %434 = comb.xor bin %433, %true {sv.namehint = "c_first"} : i1
    %435 = comb.mux bin %433, %432, %431 {sv.namehint = "_c_first_counter_T"} : i9
    %436 = comb.mux bin %426, %435, %c_first_counter : i9
    %opcode_3 = seq.firreg %444 clock %clock {firrtl.random_init_start = 134 : ui64} : i3
    %param_3 = seq.firreg %445 clock %clock {firrtl.random_init_start = 137 : ui64} : i3
    %size_3 = seq.firreg %446 clock %clock {firrtl.random_init_start = 140 : ui64} : i4
    %source_3 = seq.firreg %447 clock %clock {firrtl.random_init_start = 144 : ui64} : i1
    %address_2 = seq.firreg %448 clock %clock {firrtl.random_init_start = 145 : ui64} : i32
    %437 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %438 = comb.and bin %io_in_c_valid, %433, %77 : i1
    %439 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %440 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i4
    %441 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i1
    %442 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %443 = comb.and bin %426, %434 : i1
    %444 = comb.mux bin %443, %io_in_c_bits_opcode, %opcode_3 : i3
    %445 = comb.mux bin %443, %io_in_c_bits_param, %param_3 : i3
    %446 = comb.mux bin %443, %io_in_c_bits_size, %size_3 : i4
    %447 = comb.mux bin %443, %io_in_c_bits_source, %source_3 : i1
    %448 = comb.mux bin %443, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %546 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 177 : ui64} : i2
    %inflight_opcodes = seq.firreg %549 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 179 : ui64} : i8
    %inflight_sizes = seq.firreg %552 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 187 : ui64} : i16
    %449 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %450 = comb.extract %449 from 3 : (i27) -> i9
    %451 = comb.xor bin %450, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %452 = comb.mux bin %363, %c0_i9, %451 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %456 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 203 : ui64} : i9
    %453 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %454 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %455 = comb.mux bin %454, %452, %453 {sv.namehint = "_a_first_counter_T_1"} : i9
    %456 = comb.mux bin %359, %455, %a_first_counter_1 : i9
    %457 = comb.shl bin %c4095_i27, %383 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %458 = comb.extract %457 from 3 : (i27) -> i9
    %459 = comb.xor bin %458, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %460 = comb.mux bin %387, %459, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %464 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 212 : ui64} : i9
    %461 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %462 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %463 = comb.mux bin %462, %460, %461 {sv.namehint = "_d_first_counter_T_1"} : i9
    %464 = comb.mux bin %382, %463, %d_first_counter_1 : i9
    %465 = comb.concat %c0_i5, %io_in_d_bits_source, %c0_i2 : i5, i1, i2
    %466 = comb.shru bin %inflight_opcodes, %465 {sv.namehint = "_a_opcode_lookup_T_1"} : i8
    %467 = comb.extract %466 from 1 : (i8) -> i3
    %468 = comb.concat %c0_i12, %io_in_d_bits_source, %c0_i3 : i12, i1, i3
    %469 = comb.shru bin %inflight_sizes, %468 {sv.namehint = "_a_size_lookup_T_1"} : i16
    %470 = comb.extract %469 from 1 : (i16) -> i7
    %471 = comb.concat %false, %470 {sv.namehint = "a_size_lookup"} : i1, i7
    %472 = comb.and bin %io_in_a_valid, %454 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %473 = comb.concat %false, %io_in_a_bits_source : i1, i1
    %474 = comb.shl bin %c1_i2, %473 {sv.namehint = "_a_set_wo_ready_T"} : i2
    %475 = comb.mux bin %472, %474, %c0_i2 {sv.namehint = "a_set_wo_ready"} : i2
    %476 = comb.and bin %359, %454 : i1
    %477 = comb.shl bin %c1_i2, %473 {sv.namehint = "_a_set_T"} : i2
    %478 = comb.mux bin %476, %477, %c0_i2 {sv.namehint = "a_set"} : i2
    %479 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %480 = comb.mux bin %476, %479, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %481 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %482 = comb.mux bin %476, %481, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %483 = comb.concat %c0_i15, %480 : i15, i4
    %484 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i2 : i16, i1, i2
    %485 = comb.shl bin %483, %484 {sv.namehint = "_a_opcodes_set_T_1"} : i19
    %486 = comb.extract %485 from 0 : (i19) -> i8
    %487 = comb.mux bin %476, %486, %c0_i8 {sv.namehint = "a_opcodes_set"} : i8
    %488 = comb.concat %c0_i15, %482 : i15, i5
    %489 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i3 : i16, i1, i3
    %490 = comb.shl bin %488, %489 {sv.namehint = "_a_sizes_set_T_1"} : i20
    %491 = comb.extract %490 from 0 : (i20) -> i16
    %492 = comb.mux bin %476, %491, %c0_i16 {sv.namehint = "a_sizes_set"} : i16
    %493 = comb.shru bin %inflight, %473 : i2
    %494 = comb.extract %493 from 0 : (i2) -> i1
    %495 = comb.xor bin %494, %true : i1
    %496 = comb.and bin %476, %77 : i1
    %497 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %498 = comb.and bin %io_in_d_valid, %462 : i1
    %499 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %500 = comb.and bin %498, %499 : i1
    %501 = comb.concat %false, %io_in_d_bits_source : i1, i1
    %502 = comb.shl bin %c1_i2, %501 {sv.namehint = "_d_clr_wo_ready_T"} : i2
    %503 = comb.mux bin %500, %502, %c0_i2 {sv.namehint = "d_clr_wo_ready"} : i2
    %504 = comb.and bin %382, %462, %499 : i1
    %505 = comb.shl bin %c1_i2, %501 {sv.namehint = "_d_clr_T"} : i2
    %506 = comb.mux bin %504, %505, %c0_i2 {sv.namehint = "d_clr"} : i2
    %507 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %508 = comb.shl bin %c15_i31, %507 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %509 = comb.extract %508 from 0 : (i31) -> i8
    %510 = comb.mux bin %504, %509, %c0_i8 {sv.namehint = "d_opcodes_clr"} : i8
    %511 = comb.concat %c0_i27, %io_in_d_bits_source, %c0_i3 : i27, i1, i3
    %512 = comb.shl bin %c255_i31, %511 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %513 = comb.extract %512 from 0 : (i31) -> i16
    %514 = comb.mux bin %504, %513, %c0_i16 {sv.namehint = "d_sizes_clr"} : i16
    %515 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %516 = comb.and bin %472, %515 {sv.namehint = "same_cycle_resp"} : i1
    %517 = comb.shru bin %inflight, %501 : i2
    %518 = comb.extract %517 from 0 : (i2) -> i1
    %519 = comb.or bin %518, %516 : i1
    %520 = comb.and bin %500, %77 : i1
    %521 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %522 = comb.icmp bin eq %io_in_d_bits_opcode, %521 : i3
    %523 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %524 = comb.icmp bin eq %io_in_d_bits_opcode, %523 : i3
    %525 = comb.or bin %522, %524 : i1
    %526 = comb.and bin %500, %516, %77 : i1
    %527 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %528 = comb.xor bin %516, %true : i1
    %529 = hw.array_get %1[%467] : !hw.array<8xi3>, i3
    %530 = comb.icmp bin eq %io_in_d_bits_opcode, %529 : i3
    %531 = hw.array_get %0[%467] : !hw.array<8xi3>, i3
    %532 = comb.icmp bin eq %io_in_d_bits_opcode, %531 : i3
    %533 = comb.or bin %530, %532 : i1
    %534 = comb.and bin %500, %528, %77 : i1
    %535 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %536 = comb.icmp bin eq %535, %471 : i8
    %537 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i1
    %538 = comb.xor bin %io_in_d_ready, %true : i1
    %539 = comb.or bin %538, %io_in_a_ready : i1
    %540 = comb.and bin %498, %454, %io_in_a_valid, %537, %499, %77 : i1
    %541 = comb.icmp bin ne %475, %503 : i2
    %542 = comb.icmp bin eq %475, %c0_i2 : i2
    %543 = comb.or bin %541, %542 : i1
    %544 = comb.or bin %inflight, %478 {sv.namehint = "_inflight_T"} : i2
    %545 = comb.xor bin %506, %c-1_i2 {sv.namehint = "_inflight_T_1"} : i2
    %546 = comb.and bin %544, %545 {sv.namehint = "_inflight_T_2"} : i2
    %547 = comb.or bin %inflight_opcodes, %487 {sv.namehint = "_inflight_opcodes_T"} : i8
    %548 = comb.xor bin %510, %c-1_i8 {sv.namehint = "_inflight_opcodes_T_1"} : i8
    %549 = comb.and bin %547, %548 {sv.namehint = "_inflight_opcodes_T_2"} : i8
    %550 = comb.or bin %inflight_sizes, %492 {sv.namehint = "_inflight_sizes_T"} : i16
    %551 = comb.xor bin %514, %c-1_i16 {sv.namehint = "_inflight_sizes_T_1"} : i16
    %552 = comb.and bin %550, %551 {sv.namehint = "_inflight_sizes_T_2"} : i16
    %watchdog = seq.firreg %559 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 221 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %553 = comb.icmp bin eq %inflight, %c0_i2 : i2
    %554 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %555 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %556 = comb.or bin %553, %554, %555 : i1
    %557 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %558 = comb.or bin %359, %382 : i1
    %559 = comb.mux bin %558, %c0_i32, %557 : i32
    %inflight_1 = seq.firreg %634 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 253 : ui64} : i2
    %inflight_sizes_1 = seq.firreg %637 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 263 : ui64} : i16
    %560 = comb.shl bin %c4095_i27, %282 {sv.namehint = "_c_first_beats1_decode_T_5"} : i27
    %561 = comb.extract %560 from 3 : (i27) -> i9
    %562 = comb.xor bin %561, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_7"} : i9
    %563 = comb.mux bin %430, %562, %c0_i9 {sv.namehint = "c_first_beats1_1"} : i9
    %c_first_counter_1 = seq.firreg %567 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 279 : ui64} : i9
    %564 = comb.add %c_first_counter_1, %c-1_i9 {sv.namehint = "_c_first_counter1_T_1"} : i9
    %565 = comb.icmp bin eq %c_first_counter_1, %c0_i9 {sv.namehint = "c_first_1"} : i9
    %566 = comb.mux bin %565, %563, %564 {sv.namehint = "_c_first_counter_T_1"} : i9
    %567 = comb.mux bin %426, %566, %c_first_counter_1 : i9
    %568 = comb.shl bin %c4095_i27, %383 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %569 = comb.extract %568 from 3 : (i27) -> i9
    %570 = comb.xor bin %569, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %571 = comb.mux bin %387, %570, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %575 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 288 : ui64} : i9
    %572 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %573 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %574 = comb.mux bin %573, %571, %572 {sv.namehint = "_d_first_counter_T_2"} : i9
    %575 = comb.mux bin %382, %574, %d_first_counter_2 : i9
    %576 = comb.shru bin %inflight_sizes_1, %468 {sv.namehint = "_c_size_lookup_T_1"} : i16
    %577 = comb.extract %576 from 1 : (i16) -> i7
    %578 = comb.concat %false, %577 {sv.namehint = "c_size_lookup"} : i1, i7
    %579 = comb.and bin %io_in_c_valid, %565 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %580 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %581 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %582 = comb.and bin %580, %581 : i1
    %583 = comb.and bin %579, %582 : i1
    %584 = comb.concat %false, %io_in_c_bits_source : i1, i1
    %585 = comb.shl bin %c1_i2, %584 {sv.namehint = "_c_set_wo_ready_T"} : i2
    %586 = comb.mux bin %583, %585, %c0_i2 {sv.namehint = "c_set_wo_ready"} : i2
    %587 = comb.and bin %426, %565, %582 : i1
    %588 = comb.shl bin %c1_i2, %584 {sv.namehint = "_c_set_T"} : i2
    %589 = comb.mux bin %587, %588, %c0_i2 {sv.namehint = "c_set"} : i2
    %590 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i4, i1
    %591 = comb.mux bin %587, %590, %c0_i5 {sv.namehint = "c_sizes_set_interm"} : i5
    %592 = comb.concat %c0_i15, %591 : i15, i5
    %593 = comb.concat %c0_i16, %io_in_c_bits_source, %c0_i3 : i16, i1, i3
    %594 = comb.shl bin %592, %593 {sv.namehint = "_c_sizes_set_T_1"} : i20
    %595 = comb.extract %594 from 0 : (i20) -> i16
    %596 = comb.mux bin %587, %595, %c0_i16 {sv.namehint = "c_sizes_set"} : i16
    %597 = comb.shru bin %inflight_1, %584 : i2
    %598 = comb.extract %597 from 0 : (i2) -> i1
    %599 = comb.xor bin %598, %true : i1
    %600 = comb.and bin %587, %77 : i1
    %601 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 {sv.namehint = "_c_probe_ack_T"} : i3
    %602 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 {sv.namehint = "_c_probe_ack_T_1"} : i3
    %603 = comb.or bin %601, %602 {sv.namehint = "c_probe_ack"} : i1
    %604 = comb.and bin %io_in_d_valid, %573 : i1
    %605 = comb.and bin %604, %497 : i1
    %606 = comb.shl bin %c1_i2, %501 {sv.namehint = "_d_clr_wo_ready_T_1"} : i2
    %607 = comb.mux bin %605, %606, %c0_i2 {sv.namehint = "d_clr_wo_ready_1"} : i2
    %608 = comb.and bin %382, %573, %497 : i1
    %609 = comb.shl bin %c1_i2, %501 {sv.namehint = "_d_clr_T_1"} : i2
    %610 = comb.mux bin %608, %609, %c0_i2 {sv.namehint = "d_clr_1"} : i2
    %611 = comb.shl bin %c255_i31, %511 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %612 = comb.extract %611 from 0 : (i31) -> i16
    %613 = comb.mux bin %608, %612, %c0_i16 {sv.namehint = "d_sizes_clr_1"} : i16
    %614 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i1
    %615 = comb.and bin %579, %580, %581, %614 {sv.namehint = "same_cycle_resp_1"} : i1
    %616 = comb.shru bin %inflight_1, %501 : i2
    %617 = comb.extract %616 from 0 : (i2) -> i1
    %618 = comb.or bin %617, %615 : i1
    %619 = comb.and bin %605, %77 : i1
    %620 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i4
    %621 = comb.and bin %605, %615, %77 : i1
    %622 = comb.xor bin %615, %true : i1
    %623 = comb.icmp bin eq %535, %578 : i8
    %624 = comb.and bin %605, %622, %77 : i1
    %625 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i1
    %626 = comb.xor bin %603, %true : i1
    %627 = comb.or bin %538, %io_in_c_ready : i1
    %628 = comb.and bin %604, %565, %io_in_c_valid, %625, %497, %626, %77 : i1
    %629 = comb.icmp bin ne %586, %c0_i2 : i2
    %630 = comb.icmp bin ne %586, %607 : i2
    %631 = comb.and bin %629, %77 : i1
    %632 = comb.or bin %inflight_1, %589 {sv.namehint = "_inflight_T_3"} : i2
    %633 = comb.xor bin %610, %c-1_i2 {sv.namehint = "_inflight_T_4"} : i2
    %634 = comb.and bin %632, %633 {sv.namehint = "_inflight_T_5"} : i2
    %635 = comb.or bin %inflight_sizes_1, %596 {sv.namehint = "_inflight_sizes_T_3"} : i16
    %636 = comb.xor bin %613, %c-1_i16 {sv.namehint = "_inflight_sizes_T_4"} : i16
    %637 = comb.and bin %635, %636 {sv.namehint = "_inflight_sizes_T_5"} : i16
    %watchdog_1 = seq.firreg %644 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 297 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %638 = comb.icmp bin eq %inflight_1, %c0_i2 : i2
    %639 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %640 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %641 = comb.or bin %638, %639, %640 : i1
    %642 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %643 = comb.or bin %426, %382 : i1
    %644 = comb.mux bin %643, %c0_i32, %642 : i32
    %inflight_2 = seq.firreg %674 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 329 : ui64} : i4
    %645 = comb.shl bin %c4095_i27, %383 {sv.namehint = "_d_first_beats1_decode_T_13"} : i27
    %646 = comb.extract %645 from 3 : (i27) -> i9
    %647 = comb.xor bin %646, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_15"} : i9
    %648 = comb.mux bin %387, %647, %c0_i9 {sv.namehint = "d_first_beats1_3"} : i9
    %d_first_counter_3 = seq.firreg %652 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 333 : ui64} : i9
    %649 = comb.add %d_first_counter_3, %c-1_i9 {sv.namehint = "_d_first_counter1_T_3"} : i9
    %650 = comb.icmp bin eq %d_first_counter_3, %c0_i9 {sv.namehint = "d_first_3"} : i9
    %651 = comb.mux bin %650, %648, %649 {sv.namehint = "_d_first_counter_T_3"} : i9
    %652 = comb.mux bin %382, %651, %d_first_counter_3 : i9
    %653 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %654 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %655 = comb.xor bin %654, %true : i1
    %656 = comb.and bin %382, %650, %653, %655 : i1
    %657 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %658 = comb.shl bin %c1_i4, %657 {sv.namehint = "_d_set_T"} : i4
    %659 = comb.mux bin %656, %658, %c0_i4 {sv.namehint = "d_set"} : i4
    %660 = comb.shru bin %inflight_2, %657 : i4
    %661 = comb.extract %660 from 0 : (i4) -> i1
    %662 = comb.xor bin %661, %true : i1
    %663 = comb.and bin %656, %77 : i1
    %664 = comb.and bin %io_in_e_ready, %io_in_e_valid : i1
    %665 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %666 = comb.shl bin %c1_i4, %665 {sv.namehint = "_e_clr_T"} : i4
    %667 = comb.mux bin %664, %666, %c0_i4 {sv.namehint = "e_clr"} : i4
    %668 = comb.or bin %659, %inflight_2 : i4
    %669 = comb.shru bin %668, %665 : i4
    %670 = comb.extract %669 from 0 : (i4) -> i1
    %671 = comb.and bin %664, %77 : i1
    sv.always posedge %2 {
      sv.if %78 {
        sv.assert %76, immediate label "assert__assert_2"
      }
      sv.if %78 {
        sv.assert %95, immediate label "assert__assert_3"
      }
      sv.if %78 {
        sv.assert %14, immediate label "assert__assert_5"
      }
      sv.if %78 {
        sv.assert %10, immediate label "assert__assert_6"
      }
      sv.if %78 {
        sv.assert %96, immediate label "assert__assert_7"
      }
      sv.if %78 {
        sv.assert %97, immediate label "assert__assert_8"
      }
      sv.if %99 {
        sv.assert %76, immediate label "assert__assert_10"
      }
      sv.if %99 {
        sv.assert %100, immediate label "assert__assert_11"
      }
      sv.if %99 {
        sv.assert %14, immediate label "assert__assert_13"
      }
      sv.if %99 {
        sv.assert %10, immediate label "assert__assert_14"
      }
      sv.if %99 {
        sv.assert %96, immediate label "assert__assert_15"
      }
      sv.if %99 {
        sv.assert %101, immediate label "assert__assert_16"
      }
      sv.if %99 {
        sv.assert %97, immediate label "assert__assert_17"
      }
      sv.if %103 {
        sv.assert %57, immediate label "assert__assert_19"
      }
      sv.if %103 {
        sv.assert %107, immediate label "assert__assert_20"
      }
      sv.if %103 {
        sv.assert %10, immediate label "assert__assert_22"
      }
      sv.if %103 {
        sv.assert %108, immediate label "assert__assert_23"
      }
      sv.if %103 {
        sv.assert %109, immediate label "assert__assert_24"
      }
      sv.if %117 {
        sv.assert %116, immediate label "assert__assert_26"
      }
      sv.if %117 {
        sv.assert %10, immediate label "assert__assert_28"
      }
      sv.if %117 {
        sv.assert %108, immediate label "assert__assert_29"
      }
      sv.if %117 {
        sv.assert %109, immediate label "assert__assert_30"
      }
      sv.if %119 {
        sv.assert %116, immediate label "assert__assert_31"
      }
      sv.if %119 {
        sv.assert %10, immediate label "assert__assert_33"
      }
      sv.if %119 {
        sv.assert %108, immediate label "assert__assert_34"
      }
      sv.if %119 {
        sv.assert %122, immediate label "assert__assert_35"
      }
      sv.if %127 {
        sv.assert %126, immediate label "assert__assert_36"
      }
      sv.if %127 {
        sv.assert %10, immediate label "assert__assert_38"
      }
      sv.if %127 {
        sv.assert %128, immediate label "assert__assert_39"
      }
      sv.if %127 {
        sv.assert %109, immediate label "assert__assert_40"
      }
      sv.if %130 {
        sv.assert %126, immediate label "assert__assert_41"
      }
      sv.if %130 {
        sv.assert %10, immediate label "assert__assert_43"
      }
      sv.if %130 {
        sv.assert %132, immediate label "assert__assert_44"
      }
      sv.if %130 {
        sv.assert %109, immediate label "assert__assert_45"
      }
      sv.if %134 {
        sv.assert %104, immediate label "assert__assert_46"
      }
      sv.if %134 {
        sv.assert %10, immediate label "assert__assert_48"
      }
      sv.if %134 {
        sv.assert %135, immediate label "assert__assert_49"
      }
      sv.if %134 {
        sv.assert %109, immediate label "assert__assert_50"
      }
      sv.if %137 {
        sv.assert %136, immediate label "assert__assert_52"
      }
      sv.if %139 {
        sv.assert %140, immediate label "assert__assert_54"
      }
      sv.if %139 {
        sv.assert %141, immediate label "assert__assert_55"
      }
      sv.if %139 {
        sv.assert %142, immediate label "assert__assert_56"
      }
      sv.if %139 {
        sv.assert %143, immediate label "assert__assert_57"
      }
      sv.if %145 {
        sv.assert %140, immediate label "assert__assert_60"
      }
      sv.if %145 {
        sv.assert %146, immediate label "assert__assert_61"
      }
      sv.if %145 {
        sv.assert %147, immediate label "assert__assert_62"
      }
      sv.if %145 {
        sv.assert %142, immediate label "assert__assert_63"
      }
      sv.if %149 {
        sv.assert %140, immediate label "assert__assert_67"
      }
      sv.if %149 {
        sv.assert %146, immediate label "assert__assert_68"
      }
      sv.if %149 {
        sv.assert %147, immediate label "assert__assert_69"
      }
      sv.if %149 {
        sv.assert %150, immediate label "assert__assert_70"
      }
      sv.if %152 {
        sv.assert %141, immediate label "assert__assert_73"
      }
      sv.if %152 {
        sv.assert %142, immediate label "assert__assert_74"
      }
      sv.if %154 {
        sv.assert %141, immediate label "assert__assert_77"
      }
      sv.if %154 {
        sv.assert %150, immediate label "assert__assert_78"
      }
      sv.if %156 {
        sv.assert %141, immediate label "assert__assert_81"
      }
      sv.if %156 {
        sv.assert %142, immediate label "assert__assert_82"
      }
      sv.if %158 {
        sv.assert %157, immediate label "assert__assert_84"
      }
      sv.if %261 {
        sv.assert %260, immediate label "assert__assert_86"
      }
      sv.if %261 {
        sv.assert %196, immediate label "assert__assert_87"
      }
      sv.if %261 {
        sv.assert %203, immediate label "assert__assert_89"
      }
      sv.if %261 {
        sv.assert %262, immediate label "assert__assert_90"
      }
      sv.if %261 {
        sv.assert %263, immediate label "assert__assert_91"
      }
      sv.if %261 {
        sv.assert %264, immediate label "assert__assert_92"
      }
      sv.if %266 {
        sv.assert %false, immediate label "assert__assert_93"
      }
      sv.if %266 {
        sv.assert %196, immediate label "assert__assert_94"
      }
      sv.if %266 {
        sv.assert %203, immediate label "assert__assert_96"
      }
      sv.if %266 {
        sv.assert %267, immediate label "assert__assert_97"
      }
      sv.if %266 {
        sv.assert %263, immediate label "assert__assert_98"
      }
      sv.if %266 {
        sv.assert %264, immediate label "assert__assert_99"
      }
      sv.if %269 {
        sv.assert %false, immediate label "assert__assert_100"
      }
      sv.if %269 {
        sv.assert %196, immediate label "assert__assert_101"
      }
      sv.if %269 {
        sv.assert %203, immediate label "assert__assert_103"
      }
      sv.if %269 {
        sv.assert %267, immediate label "assert__assert_104"
      }
      sv.if %269 {
        sv.assert %263, immediate label "assert__assert_105"
      }
      sv.if %271 {
        sv.assert %false, immediate label "assert__assert_106"
      }
      sv.if %271 {
        sv.assert %196, immediate label "assert__assert_107"
      }
      sv.if %271 {
        sv.assert %203, immediate label "assert__assert_109"
      }
      sv.if %271 {
        sv.assert %267, immediate label "assert__assert_110"
      }
      sv.if %271 {
        sv.assert %274, immediate label "assert__assert_111"
      }
      sv.if %276 {
        sv.assert %false, immediate label "assert__assert_112"
      }
      sv.if %276 {
        sv.assert %196, immediate label "assert__assert_113"
      }
      sv.if %276 {
        sv.assert %203, immediate label "assert__assert_115"
      }
      sv.if %276 {
        sv.assert %263, immediate label "assert__assert_117"
      }
      sv.if %278 {
        sv.assert %false, immediate label "assert__assert_118"
      }
      sv.if %278 {
        sv.assert %196, immediate label "assert__assert_119"
      }
      sv.if %278 {
        sv.assert %203, immediate label "assert__assert_121"
      }
      sv.if %278 {
        sv.assert %263, immediate label "assert__assert_123"
      }
      sv.if %280 {
        sv.assert %false, immediate label "assert__assert_124"
      }
      sv.if %280 {
        sv.assert %196, immediate label "assert__assert_125"
      }
      sv.if %280 {
        sv.assert %203, immediate label "assert__assert_127"
      }
      sv.if %280 {
        sv.assert %263, immediate label "assert__assert_128"
      }
      sv.if %280 {
        sv.assert %264, immediate label "assert__assert_129"
      }
      sv.if %327 {
        sv.assert %325, immediate label "assert__assert_132"
      }
      sv.if %327 {
        sv.assert %328, immediate label "assert__assert_134"
      }
      sv.if %327 {
        sv.assert %288, immediate label "assert__assert_135"
      }
      sv.if %327 {
        sv.assert %330, immediate label "assert__assert_136"
      }
      sv.if %332 {
        sv.assert %325, immediate label "assert__assert_138"
      }
      sv.if %332 {
        sv.assert %328, immediate label "assert__assert_140"
      }
      sv.if %332 {
        sv.assert %288, immediate label "assert__assert_141"
      }
      sv.if %332 {
        sv.assert %330, immediate label "assert__assert_142"
      }
      sv.if %338 {
        sv.assert %337, immediate label "assert__assert_143"
      }
      sv.if %338 {
        sv.assert %348, immediate label "assert__assert_144"
      }
      sv.if %338 {
        sv.assert %328, immediate label "assert__assert_146"
      }
      sv.if %338 {
        sv.assert %288, immediate label "assert__assert_147"
      }
      sv.if %338 {
        sv.assert %330, immediate label "assert__assert_148"
      }
      sv.if %350 {
        sv.assert %337, immediate label "assert__assert_150"
      }
      sv.if %350 {
        sv.assert %351, immediate label "assert__assert_151"
      }
      sv.if %350 {
        sv.assert %328, immediate label "assert__assert_153"
      }
      sv.if %350 {
        sv.assert %288, immediate label "assert__assert_154"
      }
      sv.if %350 {
        sv.assert %330, immediate label "assert__assert_155"
      }
      sv.if %353 {
        sv.assert %325, immediate label "assert__assert_156"
      }
      sv.if %353 {
        sv.assert %288, immediate label "assert__assert_158"
      }
      sv.if %353 {
        sv.assert %354, immediate label "assert__assert_159"
      }
      sv.if %356 {
        sv.assert %325, immediate label "assert__assert_161"
      }
      sv.if %356 {
        sv.assert %288, immediate label "assert__assert_163"
      }
      sv.if %356 {
        sv.assert %354, immediate label "assert__assert_164"
      }
      sv.if %358 {
        sv.assert %325, immediate label "assert__assert_165"
      }
      sv.if %358 {
        sv.assert %288, immediate label "assert__assert_167"
      }
      sv.if %358 {
        sv.assert %354, immediate label "assert__assert_168"
      }
      sv.if %371 {
        sv.assert %370, immediate label "assert__assert_171"
      }
      sv.if %371 {
        sv.assert %372, immediate label "assert__assert_172"
      }
      sv.if %371 {
        sv.assert %373, immediate label "assert__assert_173"
      }
      sv.if %371 {
        sv.assert %374, immediate label "assert__assert_174"
      }
      sv.if %371 {
        sv.assert %375, immediate label "assert__assert_175"
      }
      sv.if %395 {
        sv.assert %394, immediate label "assert__assert_176"
      }
      sv.if %395 {
        sv.assert %396, immediate label "assert__assert_177"
      }
      sv.if %395 {
        sv.assert %397, immediate label "assert__assert_178"
      }
      sv.if %395 {
        sv.assert %398, immediate label "assert__assert_179"
      }
      sv.if %395 {
        sv.assert %399, immediate label "assert__assert_180"
      }
      sv.if %395 {
        sv.assert %400, immediate label "assert__assert_181"
      }
      sv.if %415 {
        sv.assert %414, immediate label "assert__assert_182"
      }
      sv.if %415 {
        sv.assert %416, immediate label "assert__assert_183"
      }
      sv.if %415 {
        sv.assert %417, immediate label "assert__assert_184"
      }
      sv.if %415 {
        sv.assert %418, immediate label "assert__assert_185"
      }
      sv.if %415 {
        sv.assert %419, immediate label "assert__assert_186"
      }
      sv.if %438 {
        sv.assert %437, immediate label "assert__assert_187"
      }
      sv.if %438 {
        sv.assert %439, immediate label "assert__assert_188"
      }
      sv.if %438 {
        sv.assert %440, immediate label "assert__assert_189"
      }
      sv.if %438 {
        sv.assert %441, immediate label "assert__assert_190"
      }
      sv.if %438 {
        sv.assert %442, immediate label "assert__assert_191"
      }
      sv.if %496 {
        sv.assert %495, immediate label "assert__assert_192"
      }
      sv.if %520 {
        sv.assert %519, immediate label "assert__assert_193"
      }
      sv.if %526 {
        sv.assert %525, immediate label "assert__assert_194"
      }
      sv.if %526 {
        sv.assert %527, immediate label "assert__assert_195"
      }
      sv.if %534 {
        sv.assert %533, immediate label "assert__assert_196"
      }
      sv.if %534 {
        sv.assert %536, immediate label "assert__assert_197"
      }
      sv.if %540 {
        sv.assert %539, immediate label "assert__assert_198"
      }
      sv.if %77 {
        sv.assert %543, immediate label "assert__assert_199"
      }
      sv.if %77 {
        sv.assert %556, immediate label "assert__assert_200"
      }
      sv.if %600 {
        sv.assert %599, immediate label "assert__assert_201"
      }
      sv.if %619 {
        sv.assert %618, immediate label "assert__assert_202"
      }
      sv.if %621 {
        sv.assert %620, immediate label "assert__assert_203"
      }
      sv.if %624 {
        sv.assert %623, immediate label "assert__assert_204"
      }
      sv.if %628 {
        sv.assert %627, immediate label "assert__assert_205"
      }
      sv.if %631 {
        sv.assert %630, immediate label "assert__assert_206"
      }
      sv.if %77 {
        sv.assert %641, immediate label "assert__assert_207"
      }
      sv.if %663 {
        sv.assert %662, immediate label "assert__assert_208"
      }
      sv.if %671 {
        sv.assert %670, immediate label "assert__assert_209"
      }
    }
    %672 = comb.or bin %inflight_2, %659 {sv.namehint = "_inflight_T_6"} : i4
    %673 = comb.xor bin %667, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %674 = comb.and bin %672, %673 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @TLMonitor_19(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_address : i32, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i9 = hw.constant -1 : i9
    %c2_i4 = hw.constant 2 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c0_i16 = hw.constant 0 : i16
    %c0_i20 = hw.constant 0 : i20
    %c-1_i2 = hw.constant -1 : i2
    %c0_i6 = hw.constant 0 : i6
    %c4095_i27 = hw.constant 4095 : i27
    %false = hw.constant false
    %c6_i4 = hw.constant 6 : i4
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %true = hw.constant true
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i4 = hw.constant -1 : i4
    %c1_i3 = hw.constant 1 : i3
    %c0_i4 = hw.constant 0 : i4
    %c13_i5 = hw.constant 13 : i5
    %c-7_i4 = hw.constant -7 : i4
    %c0_i9 = hw.constant 0 : i9
    %c0_i32 = hw.constant 0 : i32
    %c0_i8 = hw.constant 0 : i8
    %c0_i5 = hw.constant 0 : i5
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %4 = comb.icmp bin eq %3, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %5 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %6 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %7 = comb.xor bin %6, %c-1_i2 : i2
    %8 = comb.concat %5, %7 : i18, i2
    %9 = comb.icmp bin eq %8, %c0_i20 : i20
    %10 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %11 = comb.icmp bin eq %10, %c0_i20 : i20
    %12 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %13 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %14 = comb.xor bin %13, %true : i1
    %15 = comb.concat %12, %14 : i15, i1
    %16 = comb.icmp bin eq %15, %c0_i16 : i16
    %17 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %18 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %19 = comb.xor bin %18, %c-512_i10 : i10
    %20 = comb.concat %17, %19 : i6, i10
    %21 = comb.icmp bin eq %20, %c0_i16 : i16
    %22 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %23 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %24 = comb.xor bin %23, %c-1_i2 : i2
    %25 = comb.concat %22, %24 : i4, i2
    %26 = comb.icmp bin eq %25, %c0_i6 : i6
    %27 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %28 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %29 = comb.xor bin %28, %c-1_i2 : i2
    %30 = comb.concat %27, %29 : i1, i2
    %31 = comb.icmp bin eq %30, %c0_i3 : i3
    %32 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %33 = comb.icmp eq %32, %c-8_i4 : i4
    %34 = comb.or bin %9, %11, %16, %21, %26, %31, %33 : i1
    %35 = comb.xor bin %reset, %true : i1
    %36 = comb.and bin %io_in_a_valid, %35 : i1
    %37 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %38 = comb.and bin %io_in_d_valid, %35 : i1
    %39 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %40 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %41 = comb.and bin %io_in_d_valid, %39, %35 : i1
    %42 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %43 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %44 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %45 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %46 = comb.and bin %io_in_d_valid, %45, %35 : i1
    %47 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %48 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %49 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %50 = comb.and bin %io_in_d_valid, %49, %35 : i1
    %51 = comb.or bin %44, %io_in_d_bits_corrupt : i1
    %52 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %53 = comb.and bin %io_in_d_valid, %52, %35 : i1
    %54 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %55 = comb.and bin %io_in_d_valid, %54, %35 : i1
    %56 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %57 = comb.and bin %io_in_d_valid, %56, %35 : i1
    %58 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %a_first_counter = seq.firreg %63 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %59 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %60 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %61 = comb.xor bin %60, %true {sv.namehint = "a_first"} : i1
    %62 = comb.mux bin %60, %59, %c0_i9 {sv.namehint = "_a_first_counter_T"} : i9
    %63 = comb.mux bin %58, %62, %a_first_counter : i9
    %address = seq.firreg %67 clock %clock {firrtl.random_init_start = 20 : ui64} : i32
    %64 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %65 = comb.and bin %io_in_a_valid, %60, %35 : i1
    %66 = comb.and bin %58, %61 : i1
    %67 = comb.mux bin %66, %io_in_a_bits_address, %address : i32
    %68 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %69 = comb.shl bin %c4095_i27, %68 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %70 = comb.extract %69 from 3 : (i27) -> i9
    %71 = comb.xor bin %70, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %72 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %73 = comb.mux bin %72, %71, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %78 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 52 : ui64} : i9
    %74 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %75 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %76 = comb.xor bin %75, %true {sv.namehint = "d_first"} : i1
    %77 = comb.mux bin %75, %74, %73 {sv.namehint = "_d_first_counter_T"} : i9
    %78 = comb.mux bin %io_in_d_valid, %77, %d_first_counter : i9
    %opcode_1 = seq.firreg %86 clock %clock {firrtl.random_init_start = 61 : ui64} : i3
    %param_1 = seq.firreg %87 clock %clock {firrtl.random_init_start = 64 : ui64} : i2
    %size_1 = seq.firreg %88 clock %clock {firrtl.random_init_start = 66 : ui64} : i4
    %sink = seq.firreg %89 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %denied = seq.firreg %90 clock %clock {firrtl.random_init_start = 73 : ui64} : i1
    %79 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %80 = comb.and bin %io_in_d_valid, %75, %35 : i1
    %81 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %82 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %83 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %84 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %85 = comb.and bin %io_in_d_valid, %76 : i1
    %86 = comb.mux bin %85, %io_in_d_bits_opcode, %opcode_1 : i3
    %87 = comb.mux bin %85, %io_in_d_bits_param, %param_1 : i2
    %88 = comb.mux bin %85, %io_in_d_bits_size, %size_1 : i4
    %89 = comb.mux bin %85, %io_in_d_bits_sink, %sink : i2
    %90 = comb.mux bin %85, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %139 clock %clock reset sync %reset, %false {firrtl.random_init_start = 74 : ui64} : i1
    %inflight_opcodes = seq.firreg %142 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 75 : ui64} : i4
    %inflight_sizes = seq.firreg %145 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 79 : ui64} : i8
    %a_first_counter_1 = seq.firreg %94 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 87 : ui64} : i9
    %91 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %92 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %93 = comb.mux bin %92, %c0_i9, %91 {sv.namehint = "_a_first_counter_T_1"} : i9
    %94 = comb.mux bin %58, %93, %a_first_counter_1 : i9
    %95 = comb.shl bin %c4095_i27, %68 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %96 = comb.extract %95 from 3 : (i27) -> i9
    %97 = comb.xor bin %96, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %98 = comb.mux bin %72, %97, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %102 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 96 : ui64} : i9
    %99 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %100 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %101 = comb.mux bin %100, %98, %99 {sv.namehint = "_d_first_counter_T_1"} : i9
    %102 = comb.mux bin %io_in_d_valid, %101, %d_first_counter_1 : i9
    %103 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %104 = comb.extract %inflight_sizes from 1 : (i8) -> i7
    %105 = comb.concat %false, %104 {sv.namehint = "a_size_lookup"} : i1, i7
    %106 = comb.and bin %io_in_a_valid, %92 {sv.namehint = "a_set_wo_ready"} : i1
    %107 = comb.and bin %58, %92 {sv.namehint = "a_set"} : i1
    %108 = comb.mux bin %107, %c13_i5, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %109 = comb.mux bin %107, %c-7_i4, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %110 = comb.concat %c0_i3, %108 : i3, i5
    %111 = comb.mux bin %107, %110, %c0_i8 {sv.namehint = "a_sizes_set"} : i8
    %112 = comb.xor bin %inflight, %true : i1
    %113 = comb.and bin %107, %35 : i1
    %114 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %115 = comb.and bin %io_in_d_valid, %100 : i1
    %116 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %117 = comb.and bin %115, %116 {sv.namehint = "d_clr"} : i1
    %118 = comb.replicate %117 {sv.namehint = "d_opcodes_clr"} : (i1) -> i4
    %119 = comb.replicate %117 {sv.namehint = "d_sizes_clr"} : (i1) -> i8
    %120 = comb.or bin %inflight, %106 : i1
    %121 = comb.and bin %117, %35 : i1
    %122 = comb.and bin %117, %106, %35 : i1
    %123 = comb.icmp bin eq %io_in_d_bits_size, %c6_i4 : i4
    %124 = comb.xor bin %106, %true : i1
    %125 = hw.array_get %1[%103] : !hw.array<8xi3>, i3
    %126 = comb.icmp bin eq %io_in_d_bits_opcode, %125 : i3
    %127 = hw.array_get %0[%103] : !hw.array<8xi3>, i3
    %128 = comb.icmp bin eq %io_in_d_bits_opcode, %127 : i3
    %129 = comb.or bin %126, %128 : i1
    %130 = comb.and bin %117, %124, %35 : i1
    %131 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %132 = comb.icmp bin eq %131, %105 : i8
    %133 = comb.and bin %115, %92, %io_in_a_valid, %116, %35 : i1
    %134 = comb.icmp bin ne %106, %117 : i1
    %135 = comb.xor bin %106, %true : i1
    %136 = comb.or bin %134, %135 : i1
    %137 = comb.or bin %inflight, %107 {sv.namehint = "_inflight_T"} : i1
    %138 = comb.xor bin %117, %true {sv.namehint = "_inflight_T_1"} : i1
    %139 = comb.and bin %137, %138 {sv.namehint = "_inflight_T_2"} : i1
    %140 = comb.or bin %inflight_opcodes, %109 {sv.namehint = "_inflight_opcodes_T"} : i4
    %141 = comb.xor bin %118, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %142 = comb.and bin %140, %141 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %143 = comb.or bin %inflight_sizes, %111 {sv.namehint = "_inflight_sizes_T"} : i8
    %144 = comb.xor bin %119, %c-1_i8 {sv.namehint = "_inflight_sizes_T_1"} : i8
    %145 = comb.and bin %143, %144 {sv.namehint = "_inflight_sizes_T_2"} : i8
    %watchdog = seq.firreg %151 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 105 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %146 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %147 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %148 = comb.or bin %112, %146, %147 : i1
    %149 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %150 = comb.or bin %58, %io_in_d_valid : i1
    %151 = comb.mux bin %150, %c0_i32, %149 : i32
    %inflight_1 = seq.firreg %167 clock %clock reset sync %reset, %false {firrtl.random_init_start = 137 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %169 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 142 : ui64} : i8
    %152 = comb.shl bin %c4095_i27, %68 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %153 = comb.extract %152 from 3 : (i27) -> i9
    %154 = comb.xor bin %153, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %155 = comb.mux bin %72, %154, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %159 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 159 : ui64} : i9
    %156 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %157 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %158 = comb.mux bin %157, %155, %156 {sv.namehint = "_d_first_counter_T_2"} : i9
    %159 = comb.mux bin %io_in_d_valid, %158, %d_first_counter_2 : i9
    %160 = comb.extract %inflight_sizes_1 from 1 : (i8) -> i7
    %161 = comb.concat %false, %160 {sv.namehint = "c_size_lookup"} : i1, i7
    %162 = comb.and bin %io_in_d_valid, %157, %114 {sv.namehint = "d_clr_1"} : i1
    %163 = comb.replicate %162 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i8
    %164 = comb.and bin %162, %35 : i1
    %165 = comb.icmp bin eq %131, %161 : i8
    %166 = comb.xor bin %162, %true {sv.namehint = "_inflight_T_4"} : i1
    %167 = comb.and bin %inflight_1, %166 {sv.namehint = "_inflight_T_5"} : i1
    %168 = comb.xor bin %163, %c-1_i8 {sv.namehint = "_inflight_sizes_T_4"} : i8
    %169 = comb.and bin %inflight_sizes_1, %168 {sv.namehint = "_inflight_sizes_T_5"} : i8
    %watchdog_1 = seq.firreg %175 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 168 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %170 = comb.xor bin %inflight_1, %true : i1
    %171 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %172 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %173 = comb.or bin %170, %171, %172 : i1
    sv.always posedge %2 {
      sv.if %36 {
        sv.assert %34, immediate label "assert__assert_20"
      }
      sv.if %36 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %38 {
        sv.assert %37, immediate label "assert__assert_52"
      }
      sv.if %41 {
        sv.assert %40, immediate label "assert__assert_54"
      }
      sv.if %41 {
        sv.assert %42, immediate label "assert__assert_55"
      }
      sv.if %41 {
        sv.assert %43, immediate label "assert__assert_56"
      }
      sv.if %41 {
        sv.assert %44, immediate label "assert__assert_57"
      }
      sv.if %46 {
        sv.assert %40, immediate label "assert__assert_60"
      }
      sv.if %46 {
        sv.assert %47, immediate label "assert__assert_61"
      }
      sv.if %46 {
        sv.assert %48, immediate label "assert__assert_62"
      }
      sv.if %46 {
        sv.assert %43, immediate label "assert__assert_63"
      }
      sv.if %50 {
        sv.assert %40, immediate label "assert__assert_67"
      }
      sv.if %50 {
        sv.assert %47, immediate label "assert__assert_68"
      }
      sv.if %50 {
        sv.assert %48, immediate label "assert__assert_69"
      }
      sv.if %50 {
        sv.assert %51, immediate label "assert__assert_70"
      }
      sv.if %53 {
        sv.assert %42, immediate label "assert__assert_73"
      }
      sv.if %53 {
        sv.assert %43, immediate label "assert__assert_74"
      }
      sv.if %55 {
        sv.assert %42, immediate label "assert__assert_77"
      }
      sv.if %55 {
        sv.assert %51, immediate label "assert__assert_78"
      }
      sv.if %57 {
        sv.assert %42, immediate label "assert__assert_81"
      }
      sv.if %57 {
        sv.assert %43, immediate label "assert__assert_82"
      }
      sv.if %65 {
        sv.assert %64, immediate label "assert__assert_91"
      }
      sv.if %80 {
        sv.assert %79, immediate label "assert__assert_92"
      }
      sv.if %80 {
        sv.assert %81, immediate label "assert__assert_93"
      }
      sv.if %80 {
        sv.assert %82, immediate label "assert__assert_94"
      }
      sv.if %80 {
        sv.assert %83, immediate label "assert__assert_96"
      }
      sv.if %80 {
        sv.assert %84, immediate label "assert__assert_97"
      }
      sv.if %113 {
        sv.assert %112, immediate label "assert__assert_98"
      }
      sv.if %121 {
        sv.assert %120, immediate label "assert__assert_99"
      }
      sv.if %122 {
        sv.assert %54, immediate label "assert__assert_100"
      }
      sv.if %122 {
        sv.assert %123, immediate label "assert__assert_101"
      }
      sv.if %130 {
        sv.assert %129, immediate label "assert__assert_102"
      }
      sv.if %130 {
        sv.assert %132, immediate label "assert__assert_103"
      }
      sv.if %133 {
        sv.assert %io_in_a_ready, immediate label "assert__assert_104"
      }
      sv.if %35 {
        sv.assert %136, immediate label "assert__assert_105"
      }
      sv.if %35 {
        sv.assert %148, immediate label "assert__assert_106"
      }
      sv.if %164 {
        sv.assert %inflight_1, immediate label "assert__assert_108"
      }
      sv.if %164 {
        sv.assert %165, immediate label "assert__assert_110"
      }
      sv.if %35 {
        sv.assert %173, immediate label "assert__assert_113"
      }
    }
    %174 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %175 = comb.mux bin %io_in_d_valid, %c0_i32, %174 : i32
    hw.output
  }
  hw.module private @TLXbar_8(in %clock : !seq.clock, in %reset : i1, out auto_in_1_a_ready : i1, in %auto_in_1_a_valid : i1, in %auto_in_1_a_bits_address : i32, out auto_in_1_d_valid : i1, out auto_in_1_d_bits_opcode : i3, out auto_in_1_d_bits_size : i4, out auto_in_1_d_bits_data : i64, out auto_in_1_d_bits_corrupt : i1, out auto_in_0_a_ready : i1, in %auto_in_0_a_valid : i1, in %auto_in_0_a_bits_opcode : i3, in %auto_in_0_a_bits_param : i3, in %auto_in_0_a_bits_size : i4, in %auto_in_0_a_bits_source : i1, in %auto_in_0_a_bits_address : i32, in %auto_in_0_a_bits_mask : i8, in %auto_in_0_a_bits_data : i64, in %auto_in_0_b_ready : i1, out auto_in_0_b_valid : i1, out auto_in_0_b_bits_param : i2, out auto_in_0_b_bits_size : i4, out auto_in_0_b_bits_source : i1, out auto_in_0_b_bits_address : i32, out auto_in_0_c_ready : i1, in %auto_in_0_c_valid : i1, in %auto_in_0_c_bits_opcode : i3, in %auto_in_0_c_bits_param : i3, in %auto_in_0_c_bits_size : i4, in %auto_in_0_c_bits_source : i1, in %auto_in_0_c_bits_address : i32, in %auto_in_0_c_bits_data : i64, in %auto_in_0_d_ready : i1, out auto_in_0_d_valid : i1, out auto_in_0_d_bits_opcode : i3, out auto_in_0_d_bits_param : i2, out auto_in_0_d_bits_size : i4, out auto_in_0_d_bits_source : i1, out auto_in_0_d_bits_sink : i2, out auto_in_0_d_bits_denied : i1, out auto_in_0_d_bits_data : i64, out auto_in_0_e_ready : i1, in %auto_in_0_e_valid : i1, in %auto_in_0_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_opcode : i3, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i2, in %auto_out_b_bits_address : i32, in %auto_out_b_bits_mask : i8, in %auto_out_b_bits_corrupt : i1, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %c-1_i9 = hw.constant -1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i3 = hw.constant 0 : i3
    %c6_i4 = hw.constant 6 : i4
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %c0_i9 = hw.constant 0 : i9
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i32 = hw.constant 0 : i32
    %c0_i8 = hw.constant 0 : i8
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %c0_i23 = hw.constant 0 : i23
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_18(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %66: i1, io_in_a_valid: %auto_in_0_a_valid: i1, io_in_a_bits_opcode: %auto_in_0_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_0_a_bits_param: i3, io_in_a_bits_size: %auto_in_0_a_bits_size: i4, io_in_a_bits_source: %auto_in_0_a_bits_source: i1, io_in_a_bits_address: %auto_in_0_a_bits_address: i32, io_in_a_bits_mask: %auto_in_0_a_bits_mask: i8, io_in_b_ready: %auto_in_0_b_ready: i1, io_in_b_valid: %16: i1, io_in_b_bits_opcode: %auto_out_b_bits_opcode: i3, io_in_b_bits_param: %auto_out_b_bits_param: i2, io_in_b_bits_size: %auto_out_b_bits_size: i4, io_in_b_bits_source: %2: i1, io_in_b_bits_address: %auto_out_b_bits_address: i32, io_in_b_bits_mask: %auto_out_b_bits_mask: i8, io_in_b_bits_corrupt: %auto_out_b_bits_corrupt: i1, io_in_c_ready: %auto_out_c_ready: i1, io_in_c_valid: %auto_in_0_c_valid: i1, io_in_c_bits_opcode: %auto_in_0_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_0_c_bits_param: i3, io_in_c_bits_size: %auto_in_0_c_bits_size: i4, io_in_c_bits_source: %auto_in_0_c_bits_source: i1, io_in_c_bits_address: %auto_in_0_c_bits_address: i32, io_in_d_ready: %auto_in_0_d_ready: i1, io_in_d_valid: %18: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %4: i1, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_in_e_ready: %auto_out_e_ready: i1, io_in_e_valid: %auto_in_0_e_valid: i1, io_in_e_bits_sink: %auto_in_0_e_bits_sink: i2) -> ()
    hw.instance "monitor_1" @TLMonitor_19(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %67: i1, io_in_a_valid: %auto_in_1_a_valid: i1, io_in_a_bits_address: %auto_in_1_a_bits_address: i32, io_in_d_valid: %19: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    %1 = comb.concat %false, %auto_in_0_a_bits_source {sv.namehint = "in_0_a_bits_source"} : i1, i1
    %2 = comb.extract %auto_out_b_bits_source from 0 {sv.namehint = "nodeIn_b_bits_source"} : (i2) -> i1
    %3 = comb.concat %false, %auto_in_0_c_bits_source {sv.namehint = "in_0_c_bits_source"} : i1, i1
    %4 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "nodeIn_d_bits_source"} : (i2) -> i1
    %5 = comb.extract %auto_out_b_bits_source from 1 {sv.namehint = "_requestBOI_T"} : (i2) -> i1
    %6 = comb.xor bin %5, %true {sv.namehint = "requestBOI_0_0"} : i1
    %7 = comb.extract %auto_out_d_bits_source from 1 {sv.namehint = "_requestDOI_T"} : (i2) -> i1
    %8 = comb.xor bin %7, %true {sv.namehint = "requestDOI_0_0"} : i1
    %9 = comb.icmp bin eq %auto_out_d_bits_source, %c-2_i2 {sv.namehint = "requestDOI_0_1"} : i2
    %10 = comb.concat %c0_i23, %auto_in_0_a_bits_size : i23, i4
    %11 = comb.shl bin %c4095_i27, %10 {sv.namehint = "_beatsAI_decode_T_1"} : i27
    %12 = comb.extract %11 from 3 : (i27) -> i9
    %13 = comb.xor bin %12, %c-1_i9 {sv.namehint = "_beatsAI_decode_T_3"} : i9
    %14 = comb.extract %auto_in_0_a_bits_opcode from 2 {sv.namehint = "_beatsAI_opdata_T"} : (i3) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "beatsAI_opdata"} : i1
    %16 = comb.and bin %auto_out_b_valid, %6 {sv.namehint = "portsBIO_filtered_0_valid"} : i1
    %17 = comb.and %6, %auto_in_0_b_ready {sv.namehint = "_portsBIO_out_0_b_ready_T_2"} : i1
    %18 = comb.and bin %auto_out_d_valid, %8 {sv.namehint = "portsDIO_filtered_0_valid"} : i1
    %19 = comb.and bin %auto_out_d_valid, %9 {sv.namehint = "portsDIO_filtered_1_valid"} : i1
    %20 = comb.and %8, %auto_in_0_d_ready {sv.namehint = "_portsDIO_out_0_d_ready_T"} : i1
    %21 = comb.or bin %20, %9 {sv.namehint = "_portsDIO_out_0_d_ready_T_2"} : i1
    %beatsLeft = seq.firreg %61 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %22 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %23 = comb.and bin %22, %auto_out_a_ready {sv.namehint = "latch"} : i1
    %24 = comb.concat %auto_in_1_a_valid, %auto_in_0_a_valid {sv.namehint = "readys_valid"} : i1, i1
    %readys_mask = seq.firreg %44 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 9 : ui64} : i2
    %25 = comb.xor bin %readys_mask, %c-1_i2 {sv.namehint = "_readys_filter_T"} : i2
    %26 = comb.and bin %24, %25 {sv.namehint = "_readys_filter_T_1"} : i2
    %27 = comb.extract %26 from 1 : (i2) -> i1
    %28 = comb.extract %26 from 0 : (i2) -> i1
    %29 = comb.concat %28, %auto_in_1_a_valid : i1, i1
    %30 = comb.or bin %29, %26 : i2
    %31 = comb.concat %readys_mask, %c0_i2 {sv.namehint = "_readys_unready_T_4"} : i2, i2
    %32 = comb.concat %false, %27, %30 : i1, i1, i2
    %33 = comb.or bin %32, %31 {sv.namehint = "readys_unready"} : i4
    %34 = comb.extract %33 from 2 {sv.namehint = "_readys_readys_T"} : (i4) -> i2
    %35 = comb.extract %33 from 0 {sv.namehint = "_readys_readys_T_1"} : (i4) -> i2
    %36 = comb.and bin %34, %35 {sv.namehint = "_readys_readys_T_2"} : i2
    %37 = comb.xor bin %36, %c-1_i2 {sv.namehint = "readys_readys"} : i2
    %38 = comb.icmp bin ne %24, %c0_i2 {sv.namehint = "_readys_T_5"} : i2
    %39 = comb.and bin %23, %38 {sv.namehint = "_readys_T_6"} : i1
    %40 = comb.and bin %37, %24 {sv.namehint = "_readys_mask_T"} : i2
    %41 = comb.extract %40 from 0 : (i2) -> i1
    %42 = comb.concat %41, %false {sv.namehint = "_readys_mask_T_2"} : i1, i1
    %43 = comb.or bin %40, %42 {sv.namehint = "_readys_mask_T_4"} : i2
    %44 = comb.mux bin %39, %43, %readys_mask : i2
    %45 = comb.extract %37 from 0 {sv.namehint = "readys_0"} : (i2) -> i1
    %46 = comb.extract %37 from 1 {sv.namehint = "readys_1"} : (i2) -> i1
    %47 = comb.and bin %45, %auto_in_0_a_valid {sv.namehint = "winner_0"} : i1
    %48 = comb.and bin %46, %auto_in_1_a_valid {sv.namehint = "winner_1"} : i1
    %49 = comb.xor bin %47, %true : i1
    %50 = comb.xor bin %48, %true : i1
    %51 = comb.or bin %49, %50 : i1
    %52 = comb.xor bin %reset, %true : i1
    %53 = comb.or bin %auto_in_0_a_valid, %auto_in_1_a_valid {sv.namehint = "_out_0_a_valid_T"} : i1
    %54 = comb.xor bin %53, %true : i1
    %55 = comb.or bin %54, %47, %48 : i1
    sv.always posedge %0 {
      sv.if %52 {
        sv.assert %51, immediate label "assert__assert"
      }
      sv.if %52 {
        sv.assert %55, immediate label "assert__assert_1"
      }
    }
    %56 = comb.and bin %47, %15 : i1
    %57 = comb.mux bin %56, %13, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %58 = comb.and bin %auto_out_a_ready, %71 {sv.namehint = "_beatsLeft_T"} : i1
    %59 = comb.concat %c0_i8, %58 : i8, i1
    %60 = comb.sub bin %beatsLeft, %59 {sv.namehint = "_beatsLeft_T_1"} : i9
    %61 = comb.mux bin %23, %57, %60 {sv.namehint = "_beatsLeft_T_3"} : i9
    %state_0 = seq.firreg %62 clock %clock reset sync %reset, %false {firrtl.random_init_start = 11 : ui64} : i1
    %state_1 = seq.firreg %63 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64} : i1
    %62 = comb.mux bin %22, %47, %state_0 {sv.namehint = "muxState_0"} : i1
    %63 = comb.mux bin %22, %48, %state_1 {sv.namehint = "muxState_1"} : i1
    %64 = comb.mux bin %22, %45, %state_0 {sv.namehint = "allowed_0"} : i1
    %65 = comb.mux bin %22, %46, %state_1 {sv.namehint = "allowed_1"} : i1
    %66 = comb.and bin %auto_out_a_ready, %64 {sv.namehint = "portsAOI_filtered_0_ready"} : i1
    %67 = comb.and bin %auto_out_a_ready, %65 {sv.namehint = "portsAOI_filtered_1_0_ready"} : i1
    %68 = comb.and %state_0, %auto_in_0_a_valid {sv.namehint = "_out_0_a_valid_T_1"} : i1
    %69 = comb.and %state_1, %auto_in_1_a_valid {sv.namehint = "_out_0_a_valid_T_2"} : i1
    %70 = comb.or bin %68, %69 {sv.namehint = "_out_0_a_valid_T_3"} : i1
    %71 = comb.mux bin %22, %53, %70 {sv.namehint = "out_0_a_valid"} : i1
    %72 = comb.mux bin %62, %auto_in_0_a_bits_data, %c0_i64 {sv.namehint = "_out_0_a_bits_T_3"} : i64
    %73 = comb.mux bin %62, %auto_in_0_a_bits_mask, %c0_i8 {sv.namehint = "_out_0_a_bits_T_6"} : i8
    %74 = comb.replicate %63 {sv.namehint = "_out_0_a_bits_T_7"} : (i1) -> i8
    %75 = comb.or bin %73, %74 {sv.namehint = "_out_0_a_bits_T_8"} : i8
    %76 = comb.mux bin %62, %auto_in_0_a_bits_address, %c0_i32 {sv.namehint = "_out_0_a_bits_T_30"} : i32
    %77 = comb.mux bin %63, %auto_in_1_a_bits_address, %c0_i32 {sv.namehint = "_out_0_a_bits_T_31"} : i32
    %78 = comb.or bin %76, %77 {sv.namehint = "_out_0_a_bits_T_32"} : i32
    %79 = comb.mux bin %62, %1, %c0_i2 {sv.namehint = "_out_0_a_bits_T_33"} : i2
    %80 = comb.concat %63, %false {sv.namehint = "_out_0_a_bits_T_34"} : i1, i1
    %81 = comb.or bin %79, %80 {sv.namehint = "_out_0_a_bits_T_35"} : i2
    %82 = comb.mux bin %62, %auto_in_0_a_bits_size, %c0_i4 {sv.namehint = "_out_0_a_bits_T_36"} : i4
    %83 = comb.mux bin %63, %c6_i4, %c0_i4 {sv.namehint = "_out_0_a_bits_T_37"} : i4
    %84 = comb.or bin %82, %83 {sv.namehint = "_out_0_a_bits_T_38"} : i4
    %85 = comb.mux bin %62, %auto_in_0_a_bits_param, %c0_i3 {sv.namehint = "_out_0_a_bits_T_39"} : i3
    %86 = comb.mux bin %62, %auto_in_0_a_bits_opcode, %c0_i3 {sv.namehint = "_out_0_a_bits_T_42"} : i3
    %87 = comb.concat %63, %c0_i2 {sv.namehint = "_out_0_a_bits_T_43"} : i1, i2
    %88 = comb.or bin %86, %87 {sv.namehint = "_out_0_a_bits_T_44"} : i3
    hw.output %67, %19, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %66, %16, %auto_out_b_bits_param, %auto_out_b_bits_size, %2, %auto_out_b_bits_address, %auto_out_c_ready, %18, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %4, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_e_ready, %71, %88, %85, %84, %81, %78, %75, %72, %17, %auto_in_0_c_valid, %auto_in_0_c_bits_opcode, %auto_in_0_c_bits_param, %auto_in_0_c_bits_size, %3, %auto_in_0_c_bits_address, %auto_in_0_c_bits_data, %21, %auto_in_0_e_valid, %auto_in_0_e_bits_sink : i1, i1, i3, i4, i64, i1, i1, i1, i2, i4, i1, i32, i1, i1, i3, i2, i4, i1, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i2
  }
  hw.module private @IntXbar_1(in %auto_int_in_2_0 : i1, in %auto_int_in_1_0 : i1, in %auto_int_in_1_1 : i1, in %auto_int_in_0_0 : i1, out auto_int_out_0 : i1, out auto_int_out_1 : i1, out auto_int_out_2 : i1, out auto_int_out_3 : i1) {
    hw.output %auto_int_in_0_0, %auto_int_in_1_0, %auto_int_in_1_1, %auto_int_in_2_0 : i1, i1, i1, i1
  }
  hw.module private @TLWidthWidget_8(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i1, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_size : i4, out auto_in_b_bits_source : i1, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i1, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i1, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_e_ready : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i1, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i1, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i1, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i1, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_size, %auto_out_b_bits_source, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_e_ready, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i4, i1, i32, i1, i1, i3, i2, i4, i1, i2, i1, i64, i1, i1, i3, i3, i4, i1, i32, i8, i64, i1, i1, i3, i3, i4, i1, i32, i64, i1, i1, i2
  }
  hw.module private @OptimizationBarrier(in %io_x_u : i1, in %io_x_ae_ptw : i1, in %io_x_ae_final : i1, in %io_x_pf : i1, in %io_x_gf : i1, in %io_x_sw : i1, in %io_x_sx : i1, in %io_x_sr : i1, in %io_x_pw : i1, in %io_x_px : i1, in %io_x_pr : i1, in %io_x_ppp : i1, in %io_x_pal : i1, in %io_x_paa : i1, in %io_x_eff : i1, in %io_x_c : i1, out io_y_u : i1, out io_y_ae_ptw : i1, out io_y_ae_final : i1, out io_y_pf : i1, out io_y_gf : i1, out io_y_sw : i1, out io_y_sx : i1, out io_y_sr : i1, out io_y_pw : i1, out io_y_px : i1, out io_y_pr : i1, out io_y_ppp : i1, out io_y_pal : i1, out io_y_paa : i1, out io_y_eff : i1, out io_y_c : i1) {
    hw.output %io_x_u, %io_x_ae_ptw, %io_x_ae_final, %io_x_pf, %io_x_gf, %io_x_sw, %io_x_sx, %io_x_sr, %io_x_pw, %io_x_px, %io_x_pr, %io_x_ppp, %io_x_pal, %io_x_paa, %io_x_eff, %io_x_c : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @PMPChecker(in %io_prv : i2, in %io_pmp_0_cfg_l : i1, in %io_pmp_0_cfg_a : i2, in %io_pmp_0_cfg_w : i1, in %io_pmp_0_cfg_r : i1, in %io_pmp_0_addr : i30, in %io_pmp_0_mask : i32, in %io_pmp_1_cfg_l : i1, in %io_pmp_1_cfg_a : i2, in %io_pmp_1_cfg_w : i1, in %io_pmp_1_cfg_r : i1, in %io_pmp_1_addr : i30, in %io_pmp_1_mask : i32, in %io_pmp_2_cfg_l : i1, in %io_pmp_2_cfg_a : i2, in %io_pmp_2_cfg_w : i1, in %io_pmp_2_cfg_r : i1, in %io_pmp_2_addr : i30, in %io_pmp_2_mask : i32, in %io_pmp_3_cfg_l : i1, in %io_pmp_3_cfg_a : i2, in %io_pmp_3_cfg_w : i1, in %io_pmp_3_cfg_r : i1, in %io_pmp_3_addr : i30, in %io_pmp_3_mask : i32, in %io_pmp_4_cfg_l : i1, in %io_pmp_4_cfg_a : i2, in %io_pmp_4_cfg_w : i1, in %io_pmp_4_cfg_r : i1, in %io_pmp_4_addr : i30, in %io_pmp_4_mask : i32, in %io_pmp_5_cfg_l : i1, in %io_pmp_5_cfg_a : i2, in %io_pmp_5_cfg_w : i1, in %io_pmp_5_cfg_r : i1, in %io_pmp_5_addr : i30, in %io_pmp_5_mask : i32, in %io_pmp_6_cfg_l : i1, in %io_pmp_6_cfg_a : i2, in %io_pmp_6_cfg_w : i1, in %io_pmp_6_cfg_r : i1, in %io_pmp_6_addr : i30, in %io_pmp_6_mask : i32, in %io_pmp_7_cfg_l : i1, in %io_pmp_7_cfg_a : i2, in %io_pmp_7_cfg_w : i1, in %io_pmp_7_cfg_r : i1, in %io_pmp_7_addr : i30, in %io_pmp_7_mask : i32, in %io_addr : i32, in %io_size : i2, out io_r : i1, out io_w : i1) {
    %c0_i2 = hw.constant 0 : i2
    %c7_i6 = hw.constant 7 : i6
    %c0_i29 = hw.constant 0 : i29
    %c-1_i29 = hw.constant -1 : i29
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %c-1_i3 = hw.constant -1 : i3
    %0 = comb.extract %io_prv from 1 {sv.namehint = "default"} : (i2) -> i1
    %1 = comb.extract %io_pmp_7_cfg_a from 1 {sv.namehint = "_res_aligned_T"} : (i2) -> i1
    %2 = comb.concat %c0_i4, %io_size : i4, i2
    %3 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_1"} : i6
    %4 = comb.extract %3 from 0 {sv.namehint = "_res_hit_lsbMask_T_2"} : (i6) -> i3
    %5 = comb.xor bin %4, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_3"} : i3
    %6 = comb.extract %io_pmp_7_mask from 0 : (i32) -> i3
    %7 = comb.or bin %6, %5 {sv.namehint = "_res_hit_lsbMatch_T_6"} : i3
    %8 = comb.extract %io_addr from 3 {sv.namehint = "_res_aligned_straddlesUpperBound_T_119"} : (i32) -> i29
    %9 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_5"} : (i30) -> i29
    %10 = comb.extract %io_pmp_7_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_6"} : (i32) -> i29
    %11 = comb.xor bin %8, %9 {sv.namehint = "_res_hit_msbMatch_T_7"} : i29
    %12 = comb.xor bin %10, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_8"} : i29
    %13 = comb.and bin %11, %12 {sv.namehint = "_res_hit_msbMatch_T_9"} : i29
    %14 = comb.icmp bin eq %13, %c0_i29 {sv.namehint = "res_hit_msbMatch"} : i29
    %15 = comb.extract %io_addr from 0 {sv.namehint = "_res_aligned_straddlesUpperBound_T_132"} : (i32) -> i3
    %16 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %17 = comb.concat %16, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_5"} : i1, i2
    %18 = comb.xor bin %15, %17 {sv.namehint = "_res_hit_lsbMatch_T_7"} : i3
    %19 = comb.xor bin %7, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_8"} : i3
    %20 = comb.and bin %18, %19 {sv.namehint = "_res_hit_lsbMatch_T_9"} : i3
    %21 = comb.icmp bin eq %20, %c0_i3 {sv.namehint = "res_hit_lsbMatch"} : i3
    %22 = comb.and bin %14, %21 {sv.namehint = "_res_hit_T_1"} : i1
    %23 = comb.extract %io_pmp_7_cfg_a from 0 {sv.namehint = "_res_hit_T_2"} : (i2) -> i1
    %24 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_4"} : i6
    %25 = comb.extract %24 from 0 {sv.namehint = "_res_hit_T_5"} : (i6) -> i3
    %26 = comb.xor bin %25, %c-1_i3 {sv.namehint = "_res_hit_T_6"} : i3
    %27 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_5"} : (i30) -> i29
    %28 = comb.icmp bin ult %8, %27 {sv.namehint = "res_hit_msbsLess"} : i29
    %29 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_5"} : (i30) -> i29
    %30 = comb.xor bin %8, %29 {sv.namehint = "_res_hit_msbsEqual_T_6"} : i29
    %31 = comb.icmp bin eq %30, %c0_i29 {sv.namehint = "res_hit_msbsEqual"} : i29
    %32 = comb.or bin %15, %26 {sv.namehint = "_res_hit_lsbsLess_T_1"} : i3
    %33 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %34 = comb.concat %33, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_6"} : i1, i2
    %35 = comb.icmp bin ult %32, %34 {sv.namehint = "res_hit_lsbsLess"} : i3
    %36 = comb.and bin %31, %35 {sv.namehint = "_res_hit_T_7"} : i1
    %37 = comb.or bin %28, %36 {sv.namehint = "_res_hit_T_8"} : i1
    %38 = comb.xor bin %37, %true {sv.namehint = "_res_hit_T_9"} : i1
    %39 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_11"} : (i30) -> i29
    %40 = comb.icmp bin ult %8, %39 {sv.namehint = "res_hit_msbsLess_1"} : i29
    %41 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_12"} : (i30) -> i29
    %42 = comb.xor bin %8, %41 {sv.namehint = "_res_hit_msbsEqual_T_13"} : i29
    %43 = comb.icmp bin eq %42, %c0_i29 {sv.namehint = "res_hit_msbsEqual_1"} : i29
    %44 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %45 = comb.concat %44, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_13"} : i1, i2
    %46 = comb.icmp bin ult %15, %45 {sv.namehint = "res_hit_lsbsLess_1"} : i3
    %47 = comb.and bin %43, %46 {sv.namehint = "_res_hit_T_10"} : i1
    %48 = comb.or bin %40, %47 {sv.namehint = "_res_hit_T_11"} : i1
    %49 = comb.and bin %23, %38, %48 {sv.namehint = "_res_hit_T_13"} : i1
    %50 = comb.mux bin %1, %22, %49 {sv.namehint = "res_hit"} : i1
    %51 = comb.xor bin %io_pmp_7_cfg_l, %true {sv.namehint = "_res_ignore_T"} : i1
    %52 = comb.and bin %0, %51 {sv.namehint = "res_ignore"} : i1
    %53 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_1"} : i6
    %54 = comb.extract %53 from 0 {sv.namehint = "_res_aligned_lsbMask_T_2"} : (i6) -> i3
    %55 = comb.xor bin %54, %c-1_i3 {sv.namehint = "res_aligned_lsbMask"} : i3
    %56 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_5"} : (i30) -> i29
    %57 = comb.xor bin %8, %56 {sv.namehint = "_res_aligned_straddlesLowerBound_T_6"} : i29
    %58 = comb.icmp bin eq %57, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_7"} : i29
    %59 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %60 = comb.extract %io_addr from 2 : (i32) -> i1
    %61 = comb.xor bin %60, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_14"} : i1
    %62 = comb.and bin %58, %59, %61 {sv.namehint = "res_aligned_straddlesLowerBound"} : i1
    %63 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_5"} : (i30) -> i29
    %64 = comb.xor bin %8, %63 {sv.namehint = "_res_aligned_straddlesUpperBound_T_6"} : i29
    %65 = comb.icmp bin eq %64, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_7"} : i29
    %66 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %67 = comb.extract %io_addr from 2 : (i32) -> i1
    %68 = comb.extract %55 from 2 : (i3) -> i1
    %69 = comb.or bin %67, %68 {sv.namehint = "_res_aligned_straddlesUpperBound_T_14"} : i1
    %70 = comb.and bin %65, %66, %69 {sv.namehint = "res_aligned_straddlesUpperBound"} : i1
    %71 = comb.or bin %62, %70 {sv.namehint = "_res_aligned_rangeAligned_T"} : i1
    %72 = comb.xor bin %71, %true {sv.namehint = "res_aligned_rangeAligned"} : i1
    %73 = comb.extract %io_pmp_7_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T"} : (i32) -> i3
    %74 = comb.xor bin %73, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_1"} : i3
    %75 = comb.and bin %55, %74 {sv.namehint = "_res_aligned_pow2Aligned_T_2"} : i3
    %76 = comb.icmp bin eq %75, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned"} : i3
    %77 = comb.mux bin %1, %76, %72 {sv.namehint = "res_aligned"} : i1
    %78 = comb.or bin %io_pmp_7_cfg_r, %52 {sv.namehint = "_res_cur_cfg_r_T"} : i1
    %79 = comb.and bin %77, %78 {sv.namehint = "res_cur_cfg_r"} : i1
    %80 = comb.or bin %io_pmp_7_cfg_w, %52 {sv.namehint = "_res_cur_cfg_w_T"} : i1
    %81 = comb.and bin %77, %80 {sv.namehint = "res_cur_cfg_w"} : i1
    %82 = comb.mux bin %50, %81, %0 {sv.namehint = "_res_T_44_cfg_w"} : i1
    %83 = comb.mux bin %50, %79, %0 {sv.namehint = "_res_T_44_cfg_r"} : i1
    %84 = comb.extract %io_pmp_6_cfg_a from 1 {sv.namehint = "_res_aligned_T_1"} : (i2) -> i1
    %85 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_5"} : i6
    %86 = comb.extract %85 from 0 {sv.namehint = "_res_hit_lsbMask_T_6"} : (i6) -> i3
    %87 = comb.xor bin %86, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_7"} : i3
    %88 = comb.extract %io_pmp_6_mask from 0 : (i32) -> i3
    %89 = comb.or bin %88, %87 {sv.namehint = "_res_hit_lsbMatch_T_16"} : i3
    %90 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_15"} : (i30) -> i29
    %91 = comb.extract %io_pmp_6_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_16"} : (i32) -> i29
    %92 = comb.xor bin %8, %90 {sv.namehint = "_res_hit_msbMatch_T_17"} : i29
    %93 = comb.xor bin %91, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_18"} : i29
    %94 = comb.and bin %92, %93 {sv.namehint = "_res_hit_msbMatch_T_19"} : i29
    %95 = comb.icmp bin eq %94, %c0_i29 {sv.namehint = "res_hit_msbMatch_1"} : i29
    %96 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %97 = comb.concat %96, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_15"} : i1, i2
    %98 = comb.xor bin %15, %97 {sv.namehint = "_res_hit_lsbMatch_T_17"} : i3
    %99 = comb.xor bin %89, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_18"} : i3
    %100 = comb.and bin %98, %99 {sv.namehint = "_res_hit_lsbMatch_T_19"} : i3
    %101 = comb.icmp bin eq %100, %c0_i3 {sv.namehint = "res_hit_lsbMatch_1"} : i3
    %102 = comb.and bin %95, %101 {sv.namehint = "_res_hit_T_15"} : i1
    %103 = comb.extract %io_pmp_6_cfg_a from 0 {sv.namehint = "_res_hit_T_16"} : (i2) -> i1
    %104 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_18"} : i6
    %105 = comb.extract %104 from 0 {sv.namehint = "_res_hit_T_19"} : (i6) -> i3
    %106 = comb.xor bin %105, %c-1_i3 {sv.namehint = "_res_hit_T_20"} : i3
    %107 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_17"} : (i30) -> i29
    %108 = comb.icmp bin ult %8, %107 {sv.namehint = "res_hit_msbsLess_2"} : i29
    %109 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_19"} : (i30) -> i29
    %110 = comb.xor bin %8, %109 {sv.namehint = "_res_hit_msbsEqual_T_20"} : i29
    %111 = comb.icmp bin eq %110, %c0_i29 {sv.namehint = "res_hit_msbsEqual_2"} : i29
    %112 = comb.or bin %15, %106 {sv.namehint = "_res_hit_lsbsLess_T_15"} : i3
    %113 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %114 = comb.concat %113, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_20"} : i1, i2
    %115 = comb.icmp bin ult %112, %114 {sv.namehint = "res_hit_lsbsLess_2"} : i3
    %116 = comb.and bin %111, %115 {sv.namehint = "_res_hit_T_21"} : i1
    %117 = comb.or bin %108, %116 {sv.namehint = "_res_hit_T_22"} : i1
    %118 = comb.xor bin %117, %true {sv.namehint = "_res_hit_T_23"} : i1
    %119 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_23"} : (i30) -> i29
    %120 = comb.icmp bin ult %8, %119 {sv.namehint = "res_hit_msbsLess_3"} : i29
    %121 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_26"} : (i30) -> i29
    %122 = comb.xor bin %8, %121 {sv.namehint = "_res_hit_msbsEqual_T_27"} : i29
    %123 = comb.icmp bin eq %122, %c0_i29 {sv.namehint = "res_hit_msbsEqual_3"} : i29
    %124 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %125 = comb.concat %124, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_27"} : i1, i2
    %126 = comb.icmp bin ult %15, %125 {sv.namehint = "res_hit_lsbsLess_3"} : i3
    %127 = comb.and bin %123, %126 {sv.namehint = "_res_hit_T_24"} : i1
    %128 = comb.or bin %120, %127 {sv.namehint = "_res_hit_T_25"} : i1
    %129 = comb.and bin %103, %118, %128 {sv.namehint = "_res_hit_T_27"} : i1
    %130 = comb.mux bin %84, %102, %129 {sv.namehint = "res_hit_1"} : i1
    %131 = comb.xor bin %io_pmp_6_cfg_l, %true {sv.namehint = "_res_ignore_T_1"} : i1
    %132 = comb.and bin %0, %131 {sv.namehint = "res_ignore_1"} : i1
    %133 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_4"} : i6
    %134 = comb.extract %133 from 0 {sv.namehint = "_res_aligned_lsbMask_T_5"} : (i6) -> i3
    %135 = comb.xor bin %134, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_1"} : i3
    %136 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_22"} : (i30) -> i29
    %137 = comb.xor bin %8, %136 {sv.namehint = "_res_aligned_straddlesLowerBound_T_23"} : i29
    %138 = comb.icmp bin eq %137, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_24"} : i29
    %139 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %140 = comb.extract %io_addr from 2 : (i32) -> i1
    %141 = comb.xor bin %140, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_31"} : i1
    %142 = comb.and bin %138, %139, %141 {sv.namehint = "res_aligned_straddlesLowerBound_1"} : i1
    %143 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_22"} : (i30) -> i29
    %144 = comb.xor bin %8, %143 {sv.namehint = "_res_aligned_straddlesUpperBound_T_23"} : i29
    %145 = comb.icmp bin eq %144, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_24"} : i29
    %146 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %147 = comb.extract %io_addr from 2 : (i32) -> i1
    %148 = comb.extract %135 from 2 : (i3) -> i1
    %149 = comb.or bin %147, %148 {sv.namehint = "_res_aligned_straddlesUpperBound_T_31"} : i1
    %150 = comb.and bin %145, %146, %149 {sv.namehint = "res_aligned_straddlesUpperBound_1"} : i1
    %151 = comb.or bin %142, %150 {sv.namehint = "_res_aligned_rangeAligned_T_1"} : i1
    %152 = comb.xor bin %151, %true {sv.namehint = "res_aligned_rangeAligned_1"} : i1
    %153 = comb.extract %io_pmp_6_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_3"} : (i32) -> i3
    %154 = comb.xor bin %153, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_4"} : i3
    %155 = comb.and bin %135, %154 {sv.namehint = "_res_aligned_pow2Aligned_T_5"} : i3
    %156 = comb.icmp bin eq %155, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_1"} : i3
    %157 = comb.mux bin %84, %156, %152 {sv.namehint = "res_aligned_1"} : i1
    %158 = comb.or bin %io_pmp_6_cfg_r, %132 {sv.namehint = "_res_cur_cfg_r_T_2"} : i1
    %159 = comb.and bin %157, %158 {sv.namehint = "res_cur_1_cfg_r"} : i1
    %160 = comb.or bin %io_pmp_6_cfg_w, %132 {sv.namehint = "_res_cur_cfg_w_T_2"} : i1
    %161 = comb.and bin %157, %160 {sv.namehint = "res_cur_1_cfg_w"} : i1
    %162 = comb.mux bin %130, %161, %82 {sv.namehint = "_res_T_89_cfg_w"} : i1
    %163 = comb.mux bin %130, %159, %83 {sv.namehint = "_res_T_89_cfg_r"} : i1
    %164 = comb.extract %io_pmp_5_cfg_a from 1 {sv.namehint = "_res_aligned_T_2"} : (i2) -> i1
    %165 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_9"} : i6
    %166 = comb.extract %165 from 0 {sv.namehint = "_res_hit_lsbMask_T_10"} : (i6) -> i3
    %167 = comb.xor bin %166, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_11"} : i3
    %168 = comb.extract %io_pmp_5_mask from 0 : (i32) -> i3
    %169 = comb.or bin %168, %167 {sv.namehint = "_res_hit_lsbMatch_T_26"} : i3
    %170 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_25"} : (i30) -> i29
    %171 = comb.extract %io_pmp_5_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_26"} : (i32) -> i29
    %172 = comb.xor bin %8, %170 {sv.namehint = "_res_hit_msbMatch_T_27"} : i29
    %173 = comb.xor bin %171, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_28"} : i29
    %174 = comb.and bin %172, %173 {sv.namehint = "_res_hit_msbMatch_T_29"} : i29
    %175 = comb.icmp bin eq %174, %c0_i29 {sv.namehint = "res_hit_msbMatch_2"} : i29
    %176 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %177 = comb.concat %176, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_25"} : i1, i2
    %178 = comb.xor bin %15, %177 {sv.namehint = "_res_hit_lsbMatch_T_27"} : i3
    %179 = comb.xor bin %169, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_28"} : i3
    %180 = comb.and bin %178, %179 {sv.namehint = "_res_hit_lsbMatch_T_29"} : i3
    %181 = comb.icmp bin eq %180, %c0_i3 {sv.namehint = "res_hit_lsbMatch_2"} : i3
    %182 = comb.and bin %175, %181 {sv.namehint = "_res_hit_T_29"} : i1
    %183 = comb.extract %io_pmp_5_cfg_a from 0 {sv.namehint = "_res_hit_T_30"} : (i2) -> i1
    %184 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_32"} : i6
    %185 = comb.extract %184 from 0 {sv.namehint = "_res_hit_T_33"} : (i6) -> i3
    %186 = comb.xor bin %185, %c-1_i3 {sv.namehint = "_res_hit_T_34"} : i3
    %187 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_29"} : (i30) -> i29
    %188 = comb.icmp bin ult %8, %187 {sv.namehint = "res_hit_msbsLess_4"} : i29
    %189 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_33"} : (i30) -> i29
    %190 = comb.xor bin %8, %189 {sv.namehint = "_res_hit_msbsEqual_T_34"} : i29
    %191 = comb.icmp bin eq %190, %c0_i29 {sv.namehint = "res_hit_msbsEqual_4"} : i29
    %192 = comb.or bin %15, %186 {sv.namehint = "_res_hit_lsbsLess_T_29"} : i3
    %193 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %194 = comb.concat %193, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_34"} : i1, i2
    %195 = comb.icmp bin ult %192, %194 {sv.namehint = "res_hit_lsbsLess_4"} : i3
    %196 = comb.and bin %191, %195 {sv.namehint = "_res_hit_T_35"} : i1
    %197 = comb.or bin %188, %196 {sv.namehint = "_res_hit_T_36"} : i1
    %198 = comb.xor bin %197, %true {sv.namehint = "_res_hit_T_37"} : i1
    %199 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_35"} : (i30) -> i29
    %200 = comb.icmp bin ult %8, %199 {sv.namehint = "res_hit_msbsLess_5"} : i29
    %201 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_40"} : (i30) -> i29
    %202 = comb.xor bin %8, %201 {sv.namehint = "_res_hit_msbsEqual_T_41"} : i29
    %203 = comb.icmp bin eq %202, %c0_i29 {sv.namehint = "res_hit_msbsEqual_5"} : i29
    %204 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %205 = comb.concat %204, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_41"} : i1, i2
    %206 = comb.icmp bin ult %15, %205 {sv.namehint = "res_hit_lsbsLess_5"} : i3
    %207 = comb.and bin %203, %206 {sv.namehint = "_res_hit_T_38"} : i1
    %208 = comb.or bin %200, %207 {sv.namehint = "_res_hit_T_39"} : i1
    %209 = comb.and bin %183, %198, %208 {sv.namehint = "_res_hit_T_41"} : i1
    %210 = comb.mux bin %164, %182, %209 {sv.namehint = "res_hit_2"} : i1
    %211 = comb.xor bin %io_pmp_5_cfg_l, %true {sv.namehint = "_res_ignore_T_2"} : i1
    %212 = comb.and bin %0, %211 {sv.namehint = "res_ignore_2"} : i1
    %213 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_7"} : i6
    %214 = comb.extract %213 from 0 {sv.namehint = "_res_aligned_lsbMask_T_8"} : (i6) -> i3
    %215 = comb.xor bin %214, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_2"} : i3
    %216 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_39"} : (i30) -> i29
    %217 = comb.xor bin %8, %216 {sv.namehint = "_res_aligned_straddlesLowerBound_T_40"} : i29
    %218 = comb.icmp bin eq %217, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_41"} : i29
    %219 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %220 = comb.extract %io_addr from 2 : (i32) -> i1
    %221 = comb.xor bin %220, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_48"} : i1
    %222 = comb.and bin %218, %219, %221 {sv.namehint = "res_aligned_straddlesLowerBound_2"} : i1
    %223 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_39"} : (i30) -> i29
    %224 = comb.xor bin %8, %223 {sv.namehint = "_res_aligned_straddlesUpperBound_T_40"} : i29
    %225 = comb.icmp bin eq %224, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_41"} : i29
    %226 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %227 = comb.extract %io_addr from 2 : (i32) -> i1
    %228 = comb.extract %215 from 2 : (i3) -> i1
    %229 = comb.or bin %227, %228 {sv.namehint = "_res_aligned_straddlesUpperBound_T_48"} : i1
    %230 = comb.and bin %225, %226, %229 {sv.namehint = "res_aligned_straddlesUpperBound_2"} : i1
    %231 = comb.or bin %222, %230 {sv.namehint = "_res_aligned_rangeAligned_T_2"} : i1
    %232 = comb.xor bin %231, %true {sv.namehint = "res_aligned_rangeAligned_2"} : i1
    %233 = comb.extract %io_pmp_5_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_6"} : (i32) -> i3
    %234 = comb.xor bin %233, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_7"} : i3
    %235 = comb.and bin %215, %234 {sv.namehint = "_res_aligned_pow2Aligned_T_8"} : i3
    %236 = comb.icmp bin eq %235, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_2"} : i3
    %237 = comb.mux bin %164, %236, %232 {sv.namehint = "res_aligned_2"} : i1
    %238 = comb.or bin %io_pmp_5_cfg_r, %212 {sv.namehint = "_res_cur_cfg_r_T_4"} : i1
    %239 = comb.and bin %237, %238 {sv.namehint = "res_cur_2_cfg_r"} : i1
    %240 = comb.or bin %io_pmp_5_cfg_w, %212 {sv.namehint = "_res_cur_cfg_w_T_4"} : i1
    %241 = comb.and bin %237, %240 {sv.namehint = "res_cur_2_cfg_w"} : i1
    %242 = comb.mux bin %210, %241, %162 {sv.namehint = "_res_T_134_cfg_w"} : i1
    %243 = comb.mux bin %210, %239, %163 {sv.namehint = "_res_T_134_cfg_r"} : i1
    %244 = comb.extract %io_pmp_4_cfg_a from 1 {sv.namehint = "_res_aligned_T_3"} : (i2) -> i1
    %245 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_13"} : i6
    %246 = comb.extract %245 from 0 {sv.namehint = "_res_hit_lsbMask_T_14"} : (i6) -> i3
    %247 = comb.xor bin %246, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_15"} : i3
    %248 = comb.extract %io_pmp_4_mask from 0 : (i32) -> i3
    %249 = comb.or bin %248, %247 {sv.namehint = "_res_hit_lsbMatch_T_36"} : i3
    %250 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_35"} : (i30) -> i29
    %251 = comb.extract %io_pmp_4_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_36"} : (i32) -> i29
    %252 = comb.xor bin %8, %250 {sv.namehint = "_res_hit_msbMatch_T_37"} : i29
    %253 = comb.xor bin %251, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_38"} : i29
    %254 = comb.and bin %252, %253 {sv.namehint = "_res_hit_msbMatch_T_39"} : i29
    %255 = comb.icmp bin eq %254, %c0_i29 {sv.namehint = "res_hit_msbMatch_3"} : i29
    %256 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %257 = comb.concat %256, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_35"} : i1, i2
    %258 = comb.xor bin %15, %257 {sv.namehint = "_res_hit_lsbMatch_T_37"} : i3
    %259 = comb.xor bin %249, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_38"} : i3
    %260 = comb.and bin %258, %259 {sv.namehint = "_res_hit_lsbMatch_T_39"} : i3
    %261 = comb.icmp bin eq %260, %c0_i3 {sv.namehint = "res_hit_lsbMatch_3"} : i3
    %262 = comb.and bin %255, %261 {sv.namehint = "_res_hit_T_43"} : i1
    %263 = comb.extract %io_pmp_4_cfg_a from 0 {sv.namehint = "_res_hit_T_44"} : (i2) -> i1
    %264 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_46"} : i6
    %265 = comb.extract %264 from 0 {sv.namehint = "_res_hit_T_47"} : (i6) -> i3
    %266 = comb.xor bin %265, %c-1_i3 {sv.namehint = "_res_hit_T_48"} : i3
    %267 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_41"} : (i30) -> i29
    %268 = comb.icmp bin ult %8, %267 {sv.namehint = "res_hit_msbsLess_6"} : i29
    %269 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_47"} : (i30) -> i29
    %270 = comb.xor bin %8, %269 {sv.namehint = "_res_hit_msbsEqual_T_48"} : i29
    %271 = comb.icmp bin eq %270, %c0_i29 {sv.namehint = "res_hit_msbsEqual_6"} : i29
    %272 = comb.or bin %15, %266 {sv.namehint = "_res_hit_lsbsLess_T_43"} : i3
    %273 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %274 = comb.concat %273, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_48"} : i1, i2
    %275 = comb.icmp bin ult %272, %274 {sv.namehint = "res_hit_lsbsLess_6"} : i3
    %276 = comb.and bin %271, %275 {sv.namehint = "_res_hit_T_49"} : i1
    %277 = comb.or bin %268, %276 {sv.namehint = "_res_hit_T_50"} : i1
    %278 = comb.xor bin %277, %true {sv.namehint = "_res_hit_T_51"} : i1
    %279 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_47"} : (i30) -> i29
    %280 = comb.icmp bin ult %8, %279 {sv.namehint = "res_hit_msbsLess_7"} : i29
    %281 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_54"} : (i30) -> i29
    %282 = comb.xor bin %8, %281 {sv.namehint = "_res_hit_msbsEqual_T_55"} : i29
    %283 = comb.icmp bin eq %282, %c0_i29 {sv.namehint = "res_hit_msbsEqual_7"} : i29
    %284 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %285 = comb.concat %284, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_55"} : i1, i2
    %286 = comb.icmp bin ult %15, %285 {sv.namehint = "res_hit_lsbsLess_7"} : i3
    %287 = comb.and bin %283, %286 {sv.namehint = "_res_hit_T_52"} : i1
    %288 = comb.or bin %280, %287 {sv.namehint = "_res_hit_T_53"} : i1
    %289 = comb.and bin %263, %278, %288 {sv.namehint = "_res_hit_T_55"} : i1
    %290 = comb.mux bin %244, %262, %289 {sv.namehint = "res_hit_3"} : i1
    %291 = comb.xor bin %io_pmp_4_cfg_l, %true {sv.namehint = "_res_ignore_T_3"} : i1
    %292 = comb.and bin %0, %291 {sv.namehint = "res_ignore_3"} : i1
    %293 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_10"} : i6
    %294 = comb.extract %293 from 0 {sv.namehint = "_res_aligned_lsbMask_T_11"} : (i6) -> i3
    %295 = comb.xor bin %294, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_3"} : i3
    %296 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_56"} : (i30) -> i29
    %297 = comb.xor bin %8, %296 {sv.namehint = "_res_aligned_straddlesLowerBound_T_57"} : i29
    %298 = comb.icmp bin eq %297, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_58"} : i29
    %299 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %300 = comb.extract %io_addr from 2 : (i32) -> i1
    %301 = comb.xor bin %300, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_65"} : i1
    %302 = comb.and bin %298, %299, %301 {sv.namehint = "res_aligned_straddlesLowerBound_3"} : i1
    %303 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_56"} : (i30) -> i29
    %304 = comb.xor bin %8, %303 {sv.namehint = "_res_aligned_straddlesUpperBound_T_57"} : i29
    %305 = comb.icmp bin eq %304, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_58"} : i29
    %306 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %307 = comb.extract %io_addr from 2 : (i32) -> i1
    %308 = comb.extract %295 from 2 : (i3) -> i1
    %309 = comb.or bin %307, %308 {sv.namehint = "_res_aligned_straddlesUpperBound_T_65"} : i1
    %310 = comb.and bin %305, %306, %309 {sv.namehint = "res_aligned_straddlesUpperBound_3"} : i1
    %311 = comb.or bin %302, %310 {sv.namehint = "_res_aligned_rangeAligned_T_3"} : i1
    %312 = comb.xor bin %311, %true {sv.namehint = "res_aligned_rangeAligned_3"} : i1
    %313 = comb.extract %io_pmp_4_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_9"} : (i32) -> i3
    %314 = comb.xor bin %313, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_10"} : i3
    %315 = comb.and bin %295, %314 {sv.namehint = "_res_aligned_pow2Aligned_T_11"} : i3
    %316 = comb.icmp bin eq %315, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_3"} : i3
    %317 = comb.mux bin %244, %316, %312 {sv.namehint = "res_aligned_3"} : i1
    %318 = comb.or bin %io_pmp_4_cfg_r, %292 {sv.namehint = "_res_cur_cfg_r_T_6"} : i1
    %319 = comb.and bin %317, %318 {sv.namehint = "res_cur_3_cfg_r"} : i1
    %320 = comb.or bin %io_pmp_4_cfg_w, %292 {sv.namehint = "_res_cur_cfg_w_T_6"} : i1
    %321 = comb.and bin %317, %320 {sv.namehint = "res_cur_3_cfg_w"} : i1
    %322 = comb.mux bin %290, %321, %242 {sv.namehint = "_res_T_179_cfg_w"} : i1
    %323 = comb.mux bin %290, %319, %243 {sv.namehint = "_res_T_179_cfg_r"} : i1
    %324 = comb.extract %io_pmp_3_cfg_a from 1 {sv.namehint = "_res_aligned_T_4"} : (i2) -> i1
    %325 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_17"} : i6
    %326 = comb.extract %325 from 0 {sv.namehint = "_res_hit_lsbMask_T_18"} : (i6) -> i3
    %327 = comb.xor bin %326, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_19"} : i3
    %328 = comb.extract %io_pmp_3_mask from 0 : (i32) -> i3
    %329 = comb.or bin %328, %327 {sv.namehint = "_res_hit_lsbMatch_T_46"} : i3
    %330 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_45"} : (i30) -> i29
    %331 = comb.extract %io_pmp_3_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_46"} : (i32) -> i29
    %332 = comb.xor bin %8, %330 {sv.namehint = "_res_hit_msbMatch_T_47"} : i29
    %333 = comb.xor bin %331, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_48"} : i29
    %334 = comb.and bin %332, %333 {sv.namehint = "_res_hit_msbMatch_T_49"} : i29
    %335 = comb.icmp bin eq %334, %c0_i29 {sv.namehint = "res_hit_msbMatch_4"} : i29
    %336 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %337 = comb.concat %336, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_45"} : i1, i2
    %338 = comb.xor bin %15, %337 {sv.namehint = "_res_hit_lsbMatch_T_47"} : i3
    %339 = comb.xor bin %329, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_48"} : i3
    %340 = comb.and bin %338, %339 {sv.namehint = "_res_hit_lsbMatch_T_49"} : i3
    %341 = comb.icmp bin eq %340, %c0_i3 {sv.namehint = "res_hit_lsbMatch_4"} : i3
    %342 = comb.and bin %335, %341 {sv.namehint = "_res_hit_T_57"} : i1
    %343 = comb.extract %io_pmp_3_cfg_a from 0 {sv.namehint = "_res_hit_T_58"} : (i2) -> i1
    %344 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_60"} : i6
    %345 = comb.extract %344 from 0 {sv.namehint = "_res_hit_T_61"} : (i6) -> i3
    %346 = comb.xor bin %345, %c-1_i3 {sv.namehint = "_res_hit_T_62"} : i3
    %347 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_53"} : (i30) -> i29
    %348 = comb.icmp bin ult %8, %347 {sv.namehint = "res_hit_msbsLess_8"} : i29
    %349 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_61"} : (i30) -> i29
    %350 = comb.xor bin %8, %349 {sv.namehint = "_res_hit_msbsEqual_T_62"} : i29
    %351 = comb.icmp bin eq %350, %c0_i29 {sv.namehint = "res_hit_msbsEqual_8"} : i29
    %352 = comb.or bin %15, %346 {sv.namehint = "_res_hit_lsbsLess_T_57"} : i3
    %353 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %354 = comb.concat %353, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_62"} : i1, i2
    %355 = comb.icmp bin ult %352, %354 {sv.namehint = "res_hit_lsbsLess_8"} : i3
    %356 = comb.and bin %351, %355 {sv.namehint = "_res_hit_T_63"} : i1
    %357 = comb.or bin %348, %356 {sv.namehint = "_res_hit_T_64"} : i1
    %358 = comb.xor bin %357, %true {sv.namehint = "_res_hit_T_65"} : i1
    %359 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_59"} : (i30) -> i29
    %360 = comb.icmp bin ult %8, %359 {sv.namehint = "res_hit_msbsLess_9"} : i29
    %361 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_68"} : (i30) -> i29
    %362 = comb.xor bin %8, %361 {sv.namehint = "_res_hit_msbsEqual_T_69"} : i29
    %363 = comb.icmp bin eq %362, %c0_i29 {sv.namehint = "res_hit_msbsEqual_9"} : i29
    %364 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %365 = comb.concat %364, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_69"} : i1, i2
    %366 = comb.icmp bin ult %15, %365 {sv.namehint = "res_hit_lsbsLess_9"} : i3
    %367 = comb.and bin %363, %366 {sv.namehint = "_res_hit_T_66"} : i1
    %368 = comb.or bin %360, %367 {sv.namehint = "_res_hit_T_67"} : i1
    %369 = comb.and bin %343, %358, %368 {sv.namehint = "_res_hit_T_69"} : i1
    %370 = comb.mux bin %324, %342, %369 {sv.namehint = "res_hit_4"} : i1
    %371 = comb.xor bin %io_pmp_3_cfg_l, %true {sv.namehint = "_res_ignore_T_4"} : i1
    %372 = comb.and bin %0, %371 {sv.namehint = "res_ignore_4"} : i1
    %373 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_13"} : i6
    %374 = comb.extract %373 from 0 {sv.namehint = "_res_aligned_lsbMask_T_14"} : (i6) -> i3
    %375 = comb.xor bin %374, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_4"} : i3
    %376 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_73"} : (i30) -> i29
    %377 = comb.xor bin %8, %376 {sv.namehint = "_res_aligned_straddlesLowerBound_T_74"} : i29
    %378 = comb.icmp bin eq %377, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_75"} : i29
    %379 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %380 = comb.extract %io_addr from 2 : (i32) -> i1
    %381 = comb.xor bin %380, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_82"} : i1
    %382 = comb.and bin %378, %379, %381 {sv.namehint = "res_aligned_straddlesLowerBound_4"} : i1
    %383 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_73"} : (i30) -> i29
    %384 = comb.xor bin %8, %383 {sv.namehint = "_res_aligned_straddlesUpperBound_T_74"} : i29
    %385 = comb.icmp bin eq %384, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_75"} : i29
    %386 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %387 = comb.extract %io_addr from 2 : (i32) -> i1
    %388 = comb.extract %375 from 2 : (i3) -> i1
    %389 = comb.or bin %387, %388 {sv.namehint = "_res_aligned_straddlesUpperBound_T_82"} : i1
    %390 = comb.and bin %385, %386, %389 {sv.namehint = "res_aligned_straddlesUpperBound_4"} : i1
    %391 = comb.or bin %382, %390 {sv.namehint = "_res_aligned_rangeAligned_T_4"} : i1
    %392 = comb.xor bin %391, %true {sv.namehint = "res_aligned_rangeAligned_4"} : i1
    %393 = comb.extract %io_pmp_3_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_12"} : (i32) -> i3
    %394 = comb.xor bin %393, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_13"} : i3
    %395 = comb.and bin %375, %394 {sv.namehint = "_res_aligned_pow2Aligned_T_14"} : i3
    %396 = comb.icmp bin eq %395, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_4"} : i3
    %397 = comb.mux bin %324, %396, %392 {sv.namehint = "res_aligned_4"} : i1
    %398 = comb.or bin %io_pmp_3_cfg_r, %372 {sv.namehint = "_res_cur_cfg_r_T_8"} : i1
    %399 = comb.and bin %397, %398 {sv.namehint = "res_cur_4_cfg_r"} : i1
    %400 = comb.or bin %io_pmp_3_cfg_w, %372 {sv.namehint = "_res_cur_cfg_w_T_8"} : i1
    %401 = comb.and bin %397, %400 {sv.namehint = "res_cur_4_cfg_w"} : i1
    %402 = comb.mux bin %370, %401, %322 {sv.namehint = "_res_T_224_cfg_w"} : i1
    %403 = comb.mux bin %370, %399, %323 {sv.namehint = "_res_T_224_cfg_r"} : i1
    %404 = comb.extract %io_pmp_2_cfg_a from 1 {sv.namehint = "_res_aligned_T_5"} : (i2) -> i1
    %405 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_21"} : i6
    %406 = comb.extract %405 from 0 {sv.namehint = "_res_hit_lsbMask_T_22"} : (i6) -> i3
    %407 = comb.xor bin %406, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_23"} : i3
    %408 = comb.extract %io_pmp_2_mask from 0 : (i32) -> i3
    %409 = comb.or bin %408, %407 {sv.namehint = "_res_hit_lsbMatch_T_56"} : i3
    %410 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_55"} : (i30) -> i29
    %411 = comb.extract %io_pmp_2_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_56"} : (i32) -> i29
    %412 = comb.xor bin %8, %410 {sv.namehint = "_res_hit_msbMatch_T_57"} : i29
    %413 = comb.xor bin %411, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_58"} : i29
    %414 = comb.and bin %412, %413 {sv.namehint = "_res_hit_msbMatch_T_59"} : i29
    %415 = comb.icmp bin eq %414, %c0_i29 {sv.namehint = "res_hit_msbMatch_5"} : i29
    %416 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %417 = comb.concat %416, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_55"} : i1, i2
    %418 = comb.xor bin %15, %417 {sv.namehint = "_res_hit_lsbMatch_T_57"} : i3
    %419 = comb.xor bin %409, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_58"} : i3
    %420 = comb.and bin %418, %419 {sv.namehint = "_res_hit_lsbMatch_T_59"} : i3
    %421 = comb.icmp bin eq %420, %c0_i3 {sv.namehint = "res_hit_lsbMatch_5"} : i3
    %422 = comb.and bin %415, %421 {sv.namehint = "_res_hit_T_71"} : i1
    %423 = comb.extract %io_pmp_2_cfg_a from 0 {sv.namehint = "_res_hit_T_72"} : (i2) -> i1
    %424 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_74"} : i6
    %425 = comb.extract %424 from 0 {sv.namehint = "_res_hit_T_75"} : (i6) -> i3
    %426 = comb.xor bin %425, %c-1_i3 {sv.namehint = "_res_hit_T_76"} : i3
    %427 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_65"} : (i30) -> i29
    %428 = comb.icmp bin ult %8, %427 {sv.namehint = "res_hit_msbsLess_10"} : i29
    %429 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_75"} : (i30) -> i29
    %430 = comb.xor bin %8, %429 {sv.namehint = "_res_hit_msbsEqual_T_76"} : i29
    %431 = comb.icmp bin eq %430, %c0_i29 {sv.namehint = "res_hit_msbsEqual_10"} : i29
    %432 = comb.or bin %15, %426 {sv.namehint = "_res_hit_lsbsLess_T_71"} : i3
    %433 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %434 = comb.concat %433, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_76"} : i1, i2
    %435 = comb.icmp bin ult %432, %434 {sv.namehint = "res_hit_lsbsLess_10"} : i3
    %436 = comb.and bin %431, %435 {sv.namehint = "_res_hit_T_77"} : i1
    %437 = comb.or bin %428, %436 {sv.namehint = "_res_hit_T_78"} : i1
    %438 = comb.xor bin %437, %true {sv.namehint = "_res_hit_T_79"} : i1
    %439 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_71"} : (i30) -> i29
    %440 = comb.icmp bin ult %8, %439 {sv.namehint = "res_hit_msbsLess_11"} : i29
    %441 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_82"} : (i30) -> i29
    %442 = comb.xor bin %8, %441 {sv.namehint = "_res_hit_msbsEqual_T_83"} : i29
    %443 = comb.icmp bin eq %442, %c0_i29 {sv.namehint = "res_hit_msbsEqual_11"} : i29
    %444 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %445 = comb.concat %444, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_83"} : i1, i2
    %446 = comb.icmp bin ult %15, %445 {sv.namehint = "res_hit_lsbsLess_11"} : i3
    %447 = comb.and bin %443, %446 {sv.namehint = "_res_hit_T_80"} : i1
    %448 = comb.or bin %440, %447 {sv.namehint = "_res_hit_T_81"} : i1
    %449 = comb.and bin %423, %438, %448 {sv.namehint = "_res_hit_T_83"} : i1
    %450 = comb.mux bin %404, %422, %449 {sv.namehint = "res_hit_5"} : i1
    %451 = comb.xor bin %io_pmp_2_cfg_l, %true {sv.namehint = "_res_ignore_T_5"} : i1
    %452 = comb.and bin %0, %451 {sv.namehint = "res_ignore_5"} : i1
    %453 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_16"} : i6
    %454 = comb.extract %453 from 0 {sv.namehint = "_res_aligned_lsbMask_T_17"} : (i6) -> i3
    %455 = comb.xor bin %454, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_5"} : i3
    %456 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_90"} : (i30) -> i29
    %457 = comb.xor bin %8, %456 {sv.namehint = "_res_aligned_straddlesLowerBound_T_91"} : i29
    %458 = comb.icmp bin eq %457, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_92"} : i29
    %459 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %460 = comb.extract %io_addr from 2 : (i32) -> i1
    %461 = comb.xor bin %460, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_99"} : i1
    %462 = comb.and bin %458, %459, %461 {sv.namehint = "res_aligned_straddlesLowerBound_5"} : i1
    %463 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_90"} : (i30) -> i29
    %464 = comb.xor bin %8, %463 {sv.namehint = "_res_aligned_straddlesUpperBound_T_91"} : i29
    %465 = comb.icmp bin eq %464, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_92"} : i29
    %466 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %467 = comb.extract %io_addr from 2 : (i32) -> i1
    %468 = comb.extract %455 from 2 : (i3) -> i1
    %469 = comb.or bin %467, %468 {sv.namehint = "_res_aligned_straddlesUpperBound_T_99"} : i1
    %470 = comb.and bin %465, %466, %469 {sv.namehint = "res_aligned_straddlesUpperBound_5"} : i1
    %471 = comb.or bin %462, %470 {sv.namehint = "_res_aligned_rangeAligned_T_5"} : i1
    %472 = comb.xor bin %471, %true {sv.namehint = "res_aligned_rangeAligned_5"} : i1
    %473 = comb.extract %io_pmp_2_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_15"} : (i32) -> i3
    %474 = comb.xor bin %473, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_16"} : i3
    %475 = comb.and bin %455, %474 {sv.namehint = "_res_aligned_pow2Aligned_T_17"} : i3
    %476 = comb.icmp bin eq %475, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_5"} : i3
    %477 = comb.mux bin %404, %476, %472 {sv.namehint = "res_aligned_5"} : i1
    %478 = comb.or bin %io_pmp_2_cfg_r, %452 {sv.namehint = "_res_cur_cfg_r_T_10"} : i1
    %479 = comb.and bin %477, %478 {sv.namehint = "res_cur_5_cfg_r"} : i1
    %480 = comb.or bin %io_pmp_2_cfg_w, %452 {sv.namehint = "_res_cur_cfg_w_T_10"} : i1
    %481 = comb.and bin %477, %480 {sv.namehint = "res_cur_5_cfg_w"} : i1
    %482 = comb.mux bin %450, %481, %402 {sv.namehint = "_res_T_269_cfg_w"} : i1
    %483 = comb.mux bin %450, %479, %403 {sv.namehint = "_res_T_269_cfg_r"} : i1
    %484 = comb.extract %io_pmp_1_cfg_a from 1 {sv.namehint = "_res_aligned_T_6"} : (i2) -> i1
    %485 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_25"} : i6
    %486 = comb.extract %485 from 0 {sv.namehint = "_res_hit_lsbMask_T_26"} : (i6) -> i3
    %487 = comb.xor bin %486, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_27"} : i3
    %488 = comb.extract %io_pmp_1_mask from 0 : (i32) -> i3
    %489 = comb.or bin %488, %487 {sv.namehint = "_res_hit_lsbMatch_T_66"} : i3
    %490 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_65"} : (i30) -> i29
    %491 = comb.extract %io_pmp_1_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_66"} : (i32) -> i29
    %492 = comb.xor bin %8, %490 {sv.namehint = "_res_hit_msbMatch_T_67"} : i29
    %493 = comb.xor bin %491, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_68"} : i29
    %494 = comb.and bin %492, %493 {sv.namehint = "_res_hit_msbMatch_T_69"} : i29
    %495 = comb.icmp bin eq %494, %c0_i29 {sv.namehint = "res_hit_msbMatch_6"} : i29
    %496 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %497 = comb.concat %496, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_65"} : i1, i2
    %498 = comb.xor bin %15, %497 {sv.namehint = "_res_hit_lsbMatch_T_67"} : i3
    %499 = comb.xor bin %489, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_68"} : i3
    %500 = comb.and bin %498, %499 {sv.namehint = "_res_hit_lsbMatch_T_69"} : i3
    %501 = comb.icmp bin eq %500, %c0_i3 {sv.namehint = "res_hit_lsbMatch_6"} : i3
    %502 = comb.and bin %495, %501 {sv.namehint = "_res_hit_T_85"} : i1
    %503 = comb.extract %io_pmp_1_cfg_a from 0 {sv.namehint = "_res_hit_T_86"} : (i2) -> i1
    %504 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_88"} : i6
    %505 = comb.extract %504 from 0 {sv.namehint = "_res_hit_T_89"} : (i6) -> i3
    %506 = comb.xor bin %505, %c-1_i3 {sv.namehint = "_res_hit_T_90"} : i3
    %507 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_77"} : (i30) -> i29
    %508 = comb.icmp bin ult %8, %507 {sv.namehint = "res_hit_msbsLess_12"} : i29
    %509 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_89"} : (i30) -> i29
    %510 = comb.xor bin %8, %509 {sv.namehint = "_res_hit_msbsEqual_T_90"} : i29
    %511 = comb.icmp bin eq %510, %c0_i29 {sv.namehint = "res_hit_msbsEqual_12"} : i29
    %512 = comb.or bin %15, %506 {sv.namehint = "_res_hit_lsbsLess_T_85"} : i3
    %513 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %514 = comb.concat %513, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_90"} : i1, i2
    %515 = comb.icmp bin ult %512, %514 {sv.namehint = "res_hit_lsbsLess_12"} : i3
    %516 = comb.and bin %511, %515 {sv.namehint = "_res_hit_T_91"} : i1
    %517 = comb.or bin %508, %516 {sv.namehint = "_res_hit_T_92"} : i1
    %518 = comb.xor bin %517, %true {sv.namehint = "_res_hit_T_93"} : i1
    %519 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_83"} : (i30) -> i29
    %520 = comb.icmp bin ult %8, %519 {sv.namehint = "res_hit_msbsLess_13"} : i29
    %521 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_96"} : (i30) -> i29
    %522 = comb.xor bin %8, %521 {sv.namehint = "_res_hit_msbsEqual_T_97"} : i29
    %523 = comb.icmp bin eq %522, %c0_i29 {sv.namehint = "res_hit_msbsEqual_13"} : i29
    %524 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %525 = comb.concat %524, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_97"} : i1, i2
    %526 = comb.icmp bin ult %15, %525 {sv.namehint = "res_hit_lsbsLess_13"} : i3
    %527 = comb.and bin %523, %526 {sv.namehint = "_res_hit_T_94"} : i1
    %528 = comb.or bin %520, %527 {sv.namehint = "_res_hit_T_95"} : i1
    %529 = comb.and bin %503, %518, %528 {sv.namehint = "_res_hit_T_97"} : i1
    %530 = comb.mux bin %484, %502, %529 {sv.namehint = "res_hit_6"} : i1
    %531 = comb.xor bin %io_pmp_1_cfg_l, %true {sv.namehint = "_res_ignore_T_6"} : i1
    %532 = comb.and bin %0, %531 {sv.namehint = "res_ignore_6"} : i1
    %533 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_19"} : i6
    %534 = comb.extract %533 from 0 {sv.namehint = "_res_aligned_lsbMask_T_20"} : (i6) -> i3
    %535 = comb.xor bin %534, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_6"} : i3
    %536 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_107"} : (i30) -> i29
    %537 = comb.xor bin %8, %536 {sv.namehint = "_res_aligned_straddlesLowerBound_T_108"} : i29
    %538 = comb.icmp bin eq %537, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_109"} : i29
    %539 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %540 = comb.extract %io_addr from 2 : (i32) -> i1
    %541 = comb.xor bin %540, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_116"} : i1
    %542 = comb.and bin %538, %539, %541 {sv.namehint = "res_aligned_straddlesLowerBound_6"} : i1
    %543 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_107"} : (i30) -> i29
    %544 = comb.xor bin %8, %543 {sv.namehint = "_res_aligned_straddlesUpperBound_T_108"} : i29
    %545 = comb.icmp bin eq %544, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_109"} : i29
    %546 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %547 = comb.extract %io_addr from 2 : (i32) -> i1
    %548 = comb.extract %535 from 2 : (i3) -> i1
    %549 = comb.or bin %547, %548 {sv.namehint = "_res_aligned_straddlesUpperBound_T_116"} : i1
    %550 = comb.and bin %545, %546, %549 {sv.namehint = "res_aligned_straddlesUpperBound_6"} : i1
    %551 = comb.or bin %542, %550 {sv.namehint = "_res_aligned_rangeAligned_T_6"} : i1
    %552 = comb.xor bin %551, %true {sv.namehint = "res_aligned_rangeAligned_6"} : i1
    %553 = comb.extract %io_pmp_1_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_18"} : (i32) -> i3
    %554 = comb.xor bin %553, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_19"} : i3
    %555 = comb.and bin %535, %554 {sv.namehint = "_res_aligned_pow2Aligned_T_20"} : i3
    %556 = comb.icmp bin eq %555, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_6"} : i3
    %557 = comb.mux bin %484, %556, %552 {sv.namehint = "res_aligned_6"} : i1
    %558 = comb.or bin %io_pmp_1_cfg_r, %532 {sv.namehint = "_res_cur_cfg_r_T_12"} : i1
    %559 = comb.and bin %557, %558 {sv.namehint = "res_cur_6_cfg_r"} : i1
    %560 = comb.or bin %io_pmp_1_cfg_w, %532 {sv.namehint = "_res_cur_cfg_w_T_12"} : i1
    %561 = comb.and bin %557, %560 {sv.namehint = "res_cur_6_cfg_w"} : i1
    %562 = comb.mux bin %530, %561, %482 {sv.namehint = "_res_T_314_cfg_w"} : i1
    %563 = comb.mux bin %530, %559, %483 {sv.namehint = "_res_T_314_cfg_r"} : i1
    %564 = comb.extract %io_pmp_0_cfg_a from 1 {sv.namehint = "_res_aligned_T_7"} : (i2) -> i1
    %565 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_29"} : i6
    %566 = comb.extract %565 from 0 {sv.namehint = "_res_hit_lsbMask_T_30"} : (i6) -> i3
    %567 = comb.xor bin %566, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_31"} : i3
    %568 = comb.extract %io_pmp_0_mask from 0 : (i32) -> i3
    %569 = comb.or bin %568, %567 {sv.namehint = "_res_hit_lsbMatch_T_76"} : i3
    %570 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_75"} : (i30) -> i29
    %571 = comb.extract %io_pmp_0_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_76"} : (i32) -> i29
    %572 = comb.xor bin %8, %570 {sv.namehint = "_res_hit_msbMatch_T_77"} : i29
    %573 = comb.xor bin %571, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_78"} : i29
    %574 = comb.and bin %572, %573 {sv.namehint = "_res_hit_msbMatch_T_79"} : i29
    %575 = comb.icmp bin eq %574, %c0_i29 {sv.namehint = "res_hit_msbMatch_7"} : i29
    %576 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %577 = comb.concat %576, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_75"} : i1, i2
    %578 = comb.xor bin %15, %577 {sv.namehint = "_res_hit_lsbMatch_T_77"} : i3
    %579 = comb.xor bin %569, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_78"} : i3
    %580 = comb.and bin %578, %579 {sv.namehint = "_res_hit_lsbMatch_T_79"} : i3
    %581 = comb.icmp bin eq %580, %c0_i3 {sv.namehint = "res_hit_lsbMatch_7"} : i3
    %582 = comb.and bin %575, %581 {sv.namehint = "_res_hit_T_99"} : i1
    %583 = comb.extract %io_pmp_0_cfg_a from 0 {sv.namehint = "_res_hit_T_100"} : (i2) -> i1
    %584 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_95"} : (i30) -> i29
    %585 = comb.icmp bin ult %8, %584 {sv.namehint = "res_hit_msbsLess_15"} : i29
    %586 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_110"} : (i30) -> i29
    %587 = comb.xor bin %8, %586 {sv.namehint = "_res_hit_msbsEqual_T_111"} : i29
    %588 = comb.icmp bin eq %587, %c0_i29 {sv.namehint = "res_hit_msbsEqual_15"} : i29
    %589 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %590 = comb.concat %589, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_111"} : i1, i2
    %591 = comb.icmp bin ult %15, %590 {sv.namehint = "res_hit_lsbsLess_15"} : i3
    %592 = comb.and bin %588, %591 {sv.namehint = "_res_hit_T_108"} : i1
    %593 = comb.or bin %585, %592 {sv.namehint = "_res_hit_T_110"} : i1
    %594 = comb.and bin %583, %593 {sv.namehint = "_res_hit_T_111"} : i1
    %595 = comb.mux bin %564, %582, %594 {sv.namehint = "res_hit_7"} : i1
    %596 = comb.xor bin %io_pmp_0_cfg_l, %true {sv.namehint = "_res_ignore_T_7"} : i1
    %597 = comb.and bin %0, %596 {sv.namehint = "res_ignore_7"} : i1
    %598 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_22"} : i6
    %599 = comb.extract %598 from 0 {sv.namehint = "_res_aligned_lsbMask_T_23"} : (i6) -> i3
    %600 = comb.xor bin %599, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_7"} : i3
    %601 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_124"} : (i30) -> i29
    %602 = comb.xor bin %8, %601 {sv.namehint = "_res_aligned_straddlesUpperBound_T_125"} : i29
    %603 = comb.icmp bin eq %602, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_126"} : i29
    %604 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %605 = comb.extract %io_addr from 2 : (i32) -> i1
    %606 = comb.extract %600 from 2 : (i3) -> i1
    %607 = comb.or bin %605, %606 {sv.namehint = "_res_aligned_straddlesUpperBound_T_133"} : i1
    %608 = comb.and bin %603, %604, %607 {sv.namehint = "res_aligned_straddlesUpperBound_7"} : i1
    %609 = comb.xor bin %608, %true {sv.namehint = "res_aligned_rangeAligned_7"} : i1
    %610 = comb.extract %io_pmp_0_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_21"} : (i32) -> i3
    %611 = comb.xor bin %610, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_22"} : i3
    %612 = comb.and bin %600, %611 {sv.namehint = "_res_aligned_pow2Aligned_T_23"} : i3
    %613 = comb.icmp bin eq %612, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_7"} : i3
    %614 = comb.mux bin %564, %613, %609 {sv.namehint = "res_aligned_7"} : i1
    %615 = comb.or bin %io_pmp_0_cfg_r, %597 {sv.namehint = "_res_cur_cfg_r_T_14"} : i1
    %616 = comb.and bin %614, %615 {sv.namehint = "res_cur_7_cfg_r"} : i1
    %617 = comb.or bin %io_pmp_0_cfg_w, %597 {sv.namehint = "_res_cur_cfg_w_T_14"} : i1
    %618 = comb.and bin %614, %617 {sv.namehint = "res_cur_7_cfg_w"} : i1
    %619 = comb.mux bin %595, %618, %562 {sv.namehint = "io_w"} : i1
    %620 = comb.mux bin %595, %616, %563 {sv.namehint = "io_r"} : i1
    hw.output %620, %619 : i1, i1
  }
  hw.module private @TLB(in %io_req_bits_vaddr : i34, in %io_req_bits_size : i2, in %io_req_bits_cmd : i5, in %io_req_bits_prv : i2, out io_resp_paddr : i32, out io_resp_pf_ld : i1, out io_resp_pf_st : i1, out io_resp_ae_ld : i1, out io_resp_ae_st : i1, out io_resp_ma_ld : i1, out io_resp_ma_st : i1, out io_resp_cacheable : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_w : i1, in %io_ptw_pmp_0_cfg_r : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_w : i1, in %io_ptw_pmp_1_cfg_r : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_w : i1, in %io_ptw_pmp_2_cfg_r : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_w : i1, in %io_ptw_pmp_3_cfg_r : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_w : i1, in %io_ptw_pmp_4_cfg_r : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_w : i1, in %io_ptw_pmp_5_cfg_r : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_w : i1, in %io_ptw_pmp_6_cfg_r : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_w : i1, in %io_ptw_pmp_7_cfg_r : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i4 = hw.constant -1 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i6 = hw.constant 0 : i6
    %c0_i18 = hw.constant 0 : i18
    %c0_i8 = hw.constant 0 : i8
    %c0_i22 = hw.constant 0 : i22
    %c-1_i2 = hw.constant -1 : i2
    %c5_i5 = hw.constant 5 : i5
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c1_i5 = hw.constant 1 : i5
    %c1_i4 = hw.constant 1 : i4
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c-16_i5 = hw.constant -16 : i5
    %c-9_i5 = hw.constant -9 : i5
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %true = hw.constant true
    %pmp.io_r, %pmp.io_w = hw.instance "pmp" @PMPChecker(io_prv: %io_req_bits_prv: i2, io_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_pmp_0_cfg_w: %io_ptw_pmp_0_cfg_w: i1, io_pmp_0_cfg_r: %io_ptw_pmp_0_cfg_r: i1, io_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_pmp_1_cfg_w: %io_ptw_pmp_1_cfg_w: i1, io_pmp_1_cfg_r: %io_ptw_pmp_1_cfg_r: i1, io_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_pmp_2_cfg_w: %io_ptw_pmp_2_cfg_w: i1, io_pmp_2_cfg_r: %io_ptw_pmp_2_cfg_r: i1, io_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_pmp_3_cfg_w: %io_ptw_pmp_3_cfg_w: i1, io_pmp_3_cfg_r: %io_ptw_pmp_3_cfg_r: i1, io_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_pmp_4_cfg_w: %io_ptw_pmp_4_cfg_w: i1, io_pmp_4_cfg_r: %io_ptw_pmp_4_cfg_r: i1, io_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_pmp_5_cfg_w: %io_ptw_pmp_5_cfg_w: i1, io_pmp_5_cfg_r: %io_ptw_pmp_5_cfg_r: i1, io_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_pmp_6_cfg_w: %io_ptw_pmp_6_cfg_w: i1, io_pmp_6_cfg_r: %io_ptw_pmp_6_cfg_r: i1, io_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_pmp_7_cfg_w: %io_ptw_pmp_7_cfg_w: i1, io_pmp_7_cfg_r: %io_ptw_pmp_7_cfg_r: i1, io_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_pmp_7_mask: %io_ptw_pmp_7_mask: i32, io_addr: %0: i32, io_size: %io_req_bits_size: i2) -> (io_r: i1, io_w: i1) {sv.namehint = "pmp.io_w"}
    %0 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "pmp.io_addr"} : (i34) -> i32
    %1 = comb.extract %io_req_bits_vaddr from 14 : (i34) -> i20
    %2 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i2
    %3 = comb.xor bin %2, %c-1_i2 : i2
    %4 = comb.concat %1, %3 : i20, i2
    %5 = comb.icmp bin eq %4, %c0_i22 {sv.namehint = "_legal_address_T_4"} : i22
    %6 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i6
    %7 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i2
    %8 = comb.xor bin %7, %c-1_i2 : i2
    %9 = comb.concat %6, %8 : i6, i2
    %10 = comb.icmp bin eq %9, %c0_i8 {sv.namehint = "_legal_address_T_9"} : i8
    %11 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i8
    %12 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i10
    %13 = comb.xor bin %12, %c-512_i10 : i10
    %14 = comb.concat %11, %13 : i8, i10
    %15 = comb.icmp bin eq %14, %c0_i18 {sv.namehint = "_legal_address_T_14"} : i18
    %16 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i22
    %17 = comb.icmp bin ne %16, %c0_i22 : i22
    %18 = comb.xor bin %17, %true {sv.namehint = "_legal_address_T_19"} : i1
    %19 = comb.extract %io_req_bits_vaddr from 17 : (i34) -> i17
    %20 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %21 = comb.xor bin %20, %true : i1
    %22 = comb.concat %19, %21 : i17, i1
    %23 = comb.icmp bin eq %22, %c0_i18 {sv.namehint = "_legal_address_T_24"} : i18
    %24 = comb.extract %io_req_bits_vaddr from 32 : (i34) -> i2
    %25 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i4
    %26 = comb.xor bin %25, %c-8_i4 : i4
    %27 = comb.concat %24, %26 : i2, i4
    %28 = comb.icmp bin eq %27, %c0_i6 {sv.namehint = "_legal_address_T_29"} : i6
    %29 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i3
    %30 = comb.extract %io_req_bits_vaddr from 29 : (i34) -> i2
    %31 = comb.xor bin %30, %c-1_i2 : i2
    %32 = comb.concat %29, %31 : i3, i2
    %33 = comb.icmp bin eq %32, %c0_i5 {sv.namehint = "_legal_address_T_34"} : i5
    %34 = comb.or bin %5, %10, %15, %18, %23, %28, %33 {sv.namehint = "legal_address"} : i1
    %35 = comb.extract %26 from 3 : (i4) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "_cacheable_T_12"} : i1
    %37 = comb.and bin %34, %36 {sv.namehint = "cacheable"} : i1
    %38 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %39 = comb.xor bin %38, %true : i1
    %40 = comb.xor bin %io_ptw_status_debug, %true {sv.namehint = "_deny_access_to_debug_T"} : i1
    %41 = comb.xor bin %17, %true {sv.namehint = "_deny_access_to_debug_T_5"} : i1
    %42 = comb.and bin %40, %41 {sv.namehint = "deny_access_to_debug"} : i1
    %43 = comb.xor bin %42, %true {sv.namehint = "_prot_x_T_32"} : i1
    %44 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %45 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %46 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %47 = comb.concat %44, %45, %46 : i2, i1, i1
    %48 = comb.icmp bin ne %47, %c0_i4 : i4
    %49 = comb.xor bin %48, %true {sv.namehint = "_prot_w_T_4"} : i1
    %50 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %51 = comb.concat %50, %39 : i2, i1
    %52 = comb.icmp bin ne %51, %c0_i3 : i3
    %53 = comb.xor bin %52, %true {sv.namehint = "_prot_w_T_9"} : i1
    %54 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i1
    %55 = comb.xor bin %54, %true : i1
    %56 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i1
    %57 = comb.concat %56, %55 : i1, i1
    %58 = comb.icmp bin ne %57, %c0_i2 : i2
    %59 = comb.xor bin %58, %true {sv.namehint = "_prot_w_T_14"} : i1
    %60 = comb.extract %26 from 2 : (i4) -> i2
    %61 = comb.icmp bin ne %60, %c0_i2 : i2
    %62 = comb.xor bin %61, %true {sv.namehint = "_prot_w_T_19"} : i1
    %63 = comb.or bin %49, %53, %59, %62 {sv.namehint = "_prot_w_T_30"} : i1
    %64 = comb.xor bin %48, %true {sv.namehint = "_prot_pp_T_4"} : i1
    %65 = comb.xor bin %52, %true {sv.namehint = "_prot_pp_T_9"} : i1
    %66 = comb.xor bin %58, %true {sv.namehint = "_prot_pp_T_14"} : i1
    %67 = comb.xor bin %61, %true {sv.namehint = "_prot_pp_T_19"} : i1
    %68 = comb.or bin %64, %65, %66, %67 {sv.namehint = "_prot_pp_T_30"} : i1
    %69 = comb.and bin %34, %68 {sv.namehint = "prot_pp"} : i1
    %70 = comb.xor bin %48, %true {sv.namehint = "_prot_al_T_4"} : i1
    %71 = comb.xor bin %52, %true {sv.namehint = "_prot_al_T_9"} : i1
    %72 = comb.or bin %70, %71 {sv.namehint = "_prot_al_T_30"} : i1
    %73 = comb.and bin %34, %72 {sv.namehint = "prot_al"} : i1
    %74 = comb.xor bin %48, %true {sv.namehint = "_prot_aa_T_4"} : i1
    %75 = comb.xor bin %52, %true {sv.namehint = "_prot_aa_T_9"} : i1
    %76 = comb.or bin %74, %75 {sv.namehint = "_prot_aa_T_30"} : i1
    %77 = comb.and bin %34, %76 {sv.namehint = "prot_aa"} : i1
    %78 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %79 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %80 = comb.extract %io_req_bits_vaddr from 25 : (i34) -> i1
    %81 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %82 = comb.extract %io_req_bits_vaddr from 13 : (i34) -> i1
    %83 = comb.concat %78, %79, %80, %81, %82 : i2, i1, i1, i1, i1
    %84 = comb.icmp bin eq %83, %c0_i6 {sv.namehint = "_prot_eff_T_21"} : i6
    %85 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %86 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %87 = comb.extract %13 from 9 : (i10) -> i1
    %88 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %89 = comb.concat %85, %86, %87, %88 : i2, i1, i1, i1
    %90 = comb.icmp bin eq %89, %c0_i5 {sv.namehint = "_prot_eff_T_26"} : i5
    %91 = comb.xor bin %52, %true {sv.namehint = "_prot_eff_T_31"} : i1
    %92 = comb.xor bin %58, %true {sv.namehint = "_prot_eff_T_36"} : i1
    %93 = comb.or bin %84, %90, %91, %92 {sv.namehint = "_prot_eff_T_42"} : i1
    %entries_barrier.io_y_u, %entries_barrier.io_y_ae_ptw, %entries_barrier.io_y_ae_final, %entries_barrier.io_y_pf, %entries_barrier.io_y_gf, %entries_barrier.io_y_sw, %entries_barrier.io_y_sx, %entries_barrier.io_y_sr, %entries_barrier.io_y_pw, %entries_barrier.io_y_px, %entries_barrier.io_y_pr, %entries_barrier.io_y_ppp, %entries_barrier.io_y_pal, %entries_barrier.io_y_paa, %entries_barrier.io_y_eff, %entries_barrier.io_y_c = hw.instance "entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier.io_y_c"}
    %entries_barrier_1.io_y_u, %entries_barrier_1.io_y_ae_ptw, %entries_barrier_1.io_y_ae_final, %entries_barrier_1.io_y_pf, %entries_barrier_1.io_y_gf, %entries_barrier_1.io_y_sw, %entries_barrier_1.io_y_sx, %entries_barrier_1.io_y_sr, %entries_barrier_1.io_y_pw, %entries_barrier_1.io_y_px, %entries_barrier_1.io_y_pr, %entries_barrier_1.io_y_ppp, %entries_barrier_1.io_y_pal, %entries_barrier_1.io_y_paa, %entries_barrier_1.io_y_eff, %entries_barrier_1.io_y_c = hw.instance "entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_1.io_y_c"}
    %entries_barrier_2.io_y_u, %entries_barrier_2.io_y_ae_ptw, %entries_barrier_2.io_y_ae_final, %entries_barrier_2.io_y_pf, %entries_barrier_2.io_y_gf, %entries_barrier_2.io_y_sw, %entries_barrier_2.io_y_sx, %entries_barrier_2.io_y_sr, %entries_barrier_2.io_y_pw, %entries_barrier_2.io_y_px, %entries_barrier_2.io_y_pr, %entries_barrier_2.io_y_ppp, %entries_barrier_2.io_y_pal, %entries_barrier_2.io_y_paa, %entries_barrier_2.io_y_eff, %entries_barrier_2.io_y_c = hw.instance "entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_2.io_y_c"}
    %entries_barrier_3.io_y_u, %entries_barrier_3.io_y_ae_ptw, %entries_barrier_3.io_y_ae_final, %entries_barrier_3.io_y_pf, %entries_barrier_3.io_y_gf, %entries_barrier_3.io_y_sw, %entries_barrier_3.io_y_sx, %entries_barrier_3.io_y_sr, %entries_barrier_3.io_y_pw, %entries_barrier_3.io_y_px, %entries_barrier_3.io_y_pr, %entries_barrier_3.io_y_ppp, %entries_barrier_3.io_y_pal, %entries_barrier_3.io_y_paa, %entries_barrier_3.io_y_eff, %entries_barrier_3.io_y_c = hw.instance "entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_3.io_y_c"}
    %entries_barrier_4.io_y_u, %entries_barrier_4.io_y_ae_ptw, %entries_barrier_4.io_y_ae_final, %entries_barrier_4.io_y_pf, %entries_barrier_4.io_y_gf, %entries_barrier_4.io_y_sw, %entries_barrier_4.io_y_sx, %entries_barrier_4.io_y_sr, %entries_barrier_4.io_y_pw, %entries_barrier_4.io_y_px, %entries_barrier_4.io_y_pr, %entries_barrier_4.io_y_ppp, %entries_barrier_4.io_y_pal, %entries_barrier_4.io_y_paa, %entries_barrier_4.io_y_eff, %entries_barrier_4.io_y_c = hw.instance "entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_4.io_y_c"}
    %entries_barrier_5.io_y_u, %entries_barrier_5.io_y_ae_ptw, %entries_barrier_5.io_y_ae_final, %entries_barrier_5.io_y_pf, %entries_barrier_5.io_y_gf, %entries_barrier_5.io_y_sw, %entries_barrier_5.io_y_sx, %entries_barrier_5.io_y_sr, %entries_barrier_5.io_y_pw, %entries_barrier_5.io_y_px, %entries_barrier_5.io_y_pr, %entries_barrier_5.io_y_ppp, %entries_barrier_5.io_y_pal, %entries_barrier_5.io_y_paa, %entries_barrier_5.io_y_eff, %entries_barrier_5.io_y_c = hw.instance "entries_barrier_5" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_5.io_y_u"}
    %94 = comb.and %34, %43, %pmp.io_r {sv.namehint = "pr_array"} : i1
    %95 = comb.and %34, %63, %43, %pmp.io_w {sv.namehint = "pw_array"} : i1
    %96 = comb.or bin %69, %37 {sv.namehint = "ppp_array_if_cached"} : i1
    %97 = comb.or bin %77, %37 {sv.namehint = "paa_array_if_cached"} : i1
    %98 = comb.or bin %73, %37 {sv.namehint = "pal_array_if_cached"} : i1
    %99 = comb.concat %c0_i2, %io_req_bits_size : i2, i2
    %100 = comb.shl bin %c1_i4, %99 {sv.namehint = "_misaligned_T"} : i4
    %101 = comb.add %100, %c-1_i4 {sv.namehint = "_misaligned_T_1"} : i4
    %102 = comb.extract %io_req_bits_vaddr from 0 : (i34) -> i4
    %103 = comb.and bin %102, %101 : i4
    %104 = comb.icmp bin ne %103, %c0_i4 {sv.namehint = "misaligned"} : i4
    %105 = comb.icmp bin eq %io_req_bits_cmd, %c6_i5 {sv.namehint = "_cmd_read_T_2"} : i5
    %106 = comb.icmp bin eq %io_req_bits_cmd, %c7_i5 {sv.namehint = "_cmd_write_T_3"} : i5
    %107 = comb.or bin %105, %106 {sv.namehint = "cmd_lrsc"} : i1
    %108 = comb.icmp bin eq %io_req_bits_cmd, %c4_i5 {sv.namehint = "_cmd_write_T_5"} : i5
    %109 = comb.icmp bin eq %io_req_bits_cmd, %c9_i5 {sv.namehint = "_cmd_write_T_6"} : i5
    %110 = comb.icmp bin eq %io_req_bits_cmd, %c10_i5 {sv.namehint = "_cmd_write_T_7"} : i5
    %111 = comb.icmp bin eq %io_req_bits_cmd, %c11_i5 {sv.namehint = "_cmd_write_T_8"} : i5
    %112 = comb.or bin %108, %109, %110, %111 {sv.namehint = "cmd_amo_logical"} : i1
    %113 = comb.icmp bin eq %io_req_bits_cmd, %c8_i5 {sv.namehint = "_cmd_write_T_12"} : i5
    %114 = comb.icmp bin eq %io_req_bits_cmd, %c12_i5 {sv.namehint = "_cmd_write_T_13"} : i5
    %115 = comb.icmp bin eq %io_req_bits_cmd, %c13_i5 {sv.namehint = "_cmd_write_T_14"} : i5
    %116 = comb.icmp bin eq %io_req_bits_cmd, %c14_i5 {sv.namehint = "_cmd_write_T_15"} : i5
    %117 = comb.icmp bin eq %io_req_bits_cmd, %c15_i5 {sv.namehint = "_cmd_write_T_16"} : i5
    %118 = comb.or bin %113, %114, %115, %116, %117 {sv.namehint = "cmd_amo_arithmetic"} : i1
    %119 = comb.icmp bin eq %io_req_bits_cmd, %c-15_i5 {sv.namehint = "cmd_put_partial"} : i5
    %120 = comb.icmp bin eq %io_req_bits_cmd, %c0_i5 {sv.namehint = "_cmd_read_T"} : i5
    %121 = comb.icmp bin eq %io_req_bits_cmd, %c-16_i5 {sv.namehint = "_cmd_readx_T"} : i5
    %122 = comb.or bin %120, %121, %105, %106, %108, %109, %110, %111, %113, %114, %115, %116, %117 {sv.namehint = "cmd_read"} : i1
    %123 = comb.icmp bin eq %io_req_bits_cmd, %c1_i5 {sv.namehint = "_cmd_write_T"} : i5
    %124 = comb.or bin %123, %119, %106, %108, %109, %110, %111, %113, %114, %115, %116, %117 {sv.namehint = "cmd_write"} : i1
    %125 = comb.icmp bin eq %io_req_bits_cmd, %c5_i5 {sv.namehint = "_cmd_write_perms_T"} : i5
    %126 = comb.icmp bin eq %io_req_bits_cmd, %c-9_i5 {sv.namehint = "_cmd_write_perms_T_1"} : i5
    %127 = comb.or bin %124, %125, %126 {sv.namehint = "cmd_write_perms"} : i1
    %128 = comb.and %104, %34, %93 {sv.namehint = "_ae_array_T"} : i1
    %129 = comb.xor bin %37, %true {sv.namehint = "_ae_array_T_1"} : i1
    %130 = comb.and %107, %129 {sv.namehint = "_ae_array_T_2"} : i1
    %131 = comb.or bin %128, %130 {sv.namehint = "ae_array"} : i1
    %132 = comb.xor bin %94, %true {sv.namehint = "_ae_ld_array_T"} : i1
    %133 = comb.or bin %131, %132 {sv.namehint = "_ae_ld_array_T_1"} : i1
    %134 = comb.and %122, %133 {sv.namehint = "ae_ld_array"} : i1
    %135 = comb.xor bin %95, %true {sv.namehint = "_ae_st_array_T"} : i1
    %136 = comb.or bin %131, %135 {sv.namehint = "_ae_st_array_T_1"} : i1
    %137 = comb.and %127, %136 {sv.namehint = "_ae_st_array_T_2"} : i1
    %138 = comb.xor bin %96, %true {sv.namehint = "_ae_st_array_T_3"} : i1
    %139 = comb.and %119, %138 {sv.namehint = "_ae_st_array_T_4"} : i1
    %140 = comb.xor bin %98, %true {sv.namehint = "_ae_st_array_T_6"} : i1
    %141 = comb.and %112, %140 {sv.namehint = "_ae_st_array_T_7"} : i1
    %142 = comb.xor bin %97, %true {sv.namehint = "_ae_st_array_T_9"} : i1
    %143 = comb.and %118, %142 {sv.namehint = "_ae_st_array_T_10"} : i1
    %144 = comb.or bin %137, %139, %141, %143 {sv.namehint = "ae_st_array"} : i1
    %145 = comb.and bin %104, %122 {sv.namehint = "io_resp_ma_ld"} : i1
    %146 = comb.and bin %104, %124 {sv.namehint = "io_resp_ma_st"} : i1
    %147 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "io_resp_paddr"} : (i34) -> i32
    hw.output %147, %false, %false, %134, %144, %145, %146, %37 : i32, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @Arbiter8_DCacheMetadataReq(in %io_in_0_valid : i1, in %io_in_0_bits_addr : i34, in %io_in_0_bits_idx : i6, in %io_in_2_valid : i1, in %io_in_2_bits_addr : i34, in %io_in_2_bits_idx : i6, in %io_in_2_bits_data : i22, in %io_in_3_valid : i1, in %io_in_3_bits_addr : i34, in %io_in_3_bits_idx : i6, in %io_in_3_bits_data : i22, out io_in_4_ready : i1, in %io_in_4_valid : i1, in %io_in_4_bits_addr : i34, in %io_in_4_bits_idx : i6, in %io_in_4_bits_data : i22, out io_in_6_ready : i1, in %io_in_6_valid : i1, in %io_in_6_bits_addr : i34, in %io_in_6_bits_idx : i6, in %io_in_6_bits_data : i22, out io_in_7_ready : i1, in %io_in_7_valid : i1, in %io_in_7_bits_addr : i34, in %io_in_7_bits_idx : i6, in %io_in_7_bits_data : i22, out io_out_valid : i1, out io_out_bits_write : i1, out io_out_bits_addr : i34, out io_out_bits_idx : i6, out io_out_bits_data : i22) {
    %c0_i22 = hw.constant 0 : i22
    %true = hw.constant true
    %0 = comb.mux bin %io_in_6_valid, %io_in_6_bits_addr, %io_in_7_bits_addr : i34
    %1 = comb.mux bin %io_in_6_valid, %io_in_6_bits_idx, %io_in_7_bits_idx : i6
    %2 = comb.mux bin %io_in_6_valid, %io_in_6_bits_data, %io_in_7_bits_data : i22
    %3 = comb.mux bin %io_in_4_valid, %io_in_4_bits_addr, %0 : i34
    %4 = comb.mux bin %io_in_4_valid, %io_in_4_bits_idx, %1 : i6
    %5 = comb.mux bin %io_in_4_valid, %io_in_4_bits_data, %2 : i22
    %6 = comb.mux bin %io_in_3_valid, %io_in_3_bits_addr, %3 : i34
    %7 = comb.mux bin %io_in_3_valid, %io_in_3_bits_idx, %4 : i6
    %8 = comb.mux bin %io_in_3_valid, %io_in_3_bits_data, %5 : i22
    %9 = comb.mux bin %io_in_2_valid, %io_in_2_bits_addr, %6 : i34
    %10 = comb.mux bin %io_in_2_valid, %io_in_2_bits_idx, %7 : i6
    %11 = comb.mux bin %io_in_2_valid, %io_in_2_bits_data, %8 : i22
    %12 = comb.or %io_in_0_valid, %io_in_2_valid, %io_in_3_valid, %io_in_4_valid {sv.namehint = "io_out_bits_write"} : i1
    %13 = comb.mux bin %io_in_0_valid, %io_in_0_bits_addr, %9 {sv.namehint = "io_out_bits_addr"} : i34
    %14 = comb.mux bin %io_in_0_valid, %io_in_0_bits_idx, %10 {sv.namehint = "io_out_bits_idx"} : i6
    %15 = comb.mux bin %io_in_0_valid, %c0_i22, %11 {sv.namehint = "io_out_bits_data"} : i22
    %16 = comb.or bin %io_in_0_valid, %io_in_2_valid, %io_in_3_valid {sv.namehint = "_grant_T_2"} : i1
    %17 = comb.or bin %16, %io_in_4_valid {sv.namehint = "_grant_T_3"} : i1
    %18 = comb.or bin %17, %io_in_6_valid {sv.namehint = "_io_out_valid_T"} : i1
    %19 = comb.xor bin %16, %true {sv.namehint = "grant_4"} : i1
    %20 = comb.xor bin %17, %true {sv.namehint = "grant_6"} : i1
    %21 = comb.xor bin %18, %true {sv.namehint = "grant_7"} : i1
    %22 = comb.or bin %18, %io_in_7_valid {sv.namehint = "io_out_valid"} : i1
    hw.output %19, %20, %21, %22, %12, %13, %14, %15 : i1, i1, i1, i1, i1, i34, i6, i22
  }
  hw.module private @DCacheDataArray(in %clock : !seq.clock, in %io_req_valid : i1, in %io_req_bits_addr : i12, in %io_req_bits_write : i1, in %io_req_bits_wdata : i64, in %io_req_bits_eccMask : i8, out io_resp_0 : i64) {
    %true = hw.constant true
    %0 = comb.extract %io_req_bits_addr from 3 {sv.namehint = "addr"} : (i12) -> i9
    %data_arrays_0 = seq.firmem 1, 1, undefined, port_order : <512 x 64, mask 8>
    %1 = seq.firmem.read_write_port %data_arrays_0[%0] = %io_req_bits_wdata if %io_req_bits_write, clock %clock enable %2 mask %io_req_bits_eccMask : <512 x 64, mask 8>, i8
    %2 = comb.or bin %5, %3 : i1
    %3 = comb.and bin %io_req_valid, %io_req_bits_write {sv.namehint = "data_arrays_0_rdata_MPORT_en"} : i1
    %4 = comb.xor bin %io_req_bits_write, %true {sv.namehint = "_rdata_data_T"} : i1
    %5 = comb.and bin %io_req_valid, %4 {sv.namehint = "data_arrays_0_rdata_data_en"} : i1
    hw.output %1 : i64
  }
  hw.module private @Arbiter4_DCacheDataReq(in %io_in_0_valid : i1, in %io_in_0_bits_addr : i12, in %io_in_0_bits_write : i1, in %io_in_0_bits_wdata : i64, in %io_in_0_bits_eccMask : i8, out io_in_1_ready : i1, in %io_in_1_valid : i1, in %io_in_1_bits_addr : i12, in %io_in_1_bits_write : i1, in %io_in_1_bits_wdata : i64, out io_in_2_ready : i1, in %io_in_2_valid : i1, in %io_in_2_bits_addr : i12, in %io_in_2_bits_wdata : i64, out io_in_3_ready : i1, in %io_in_3_valid : i1, in %io_in_3_bits_addr : i12, in %io_in_3_bits_wdata : i64, out io_out_valid : i1, out io_out_bits_addr : i12, out io_out_bits_write : i1, out io_out_bits_wdata : i64, out io_out_bits_eccMask : i8) {
    %true = hw.constant true
    %c-1_i8 = hw.constant -1 : i8
    %0 = comb.mux bin %io_in_2_valid, %io_in_2_bits_addr, %io_in_3_bits_addr : i12
    %1 = comb.mux bin %io_in_2_valid, %io_in_2_bits_wdata, %io_in_3_bits_wdata : i64
    %2 = comb.mux bin %io_in_1_valid, %io_in_1_bits_addr, %0 : i12
    %3 = comb.and %io_in_1_valid, %io_in_1_bits_write : i1
    %4 = comb.mux bin %io_in_1_valid, %io_in_1_bits_wdata, %1 : i64
    %5 = comb.mux bin %io_in_0_valid, %io_in_0_bits_addr, %2 {sv.namehint = "io_out_bits_addr"} : i12
    %6 = comb.mux bin %io_in_0_valid, %io_in_0_bits_write, %3 {sv.namehint = "io_out_bits_write"} : i1
    %7 = comb.mux bin %io_in_0_valid, %io_in_0_bits_wdata, %4 {sv.namehint = "io_out_bits_wdata"} : i64
    %8 = comb.mux bin %io_in_0_valid, %io_in_0_bits_eccMask, %c-1_i8 {sv.namehint = "io_out_bits_eccMask"} : i8
    %9 = comb.or bin %io_in_0_valid, %io_in_1_valid {sv.namehint = "_grant_T"} : i1
    %10 = comb.or bin %9, %io_in_2_valid {sv.namehint = "_io_out_valid_T"} : i1
    %11 = comb.xor bin %io_in_0_valid, %true {sv.namehint = "grant_1"} : i1
    %12 = comb.xor bin %9, %true {sv.namehint = "grant_2"} : i1
    %13 = comb.xor bin %10, %true {sv.namehint = "grant_3"} : i1
    %14 = comb.or bin %10, %io_in_3_valid {sv.namehint = "io_out_valid"} : i1
    hw.output %11, %12, %13, %14, %5, %6, %7, %8 : i1, i1, i1, i1, i12, i1, i64, i8
  }
  hw.module private @AMOALU(in %io_mask : i8, in %io_cmd : i5, in %io_lhs : i64, in %io_rhs : i64, out io_out : i64) {
    %c-1_i31 = hw.constant -1 : i31
    %c-1_i32 = hw.constant -1 : i32
    %c9_i5 = hw.constant 9 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c8_i5 = hw.constant 8 : i5
    %c14_i5 = hw.constant 14 : i5
    %c12_i5 = hw.constant 12 : i5
    %c15_i5 = hw.constant 15 : i5
    %c13_i5 = hw.constant 13 : i5
    %c-1_i64 = hw.constant -1 : i64
    %c0_i64 = hw.constant 0 : i64
    %0 = comb.icmp bin eq %io_cmd, %c13_i5 {sv.namehint = "_max_T"} : i5
    %1 = comb.icmp bin eq %io_cmd, %c15_i5 {sv.namehint = "_max_T_1"} : i5
    %2 = comb.or bin %0, %1 {sv.namehint = "max"} : i1
    %3 = comb.icmp bin eq %io_cmd, %c12_i5 {sv.namehint = "_min_T"} : i5
    %4 = comb.icmp bin eq %io_cmd, %c14_i5 {sv.namehint = "_min_T_1"} : i5
    %5 = comb.or bin %3, %4 {sv.namehint = "min"} : i1
    %6 = comb.icmp bin eq %io_cmd, %c8_i5 {sv.namehint = "add"} : i5
    %7 = comb.icmp bin eq %io_cmd, %c10_i5 {sv.namehint = "_logic_xor_T_1"} : i5
    %8 = comb.icmp bin eq %io_cmd, %c11_i5 {sv.namehint = "_logic_and_T_1"} : i5
    %9 = comb.or bin %7, %8 {sv.namehint = "logic_and"} : i1
    %10 = comb.icmp bin eq %io_cmd, %c9_i5 {sv.namehint = "_logic_xor_T"} : i5
    %11 = comb.or bin %10, %7 {sv.namehint = "logic_xor"} : i1
    %12 = comb.extract %io_mask from 3 {sv.namehint = "_wmask_T_14"} : (i8) -> i1
    %13 = comb.concat %c-1_i32, %12, %c-1_i31 {sv.namehint = "adder_out_mask"} : i32, i1, i31
    %14 = comb.and bin %io_lhs, %13 {sv.namehint = "_adder_out_T"} : i64
    %15 = comb.and bin %io_rhs, %13 {sv.namehint = "_adder_out_T_1"} : i64
    %16 = comb.add bin %14, %15 {sv.namehint = "_adder_out_T_2"} : i64
    %17 = comb.extract %io_mask from 4 {sv.namehint = "_wmask_T_16"} : (i8) -> i1
    %18 = comb.extract %io_cmd from 1 : (i5) -> i1
    %19 = comb.extract %io_lhs from 63 {sv.namehint = "_less_T_15"} : (i64) -> i1
    %20 = comb.extract %io_rhs from 63 {sv.namehint = "_less_T_16"} : (i64) -> i1
    %21 = comb.icmp bin eq %19, %20 {sv.namehint = "_less_T_3"} : i1
    %22 = comb.extract %io_lhs from 32 {sv.namehint = "_less_T_7"} : (i64) -> i32
    %23 = comb.extract %io_rhs from 32 {sv.namehint = "_less_T_8"} : (i64) -> i32
    %24 = comb.icmp bin ult %22, %23 {sv.namehint = "_less_T_6"} : i32
    %25 = comb.icmp bin eq %22, %23 {sv.namehint = "_less_T_9"} : i32
    %26 = comb.extract %io_lhs from 0 {sv.namehint = "_less_T_23"} : (i64) -> i32
    %27 = comb.extract %io_rhs from 0 {sv.namehint = "_less_T_24"} : (i64) -> i32
    %28 = comb.icmp bin ult %26, %27 {sv.namehint = "_less_T_12"} : i32
    %29 = comb.and bin %25, %28 {sv.namehint = "_less_T_13"} : i1
    %30 = comb.or bin %24, %29 {sv.namehint = "_less_T_14"} : i1
    %31 = comb.mux bin %18, %20, %19 {sv.namehint = "_less_T_17"} : i1
    %32 = comb.mux bin %21, %30, %31 {sv.namehint = "_less_T_18"} : i1
    %33 = comb.extract %io_mask from 2 {sv.namehint = "_wmask_T_12"} : (i8) -> i1
    %34 = comb.extract %io_lhs from 31 {sv.namehint = "_less_T_26"} : (i64) -> i1
    %35 = comb.extract %io_rhs from 31 {sv.namehint = "_less_T_27"} : (i64) -> i1
    %36 = comb.icmp bin eq %34, %35 {sv.namehint = "_less_T_22"} : i1
    %37 = comb.icmp bin ult %26, %27 {sv.namehint = "_less_T_25"} : i32
    %38 = comb.mux bin %18, %35, %34 {sv.namehint = "_less_T_28"} : i1
    %39 = comb.mux bin %36, %37, %38 {sv.namehint = "_less_T_29"} : i1
    %40 = comb.mux bin %17, %32, %39 {sv.namehint = "less"} : i1
    %41 = comb.mux bin %40, %5, %2 {sv.namehint = "_minmax_T"} : i1
    %42 = comb.mux bin %41, %io_lhs, %io_rhs {sv.namehint = "minmax"} : i64
    %43 = comb.and bin %io_lhs, %io_rhs {sv.namehint = "_logic_T"} : i64
    %44 = comb.mux bin %9, %43, %c0_i64 {sv.namehint = "_logic_T_1"} : i64
    %45 = comb.xor bin %io_lhs, %io_rhs {sv.namehint = "_logic_T_2"} : i64
    %46 = comb.mux bin %11, %45, %c0_i64 {sv.namehint = "_logic_T_3"} : i64
    %47 = comb.or bin %44, %46 {sv.namehint = "logic"} : i64
    %48 = comb.or bin %9, %11 {sv.namehint = "_out_T"} : i1
    %49 = comb.mux bin %48, %47, %42 {sv.namehint = "_out_T_1"} : i64
    %50 = comb.mux bin %6, %16, %49 {sv.namehint = "out"} : i64
    %51 = comb.extract %io_mask from 0 {sv.namehint = "_wmask_T_8"} : (i8) -> i1
    %52 = comb.extract %io_mask from 1 {sv.namehint = "_wmask_T_10"} : (i8) -> i1
    %53 = comb.extract %io_mask from 5 {sv.namehint = "_wmask_T_18"} : (i8) -> i1
    %54 = comb.extract %io_mask from 6 {sv.namehint = "_wmask_T_20"} : (i8) -> i1
    %55 = comb.extract %io_mask from 7 {sv.namehint = "_wmask_T_22"} : (i8) -> i1
    %56 = comb.replicate %51 {sv.namehint = "_wmask_T_9"} : (i1) -> i8
    %57 = comb.replicate %52 {sv.namehint = "_wmask_T_11"} : (i1) -> i8
    %58 = comb.replicate %33 {sv.namehint = "_wmask_T_13"} : (i1) -> i8
    %59 = comb.replicate %12 {sv.namehint = "_wmask_T_15"} : (i1) -> i8
    %60 = comb.replicate %17 {sv.namehint = "_wmask_T_17"} : (i1) -> i8
    %61 = comb.replicate %53 {sv.namehint = "_wmask_T_19"} : (i1) -> i8
    %62 = comb.replicate %54 {sv.namehint = "_wmask_T_21"} : (i1) -> i8
    %63 = comb.replicate %55 {sv.namehint = "_wmask_T_23"} : (i1) -> i8
    %64 = comb.concat %63, %62, %61, %60, %59, %58, %57, %56 {sv.namehint = "wmask"} : i8, i8, i8, i8, i8, i8, i8, i8
    %65 = comb.and bin %64, %50 {sv.namehint = "_io_out_T"} : i64
    %66 = comb.xor bin %64, %c-1_i64 {sv.namehint = "_io_out_T_1"} : i64
    %67 = comb.and bin %66, %io_lhs {sv.namehint = "_io_out_T_2"} : i64
    %68 = comb.or bin %65, %67 {sv.namehint = "io_out"} : i64
    hw.output %68 : i64
  }
  hw.module private @DCache(in %clock : !seq.clock, in %reset : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i1, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i1, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i1, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i1, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2, out io_cpu_req_ready : i1, in %io_cpu_req_valid : i1, in %io_cpu_req_bits_addr : i34, in %io_cpu_req_bits_tag : i6, in %io_cpu_req_bits_cmd : i5, in %io_cpu_req_bits_size : i2, in %io_cpu_req_bits_signed : i1, in %io_cpu_s1_kill : i1, in %io_cpu_s1_data_data : i64, out io_cpu_s2_nack : i1, out io_cpu_resp_valid : i1, out io_cpu_resp_bits_tag : i6, out io_cpu_resp_bits_data : i64, out io_cpu_resp_bits_replay : i1, out io_cpu_resp_bits_has_data : i1, out io_cpu_resp_bits_data_word_bypass : i64, out io_cpu_replay_next : i1, out io_cpu_s2_xcpt_ma_ld : i1, out io_cpu_s2_xcpt_ma_st : i1, out io_cpu_s2_xcpt_pf_ld : i1, out io_cpu_s2_xcpt_pf_st : i1, out io_cpu_s2_xcpt_ae_ld : i1, out io_cpu_s2_xcpt_ae_st : i1, out io_cpu_ordered : i1, out io_cpu_perf_release : i1, out io_cpu_perf_grant : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_w : i1, in %io_ptw_pmp_0_cfg_r : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_w : i1, in %io_ptw_pmp_1_cfg_r : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_w : i1, in %io_ptw_pmp_2_cfg_r : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_w : i1, in %io_ptw_pmp_3_cfg_r : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_w : i1, in %io_ptw_pmp_4_cfg_r : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_w : i1, in %io_ptw_pmp_5_cfg_r : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_w : i1, in %io_ptw_pmp_6_cfg_r : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_w : i1, in %io_ptw_pmp_7_cfg_r : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-1_i7 = hw.constant -1 : i7
    %c4_i7 = hw.constant 4 : i7
    %c1_i7 = hw.constant 1 : i7
    %c8_i10 = hw.constant 8 : i10
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c3_i5 = hw.constant 3 : i5
    %c5_i5 = hw.constant 5 : i5
    %c1_i5 = hw.constant 1 : i5
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c-1_i2 = hw.constant -1 : i2
    %false = hw.constant false {sv.namehint = "_a_source_T_2"}
    %true = hw.constant true {sv.namehint = "get_a_mask_size_2"}
    %c0_i64 = hw.constant 0 : i64
    %c0_i8 = hw.constant 0 : i8
    %c0_i2 = hw.constant 0 : i2 {sv.namehint = "voluntaryNewCoh_state"}
    %c0_i30 = hw.constant 0 : i30
    %c0_i9 = hw.constant 0 : i9
    %c0_i6 = hw.constant 0 : i6
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c3_i7 = hw.constant 3 : i7
    %c0_i7 = hw.constant 0 : i7
    %c-1_i8 = hw.constant -1 : i8
    %c6_i4 = hw.constant 6 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i3 = hw.constant 0 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c3_i3 = hw.constant 3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c5_i4 = hw.constant 5 : i4
    %c3_i4 = hw.constant 3 : i4
    %c7_i4 = hw.constant 7 : i4
    %c4_i4 = hw.constant 4 : i4
    %c-49_i7 = hw.constant -49 : i7
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-9_i5 = hw.constant -9 : i5
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c-10_i5 = hw.constant -10 : i5
    %c-11_i5 = hw.constant -11 : i5
    %c-12_i5 = hw.constant -12 : i5
    %c-15_i5 = hw.constant -15 : i5
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-8_i4 = hw.constant -8 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-16_i5 = hw.constant -16 : i5
    %c-1_i9 = hw.constant -1 : i9
    %c0_i23 = hw.constant 0 : i23
    %c0_i15 = hw.constant 0 : i15
    %0 = seq.from_clock %clock
    %tlb.io_resp_paddr, %tlb.io_resp_pf_ld, %tlb.io_resp_pf_st, %tlb.io_resp_ae_ld, %tlb.io_resp_ae_st, %tlb.io_resp_ma_ld, %tlb.io_resp_ma_st, %tlb.io_resp_cacheable = hw.instance "tlb" @TLB(io_req_bits_vaddr: %s1_tlb_req_vaddr: i34, io_req_bits_size: %s1_tlb_req_size: i2, io_req_bits_cmd: %s1_tlb_req_cmd: i5, io_req_bits_prv: %c-1_i2: i2, io_ptw_status_debug: %io_ptw_status_debug: i1, io_ptw_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_w: %io_ptw_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: %io_ptw_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_w: %io_ptw_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: %io_ptw_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_w: %io_ptw_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: %io_ptw_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_w: %io_ptw_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: %io_ptw_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_w: %io_ptw_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: %io_ptw_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_w: %io_ptw_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: %io_ptw_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_w: %io_ptw_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: %io_ptw_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_w: %io_ptw_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: %io_ptw_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: %io_ptw_pmp_7_mask: i32) -> (io_resp_paddr: i32, io_resp_pf_ld: i1, io_resp_pf_st: i1, io_resp_ae_ld: i1, io_resp_ae_st: i1, io_resp_ma_ld: i1, io_resp_ma_st: i1, io_resp_cacheable: i1) {sv.namehint = "tlb.io_resp_paddr"}
    %pma_checker.io_resp_paddr, %pma_checker.io_resp_pf_ld, %pma_checker.io_resp_pf_st, %pma_checker.io_resp_ae_ld, %pma_checker.io_resp_ae_st, %pma_checker.io_resp_ma_ld, %pma_checker.io_resp_ma_st, %pma_checker.io_resp_cacheable = hw.instance "pma_checker" @TLB(io_req_bits_vaddr: %s1_vaddr: i34, io_req_bits_size: %s1_req_size: i2, io_req_bits_cmd: %s1_req_cmd: i5, io_req_bits_prv: %c-1_i2: i2, io_ptw_status_debug: %false: i1, io_ptw_pmp_0_cfg_l: %false: i1, io_ptw_pmp_0_cfg_a: %c0_i2: i2, io_ptw_pmp_0_cfg_w: %false: i1, io_ptw_pmp_0_cfg_r: %false: i1, io_ptw_pmp_0_addr: %c0_i30: i30, io_ptw_pmp_0_mask: %c0_i32: i32, io_ptw_pmp_1_cfg_l: %false: i1, io_ptw_pmp_1_cfg_a: %c0_i2: i2, io_ptw_pmp_1_cfg_w: %false: i1, io_ptw_pmp_1_cfg_r: %false: i1, io_ptw_pmp_1_addr: %c0_i30: i30, io_ptw_pmp_1_mask: %c0_i32: i32, io_ptw_pmp_2_cfg_l: %false: i1, io_ptw_pmp_2_cfg_a: %c0_i2: i2, io_ptw_pmp_2_cfg_w: %false: i1, io_ptw_pmp_2_cfg_r: %false: i1, io_ptw_pmp_2_addr: %c0_i30: i30, io_ptw_pmp_2_mask: %c0_i32: i32, io_ptw_pmp_3_cfg_l: %false: i1, io_ptw_pmp_3_cfg_a: %c0_i2: i2, io_ptw_pmp_3_cfg_w: %false: i1, io_ptw_pmp_3_cfg_r: %false: i1, io_ptw_pmp_3_addr: %c0_i30: i30, io_ptw_pmp_3_mask: %c0_i32: i32, io_ptw_pmp_4_cfg_l: %false: i1, io_ptw_pmp_4_cfg_a: %c0_i2: i2, io_ptw_pmp_4_cfg_w: %false: i1, io_ptw_pmp_4_cfg_r: %false: i1, io_ptw_pmp_4_addr: %c0_i30: i30, io_ptw_pmp_4_mask: %c0_i32: i32, io_ptw_pmp_5_cfg_l: %false: i1, io_ptw_pmp_5_cfg_a: %c0_i2: i2, io_ptw_pmp_5_cfg_w: %false: i1, io_ptw_pmp_5_cfg_r: %false: i1, io_ptw_pmp_5_addr: %c0_i30: i30, io_ptw_pmp_5_mask: %c0_i32: i32, io_ptw_pmp_6_cfg_l: %false: i1, io_ptw_pmp_6_cfg_a: %c0_i2: i2, io_ptw_pmp_6_cfg_w: %false: i1, io_ptw_pmp_6_cfg_r: %false: i1, io_ptw_pmp_6_addr: %c0_i30: i30, io_ptw_pmp_6_mask: %c0_i32: i32, io_ptw_pmp_7_cfg_l: %false: i1, io_ptw_pmp_7_cfg_a: %c0_i2: i2, io_ptw_pmp_7_cfg_w: %false: i1, io_ptw_pmp_7_cfg_r: %false: i1, io_ptw_pmp_7_addr: %c0_i30: i30, io_ptw_pmp_7_mask: %c0_i32: i32) -> (io_resp_paddr: i32, io_resp_pf_ld: i1, io_resp_pf_st: i1, io_resp_ae_ld: i1, io_resp_ae_st: i1, io_resp_ma_ld: i1, io_resp_ma_st: i1, io_resp_cacheable: i1)
    %metaArb.io_in_4_ready, %metaArb.io_in_6_ready, %metaArb.io_in_7_ready, %metaArb.io_out_valid, %metaArb.io_out_bits_write, %metaArb.io_out_bits_addr, %metaArb.io_out_bits_idx, %metaArb.io_out_bits_data = hw.instance "metaArb" @Arbiter8_DCacheMetadataReq(io_in_0_valid: %resetting: i1, io_in_0_bits_addr: %1223: i34, io_in_0_bits_idx: %flushCounter: i6, io_in_2_valid: %269: i1, io_in_2_bits_addr: %273: i34, io_in_2_bits_idx: %272: i6, io_in_2_bits_data: %275: i22, io_in_3_valid: %1003: i1, io_in_3_bits_addr: %1004: i34, io_in_3_bits_idx: %272: i6, io_in_3_bits_data: %1016: i22, io_in_4_valid: %1160: i1, io_in_4_bits_addr: %1162: i34, io_in_4_bits_idx: %271: i6, io_in_4_bits_data: %1164: i22, io_in_6_valid: %1114: i1, io_in_6_bits_addr: %1117: i34, io_in_6_bits_idx: %1115: i6, io_in_6_bits_data: %1164: i22, io_in_7_valid: %io_cpu_req_valid: i1, io_in_7_bits_addr: %io_cpu_req_bits_addr: i34, io_in_7_bits_idx: %92: i6, io_in_7_bits_data: %1164: i22) -> (io_in_4_ready: i1, io_in_6_ready: i1, io_in_7_ready: i1, io_out_valid: i1, io_out_bits_write: i1, io_out_bits_addr: i34, io_out_bits_idx: i6, io_out_bits_data: i22) {sv.namehint = "writeAddr"}
    %tag_array_0 = seq.firmem 1, 1, undefined, port_order : <64 x 22>
    %1 = seq.firmem.read_write_port %tag_array_0[%metaArb.io_out_bits_idx] = %metaArb.io_out_bits_data if %metaArb.io_out_bits_write, clock %clock enable %2 {sv.namehint = "tag_array_s1_meta_data_0"} : <64 x 22>
    %2 = comb.or bin %100, %99 : i1
    %data.io_resp_0 = hw.instance "data" @DCacheDataArray(clock: %clock: !seq.clock, io_req_valid: %dataArb.io_out_valid: i1, io_req_bits_addr: %dataArb.io_out_bits_addr: i12, io_req_bits_write: %dataArb.io_out_bits_write: i1, io_req_bits_wdata: %dataArb.io_out_bits_wdata: i64, io_req_bits_eccMask: %dataArb.io_out_bits_eccMask: i8) -> (io_resp_0: i64) {sv.namehint = "data.io_resp_0"}
    %dataArb.io_in_1_ready, %dataArb.io_in_2_ready, %dataArb.io_in_3_ready, %dataArb.io_out_valid, %dataArb.io_out_bits_addr, %dataArb.io_out_bits_write, %dataArb.io_out_bits_wdata, %dataArb.io_out_bits_eccMask = hw.instance "dataArb" @Arbiter4_DCacheDataReq(io_in_0_valid: %367: i1, io_in_0_bits_addr: %370: i12, io_in_0_bits_write: %335: i1, io_in_0_bits_wdata: %371: i64, io_in_0_bits_eccMask: %372: i8, io_in_1_valid: %1027: i1, io_in_1_bits_addr: %1001: i12, io_in_1_bits_write: %1030: i1, io_in_1_bits_wdata: %auto_out_d_bits_data: i64, io_in_2_valid: %1156: i1, io_in_2_bits_addr: %1158: i12, io_in_2_bits_wdata: %auto_out_d_bits_data: i64, io_in_3_valid: %82: i1, io_in_3_bits_addr: %84: i12, io_in_3_bits_wdata: %auto_out_d_bits_data: i64) -> (io_in_1_ready: i1, io_in_2_ready: i1, io_in_3_ready: i1, io_out_valid: i1, io_out_bits_addr: i12, io_out_bits_write: i1, io_out_bits_wdata: i64, io_out_bits_eccMask: i8) {sv.namehint = "dataArb.io_out_valid"}
    %3 = comb.and bin %1025, %io_cpu_req_valid {sv.namehint = "_s1_valid_T"} : i1
    %s1_valid = seq.firreg %3 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %4 = comb.and bin %1043, %auto_out_b_valid {sv.namehint = "_probe_bits_T"} : i1
    %s1_probe = seq.firreg %1120 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %probe_bits_param = seq.firreg %1088 clock %clock {firrtl.random_init_start = 6 : ui64} : i2
    %probe_bits_size = seq.firreg %1089 clock %clock {firrtl.random_init_start = 8 : ui64, sv.namehint = "dirtyReleaseMessage_size"} : i4
    %probe_bits_source = seq.firreg %1091 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "probe_bits_source"} : i1
    %probe_bits_address = seq.firreg %1092 clock %clock {firrtl.random_init_start = 13 : ui64, sv.namehint = "probe_bits_address"} : i32
    %5 = comb.mux bin %4, %auto_out_b_bits_param, %probe_bits_param : i2
    %6 = comb.mux bin %4, %auto_out_b_bits_size, %probe_bits_size : i4
    %7 = comb.mux bin %4, %auto_out_b_bits_source, %probe_bits_source : i1
    %8 = comb.mux bin %4, %auto_out_b_bits_address, %probe_bits_address : i32
    %9 = comb.xor bin %io_cpu_s1_kill, %true {sv.namehint = "_tlb_io_sfence_valid_T"} : i1
    %10 = comb.xor bin %1112, %true {sv.namehint = "_s1_xcpt_valid_T_2"} : i1
    %11 = comb.and bin %s1_valid, %10 {sv.namehint = "s1_valid_not_nacked"} : i1
    %12 = comb.xor bin %metaArb.io_out_bits_write, %true {sv.namehint = "_s1_meta_T"} : i1
    %13 = comb.and bin %metaArb.io_out_valid, %12 {sv.namehint = "s0_clk_en"} : i1
    %14 = comb.extract %metaArb.io_out_bits_addr from 6 {sv.namehint = "_s0_req_addr_T"} : (i34) -> i28
    %15 = comb.extract %io_cpu_req_bits_addr from 0 {sv.namehint = "_s0_req_addr_T_1"} : (i34) -> i6
    %16 = comb.concat %14, %15 {sv.namehint = "s0_req_addr"} : i28, i6
    %17 = comb.xor bin %metaArb.io_in_7_ready, %true : i1
    %s1_vaddr = seq.firreg %18 clock %clock {firrtl.random_init_start = 120 : ui64, sv.namehint = "s1_vaddr"} : i34
    %s1_req_tag = seq.firreg %19 clock %clock {firrtl.random_init_start = 154 : ui64} : i6
    %s1_req_cmd = seq.firreg %20 clock %clock {firrtl.random_init_start = 160 : ui64, sv.namehint = "s1_req_cmd"} : i5
    %s1_req_size = seq.firreg %21 clock %clock {firrtl.random_init_start = 165 : ui64, sv.namehint = "s1_req_size"} : i2
    %s1_req_signed = seq.firreg %22 clock %clock {firrtl.random_init_start = 167 : ui64} : i1
    %18 = comb.mux bin %13, %16, %s1_vaddr : i34
    %19 = comb.mux bin %13, %io_cpu_req_bits_tag, %s1_req_tag : i6
    %20 = comb.mux bin %13, %io_cpu_req_bits_cmd, %s1_req_cmd : i5
    %21 = comb.mux bin %13, %io_cpu_req_bits_size, %s1_req_size : i2
    %22 = comb.mux bin %13, %io_cpu_req_bits_signed, %s1_req_signed : i1
    %23 = comb.extract %s1_vaddr from 0 {sv.namehint = "_s1_paddr_T_3"} : (i34) -> i12
    %s1_tlb_req_vaddr = seq.firreg %24 clock %clock {firrtl.random_init_start = 246 : ui64, sv.namehint = "s1_tlb_req_vaddr"} : i34
    %s1_tlb_req_size = seq.firreg %25 clock %clock {firrtl.random_init_start = 281 : ui64, sv.namehint = "s1_tlb_req_size"} : i2
    %s1_tlb_req_cmd = seq.firreg %26 clock %clock {firrtl.random_init_start = 283 : ui64, sv.namehint = "s1_tlb_req_cmd"} : i5
    %24 = comb.mux bin %13, %16, %s1_tlb_req_vaddr : i34
    %25 = comb.mux bin %13, %io_cpu_req_bits_size, %s1_tlb_req_size : i2
    %26 = comb.mux bin %13, %io_cpu_req_bits_cmd, %s1_tlb_req_cmd : i5
    %27 = comb.icmp bin eq %s1_req_cmd, %c0_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_1"} : i5
    %28 = comb.icmp bin eq %s1_req_cmd, %c-16_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_2"} : i5
    %29 = comb.icmp bin eq %s1_req_cmd, %c6_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_3"} : i5
    %30 = comb.icmp bin eq %s1_req_cmd, %c7_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_29"} : i5
    %31 = comb.icmp bin eq %s1_req_cmd, %c4_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_31"} : i5
    %32 = comb.icmp bin eq %s1_req_cmd, %c9_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_32"} : i5
    %33 = comb.icmp bin eq %s1_req_cmd, %c10_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_33"} : i5
    %34 = comb.icmp bin eq %s1_req_cmd, %c11_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_34"} : i5
    %35 = comb.icmp bin eq %s1_req_cmd, %c8_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_38"} : i5
    %36 = comb.icmp bin eq %s1_req_cmd, %c12_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_39"} : i5
    %37 = comb.icmp bin eq %s1_req_cmd, %c13_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_40"} : i5
    %38 = comb.icmp bin eq %s1_req_cmd, %c14_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_41"} : i5
    %39 = comb.icmp bin eq %s1_req_cmd, %c15_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_42"} : i5
    %40 = comb.or bin %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "s1_read"} : i1
    %41 = comb.icmp bin eq %s1_req_cmd, %c1_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_26"} : i5
    %42 = comb.icmp bin eq %s1_req_cmd, %c-15_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_51"} : i5
    %43 = comb.or bin %41, %42, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "s1_write"} : i1
    %44 = comb.icmp bin eq %s1_req_cmd, %c-12_i5 {sv.namehint = "_s1_sfence_T"} : i5
    %45 = comb.icmp bin eq %s1_req_cmd, %c-11_i5 {sv.namehint = "_tlb_io_sfence_bits_hv_T"} : i5
    %46 = comb.icmp bin eq %s1_req_cmd, %c-10_i5 {sv.namehint = "_tlb_io_sfence_bits_hg_T"} : i5
    %47 = comb.or bin %44, %45, %46 {sv.namehint = "s1_sfence"} : i1
    %48 = comb.icmp bin eq %s1_req_cmd, %c5_i5 {sv.namehint = "_s1_flush_line_T"} : i5
    %49 = comb.extract %s1_req_size from 0 {sv.namehint = "_tlb_io_sfence_bits_rs1_T"} : (i2) -> i1
    %50 = comb.and bin %48, %49 {sv.namehint = "s1_flush_line"} : i1
    %cached_grant_wait = seq.firreg %944 clock %clock reset sync %reset, %false {firrtl.random_init_start = 420 : ui64} : i1
    %resetting = seq.firreg %1228 clock %clock reset sync %reset, %false {firrtl.random_init_start = 421 : ui64, sv.namehint = "resetting"} : i1
    %flushCounter = seq.firreg %1225 clock %clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 422 : ui64, sv.namehint = "flushCounter"} : i6
    %release_ack_wait = seq.firreg %1153 clock %clock reset sync %reset, %false {firrtl.random_init_start = 428 : ui64} : i1
    %release_ack_addr = seq.firreg %1154 clock %clock {firrtl.random_init_start = 429 : ui64} : i32
    %release_state = seq.firreg %1166 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 461 : ui64} : i4
    %51 = comb.icmp bin eq %release_state, %c1_i4 {sv.namehint = "_canAcceptCachedGrant_T"} : i4
    %52 = comb.icmp bin eq %release_state, %c2_i4 {sv.namehint = "_inWriteback_T_1"} : i4
    %53 = comb.or bin %51, %52 {sv.namehint = "inWriteback"} : i1
    %54 = comb.icmp bin eq %release_state, %c0_i4 {sv.namehint = "_s1_flush_valid_T_5"} : i4
    %55 = comb.xor bin %cached_grant_wait, %true {sv.namehint = "_io_cpu_req_ready_T_1"} : i1
    %56 = comb.and bin %54, %55, %10 {sv.namehint = "_io_cpu_req_ready_T_4"} : i1
    %uncachedInFlight_0 = seq.firreg %956 clock %clock reset sync %reset, %false {firrtl.random_init_start = 467 : ui64} : i1
    %uncachedReqs_0_addr = seq.firreg %897 clock %clock {firrtl.random_init_start = 468 : ui64, sv.namehint = "uncachedResp_addr"} : i34
    %uncachedReqs_0_tag = seq.firreg %898 clock %clock {firrtl.random_init_start = 502 : ui64, sv.namehint = "uncachedResp_tag"} : i6
    %uncachedReqs_0_size = seq.firreg %899 clock %clock {firrtl.random_init_start = 513 : ui64, sv.namehint = "uncachedResp_size"} : i2
    %uncachedReqs_0_signed = seq.firreg %900 clock %clock {firrtl.random_init_start = 515 : ui64, sv.namehint = "uncachedResp_signed"} : i1
    %57 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c0_i5 {sv.namehint = "_pstore_drain_opportunistic_T"} : i5
    %58 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c-16_i5 {sv.namehint = "_pstore_drain_opportunistic_T_1"} : i5
    %59 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c6_i5 {sv.namehint = "_pstore_drain_opportunistic_T_2"} : i5
    %60 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c7_i5 {sv.namehint = "_pstore_drain_opportunistic_T_28"} : i5
    %61 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c4_i5 {sv.namehint = "_pstore_drain_opportunistic_T_30"} : i5
    %62 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c9_i5 {sv.namehint = "_pstore_drain_opportunistic_T_31"} : i5
    %63 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c10_i5 {sv.namehint = "_pstore_drain_opportunistic_T_32"} : i5
    %64 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c11_i5 {sv.namehint = "_pstore_drain_opportunistic_T_33"} : i5
    %65 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c8_i5 {sv.namehint = "_pstore_drain_opportunistic_T_37"} : i5
    %66 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c12_i5 {sv.namehint = "_pstore_drain_opportunistic_T_38"} : i5
    %67 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c13_i5 {sv.namehint = "_pstore_drain_opportunistic_T_39"} : i5
    %68 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c14_i5 {sv.namehint = "_pstore_drain_opportunistic_T_40"} : i5
    %69 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c15_i5 {sv.namehint = "_pstore_drain_opportunistic_T_41"} : i5
    %70 = comb.or bin %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69 {sv.namehint = "s0_read"} : i1
    %71 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c1_i5 {sv.namehint = "_pstore_drain_opportunistic_T_25"} : i5
    %72 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c3_i5 {sv.namehint = "_pstore_drain_opportunistic_res_T_1"} : i5
    %73 = comb.or bin %71, %72 {sv.namehint = "_dataArb_io_in_3_valid_res_T_2"} : i1
    %74 = comb.xor bin %73, %true {sv.namehint = "dataArb_io_in_3_valid_res"} : i1
    %75 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c-15_i5 {sv.namehint = "_pstore_drain_opportunistic_T_50"} : i5
    %76 = comb.or bin %71, %75, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69 {sv.namehint = "_dataArb_io_in_3_valid_T_47"} : i1
    %77 = comb.and bin %76, %75 {sv.namehint = "_dataArb_io_in_3_valid_T_51"} : i1
    %78 = comb.or bin %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %77 {sv.namehint = "_dataArb_io_in_3_valid_T_52"} : i1
    %79 = comb.xor bin %78, %true {sv.namehint = "_dataArb_io_in_3_valid_T_53"} : i1
    %80 = comb.or bin %79, %74 {sv.namehint = "_dataArb_io_in_3_valid_T_54"} : i1
    %81 = comb.xor bin %reset, %true {sv.namehint = "_dataArb_io_in_3_valid_T_56"} : i1
    %82 = comb.and bin %io_cpu_req_valid, %74 {sv.namehint = "dataArb.io_in_3_valid"} : i1
    %83 = comb.extract %io_cpu_req_bits_addr from 12 {sv.namehint = "_metaArb_io_in_5_bits_addr_T"} : (i34) -> i22
    %84 = comb.extract %io_cpu_req_bits_addr from 0 {sv.namehint = "dataArb.io_in_3_bits_addr"} : (i34) -> i12
    %85 = comb.xor bin %dataArb.io_in_3_ready, %true : i1
    %86 = comb.and bin %85, %70 : i1
    %87 = comb.or bin %71, %75, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69 {sv.namehint = "_s1_did_read_T_47"} : i1
    %88 = comb.and bin %87, %75 {sv.namehint = "_s1_did_read_T_51"} : i1
    %89 = comb.or bin %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %88 {sv.namehint = "_s1_did_read_T_52"} : i1
    %90 = comb.and bin %dataArb.io_in_3_ready, %io_cpu_req_valid, %89 {sv.namehint = "_s1_did_read_T_54"} : i1
    %s1_did_read = seq.firreg %91 clock %clock {firrtl.random_init_start = 594 : ui64} : i1
    %91 = comb.mux bin %13, %90, %s1_did_read : i1
    %92 = comb.extract %io_cpu_req_bits_addr from 6 {sv.namehint = "metaArb.io_in_7_bits_idx"} : (i34) -> i6
    %93 = comb.icmp bin eq %s1_req_cmd, %c-9_i5 {sv.namehint = "_s1_cmd_uses_tlb_T_1"} : i5
    %94 = comb.or bin %40, %43, %50, %93 {sv.namehint = "s1_cmd_uses_tlb"} : i1
    %95 = comb.or bin %17, %86 : i1
    %96 = comb.xor %95, %true : i1
    %97 = comb.and %96, %56 : i1
    %98 = comb.extract %tlb.io_resp_paddr from 12 {sv.namehint = "_s1_paddr_T_1"} : (i32) -> i20
    %99 = comb.and bin %metaArb.io_out_valid, %metaArb.io_out_bits_write {sv.namehint = "writeEnable"} : i1
    %100 = comb.and bin %metaArb.io_out_valid, %12 {sv.namehint = "readEnable"} : i1
    %101 = comb.extract %1 from 0 {sv.namehint = "s1_meta_uncorrected_0_tag"} : (i22) -> i20
    %102 = comb.extract %1 from 20 {sv.namehint = "s1_meta_uncorrected_0_coh_state"} : (i22) -> i2
    %103 = comb.icmp bin eq %101, %98 {sv.namehint = "_s1_meta_hit_state_T"} : i20
    %104 = comb.mux bin %103, %102, %c0_i2 {sv.namehint = "_s1_meta_hit_state_T_3"} : i2
    %105 = comb.extract %s1_vaddr from 0 {sv.namehint = "_s1_mask_xwr_lower_T"} : (i34) -> i1
    %106 = comb.icmp bin ne %s1_req_size, %c0_i2 {sv.namehint = "_s1_mask_xwr_upper_T_3"} : i2
    %107 = comb.or bin %105, %106 {sv.namehint = "s1_mask_xwr_upper"} : i1
    %108 = comb.xor bin %105, %true {sv.namehint = "s1_mask_xwr_lower"} : i1
    %109 = comb.concat %107, %108 {sv.namehint = "_s1_mask_xwr_T"} : i1, i1
    %110 = comb.extract %s1_vaddr from 1 {sv.namehint = "_s1_mask_xwr_lower_T_1"} : (i34) -> i1
    %111 = comb.mux bin %110, %109, %c0_i2 {sv.namehint = "_s1_mask_xwr_upper_T_5"} : i2
    %112 = comb.extract %s1_req_size from 1 {sv.namehint = "_s1_mask_xwr_upper_T_6"} : (i2) -> i1
    %113 = comb.replicate %112 {sv.namehint = "_s1_mask_xwr_upper_T_7"} : (i1) -> i2
    %114 = comb.or bin %111, %113 {sv.namehint = "s1_mask_xwr_upper_1"} : i2
    %115 = comb.mux bin %110, %c0_i2, %109 {sv.namehint = "s1_mask_xwr_lower_1"} : i2
    %116 = comb.concat %114, %115 {sv.namehint = "_s1_mask_xwr_T_1"} : i2, i2
    %117 = comb.extract %s1_vaddr from 2 {sv.namehint = "_s1_mask_xwr_lower_T_2"} : (i34) -> i1
    %118 = comb.mux bin %117, %116, %c0_i4 {sv.namehint = "_s1_mask_xwr_upper_T_9"} : i4
    %119 = comb.icmp bin eq %s1_req_size, %c-1_i2 {sv.namehint = "_s1_mask_xwr_upper_T_10"} : i2
    %120 = comb.replicate %119 {sv.namehint = "_s1_mask_xwr_upper_T_11"} : (i1) -> i4
    %121 = comb.or bin %118, %120 {sv.namehint = "s1_mask_xwr_upper_2"} : i4
    %122 = comb.mux bin %117, %c0_i4, %116 {sv.namehint = "s1_mask_xwr_lower_2"} : i4
    %123 = comb.concat %121, %122 {sv.namehint = "s1_mask_xwr"} : i4, i4
    %124 = comb.mux bin %42, %c0_i8, %123 {sv.namehint = "s1_mask"} : i8
    %125 = comb.xor bin %47, %true {sv.namehint = "_s2_valid_T"} : i1
    %126 = comb.and bin %s1_valid, %9, %125 {sv.namehint = "_s2_valid_T_1"} : i1
    %s2_valid = seq.firreg %126 clock %clock reset sync %reset, %false {firrtl.random_init_start = 596 : ui64} : i1
    %127 = comb.concat %1174, %1175, %1170, %1171, %1172, %1173 : i1, i1, i1, i1, i1, i1
    %128 = comb.icmp bin eq %127, %c0_i6 {sv.namehint = "_s2_valid_no_xcpt_T_2"} : i6
    %129 = comb.and bin %s2_valid, %128 {sv.namehint = "s2_valid_no_xcpt"} : i1
    %s2_probe = seq.firreg %s1_probe clock %clock reset sync %reset, %false {firrtl.random_init_start = 597 : ui64} : i1
    %130 = comb.or bin %s1_probe, %s2_probe {sv.namehint = "_releaseInFlight_T"} : i1
    %131 = comb.concat %130, %release_state : i1, i4
    %132 = comb.icmp bin ne %131, %c0_i5 {sv.namehint = "releaseInFlight"} : i5
    %s2_not_nacked_in_s1 = seq.firreg %10 clock %clock {firrtl.random_init_start = 598 : ui64} : i1
    %133 = comb.and bin %129, %s2_not_nacked_in_s1 {sv.namehint = "s2_valid_masked"} : i1
    %s2_req_addr = seq.firreg %984 clock %clock {firrtl.random_init_start = 599 : ui64} : i34
    %s2_req_tag = seq.firreg %977 clock %clock {firrtl.random_init_start = 633 : ui64, sv.namehint = "s2_req_tag"} : i6
    %s2_req_cmd = seq.firreg %965 clock %clock {firrtl.random_init_start = 639 : ui64} : i5
    %s2_req_size = seq.firreg %969 clock %clock {firrtl.random_init_start = 644 : ui64, sv.namehint = "size"} : i2
    %s2_req_signed = seq.firreg %973 clock %clock {firrtl.random_init_start = 646 : ui64} : i1
    %134 = comb.icmp bin eq %s2_req_cmd, %c5_i5 {sv.namehint = "_s2_cmd_flush_line_T"} : i5
    %135 = comb.extract %s2_req_size from 0 {sv.namehint = "_s2_cmd_flush_line_T_1"} : (i2) -> i1
    %s2_tlb_xcpt_pf_ld = seq.firreg %142 clock %clock {firrtl.random_init_start = 793 : ui64} : i1
    %s2_tlb_xcpt_pf_st = seq.firreg %143 clock %clock {firrtl.random_init_start = 794 : ui64} : i1
    %s2_tlb_xcpt_ae_ld = seq.firreg %144 clock %clock {firrtl.random_init_start = 799 : ui64} : i1
    %s2_tlb_xcpt_ae_st = seq.firreg %145 clock %clock {firrtl.random_init_start = 800 : ui64} : i1
    %s2_tlb_xcpt_ma_ld = seq.firreg %146 clock %clock {firrtl.random_init_start = 802 : ui64} : i1
    %s2_tlb_xcpt_ma_st = seq.firreg %147 clock %clock {firrtl.random_init_start = 803 : ui64} : i1
    %s2_pma_cacheable = seq.firreg %148 clock %clock {firrtl.random_init_start = 888 : ui64} : i1
    %136 = comb.mux bin %11, %s1_req_tag, %s2_req_tag : i6
    %137 = comb.mux bin %11, %s1_req_cmd, %s2_req_cmd : i5
    %138 = comb.mux bin %11, %s1_req_size, %s2_req_size : i2
    %139 = comb.mux bin %11, %s1_req_signed, %s2_req_signed : i1
    %140 = comb.concat %c0_i2, %98, %23 : i2, i20, i12
    %141 = comb.mux bin %11, %140, %s2_req_addr : i34
    %142 = comb.mux bin %11, %tlb.io_resp_pf_ld, %s2_tlb_xcpt_pf_ld : i1
    %143 = comb.mux bin %11, %tlb.io_resp_pf_st, %s2_tlb_xcpt_pf_st : i1
    %144 = comb.mux bin %11, %tlb.io_resp_ae_ld, %s2_tlb_xcpt_ae_ld : i1
    %145 = comb.mux bin %11, %tlb.io_resp_ae_st, %s2_tlb_xcpt_ae_st : i1
    %146 = comb.mux bin %11, %tlb.io_resp_ma_ld, %s2_tlb_xcpt_ma_ld : i1
    %147 = comb.mux bin %11, %tlb.io_resp_ma_st, %s2_tlb_xcpt_ma_st : i1
    %148 = comb.mux bin %11, %tlb.io_resp_cacheable, %s2_pma_cacheable : i1
    %s2_vaddr_r = seq.firreg %149 clock %clock {firrtl.random_init_start = 925 : ui64} : i34
    %149 = comb.mux bin %11, %s1_vaddr, %s2_vaddr_r : i34
    %150 = comb.extract %s2_req_addr from 0 {sv.namehint = "_s2_vaddr_T_2"} : (i34) -> i12
    %151 = comb.icmp bin eq %s2_req_cmd, %c0_i5 {sv.namehint = "_s2_read_T"} : i5
    %152 = comb.icmp bin eq %s2_req_cmd, %c-16_i5 {sv.namehint = "_s2_read_T_1"} : i5
    %153 = comb.icmp bin eq %s2_req_cmd, %c6_i5 {sv.namehint = "s2_lr"} : i5
    %154 = comb.icmp bin eq %s2_req_cmd, %c7_i5 {sv.namehint = "s2_sc"} : i5
    %155 = comb.icmp bin eq %s2_req_cmd, %c4_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_28"} : i5
    %156 = comb.icmp bin eq %s2_req_cmd, %c9_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_29"} : i5
    %157 = comb.icmp bin eq %s2_req_cmd, %c10_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_30"} : i5
    %158 = comb.icmp bin eq %s2_req_cmd, %c11_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_31"} : i5
    %159 = comb.icmp bin eq %s2_req_cmd, %c8_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_35"} : i5
    %160 = comb.icmp bin eq %s2_req_cmd, %c12_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_36"} : i5
    %161 = comb.icmp bin eq %s2_req_cmd, %c13_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_37"} : i5
    %162 = comb.icmp bin eq %s2_req_cmd, %c14_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_38"} : i5
    %163 = comb.icmp bin eq %s2_req_cmd, %c15_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_39"} : i5
    %164 = comb.or bin %151, %152, %153, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163 {sv.namehint = "s2_read"} : i1
    %165 = comb.icmp bin eq %s2_req_cmd, %c1_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_23"} : i5
    %166 = comb.icmp bin eq %s2_req_cmd, %c-15_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_24"} : i5
    %167 = comb.or bin %165, %166, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163 {sv.namehint = "s2_write"} : i1
    %168 = comb.or bin %164, %167 {sv.namehint = "s2_readwrite"} : i1
    %169 = comb.or bin %11, %s1_probe {sv.namehint = "s1_meta_clk_en"} : i1
    %s2_meta_corrected_r = seq.firreg %170 clock %clock {firrtl.random_init_start = 962 : ui64, sv.namehint = "s2_meta_corrected_r"} : i22
    %170 = comb.mux bin %169, %1, %s2_meta_corrected_r : i22
    %171 = comb.extract %s2_meta_corrected_r from 0 {sv.namehint = "s2_meta_corrected_0_tag"} : (i22) -> i20
    %172 = comb.extract %s2_meta_corrected_r from 20 {sv.namehint = "s2_meta_corrected_0_coh_state"} : (i22) -> i2
    %173 = comb.or bin %s1_valid, %53, %1177 {sv.namehint = "s2_data_en"} : i1
    %174 = comb.or %1177, %53, %s1_did_read {sv.namehint = "s2_data_s1_word_en"} : i1
    %175 = comb.mux bin %174, %961, %c0_i2 {sv.namehint = "_s2_data_T_1"} : i2
    %176 = comb.extract %175 from 0 {sv.namehint = "_s2_data_T_2"} : (i2) -> i1
    %177 = comb.extract %175 from 1 {sv.namehint = "_s2_data_T_3"} : (i2) -> i1
    %178 = comb.mux bin %176, %data.io_resp_0, %c0_i64 {sv.namehint = "_s2_data_T_4"} : i64
    %179 = comb.mux bin %177, %auto_out_d_bits_data, %c0_i64 {sv.namehint = "_s2_data_T_5"} : i64
    %180 = comb.or bin %178, %179 {sv.namehint = "_s2_data_T_6"} : i64
    %s2_data = seq.firreg %181 clock %clock {firrtl.random_init_start = 984 : ui64, sv.namehint = "s2_data"} : i64
    %181 = comb.mux bin %173, %180, %s2_data : i64
    %s2_probe_state_state = seq.firreg %182 clock %clock {firrtl.random_init_start = 1049 : ui64} : i2
    %182 = comb.mux bin %s1_probe, %104, %s2_probe_state_state : i2
    %s2_hit_state_state = seq.firreg %183 clock %clock {firrtl.random_init_start = 1052 : ui64} : i2
    %183 = comb.mux bin %11, %104, %s2_hit_state_state : i2
    %184 = comb.icmp bin ne %s2_hit_state_state, %c0_i2 {sv.namehint = "s2_hit_valid"} : i2
    %185 = comb.or bin %165, %166, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163 {sv.namehint = "_c_cat_T_22"} : i1
    %186 = comb.icmp bin eq %s2_req_cmd, %c3_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_46"} : i5
    %187 = comb.or bin %165, %166, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163, %186, %153 {sv.namehint = "_c_cat_T_49"} : i1
    %188 = comb.concat %185, %187, %s2_hit_state_state : i1, i1, i2
    %189 = comb.icmp bin eq %188, %c-4_i4 : i4
    %190 = comb.concat %false, %189 : i1, i1
    %191 = comb.icmp bin eq %188, %c-2_i4 : i4
    %192 = comb.icmp bin eq %188, %c-1_i4 : i4
    %193 = comb.icmp bin eq %188, %c6_i4 : i4
    %194 = comb.icmp bin eq %188, %c7_i4 : i4
    %195 = comb.icmp bin eq %188, %c1_i4 : i4
    %196 = comb.icmp bin eq %188, %c2_i4 : i4
    %197 = comb.icmp bin eq %188, %c3_i4 : i4
    %198 = comb.or %197, %196, %195, %194, %193, %192, %191 {sv.namehint = "s2_hit"} : i1
    %199 = hw.array_create %c-1_i2, %c-1_i2, %c-2_i2, %190, %190, %190, %190, %190, %c-1_i2, %c-2_i2, %c-2_i2, %c1_i2, %c-1_i2, %c-2_i2, %c1_i2, %c0_i2 : i2
    %200 = hw.array_get %199[%188] {sv.namehint = "s2_grow_param"} : !hw.array<16xi2>, i4
    %201 = comb.and bin %133, %198 {sv.namehint = "s2_valid_hit_maybe_flush_pre_data_ecc_and_waw"} : i1
    %202 = comb.and bin %201, %168 {sv.namehint = "s2_valid_hit_pre_data_ecc_and_waw"} : i1
    %203 = comb.and bin %201, %134, %135 {sv.namehint = "s2_valid_flush_line"} : i1
    %204 = comb.xor bin %198, %true {sv.namehint = "_io_cpu_s2_uncached_T"} : i1
    %205 = comb.and bin %133, %168, %204 {sv.namehint = "s2_valid_miss"} : i1
    %206 = comb.xor bin %s2_pma_cacheable, %true {sv.namehint = "_s2_uncached_T"} : i1
    %207 = comb.xor bin %uncachedInFlight_0, %true {sv.namehint = "_s2_valid_cached_miss_T_3"} : i1
    %208 = comb.and bin %205, %s2_pma_cacheable, %207 {sv.namehint = "s2_valid_cached_miss"} : i1
    %209 = comb.or bin %208, %203 {sv.namehint = "_s2_want_victimize_T_1"} : i1
    %210 = comb.xor bin %uncachedInFlight_0, %true {sv.namehint = "_s2_valid_uncached_pending_T_2"} : i1
    %211 = comb.and bin %205, %206, %210 {sv.namehint = "s2_valid_uncached_pending"} : i1
    %212 = comb.extract %s2_req_addr from 12 {sv.namehint = "_s2_victim_tag_T_1"} : (i34) -> i20
    %213 = comb.mux bin %203, %212, %171 {sv.namehint = "s2_victim_tag"} : i20
    %214 = comb.mux bin %184, %s2_hit_state_state, %172 {sv.namehint = "s2_victim_state_state"} : i2
    %215 = comb.concat %probe_bits_param, %s2_probe_state_state : i2, i2
    %216 = comb.icmp bin eq %215, %c-8_i4 : i4
    %217 = comb.mux bin %216, %c-3_i3, %c0_i3 : i3
    %218 = comb.icmp bin eq %215, %c-7_i4 : i4
    %219 = comb.mux bin %218, %c2_i3, %217 : i3
    %220 = comb.icmp bin eq %215, %c-6_i4 : i4
    %221 = comb.icmp bin eq %215, %c-5_i4 : i4
    %222 = comb.or bin %221, %220 : i1
    %223 = comb.mux bin %222, %c1_i3, %219 : i3
    %224 = comb.icmp bin eq %215, %c4_i4 : i4
    %225 = comb.mux bin %224, %c-3_i3, %223 : i3
    %226 = comb.icmp bin eq %215, %c5_i4 : i4
    %227 = comb.mux bin %226, %c-4_i3, %225 : i3
    %228 = comb.icmp bin eq %215, %c6_i4 : i4
    %229 = comb.or bin %228, %226, %224 : i1
    %230 = comb.xor %229, %true : i1
    %231 = comb.and %230, %221 : i1
    %232 = comb.icmp bin eq %215, %c7_i4 : i4
    %233 = comb.or %232, %231 : i1
    %234 = comb.or bin %232, %228 : i1
    %235 = comb.mux bin %234, %c0_i3, %227 : i3
    %236 = comb.or bin %232, %228, %226 : i1
    %237 = comb.concat %false, %236 : i1, i1
    %238 = comb.icmp bin eq %215, %c0_i4 : i4
    %239 = comb.mux bin %238, %c-3_i3, %235 : i3
    %240 = comb.mux bin %238, %c0_i2, %237 : i2
    %241 = comb.icmp bin eq %215, %c1_i4 : i4
    %242 = comb.mux bin %241, %c-4_i3, %239 : i3
    %243 = comb.mux bin %241, %c1_i2, %240 : i2
    %244 = comb.icmp bin eq %215, %c2_i4 : i4
    %245 = comb.or bin %244, %241, %238 : i1
    %246 = comb.xor %245, %true : i1
    %247 = comb.and %246, %233 : i1
    %248 = comb.icmp bin eq %215, %c3_i4 : i4
    %249 = comb.or %248, %247 {sv.namehint = "s2_prb_ack_data"} : i1
    %250 = comb.or bin %248, %244 : i1
    %251 = comb.mux bin %250, %c3_i3, %242 {sv.namehint = "dirtyReleaseMessage_param"} : i3
    %252 = comb.mux bin %250, %c-2_i2, %243 {sv.namehint = "probeNewCoh_state"} : i2
    %253 = comb.icmp bin eq %214, %c0_i2 : i2
    %254 = comb.mux bin %253, %c-3_i3, %c0_i3 : i3
    %255 = comb.icmp bin eq %214, %c1_i2 : i2
    %256 = comb.mux bin %255, %c2_i3, %254 : i3
    %257 = comb.icmp bin eq %214, %c-2_i2 : i2
    %258 = comb.icmp bin eq %214, %c-1_i2 : i2
    %259 = comb.or bin %258, %257 : i1
    %260 = comb.mux bin %259, %c1_i3, %256 {sv.namehint = "nodeOut_c_bits_c_param"} : i3
    %261 = comb.icmp bin ne %s2_hit_state_state, %200 {sv.namehint = "s2_update_meta"} : i2
    %262 = comb.and bin %211, %auto_out_a_ready {sv.namehint = "s2_dont_nack_uncached"} : i1
    %263 = comb.icmp bin eq %s2_req_cmd, %c-9_i5 {sv.namehint = "_s2_dont_nack_misc_T_11"} : i5
    %264 = comb.and bin %133, %263 {sv.namehint = "s2_dont_nack_misc"} : i1
    %265 = comb.xor bin %262, %true {sv.namehint = "_io_cpu_s2_nack_T"} : i1
    %266 = comb.xor bin %264, %true {sv.namehint = "_io_cpu_s2_nack_T_2"} : i1
    %267 = comb.xor bin %202, %true {sv.namehint = "_io_cpu_s2_nack_T_4"} : i1
    %268 = comb.and bin %129, %265, %266, %267 {sv.namehint = "io_cpu_s2_nack"} : i1
    %269 = comb.and bin %202, %261 {sv.namehint = "metaArb.io_in_2_valid"} : i1
    %270 = comb.or bin %268, %269 : i1
    %271 = comb.extract %probe_bits_address from 6 {sv.namehint = "metaArb.io_in_4_bits_idx"} : (i32) -> i6
    %272 = comb.extract %s2_req_addr from 6 {sv.namehint = "metaArb.io_in_3_bits_idx"} : (i34) -> i6
    %273 = comb.concat %83, %150 {sv.namehint = "metaArb.io_in_2_bits_addr"} : i22, i12
    %274 = comb.extract %s2_req_addr from 12 {sv.namehint = "metaArb_io_in_2_bits_data_meta_tag"} : (i34) -> i20
    %275 = comb.concat %200, %274 {sv.namehint = "metaArb.io_in_2_bits_data"} : i2, i20
    %lrscCount = seq.firreg %295 clock %clock reset sync %reset, %c0_i7 {firrtl.random_init_start = 1056 : ui64} : i7
    %276 = comb.extract %lrscCount from 2 : (i7) -> i5
    %277 = comb.icmp bin ne %276, %c0_i5 {sv.namehint = "lrscValid"} : i5
    %278 = comb.icmp bin ne %lrscCount, %c0_i7 {sv.namehint = "_clock_en_reg_T_24"} : i7
    %279 = comb.icmp bin ult %lrscCount, %c4_i7 {sv.namehint = "_lrscBackingOff_T_1"} : i7
    %280 = comb.and bin %278, %279 {sv.namehint = "lrscBackingOff"} : i1
    %lrscAddr = seq.firreg %290 clock %clock {firrtl.random_init_start = 1063 : ui64} : i28
    %281 = comb.extract %s2_req_addr from 6 {sv.namehint = "_io_errors_bus_bits_T"} : (i34) -> i28
    %282 = comb.icmp bin eq %lrscAddr, %281 {sv.namehint = "lrscAddrMatch"} : i28
    %283 = comb.and bin %277, %282 {sv.namehint = "_s2_sc_fail_T"} : i1
    %284 = comb.xor bin %283, %true {sv.namehint = "_s2_sc_fail_T_1"} : i1
    %285 = comb.and bin %154, %284 {sv.namehint = "s2_sc_fail"} : i1
    %286 = comb.and bin %202, %153, %55 : i1
    %287 = comb.or bin %286, %208 : i1
    %288 = comb.mux bin %198, %c-49_i7, %c0_i7 {sv.namehint = "_lrscCount_T"} : i7
    %289 = comb.mux bin %287, %288, %lrscCount : i7
    %290 = comb.mux bin %287, %281, %lrscAddr : i28
    %291 = comb.add %lrscCount, %c-1_i7 {sv.namehint = "_lrscCount_T_1"} : i7
    %292 = comb.mux bin %278, %291, %289 : i7
    %293 = comb.and bin %133, %277 : i1
    %294 = comb.mux bin %293, %c3_i7, %292 : i7
    %295 = comb.mux bin %s1_probe, %c0_i7, %294 : i7
    %296 = comb.and bin %11, %43 {sv.namehint = "_pstore1_rmw_T_53"} : i1
    %pstore1_cmd = seq.firreg %297 clock %clock {firrtl.random_init_start = 1092 : ui64, sv.namehint = "pstore1_cmd"} : i5
    %297 = comb.mux bin %296, %s1_req_cmd, %pstore1_cmd : i5
    %pstore1_addr = seq.firreg %298 clock %clock {firrtl.random_init_start = 1097 : ui64} : i34
    %298 = comb.mux bin %296, %s1_vaddr, %pstore1_addr : i34
    %pstore1_data = seq.firreg %299 clock %clock {firrtl.random_init_start = 1131 : ui64, sv.namehint = "pstore1_data"} : i64
    %299 = comb.mux bin %296, %io_cpu_s1_data_data, %pstore1_data : i64
    %pstore1_mask = seq.firreg %300 clock %clock {firrtl.random_init_start = 1196 : ui64, sv.namehint = "pstore1_mask"} : i8
    %300 = comb.mux bin %296, %124, %pstore1_mask : i8
    %301 = comb.or bin %41, %42, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "_pstore1_rmw_T_47"} : i1
    %302 = comb.and bin %301, %42 {sv.namehint = "_pstore1_rmw_T_51"} : i1
    %303 = comb.or bin %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %302 {sv.namehint = "_pstore1_rmw_T_52"} : i1
    %pstore1_rmw = seq.firreg %304 clock %clock {firrtl.random_init_start = 1204 : ui64} : i1
    %304 = comb.mux bin %296, %303, %pstore1_rmw : i1
    %305 = comb.and bin %202, %167 {sv.namehint = "_pstore1_held_T"} : i1
    %306 = comb.xor bin %285, %true {sv.namehint = "_pstore1_held_T_1"} : i1
    %pstore2_valid = seq.firreg %343 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1205 : ui64} : i1
    %307 = comb.or bin %71, %72 {sv.namehint = "_pstore_drain_opportunistic_res_T_2"} : i1
    %308 = comb.xor bin %307, %true {sv.namehint = "pstore_drain_opportunistic_res"} : i1
    %309 = comb.or bin %71, %75, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69 {sv.namehint = "_pstore_drain_opportunistic_T_47"} : i1
    %310 = comb.and bin %309, %75 {sv.namehint = "_pstore_drain_opportunistic_T_51"} : i1
    %311 = comb.or bin %57, %58, %59, %60, %61, %62, %63, %64, %65, %66, %67, %68, %69, %310 {sv.namehint = "_pstore_drain_opportunistic_T_52"} : i1
    %312 = comb.xor bin %311, %true {sv.namehint = "_pstore_drain_opportunistic_T_53"} : i1
    %313 = comb.or bin %312, %308 {sv.namehint = "_pstore_drain_opportunistic_T_54"} : i1
    %314 = comb.xor bin %reset, %true {sv.namehint = "_pstore_drain_opportunistic_T_56"} : i1
    %315 = comb.and bin %io_cpu_req_valid, %308 {sv.namehint = "_pstore_drain_opportunistic_T_58"} : i1
    %316 = comb.xor bin %315, %true {sv.namehint = "pstore_drain_opportunistic"} : i1
    %pstore_drain_on_miss_REG = seq.firreg %268 clock %clock {firrtl.random_init_start = 1206 : ui64} : i1
    %pstore1_held = seq.firreg %339 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1207 : ui64} : i1
    %317 = comb.and bin %s2_valid, %167 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_55"} : i1
    %318 = comb.or bin %317, %pstore1_held {sv.namehint = "pstore1_valid_likely"} : i1
    %319 = comb.and bin %305, %306 {sv.namehint = "_pstore1_valid_T_2"} : i1
    %320 = comb.or bin %319, %pstore1_held {sv.namehint = "pstore1_valid"} : i1
    %321 = comb.and bin %s1_valid, %43 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T"} : i1
    %322 = comb.or bin %321, %pstore1_rmw {sv.namehint = "_pstore_drain_structural_T_2"} : i1
    %323 = comb.and bin %318, %pstore2_valid, %322 {sv.namehint = "pstore_drain_structural"} : i1
    %324 = comb.and bin %202, %167 {sv.namehint = "_dataArb_io_in_0_valid_T_4"} : i1
    %325 = comb.or bin %324, %pstore1_held : i1
    %326 = comb.icmp bin eq %325, %320 : i1
    %327 = comb.or bin %pstore1_rmw, %326 : i1
    %328 = comb.xor bin %reset, %true : i1
    %329 = comb.or bin %324, %pstore1_held {sv.namehint = "_pstore_drain_T_5"} : i1
    %330 = comb.xor bin %pstore1_rmw, %true {sv.namehint = "_dataArb_io_in_0_valid_T_6"} : i1
    %331 = comb.and bin %329, %330 {sv.namehint = "_pstore_drain_T_7"} : i1
    %332 = comb.or bin %331, %pstore2_valid {sv.namehint = "_pstore_drain_T_8"} : i1
    %333 = comb.or bin %316, %132, %pstore_drain_on_miss_REG {sv.namehint = "_dataArb_io_in_0_valid_T_9"} : i1
    %334 = comb.and bin %332, %333 {sv.namehint = "_pstore_drain_T_10"} : i1
    %335 = comb.or bin %323, %334 {sv.namehint = "pstore_drain"} : i1
    %336 = comb.and bin %305, %306 {sv.namehint = "_pstore1_held_T_2"} : i1
    %337 = comb.or bin %336, %pstore1_held {sv.namehint = "_pstore1_held_T_7"} : i1
    %338 = comb.xor bin %335, %true {sv.namehint = "_pstore2_valid_T"} : i1
    %339 = comb.and bin %337, %pstore2_valid, %338 {sv.namehint = "_pstore1_held_T_10"} : i1
    %340 = comb.icmp bin eq %pstore2_valid, %335 {sv.namehint = "_advance_pstore1_T_1"} : i1
    %341 = comb.and bin %320, %340 {sv.namehint = "advance_pstore1"} : i1
    %342 = comb.and bin %pstore2_valid, %338 {sv.namehint = "_pstore2_valid_T_1"} : i1
    %343 = comb.or bin %342, %341 {sv.namehint = "_pstore2_valid_T_2"} : i1
    %pstore2_addr = seq.firreg %344 clock %clock {firrtl.random_init_start = 1208 : ui64} : i34
    %344 = comb.mux bin %341, %pstore1_addr, %pstore2_addr : i34
    %345 = comb.extract %amoalus_0.io_out from 0 {sv.namehint = "_pstore2_storegen_data_T"} : (i64) -> i8
    %pstore2_storegen_data_r = seq.firreg %346 clock %clock {firrtl.random_init_start = 1243 : ui64} : i8
    %346 = comb.mux bin %341, %345, %pstore2_storegen_data_r : i8
    %347 = comb.extract %amoalus_0.io_out from 8 {sv.namehint = "_pstore2_storegen_data_T_4"} : (i64) -> i8
    %pstore2_storegen_data_r_1 = seq.firreg %348 clock %clock {firrtl.random_init_start = 1251 : ui64} : i8
    %348 = comb.mux bin %341, %347, %pstore2_storegen_data_r_1 : i8
    %349 = comb.extract %amoalus_0.io_out from 16 {sv.namehint = "_pstore2_storegen_data_T_8"} : (i64) -> i8
    %pstore2_storegen_data_r_2 = seq.firreg %350 clock %clock {firrtl.random_init_start = 1259 : ui64} : i8
    %350 = comb.mux bin %341, %349, %pstore2_storegen_data_r_2 : i8
    %351 = comb.extract %amoalus_0.io_out from 24 {sv.namehint = "_pstore2_storegen_data_T_12"} : (i64) -> i8
    %pstore2_storegen_data_r_3 = seq.firreg %352 clock %clock {firrtl.random_init_start = 1267 : ui64} : i8
    %352 = comb.mux bin %341, %351, %pstore2_storegen_data_r_3 : i8
    %353 = comb.extract %amoalus_0.io_out from 32 {sv.namehint = "_pstore2_storegen_data_T_16"} : (i64) -> i8
    %pstore2_storegen_data_r_4 = seq.firreg %354 clock %clock {firrtl.random_init_start = 1275 : ui64} : i8
    %354 = comb.mux bin %341, %353, %pstore2_storegen_data_r_4 : i8
    %355 = comb.extract %amoalus_0.io_out from 40 {sv.namehint = "_pstore2_storegen_data_T_20"} : (i64) -> i8
    %pstore2_storegen_data_r_5 = seq.firreg %356 clock %clock {firrtl.random_init_start = 1283 : ui64} : i8
    %356 = comb.mux bin %341, %355, %pstore2_storegen_data_r_5 : i8
    %357 = comb.extract %amoalus_0.io_out from 48 {sv.namehint = "_pstore2_storegen_data_T_24"} : (i64) -> i8
    %pstore2_storegen_data_r_6 = seq.firreg %358 clock %clock {firrtl.random_init_start = 1291 : ui64} : i8
    %358 = comb.mux bin %341, %357, %pstore2_storegen_data_r_6 : i8
    %359 = comb.extract %amoalus_0.io_out from 56 {sv.namehint = "_pstore2_storegen_data_T_28"} : (i64) -> i8
    %pstore2_storegen_data_r_7 = seq.firreg %360 clock %clock {firrtl.random_init_start = 1299 : ui64} : i8
    %360 = comb.mux bin %341, %359, %pstore2_storegen_data_r_7 : i8
    %361 = comb.concat %pstore2_storegen_data_r_7, %pstore2_storegen_data_r_6, %pstore2_storegen_data_r_5, %pstore2_storegen_data_r_4, %pstore2_storegen_data_r_3, %pstore2_storegen_data_r_2, %pstore2_storegen_data_r_1, %pstore2_storegen_data_r {sv.namehint = "pstore2_storegen_data"} : i8, i8, i8, i8, i8, i8, i8, i8
    %pstore2_storegen_mask = seq.firreg %362 clock %clock {firrtl.random_init_start = 1307 : ui64} : i8
    %362 = comb.mux bin %341, %pstore1_mask, %pstore2_storegen_mask : i8
    %363 = comb.or bin %324, %pstore1_held {sv.namehint = "_dataArb_io_in_0_valid_T_5"} : i1
    %364 = comb.and bin %363, %330 {sv.namehint = "_dataArb_io_in_0_valid_T_7"} : i1
    %365 = comb.or bin %364, %pstore2_valid {sv.namehint = "_dataArb_io_in_0_valid_T_8"} : i1
    %366 = comb.and bin %365, %333 {sv.namehint = "_dataArb_io_in_0_valid_T_10"} : i1
    %367 = comb.or bin %323, %366 {sv.namehint = "dataArb.io_in_0_valid"} : i1
    %368 = comb.extract %pstore2_addr from 0 : (i34) -> i12
    %369 = comb.extract %pstore1_addr from 0 : (i34) -> i12
    %370 = comb.mux bin %pstore2_valid, %368, %369 {sv.namehint = "_dataArb_io_in_0_bits_wordMask_wordMask_T"} : i12
    %371 = comb.mux bin %pstore2_valid, %361, %pstore1_data {sv.namehint = "dataArb.io_in_0_bits_wdata"} : i64
    %372 = comb.mux bin %pstore2_valid, %pstore2_storegen_mask, %pstore1_mask {sv.namehint = "dataArb.io_in_0_bits_eccMask"} : i8
    %373 = comb.extract %pstore1_addr from 3 {sv.namehint = "_s1_hazard_T"} : (i34) -> i9
    %374 = comb.extract %s1_vaddr from 3 {sv.namehint = "_s1_hazard_T_63"} : (i34) -> i9
    %375 = comb.icmp bin eq %373, %374 {sv.namehint = "_s1_hazard_T_2"} : i9
    %376 = comb.and bin %pstore1_mask, %123 {sv.namehint = "_s1_hazard_T_55"} : i8
    %377 = comb.icmp bin ne %376, %c0_i8 {sv.namehint = "_s1_hazard_T_56"} : i8
    %378 = comb.and bin %pstore1_mask, %123 {sv.namehint = "_s1_hazard_T_57"} : i8
    %379 = comb.icmp bin ne %378, %c0_i8 {sv.namehint = "_s1_hazard_T_58"} : i8
    %380 = comb.mux bin %43, %377, %379 {sv.namehint = "_s1_hazard_T_59"} : i1
    %381 = comb.and bin %318, %375, %380 {sv.namehint = "_s1_hazard_T_61"} : i1
    %382 = comb.extract %pstore2_addr from 3 {sv.namehint = "_s1_hazard_T_62"} : (i34) -> i9
    %383 = comb.icmp bin eq %382, %374 {sv.namehint = "_s1_hazard_T_64"} : i9
    %384 = comb.and bin %pstore2_storegen_mask, %123 {sv.namehint = "_s1_hazard_T_117"} : i8
    %385 = comb.icmp bin ne %384, %c0_i8 {sv.namehint = "_s1_hazard_T_118"} : i8
    %386 = comb.and bin %pstore2_storegen_mask, %123 {sv.namehint = "_s1_hazard_T_119"} : i8
    %387 = comb.icmp bin ne %386, %c0_i8 {sv.namehint = "_s1_hazard_T_120"} : i8
    %388 = comb.mux bin %43, %385, %387 {sv.namehint = "_s1_hazard_T_121"} : i1
    %389 = comb.and bin %pstore2_valid, %383, %388 {sv.namehint = "_s1_hazard_T_123"} : i1
    %390 = comb.or bin %381, %389 {sv.namehint = "s1_hazard"} : i1
    %391 = comb.and bin %s1_valid, %40, %390 : i1
    %392 = comb.or bin %391, %270 : i1
    %393 = comb.concat %c0_i2, %s2_req_size {sv.namehint = "put_size"} : i2, i2
    %394 = comb.extract %s2_req_addr from 0 {sv.namehint = "put_address"} : (i34) -> i32
    %395 = comb.shl bin %c1_i4, %393 {sv.namehint = "_get_a_mask_sizeOH_T_1"} : i4
    %396 = comb.icmp bin eq %s2_req_size, %c-1_i2 {sv.namehint = "_atomics_a_mask_T_16"} : i2
    %397 = comb.extract %395 from 2 {sv.namehint = "get_a_mask_size"} : (i4) -> i1
    %398 = comb.extract %s2_req_addr from 2 {sv.namehint = "get_a_mask_bit"} : (i34) -> i1
    %399 = comb.xor bin %398, %true {sv.namehint = "get_a_mask_eq"} : i1
    %400 = comb.and bin %397, %399 {sv.namehint = "_get_a_mask_acc_T"} : i1
    %401 = comb.or bin %396, %400 {sv.namehint = "get_a_mask_acc"} : i1
    %402 = comb.and bin %397, %398 {sv.namehint = "_get_a_mask_acc_T_1"} : i1
    %403 = comb.or bin %396, %402 {sv.namehint = "get_a_mask_acc_1"} : i1
    %404 = comb.extract %395 from 1 {sv.namehint = "get_a_mask_size_1"} : (i4) -> i1
    %405 = comb.extract %s2_req_addr from 1 {sv.namehint = "get_a_mask_bit_1"} : (i34) -> i1
    %406 = comb.xor bin %405, %true {sv.namehint = "get_a_mask_nbit_1"} : i1
    %407 = comb.and bin %399, %406 {sv.namehint = "get_a_mask_eq_2"} : i1
    %408 = comb.and bin %404, %407 {sv.namehint = "_get_a_mask_acc_T_2"} : i1
    %409 = comb.or bin %401, %408 {sv.namehint = "get_a_mask_acc_2"} : i1
    %410 = comb.and bin %399, %405 {sv.namehint = "get_a_mask_eq_3"} : i1
    %411 = comb.and bin %404, %410 {sv.namehint = "_get_a_mask_acc_T_3"} : i1
    %412 = comb.or bin %401, %411 {sv.namehint = "get_a_mask_acc_3"} : i1
    %413 = comb.and bin %398, %406 {sv.namehint = "get_a_mask_eq_4"} : i1
    %414 = comb.and bin %404, %413 {sv.namehint = "_get_a_mask_acc_T_4"} : i1
    %415 = comb.or bin %403, %414 {sv.namehint = "get_a_mask_acc_4"} : i1
    %416 = comb.and bin %398, %405 {sv.namehint = "get_a_mask_eq_5"} : i1
    %417 = comb.and bin %404, %416 {sv.namehint = "_get_a_mask_acc_T_5"} : i1
    %418 = comb.or bin %403, %417 {sv.namehint = "get_a_mask_acc_5"} : i1
    %419 = comb.extract %s2_req_addr from 0 {sv.namehint = "get_a_mask_bit_2"} : (i34) -> i1
    %420 = comb.xor bin %419, %true {sv.namehint = "get_a_mask_nbit_2"} : i1
    %421 = comb.and bin %407, %420 {sv.namehint = "get_a_mask_eq_6"} : i1
    %422 = comb.or bin %409, %421 {sv.namehint = "get_a_mask_acc_6"} : i1
    %423 = comb.and bin %407, %419 {sv.namehint = "get_a_mask_eq_7"} : i1
    %424 = comb.or bin %409, %423 {sv.namehint = "get_a_mask_acc_7"} : i1
    %425 = comb.and bin %410, %420 {sv.namehint = "get_a_mask_eq_8"} : i1
    %426 = comb.or bin %412, %425 {sv.namehint = "get_a_mask_acc_8"} : i1
    %427 = comb.and bin %410, %419 {sv.namehint = "get_a_mask_eq_9"} : i1
    %428 = comb.or bin %412, %427 {sv.namehint = "get_a_mask_acc_9"} : i1
    %429 = comb.and bin %413, %420 {sv.namehint = "get_a_mask_eq_10"} : i1
    %430 = comb.or bin %415, %429 {sv.namehint = "get_a_mask_acc_10"} : i1
    %431 = comb.and bin %413, %419 {sv.namehint = "get_a_mask_eq_11"} : i1
    %432 = comb.or bin %415, %431 {sv.namehint = "get_a_mask_acc_11"} : i1
    %433 = comb.and bin %416, %420 {sv.namehint = "get_a_mask_eq_12"} : i1
    %434 = comb.or bin %418, %433 {sv.namehint = "get_a_mask_acc_12"} : i1
    %435 = comb.and bin %416, %419 {sv.namehint = "get_a_mask_eq_13"} : i1
    %436 = comb.or bin %418, %435 {sv.namehint = "get_a_mask_acc_13"} : i1
    %437 = comb.concat %436, %434, %432, %430, %428, %426, %424, %422 {sv.namehint = "get_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %438 = comb.shl bin %c1_i4, %393 {sv.namehint = "_put_a_mask_sizeOH_T_1"} : i4
    %439 = comb.extract %438 from 2 {sv.namehint = "put_a_mask_size"} : (i4) -> i1
    %440 = comb.xor bin %398, %true {sv.namehint = "put_a_mask_eq"} : i1
    %441 = comb.and bin %439, %440 {sv.namehint = "_put_a_mask_acc_T"} : i1
    %442 = comb.or bin %396, %441 {sv.namehint = "put_a_mask_acc"} : i1
    %443 = comb.and bin %439, %398 {sv.namehint = "_put_a_mask_acc_T_1"} : i1
    %444 = comb.or bin %396, %443 {sv.namehint = "put_a_mask_acc_1"} : i1
    %445 = comb.extract %438 from 1 {sv.namehint = "put_a_mask_size_1"} : (i4) -> i1
    %446 = comb.xor bin %405, %true {sv.namehint = "put_a_mask_nbit_1"} : i1
    %447 = comb.and bin %440, %446 {sv.namehint = "put_a_mask_eq_2"} : i1
    %448 = comb.and bin %445, %447 {sv.namehint = "_put_a_mask_acc_T_2"} : i1
    %449 = comb.or bin %442, %448 {sv.namehint = "put_a_mask_acc_2"} : i1
    %450 = comb.and bin %440, %405 {sv.namehint = "put_a_mask_eq_3"} : i1
    %451 = comb.and bin %445, %450 {sv.namehint = "_put_a_mask_acc_T_3"} : i1
    %452 = comb.or bin %442, %451 {sv.namehint = "put_a_mask_acc_3"} : i1
    %453 = comb.and bin %398, %446 {sv.namehint = "put_a_mask_eq_4"} : i1
    %454 = comb.and bin %445, %453 {sv.namehint = "_put_a_mask_acc_T_4"} : i1
    %455 = comb.or bin %444, %454 {sv.namehint = "put_a_mask_acc_4"} : i1
    %456 = comb.and bin %398, %405 {sv.namehint = "put_a_mask_eq_5"} : i1
    %457 = comb.and bin %445, %456 {sv.namehint = "_put_a_mask_acc_T_5"} : i1
    %458 = comb.or bin %444, %457 {sv.namehint = "put_a_mask_acc_5"} : i1
    %459 = comb.xor bin %419, %true {sv.namehint = "put_a_mask_nbit_2"} : i1
    %460 = comb.and bin %447, %459 {sv.namehint = "put_a_mask_eq_6"} : i1
    %461 = comb.or bin %449, %460 {sv.namehint = "put_a_mask_acc_6"} : i1
    %462 = comb.and bin %447, %419 {sv.namehint = "put_a_mask_eq_7"} : i1
    %463 = comb.or bin %449, %462 {sv.namehint = "put_a_mask_acc_7"} : i1
    %464 = comb.and bin %450, %459 {sv.namehint = "put_a_mask_eq_8"} : i1
    %465 = comb.or bin %452, %464 {sv.namehint = "put_a_mask_acc_8"} : i1
    %466 = comb.and bin %450, %419 {sv.namehint = "put_a_mask_eq_9"} : i1
    %467 = comb.or bin %452, %466 {sv.namehint = "put_a_mask_acc_9"} : i1
    %468 = comb.and bin %453, %459 {sv.namehint = "put_a_mask_eq_10"} : i1
    %469 = comb.or bin %455, %468 {sv.namehint = "put_a_mask_acc_10"} : i1
    %470 = comb.and bin %453, %419 {sv.namehint = "put_a_mask_eq_11"} : i1
    %471 = comb.or bin %455, %470 {sv.namehint = "put_a_mask_acc_11"} : i1
    %472 = comb.and bin %456, %459 {sv.namehint = "put_a_mask_eq_12"} : i1
    %473 = comb.or bin %458, %472 {sv.namehint = "put_a_mask_acc_12"} : i1
    %474 = comb.and bin %456, %419 {sv.namehint = "put_a_mask_eq_13"} : i1
    %475 = comb.or bin %458, %474 {sv.namehint = "put_a_mask_acc_13"} : i1
    %476 = comb.concat %475, %473, %471, %469, %467, %465, %463, %461 {sv.namehint = "put_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %477 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_1"} : i4
    %478 = comb.extract %477 from 2 {sv.namehint = "atomics_a_mask_size"} : (i4) -> i1
    %479 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq"} : i1
    %480 = comb.and bin %478, %479 {sv.namehint = "_atomics_a_mask_acc_T"} : i1
    %481 = comb.or bin %396, %480 {sv.namehint = "atomics_a_mask_acc"} : i1
    %482 = comb.and bin %478, %398 {sv.namehint = "_atomics_a_mask_acc_T_1"} : i1
    %483 = comb.or bin %396, %482 {sv.namehint = "atomics_a_mask_acc_1"} : i1
    %484 = comb.extract %477 from 1 {sv.namehint = "atomics_a_mask_size_1"} : (i4) -> i1
    %485 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_1"} : i1
    %486 = comb.and bin %479, %485 {sv.namehint = "atomics_a_mask_eq_2"} : i1
    %487 = comb.and bin %484, %486 {sv.namehint = "_atomics_a_mask_acc_T_2"} : i1
    %488 = comb.or bin %481, %487 {sv.namehint = "atomics_a_mask_acc_2"} : i1
    %489 = comb.and bin %479, %405 {sv.namehint = "atomics_a_mask_eq_3"} : i1
    %490 = comb.and bin %484, %489 {sv.namehint = "_atomics_a_mask_acc_T_3"} : i1
    %491 = comb.or bin %481, %490 {sv.namehint = "atomics_a_mask_acc_3"} : i1
    %492 = comb.and bin %398, %485 {sv.namehint = "atomics_a_mask_eq_4"} : i1
    %493 = comb.and bin %484, %492 {sv.namehint = "_atomics_a_mask_acc_T_4"} : i1
    %494 = comb.or bin %483, %493 {sv.namehint = "atomics_a_mask_acc_4"} : i1
    %495 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_5"} : i1
    %496 = comb.and bin %484, %495 {sv.namehint = "_atomics_a_mask_acc_T_5"} : i1
    %497 = comb.or bin %483, %496 {sv.namehint = "atomics_a_mask_acc_5"} : i1
    %498 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_2"} : i1
    %499 = comb.and bin %486, %498 {sv.namehint = "atomics_a_mask_eq_6"} : i1
    %500 = comb.or bin %488, %499 {sv.namehint = "atomics_a_mask_acc_6"} : i1
    %501 = comb.and bin %486, %419 {sv.namehint = "atomics_a_mask_eq_7"} : i1
    %502 = comb.or bin %488, %501 {sv.namehint = "atomics_a_mask_acc_7"} : i1
    %503 = comb.and bin %489, %498 {sv.namehint = "atomics_a_mask_eq_8"} : i1
    %504 = comb.or bin %491, %503 {sv.namehint = "atomics_a_mask_acc_8"} : i1
    %505 = comb.and bin %489, %419 {sv.namehint = "atomics_a_mask_eq_9"} : i1
    %506 = comb.or bin %491, %505 {sv.namehint = "atomics_a_mask_acc_9"} : i1
    %507 = comb.and bin %492, %498 {sv.namehint = "atomics_a_mask_eq_10"} : i1
    %508 = comb.or bin %494, %507 {sv.namehint = "atomics_a_mask_acc_10"} : i1
    %509 = comb.and bin %492, %419 {sv.namehint = "atomics_a_mask_eq_11"} : i1
    %510 = comb.or bin %494, %509 {sv.namehint = "atomics_a_mask_acc_11"} : i1
    %511 = comb.and bin %495, %498 {sv.namehint = "atomics_a_mask_eq_12"} : i1
    %512 = comb.or bin %497, %511 {sv.namehint = "atomics_a_mask_acc_12"} : i1
    %513 = comb.and bin %495, %419 {sv.namehint = "atomics_a_mask_eq_13"} : i1
    %514 = comb.or bin %497, %513 {sv.namehint = "atomics_a_mask_acc_13"} : i1
    %515 = comb.concat %514, %512, %510, %508, %506, %504, %502, %500 {sv.namehint = "atomics_a_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %516 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_4"} : i4
    %517 = comb.extract %516 from 2 {sv.namehint = "atomics_a_mask_size_3"} : (i4) -> i1
    %518 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_14"} : i1
    %519 = comb.and bin %517, %518 {sv.namehint = "_atomics_a_mask_acc_T_14"} : i1
    %520 = comb.or bin %396, %519 {sv.namehint = "atomics_a_mask_acc_14"} : i1
    %521 = comb.and bin %517, %398 {sv.namehint = "_atomics_a_mask_acc_T_15"} : i1
    %522 = comb.or bin %396, %521 {sv.namehint = "atomics_a_mask_acc_15"} : i1
    %523 = comb.extract %516 from 1 {sv.namehint = "atomics_a_mask_size_4"} : (i4) -> i1
    %524 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_4"} : i1
    %525 = comb.and bin %518, %524 {sv.namehint = "atomics_a_mask_eq_16"} : i1
    %526 = comb.and bin %523, %525 {sv.namehint = "_atomics_a_mask_acc_T_16"} : i1
    %527 = comb.or bin %520, %526 {sv.namehint = "atomics_a_mask_acc_16"} : i1
    %528 = comb.and bin %518, %405 {sv.namehint = "atomics_a_mask_eq_17"} : i1
    %529 = comb.and bin %523, %528 {sv.namehint = "_atomics_a_mask_acc_T_17"} : i1
    %530 = comb.or bin %520, %529 {sv.namehint = "atomics_a_mask_acc_17"} : i1
    %531 = comb.and bin %398, %524 {sv.namehint = "atomics_a_mask_eq_18"} : i1
    %532 = comb.and bin %523, %531 {sv.namehint = "_atomics_a_mask_acc_T_18"} : i1
    %533 = comb.or bin %522, %532 {sv.namehint = "atomics_a_mask_acc_18"} : i1
    %534 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_19"} : i1
    %535 = comb.and bin %523, %534 {sv.namehint = "_atomics_a_mask_acc_T_19"} : i1
    %536 = comb.or bin %522, %535 {sv.namehint = "atomics_a_mask_acc_19"} : i1
    %537 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_5"} : i1
    %538 = comb.and bin %525, %537 {sv.namehint = "atomics_a_mask_eq_20"} : i1
    %539 = comb.or bin %527, %538 {sv.namehint = "atomics_a_mask_acc_20"} : i1
    %540 = comb.and bin %525, %419 {sv.namehint = "atomics_a_mask_eq_21"} : i1
    %541 = comb.or bin %527, %540 {sv.namehint = "atomics_a_mask_acc_21"} : i1
    %542 = comb.and bin %528, %537 {sv.namehint = "atomics_a_mask_eq_22"} : i1
    %543 = comb.or bin %530, %542 {sv.namehint = "atomics_a_mask_acc_22"} : i1
    %544 = comb.and bin %528, %419 {sv.namehint = "atomics_a_mask_eq_23"} : i1
    %545 = comb.or bin %530, %544 {sv.namehint = "atomics_a_mask_acc_23"} : i1
    %546 = comb.and bin %531, %537 {sv.namehint = "atomics_a_mask_eq_24"} : i1
    %547 = comb.or bin %533, %546 {sv.namehint = "atomics_a_mask_acc_24"} : i1
    %548 = comb.and bin %531, %419 {sv.namehint = "atomics_a_mask_eq_25"} : i1
    %549 = comb.or bin %533, %548 {sv.namehint = "atomics_a_mask_acc_25"} : i1
    %550 = comb.and bin %534, %537 {sv.namehint = "atomics_a_mask_eq_26"} : i1
    %551 = comb.or bin %536, %550 {sv.namehint = "atomics_a_mask_acc_26"} : i1
    %552 = comb.and bin %534, %419 {sv.namehint = "atomics_a_mask_eq_27"} : i1
    %553 = comb.or bin %536, %552 {sv.namehint = "atomics_a_mask_acc_27"} : i1
    %554 = comb.concat %553, %551, %549, %547, %545, %543, %541, %539 {sv.namehint = "atomics_a_1_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %555 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_7"} : i4
    %556 = comb.extract %555 from 2 {sv.namehint = "atomics_a_mask_size_6"} : (i4) -> i1
    %557 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_28"} : i1
    %558 = comb.and bin %556, %557 {sv.namehint = "_atomics_a_mask_acc_T_28"} : i1
    %559 = comb.or bin %396, %558 {sv.namehint = "atomics_a_mask_acc_28"} : i1
    %560 = comb.and bin %556, %398 {sv.namehint = "_atomics_a_mask_acc_T_29"} : i1
    %561 = comb.or bin %396, %560 {sv.namehint = "atomics_a_mask_acc_29"} : i1
    %562 = comb.extract %555 from 1 {sv.namehint = "atomics_a_mask_size_7"} : (i4) -> i1
    %563 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_7"} : i1
    %564 = comb.and bin %557, %563 {sv.namehint = "atomics_a_mask_eq_30"} : i1
    %565 = comb.and bin %562, %564 {sv.namehint = "_atomics_a_mask_acc_T_30"} : i1
    %566 = comb.or bin %559, %565 {sv.namehint = "atomics_a_mask_acc_30"} : i1
    %567 = comb.and bin %557, %405 {sv.namehint = "atomics_a_mask_eq_31"} : i1
    %568 = comb.and bin %562, %567 {sv.namehint = "_atomics_a_mask_acc_T_31"} : i1
    %569 = comb.or bin %559, %568 {sv.namehint = "atomics_a_mask_acc_31"} : i1
    %570 = comb.and bin %398, %563 {sv.namehint = "atomics_a_mask_eq_32"} : i1
    %571 = comb.and bin %562, %570 {sv.namehint = "_atomics_a_mask_acc_T_32"} : i1
    %572 = comb.or bin %561, %571 {sv.namehint = "atomics_a_mask_acc_32"} : i1
    %573 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_33"} : i1
    %574 = comb.and bin %562, %573 {sv.namehint = "_atomics_a_mask_acc_T_33"} : i1
    %575 = comb.or bin %561, %574 {sv.namehint = "atomics_a_mask_acc_33"} : i1
    %576 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_8"} : i1
    %577 = comb.and bin %564, %576 {sv.namehint = "atomics_a_mask_eq_34"} : i1
    %578 = comb.or bin %566, %577 {sv.namehint = "atomics_a_mask_acc_34"} : i1
    %579 = comb.and bin %564, %419 {sv.namehint = "atomics_a_mask_eq_35"} : i1
    %580 = comb.or bin %566, %579 {sv.namehint = "atomics_a_mask_acc_35"} : i1
    %581 = comb.and bin %567, %576 {sv.namehint = "atomics_a_mask_eq_36"} : i1
    %582 = comb.or bin %569, %581 {sv.namehint = "atomics_a_mask_acc_36"} : i1
    %583 = comb.and bin %567, %419 {sv.namehint = "atomics_a_mask_eq_37"} : i1
    %584 = comb.or bin %569, %583 {sv.namehint = "atomics_a_mask_acc_37"} : i1
    %585 = comb.and bin %570, %576 {sv.namehint = "atomics_a_mask_eq_38"} : i1
    %586 = comb.or bin %572, %585 {sv.namehint = "atomics_a_mask_acc_38"} : i1
    %587 = comb.and bin %570, %419 {sv.namehint = "atomics_a_mask_eq_39"} : i1
    %588 = comb.or bin %572, %587 {sv.namehint = "atomics_a_mask_acc_39"} : i1
    %589 = comb.and bin %573, %576 {sv.namehint = "atomics_a_mask_eq_40"} : i1
    %590 = comb.or bin %575, %589 {sv.namehint = "atomics_a_mask_acc_40"} : i1
    %591 = comb.and bin %573, %419 {sv.namehint = "atomics_a_mask_eq_41"} : i1
    %592 = comb.or bin %575, %591 {sv.namehint = "atomics_a_mask_acc_41"} : i1
    %593 = comb.concat %592, %590, %588, %586, %584, %582, %580, %578 {sv.namehint = "atomics_a_2_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %594 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_10"} : i4
    %595 = comb.extract %594 from 2 {sv.namehint = "atomics_a_mask_size_9"} : (i4) -> i1
    %596 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_42"} : i1
    %597 = comb.and bin %595, %596 {sv.namehint = "_atomics_a_mask_acc_T_42"} : i1
    %598 = comb.or bin %396, %597 {sv.namehint = "atomics_a_mask_acc_42"} : i1
    %599 = comb.and bin %595, %398 {sv.namehint = "_atomics_a_mask_acc_T_43"} : i1
    %600 = comb.or bin %396, %599 {sv.namehint = "atomics_a_mask_acc_43"} : i1
    %601 = comb.extract %594 from 1 {sv.namehint = "atomics_a_mask_size_10"} : (i4) -> i1
    %602 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_10"} : i1
    %603 = comb.and bin %596, %602 {sv.namehint = "atomics_a_mask_eq_44"} : i1
    %604 = comb.and bin %601, %603 {sv.namehint = "_atomics_a_mask_acc_T_44"} : i1
    %605 = comb.or bin %598, %604 {sv.namehint = "atomics_a_mask_acc_44"} : i1
    %606 = comb.and bin %596, %405 {sv.namehint = "atomics_a_mask_eq_45"} : i1
    %607 = comb.and bin %601, %606 {sv.namehint = "_atomics_a_mask_acc_T_45"} : i1
    %608 = comb.or bin %598, %607 {sv.namehint = "atomics_a_mask_acc_45"} : i1
    %609 = comb.and bin %398, %602 {sv.namehint = "atomics_a_mask_eq_46"} : i1
    %610 = comb.and bin %601, %609 {sv.namehint = "_atomics_a_mask_acc_T_46"} : i1
    %611 = comb.or bin %600, %610 {sv.namehint = "atomics_a_mask_acc_46"} : i1
    %612 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_47"} : i1
    %613 = comb.and bin %601, %612 {sv.namehint = "_atomics_a_mask_acc_T_47"} : i1
    %614 = comb.or bin %600, %613 {sv.namehint = "atomics_a_mask_acc_47"} : i1
    %615 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_11"} : i1
    %616 = comb.and bin %603, %615 {sv.namehint = "atomics_a_mask_eq_48"} : i1
    %617 = comb.or bin %605, %616 {sv.namehint = "atomics_a_mask_acc_48"} : i1
    %618 = comb.and bin %603, %419 {sv.namehint = "atomics_a_mask_eq_49"} : i1
    %619 = comb.or bin %605, %618 {sv.namehint = "atomics_a_mask_acc_49"} : i1
    %620 = comb.and bin %606, %615 {sv.namehint = "atomics_a_mask_eq_50"} : i1
    %621 = comb.or bin %608, %620 {sv.namehint = "atomics_a_mask_acc_50"} : i1
    %622 = comb.and bin %606, %419 {sv.namehint = "atomics_a_mask_eq_51"} : i1
    %623 = comb.or bin %608, %622 {sv.namehint = "atomics_a_mask_acc_51"} : i1
    %624 = comb.and bin %609, %615 {sv.namehint = "atomics_a_mask_eq_52"} : i1
    %625 = comb.or bin %611, %624 {sv.namehint = "atomics_a_mask_acc_52"} : i1
    %626 = comb.and bin %609, %419 {sv.namehint = "atomics_a_mask_eq_53"} : i1
    %627 = comb.or bin %611, %626 {sv.namehint = "atomics_a_mask_acc_53"} : i1
    %628 = comb.and bin %612, %615 {sv.namehint = "atomics_a_mask_eq_54"} : i1
    %629 = comb.or bin %614, %628 {sv.namehint = "atomics_a_mask_acc_54"} : i1
    %630 = comb.and bin %612, %419 {sv.namehint = "atomics_a_mask_eq_55"} : i1
    %631 = comb.or bin %614, %630 {sv.namehint = "atomics_a_mask_acc_55"} : i1
    %632 = comb.concat %631, %629, %627, %625, %623, %621, %619, %617 {sv.namehint = "atomics_a_3_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %633 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_13"} : i4
    %634 = comb.extract %633 from 2 {sv.namehint = "atomics_a_mask_size_12"} : (i4) -> i1
    %635 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_56"} : i1
    %636 = comb.and bin %634, %635 {sv.namehint = "_atomics_a_mask_acc_T_56"} : i1
    %637 = comb.or bin %396, %636 {sv.namehint = "atomics_a_mask_acc_56"} : i1
    %638 = comb.and bin %634, %398 {sv.namehint = "_atomics_a_mask_acc_T_57"} : i1
    %639 = comb.or bin %396, %638 {sv.namehint = "atomics_a_mask_acc_57"} : i1
    %640 = comb.extract %633 from 1 {sv.namehint = "atomics_a_mask_size_13"} : (i4) -> i1
    %641 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_13"} : i1
    %642 = comb.and bin %635, %641 {sv.namehint = "atomics_a_mask_eq_58"} : i1
    %643 = comb.and bin %640, %642 {sv.namehint = "_atomics_a_mask_acc_T_58"} : i1
    %644 = comb.or bin %637, %643 {sv.namehint = "atomics_a_mask_acc_58"} : i1
    %645 = comb.and bin %635, %405 {sv.namehint = "atomics_a_mask_eq_59"} : i1
    %646 = comb.and bin %640, %645 {sv.namehint = "_atomics_a_mask_acc_T_59"} : i1
    %647 = comb.or bin %637, %646 {sv.namehint = "atomics_a_mask_acc_59"} : i1
    %648 = comb.and bin %398, %641 {sv.namehint = "atomics_a_mask_eq_60"} : i1
    %649 = comb.and bin %640, %648 {sv.namehint = "_atomics_a_mask_acc_T_60"} : i1
    %650 = comb.or bin %639, %649 {sv.namehint = "atomics_a_mask_acc_60"} : i1
    %651 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_61"} : i1
    %652 = comb.and bin %640, %651 {sv.namehint = "_atomics_a_mask_acc_T_61"} : i1
    %653 = comb.or bin %639, %652 {sv.namehint = "atomics_a_mask_acc_61"} : i1
    %654 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_14"} : i1
    %655 = comb.and bin %642, %654 {sv.namehint = "atomics_a_mask_eq_62"} : i1
    %656 = comb.or bin %644, %655 {sv.namehint = "atomics_a_mask_acc_62"} : i1
    %657 = comb.and bin %642, %419 {sv.namehint = "atomics_a_mask_eq_63"} : i1
    %658 = comb.or bin %644, %657 {sv.namehint = "atomics_a_mask_acc_63"} : i1
    %659 = comb.and bin %645, %654 {sv.namehint = "atomics_a_mask_eq_64"} : i1
    %660 = comb.or bin %647, %659 {sv.namehint = "atomics_a_mask_acc_64"} : i1
    %661 = comb.and bin %645, %419 {sv.namehint = "atomics_a_mask_eq_65"} : i1
    %662 = comb.or bin %647, %661 {sv.namehint = "atomics_a_mask_acc_65"} : i1
    %663 = comb.and bin %648, %654 {sv.namehint = "atomics_a_mask_eq_66"} : i1
    %664 = comb.or bin %650, %663 {sv.namehint = "atomics_a_mask_acc_66"} : i1
    %665 = comb.and bin %648, %419 {sv.namehint = "atomics_a_mask_eq_67"} : i1
    %666 = comb.or bin %650, %665 {sv.namehint = "atomics_a_mask_acc_67"} : i1
    %667 = comb.and bin %651, %654 {sv.namehint = "atomics_a_mask_eq_68"} : i1
    %668 = comb.or bin %653, %667 {sv.namehint = "atomics_a_mask_acc_68"} : i1
    %669 = comb.and bin %651, %419 {sv.namehint = "atomics_a_mask_eq_69"} : i1
    %670 = comb.or bin %653, %669 {sv.namehint = "atomics_a_mask_acc_69"} : i1
    %671 = comb.concat %670, %668, %666, %664, %662, %660, %658, %656 {sv.namehint = "atomics_a_4_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %672 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_16"} : i4
    %673 = comb.extract %672 from 2 {sv.namehint = "atomics_a_mask_size_15"} : (i4) -> i1
    %674 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_70"} : i1
    %675 = comb.and bin %673, %674 {sv.namehint = "_atomics_a_mask_acc_T_70"} : i1
    %676 = comb.or bin %396, %675 {sv.namehint = "atomics_a_mask_acc_70"} : i1
    %677 = comb.and bin %673, %398 {sv.namehint = "_atomics_a_mask_acc_T_71"} : i1
    %678 = comb.or bin %396, %677 {sv.namehint = "atomics_a_mask_acc_71"} : i1
    %679 = comb.extract %672 from 1 {sv.namehint = "atomics_a_mask_size_16"} : (i4) -> i1
    %680 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_16"} : i1
    %681 = comb.and bin %674, %680 {sv.namehint = "atomics_a_mask_eq_72"} : i1
    %682 = comb.and bin %679, %681 {sv.namehint = "_atomics_a_mask_acc_T_72"} : i1
    %683 = comb.or bin %676, %682 {sv.namehint = "atomics_a_mask_acc_72"} : i1
    %684 = comb.and bin %674, %405 {sv.namehint = "atomics_a_mask_eq_73"} : i1
    %685 = comb.and bin %679, %684 {sv.namehint = "_atomics_a_mask_acc_T_73"} : i1
    %686 = comb.or bin %676, %685 {sv.namehint = "atomics_a_mask_acc_73"} : i1
    %687 = comb.and bin %398, %680 {sv.namehint = "atomics_a_mask_eq_74"} : i1
    %688 = comb.and bin %679, %687 {sv.namehint = "_atomics_a_mask_acc_T_74"} : i1
    %689 = comb.or bin %678, %688 {sv.namehint = "atomics_a_mask_acc_74"} : i1
    %690 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_75"} : i1
    %691 = comb.and bin %679, %690 {sv.namehint = "_atomics_a_mask_acc_T_75"} : i1
    %692 = comb.or bin %678, %691 {sv.namehint = "atomics_a_mask_acc_75"} : i1
    %693 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_17"} : i1
    %694 = comb.and bin %681, %693 {sv.namehint = "atomics_a_mask_eq_76"} : i1
    %695 = comb.or bin %683, %694 {sv.namehint = "atomics_a_mask_acc_76"} : i1
    %696 = comb.and bin %681, %419 {sv.namehint = "atomics_a_mask_eq_77"} : i1
    %697 = comb.or bin %683, %696 {sv.namehint = "atomics_a_mask_acc_77"} : i1
    %698 = comb.and bin %684, %693 {sv.namehint = "atomics_a_mask_eq_78"} : i1
    %699 = comb.or bin %686, %698 {sv.namehint = "atomics_a_mask_acc_78"} : i1
    %700 = comb.and bin %684, %419 {sv.namehint = "atomics_a_mask_eq_79"} : i1
    %701 = comb.or bin %686, %700 {sv.namehint = "atomics_a_mask_acc_79"} : i1
    %702 = comb.and bin %687, %693 {sv.namehint = "atomics_a_mask_eq_80"} : i1
    %703 = comb.or bin %689, %702 {sv.namehint = "atomics_a_mask_acc_80"} : i1
    %704 = comb.and bin %687, %419 {sv.namehint = "atomics_a_mask_eq_81"} : i1
    %705 = comb.or bin %689, %704 {sv.namehint = "atomics_a_mask_acc_81"} : i1
    %706 = comb.and bin %690, %693 {sv.namehint = "atomics_a_mask_eq_82"} : i1
    %707 = comb.or bin %692, %706 {sv.namehint = "atomics_a_mask_acc_82"} : i1
    %708 = comb.and bin %690, %419 {sv.namehint = "atomics_a_mask_eq_83"} : i1
    %709 = comb.or bin %692, %708 {sv.namehint = "atomics_a_mask_acc_83"} : i1
    %710 = comb.concat %709, %707, %705, %703, %701, %699, %697, %695 {sv.namehint = "atomics_a_5_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %711 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_19"} : i4
    %712 = comb.extract %711 from 2 {sv.namehint = "atomics_a_mask_size_18"} : (i4) -> i1
    %713 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_84"} : i1
    %714 = comb.and bin %712, %713 {sv.namehint = "_atomics_a_mask_acc_T_84"} : i1
    %715 = comb.or bin %396, %714 {sv.namehint = "atomics_a_mask_acc_84"} : i1
    %716 = comb.and bin %712, %398 {sv.namehint = "_atomics_a_mask_acc_T_85"} : i1
    %717 = comb.or bin %396, %716 {sv.namehint = "atomics_a_mask_acc_85"} : i1
    %718 = comb.extract %711 from 1 {sv.namehint = "atomics_a_mask_size_19"} : (i4) -> i1
    %719 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_19"} : i1
    %720 = comb.and bin %713, %719 {sv.namehint = "atomics_a_mask_eq_86"} : i1
    %721 = comb.and bin %718, %720 {sv.namehint = "_atomics_a_mask_acc_T_86"} : i1
    %722 = comb.or bin %715, %721 {sv.namehint = "atomics_a_mask_acc_86"} : i1
    %723 = comb.and bin %713, %405 {sv.namehint = "atomics_a_mask_eq_87"} : i1
    %724 = comb.and bin %718, %723 {sv.namehint = "_atomics_a_mask_acc_T_87"} : i1
    %725 = comb.or bin %715, %724 {sv.namehint = "atomics_a_mask_acc_87"} : i1
    %726 = comb.and bin %398, %719 {sv.namehint = "atomics_a_mask_eq_88"} : i1
    %727 = comb.and bin %718, %726 {sv.namehint = "_atomics_a_mask_acc_T_88"} : i1
    %728 = comb.or bin %717, %727 {sv.namehint = "atomics_a_mask_acc_88"} : i1
    %729 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_89"} : i1
    %730 = comb.and bin %718, %729 {sv.namehint = "_atomics_a_mask_acc_T_89"} : i1
    %731 = comb.or bin %717, %730 {sv.namehint = "atomics_a_mask_acc_89"} : i1
    %732 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_20"} : i1
    %733 = comb.and bin %720, %732 {sv.namehint = "atomics_a_mask_eq_90"} : i1
    %734 = comb.or bin %722, %733 {sv.namehint = "atomics_a_mask_acc_90"} : i1
    %735 = comb.and bin %720, %419 {sv.namehint = "atomics_a_mask_eq_91"} : i1
    %736 = comb.or bin %722, %735 {sv.namehint = "atomics_a_mask_acc_91"} : i1
    %737 = comb.and bin %723, %732 {sv.namehint = "atomics_a_mask_eq_92"} : i1
    %738 = comb.or bin %725, %737 {sv.namehint = "atomics_a_mask_acc_92"} : i1
    %739 = comb.and bin %723, %419 {sv.namehint = "atomics_a_mask_eq_93"} : i1
    %740 = comb.or bin %725, %739 {sv.namehint = "atomics_a_mask_acc_93"} : i1
    %741 = comb.and bin %726, %732 {sv.namehint = "atomics_a_mask_eq_94"} : i1
    %742 = comb.or bin %728, %741 {sv.namehint = "atomics_a_mask_acc_94"} : i1
    %743 = comb.and bin %726, %419 {sv.namehint = "atomics_a_mask_eq_95"} : i1
    %744 = comb.or bin %728, %743 {sv.namehint = "atomics_a_mask_acc_95"} : i1
    %745 = comb.and bin %729, %732 {sv.namehint = "atomics_a_mask_eq_96"} : i1
    %746 = comb.or bin %731, %745 {sv.namehint = "atomics_a_mask_acc_96"} : i1
    %747 = comb.and bin %729, %419 {sv.namehint = "atomics_a_mask_eq_97"} : i1
    %748 = comb.or bin %731, %747 {sv.namehint = "atomics_a_mask_acc_97"} : i1
    %749 = comb.concat %748, %746, %744, %742, %740, %738, %736, %734 {sv.namehint = "atomics_a_6_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %750 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_22"} : i4
    %751 = comb.extract %750 from 2 {sv.namehint = "atomics_a_mask_size_21"} : (i4) -> i1
    %752 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_98"} : i1
    %753 = comb.and bin %751, %752 {sv.namehint = "_atomics_a_mask_acc_T_98"} : i1
    %754 = comb.or bin %396, %753 {sv.namehint = "atomics_a_mask_acc_98"} : i1
    %755 = comb.and bin %751, %398 {sv.namehint = "_atomics_a_mask_acc_T_99"} : i1
    %756 = comb.or bin %396, %755 {sv.namehint = "atomics_a_mask_acc_99"} : i1
    %757 = comb.extract %750 from 1 {sv.namehint = "atomics_a_mask_size_22"} : (i4) -> i1
    %758 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_22"} : i1
    %759 = comb.and bin %752, %758 {sv.namehint = "atomics_a_mask_eq_100"} : i1
    %760 = comb.and bin %757, %759 {sv.namehint = "_atomics_a_mask_acc_T_100"} : i1
    %761 = comb.or bin %754, %760 {sv.namehint = "atomics_a_mask_acc_100"} : i1
    %762 = comb.and bin %752, %405 {sv.namehint = "atomics_a_mask_eq_101"} : i1
    %763 = comb.and bin %757, %762 {sv.namehint = "_atomics_a_mask_acc_T_101"} : i1
    %764 = comb.or bin %754, %763 {sv.namehint = "atomics_a_mask_acc_101"} : i1
    %765 = comb.and bin %398, %758 {sv.namehint = "atomics_a_mask_eq_102"} : i1
    %766 = comb.and bin %757, %765 {sv.namehint = "_atomics_a_mask_acc_T_102"} : i1
    %767 = comb.or bin %756, %766 {sv.namehint = "atomics_a_mask_acc_102"} : i1
    %768 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_103"} : i1
    %769 = comb.and bin %757, %768 {sv.namehint = "_atomics_a_mask_acc_T_103"} : i1
    %770 = comb.or bin %756, %769 {sv.namehint = "atomics_a_mask_acc_103"} : i1
    %771 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_23"} : i1
    %772 = comb.and bin %759, %771 {sv.namehint = "atomics_a_mask_eq_104"} : i1
    %773 = comb.or bin %761, %772 {sv.namehint = "atomics_a_mask_acc_104"} : i1
    %774 = comb.and bin %759, %419 {sv.namehint = "atomics_a_mask_eq_105"} : i1
    %775 = comb.or bin %761, %774 {sv.namehint = "atomics_a_mask_acc_105"} : i1
    %776 = comb.and bin %762, %771 {sv.namehint = "atomics_a_mask_eq_106"} : i1
    %777 = comb.or bin %764, %776 {sv.namehint = "atomics_a_mask_acc_106"} : i1
    %778 = comb.and bin %762, %419 {sv.namehint = "atomics_a_mask_eq_107"} : i1
    %779 = comb.or bin %764, %778 {sv.namehint = "atomics_a_mask_acc_107"} : i1
    %780 = comb.and bin %765, %771 {sv.namehint = "atomics_a_mask_eq_108"} : i1
    %781 = comb.or bin %767, %780 {sv.namehint = "atomics_a_mask_acc_108"} : i1
    %782 = comb.and bin %765, %419 {sv.namehint = "atomics_a_mask_eq_109"} : i1
    %783 = comb.or bin %767, %782 {sv.namehint = "atomics_a_mask_acc_109"} : i1
    %784 = comb.and bin %768, %771 {sv.namehint = "atomics_a_mask_eq_110"} : i1
    %785 = comb.or bin %770, %784 {sv.namehint = "atomics_a_mask_acc_110"} : i1
    %786 = comb.and bin %768, %419 {sv.namehint = "atomics_a_mask_eq_111"} : i1
    %787 = comb.or bin %770, %786 {sv.namehint = "atomics_a_mask_acc_111"} : i1
    %788 = comb.concat %787, %785, %783, %781, %779, %777, %775, %773 {sv.namehint = "atomics_a_7_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %789 = comb.shl bin %c1_i4, %393 {sv.namehint = "_atomics_a_mask_sizeOH_T_25"} : i4
    %790 = comb.extract %789 from 2 {sv.namehint = "atomics_a_mask_size_24"} : (i4) -> i1
    %791 = comb.xor bin %398, %true {sv.namehint = "atomics_a_mask_eq_112"} : i1
    %792 = comb.and bin %790, %791 {sv.namehint = "_atomics_a_mask_acc_T_112"} : i1
    %793 = comb.or bin %396, %792 {sv.namehint = "atomics_a_mask_acc_112"} : i1
    %794 = comb.and bin %790, %398 {sv.namehint = "_atomics_a_mask_acc_T_113"} : i1
    %795 = comb.or bin %396, %794 {sv.namehint = "atomics_a_mask_acc_113"} : i1
    %796 = comb.extract %789 from 1 {sv.namehint = "atomics_a_mask_size_25"} : (i4) -> i1
    %797 = comb.xor bin %405, %true {sv.namehint = "atomics_a_mask_nbit_25"} : i1
    %798 = comb.and bin %791, %797 {sv.namehint = "atomics_a_mask_eq_114"} : i1
    %799 = comb.and bin %796, %798 {sv.namehint = "_atomics_a_mask_acc_T_114"} : i1
    %800 = comb.or bin %793, %799 {sv.namehint = "atomics_a_mask_acc_114"} : i1
    %801 = comb.and bin %791, %405 {sv.namehint = "atomics_a_mask_eq_115"} : i1
    %802 = comb.and bin %796, %801 {sv.namehint = "_atomics_a_mask_acc_T_115"} : i1
    %803 = comb.or bin %793, %802 {sv.namehint = "atomics_a_mask_acc_115"} : i1
    %804 = comb.and bin %398, %797 {sv.namehint = "atomics_a_mask_eq_116"} : i1
    %805 = comb.and bin %796, %804 {sv.namehint = "_atomics_a_mask_acc_T_116"} : i1
    %806 = comb.or bin %795, %805 {sv.namehint = "atomics_a_mask_acc_116"} : i1
    %807 = comb.and bin %398, %405 {sv.namehint = "atomics_a_mask_eq_117"} : i1
    %808 = comb.and bin %796, %807 {sv.namehint = "_atomics_a_mask_acc_T_117"} : i1
    %809 = comb.or bin %795, %808 {sv.namehint = "atomics_a_mask_acc_117"} : i1
    %810 = comb.xor bin %419, %true {sv.namehint = "atomics_a_mask_nbit_26"} : i1
    %811 = comb.and bin %798, %810 {sv.namehint = "atomics_a_mask_eq_118"} : i1
    %812 = comb.or bin %800, %811 {sv.namehint = "atomics_a_mask_acc_118"} : i1
    %813 = comb.and bin %798, %419 {sv.namehint = "atomics_a_mask_eq_119"} : i1
    %814 = comb.or bin %800, %813 {sv.namehint = "atomics_a_mask_acc_119"} : i1
    %815 = comb.and bin %801, %810 {sv.namehint = "atomics_a_mask_eq_120"} : i1
    %816 = comb.or bin %803, %815 {sv.namehint = "atomics_a_mask_acc_120"} : i1
    %817 = comb.and bin %801, %419 {sv.namehint = "atomics_a_mask_eq_121"} : i1
    %818 = comb.or bin %803, %817 {sv.namehint = "atomics_a_mask_acc_121"} : i1
    %819 = comb.and bin %804, %810 {sv.namehint = "atomics_a_mask_eq_122"} : i1
    %820 = comb.or bin %806, %819 {sv.namehint = "atomics_a_mask_acc_122"} : i1
    %821 = comb.and bin %804, %419 {sv.namehint = "atomics_a_mask_eq_123"} : i1
    %822 = comb.or bin %806, %821 {sv.namehint = "atomics_a_mask_acc_123"} : i1
    %823 = comb.and bin %807, %810 {sv.namehint = "atomics_a_mask_eq_124"} : i1
    %824 = comb.or bin %809, %823 {sv.namehint = "atomics_a_mask_acc_124"} : i1
    %825 = comb.and bin %807, %419 {sv.namehint = "atomics_a_mask_eq_125"} : i1
    %826 = comb.or bin %809, %825 {sv.namehint = "atomics_a_mask_acc_125"} : i1
    %827 = comb.concat %826, %824, %822, %820, %818, %816, %814, %812 {sv.namehint = "atomics_a_8_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %828 = comb.mux bin %155, %515, %c0_i8 {sv.namehint = "_atomics_T_1_mask"} : i8
    %829 = comb.xor %155, %true : i1
    %830 = comb.or %156, %829 : i1
    %831 = comb.mux bin %830, %c0_i3, %c3_i3 {sv.namehint = "_atomics_T_3_param"} : i3
    %832 = comb.mux bin %156, %554, %828 {sv.namehint = "_atomics_T_3_mask"} : i8
    %833 = comb.mux bin %157, %c1_i3, %831 {sv.namehint = "_atomics_T_5_param"} : i3
    %834 = comb.mux bin %157, %593, %832 {sv.namehint = "_atomics_T_5_mask"} : i8
    %835 = comb.or bin %158, %157, %156, %155 : i1
    %836 = comb.mux bin %835, %c3_i3, %c0_i3 {sv.namehint = "_atomics_T_7_opcode"} : i3
    %837 = comb.mux bin %158, %c2_i3, %833 {sv.namehint = "_atomics_T_7_param"} : i3
    %838 = comb.mux bin %158, %632, %834 {sv.namehint = "_atomics_T_7_mask"} : i8
    %839 = comb.mux bin %159, %c-4_i3, %837 {sv.namehint = "_atomics_T_9_param"} : i3
    %840 = comb.mux bin %159, %671, %838 {sv.namehint = "_atomics_T_9_mask"} : i8
    %841 = comb.mux bin %160, %c0_i3, %839 {sv.namehint = "_atomics_T_11_param"} : i3
    %842 = comb.mux bin %160, %710, %840 {sv.namehint = "_atomics_T_11_mask"} : i8
    %843 = comb.mux bin %161, %c1_i3, %841 {sv.namehint = "_atomics_T_13_param"} : i3
    %844 = comb.mux bin %161, %749, %842 {sv.namehint = "_atomics_T_13_mask"} : i8
    %845 = comb.mux bin %162, %c2_i3, %843 {sv.namehint = "_atomics_T_15_param"} : i3
    %846 = comb.mux bin %162, %788, %844 {sv.namehint = "_atomics_T_15_mask"} : i8
    %847 = comb.or bin %163, %162, %161, %160, %159 : i1
    %848 = comb.mux bin %847, %c2_i3, %836 {sv.namehint = "atomics_opcode"} : i3
    %849 = comb.mux bin %163, %c3_i3, %845 {sv.namehint = "atomics_param"} : i3
    %850 = comb.mux bin %163, %827, %846 {sv.namehint = "atomics_mask"} : i8
    %851 = comb.extract %s2_req_addr from 6 : (i34) -> i15
    %852 = comb.extract %release_ack_addr from 6 : (i32) -> i15
    %853 = comb.xor bin %851, %852 {sv.namehint = "_tl_out_a_valid_T_2"} : i15
    %854 = comb.icmp bin eq %853, %c0_i15 {sv.namehint = "_tl_out_a_valid_T_3"} : i15
    %855 = comb.and bin %release_ack_wait, %854 {sv.namehint = "_tl_out_a_valid_T_4"} : i1
    %856 = comb.xor bin %855, %true {sv.namehint = "_tl_out_a_valid_T_5"} : i1
    %857 = comb.xor bin %258, %true {sv.namehint = "_tl_out_a_valid_T_11"} : i1
    %858 = comb.and bin %208, %856, %857 {sv.namehint = "_tl_out_a_valid_T_12"} : i1
    %859 = comb.or bin %211, %858 {sv.namehint = "tl_out_a_valid"} : i1
    %860 = comb.concat %false, %200 {sv.namehint = "tl_out_a_bits_a_param"} : i1, i2
    %861 = comb.extract %s2_req_addr from 6 : (i34) -> i26
    %862 = comb.concat %861, %c0_i6 {sv.namehint = "tl_out_a_bits_a_address"} : i26, i6
    %863 = comb.xor bin %167, %true {sv.namehint = "_tl_out_a_bits_T_3"} : i1
    %864 = comb.xor bin %164, %true {sv.namehint = "_tl_out_a_bits_T_5"} : i1
    %865 = comb.mux bin %164, %848, %c0_i3 {sv.namehint = "_tl_out_a_bits_T_6_opcode"} : i3
    %866 = comb.xor %164, %true : i1
    %867 = comb.xor %164, %true : i1
    %868 = comb.mux bin %164, %850, %476 {sv.namehint = "_tl_out_a_bits_T_6_mask"} : i8
    %869 = comb.xor %164, %true : i1
    %870 = comb.mux bin %166, %c1_i3, %865 {sv.namehint = "_tl_out_a_bits_T_7_opcode"} : i3
    %871 = comb.mux bin %166, %pstore1_mask, %868 {sv.namehint = "_tl_out_a_bits_T_7_mask"} : i8
    %872 = comb.or %166, %869, %163, %162, %161, %160, %159, %158, %157, %156, %155 : i1
    %873 = comb.mux bin %167, %870, %c-4_i3 {sv.namehint = "_tl_out_a_bits_T_8_opcode"} : i3
    %874 = comb.or bin %863, %166, %864 : i1
    %875 = comb.mux bin %874, %c0_i3, %849 {sv.namehint = "_tl_out_a_bits_T_8_param"} : i3
    %876 = comb.xor %167, %true : i1
    %877 = comb.or %876, %166, %866, %163, %162, %161, %160, %159, %158, %157, %156, %155 : i1
    %878 = comb.mux bin %877, %393, %c0_i4 {sv.namehint = "_tl_out_a_bits_T_8_size"} : i4
    %879 = comb.or %863, %166, %864, %163, %162, %161, %160, %159, %158, %157, %156, %155 {sv.namehint = "_tl_out_a_bits_T_8_source"} : i1
    %880 = comb.xor %167, %true : i1
    %881 = comb.or %880, %166, %867, %163, %162, %161, %160, %159, %158, %157, %156, %155 : i1
    %882 = comb.mux bin %881, %394, %c0_i32 {sv.namehint = "_tl_out_a_bits_T_8_address"} : i32
    %883 = comb.mux bin %167, %871, %437 {sv.namehint = "_tl_out_a_bits_T_8_mask"} : i8
    %884 = comb.mux bin %s2_pma_cacheable, %c-2_i3, %873 {sv.namehint = "tl_out_a_bits_opcode"} : i3
    %885 = comb.mux bin %s2_pma_cacheable, %860, %875 {sv.namehint = "tl_out_a_bits_param"} : i3
    %886 = comb.mux bin %s2_pma_cacheable, %c6_i4, %878 {sv.namehint = "tl_out_a_bits_size"} : i4
    %887 = comb.xor %s2_pma_cacheable, %true : i1
    %888 = comb.and %887, %879 {sv.namehint = "tl_out_a_bits_source"} : i1
    %889 = comb.mux bin %s2_pma_cacheable, %862, %882 {sv.namehint = "tl_out_a_bits_address"} : i32
    %890 = comb.mux bin %s2_pma_cacheable, %c-1_i8, %883 {sv.namehint = "tl_out_a_bits_mask"} : i8
    %891 = comb.xor %872, %true : i1
    %892 = comb.or %s2_pma_cacheable, %863, %891 : i1
    %893 = comb.mux bin %892, %c0_i64, %pstore1_data {sv.namehint = "tl_out_a_bits_data"} : i64
    %894 = comb.and bin %auto_out_a_ready, %859 {sv.namehint = "_io_cpu_perf_acquire_T"} : i1
    %895 = comb.and bin %894, %206 : i1
    %896 = comb.or %895, %uncachedInFlight_0 : i1
    %897 = comb.mux bin %895, %s2_req_addr, %uncachedReqs_0_addr : i34
    %898 = comb.mux bin %895, %s2_req_tag, %uncachedReqs_0_tag : i6
    %899 = comb.mux bin %895, %s2_req_size, %uncachedReqs_0_size : i2
    %900 = comb.mux bin %895, %s2_req_signed, %uncachedReqs_0_signed : i1
    %901 = comb.and %894, %s2_pma_cacheable : i1
    %902 = comb.or %901, %cached_grant_wait : i1
    %903 = comb.and bin %1021, %auto_out_d_valid {sv.namehint = "_io_errors_bus_valid_T"} : i1
    %904 = comb.concat %c0_i23, %auto_out_d_bits_size : i23, i4
    %905 = comb.shl bin %c4095_i27, %904 {sv.namehint = "_beats1_decode_T_1"} : i27
    %906 = comb.extract %905 from 3 : (i27) -> i9
    %907 = comb.xor bin %906, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %908 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %909 = comb.mux bin %908, %907, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %919 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1316 : ui64} : i9
    %910 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %911 = comb.icmp bin ne %counter, %c0_i9 {sv.namehint = "_nodeOut_d_ready_T"} : i9
    %912 = comb.xor bin %911, %true {sv.namehint = "d_first"} : i1
    %913 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %914 = comb.icmp bin eq %909, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %915 = comb.or bin %913, %914 {sv.namehint = "d_last"} : i1
    %916 = comb.xor bin %910, %c-1_i9 {sv.namehint = "_count_T"} : i9
    %917 = comb.and bin %909, %916 {sv.namehint = "count"} : i9
    %918 = comb.mux bin %911, %910, %909 {sv.namehint = "_counter_T"} : i9
    %919 = comb.mux bin %903, %918, %counter : i9
    %920 = comb.concat %917, %c0_i3 {sv.namehint = "d_address_inc"} : i9, i3
    %921 = comb.icmp bin eq %auto_out_d_bits_opcode, %c1_i3 {sv.namehint = "grantIsUncachedData"} : i3
    %922 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 : i3
    %923 = comb.icmp bin eq %auto_out_d_bits_opcode, %c2_i3 : i3
    %924 = comb.or bin %921, %922, %923 {sv.namehint = "grantIsUncached"} : i1
    %925 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-4_i3 {sv.namehint = "_grantIsCached_T"} : i3
    %926 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-3_i3 {sv.namehint = "grantIsRefill"} : i3
    %927 = comb.or bin %925, %926 {sv.namehint = "grantIsCached"} : i1
    %928 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-2_i3 {sv.namehint = "grantIsVoluntary"} : i3
    %grantInProgress = seq.firreg %946 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1325 : ui64} : i1
    %blockProbeAfterGrantCount = seq.firreg %947 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 1326 : ui64} : i3
    %929 = comb.icmp bin ne %blockProbeAfterGrantCount, %c0_i3 {sv.namehint = "_clock_en_reg_T_26"} : i3
    %930 = comb.add %blockProbeAfterGrantCount, %c-1_i3 {sv.namehint = "_blockProbeAfterGrantCount_T"} : i3
    %931 = comb.mux bin %929, %930, %blockProbeAfterGrantCount : i3
    %932 = comb.icmp bin eq %release_state, %c6_i4 {sv.namehint = "_metaArb_io_in_4_valid_T"} : i4
    %933 = comb.icmp bin eq %release_state, %c-7_i4 {sv.namehint = "_nodeOut_c_valid_T_1"} : i4
    %934 = comb.or bin %51, %932, %933 {sv.namehint = "_canAcceptCachedGrant_T_4"} : i1
    %935 = comb.xor bin %934, %true {sv.namehint = "canAcceptCachedGrant"} : i1
    %936 = comb.or bin %911, %auto_out_e_ready {sv.namehint = "_nodeOut_d_ready_T_1"} : i1
    %937 = comb.and bin %936, %935 {sv.namehint = "_nodeOut_d_ready_T_2"} : i1
    %938 = comb.xor %927, %true : i1
    %939 = comb.or %938, %937 {sv.namehint = "_nodeOut_d_ready_T_3"} : i1
    %940 = comb.and bin %903, %927 : i1
    %941 = comb.and bin %940, %328 : i1
    %942 = comb.and bin %903, %927, %915 : i1
    %943 = comb.xor %942, %true : i1
    %944 = comb.and %943, %902 : i1
    %945 = comb.xor bin %915, %true : i1
    %946 = comb.mux bin %940, %945, %grantInProgress : i1
    %947 = comb.mux bin %942, %c-1_i3, %931 : i3
    %948 = comb.xor bin %927, %true : i1
    %949 = comb.and bin %903, %948 : i1
    %950 = comb.and bin %auto_out_d_bits_source, %915 : i1
    %951 = comb.and bin %949, %924, %950, %328 : i1
    %952 = comb.and bin %924, %950 : i1
    %953 = comb.xor %952, %true : i1
    %954 = comb.xor %903, %true : i1
    %955 = comb.or %954, %927, %953 : i1
    %956 = comb.and %955, %896 : i1
    %957 = comb.and bin %924, %921 : i1
    %958 = comb.xor %957, %true : i1
    %959 = comb.xor %903, %true : i1
    %960 = comb.or %959, %927, %958 : i1
    %961 = comb.mux bin %960, %c1_i2, %c-2_i2 {sv.namehint = "s1_data_way"} : i2
    %962 = comb.xor %957, %true : i1
    %963 = comb.xor %903, %true : i1
    %964 = comb.or %963, %927, %962 : i1
    %965 = comb.mux bin %964, %137, %c0_i5 : i5
    %966 = comb.xor %957, %true : i1
    %967 = comb.xor %903, %true : i1
    %968 = comb.or %967, %927, %966 : i1
    %969 = comb.mux bin %968, %138, %uncachedReqs_0_size : i2
    %970 = comb.xor %957, %true : i1
    %971 = comb.xor %903, %true : i1
    %972 = comb.or %971, %927, %970 : i1
    %973 = comb.mux bin %972, %139, %uncachedReqs_0_signed : i1
    %974 = comb.xor %957, %true : i1
    %975 = comb.xor %903, %true : i1
    %976 = comb.or %975, %927, %974 : i1
    %977 = comb.mux bin %976, %136, %uncachedReqs_0_tag : i6
    %978 = comb.extract %s1_vaddr from 3 : (i34) -> i9
    %979 = comb.extract %uncachedReqs_0_addr from 0 {sv.namehint = "_s2_req_addr_T"} : (i34) -> i3
    %980 = comb.concat %c0_i2, %98, %978, %979 : i2, i20, i9, i3
    %981 = comb.xor %957, %true : i1
    %982 = comb.xor %903, %true : i1
    %983 = comb.or %982, %927, %981 : i1
    %984 = comb.mux bin %983, %141, %980 : i34
    %985 = comb.xor bin %924, %true : i1
    %986 = comb.and bin %949, %985, %928, %328 : i1
    %987 = comb.xor %928, %true : i1
    %988 = comb.xor %903, %true : i1
    %989 = comb.or %988, %927, %924, %987 : i1
    %990 = comb.and %989, %release_ack_wait : i1
    %991 = comb.and bin %auto_out_e_ready, %998 : i1
    %992 = comb.and bin %903, %912, %927 : i1
    %993 = comb.icmp bin eq %991, %992 : i1
    %994 = comb.and bin %auto_out_d_valid, %926, %935 {sv.namehint = "_dataArb_io_in_1_valid_T_1"} : i1
    %995 = comb.xor bin %dataArb.io_in_1_ready, %true {sv.namehint = "_blockUncachedGrant_T"} : i1
    %996 = comb.and bin %926, %995 : i1
    %997 = comb.xor %996, %true : i1
    %998 = comb.and %997, %auto_out_d_valid, %912, %927, %935 {sv.namehint = "nodeOut_e_valid"} : i1
    %999 = comb.extract %s2_req_addr from 6 : (i34) -> i6
    %1000 = comb.concat %999, %c0_i6 : i6, i6
    %1001 = comb.or bin %1000, %920 {sv.namehint = "dataArb.io_in_1_bits_addr"} : i12
    %1002 = comb.xor bin %auto_out_d_bits_denied, %true {sv.namehint = "_metaArb_io_in_3_valid_T_1"} : i1
    %1003 = comb.and bin %927, %915, %903, %1002 {sv.namehint = "metaArb.io_in_3_valid"} : i1
    %1004 = comb.concat %83, %150 {sv.namehint = "metaArb.io_in_3_bits_addr"} : i22, i12
    %1005 = comb.or bin %165, %166, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_22"} : i1
    %1006 = comb.or bin %165, %166, %154, %155, %156, %157, %158, %159, %160, %161, %162, %163, %186, %153 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_49"} : i1
    %1007 = comb.concat %1005, %1006, %auto_out_d_bits_param {sv.namehint = "_metaArb_io_in_3_bits_data_T_1"} : i1, i1, i2
    %1008 = comb.icmp bin eq %1007, %c1_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_10"} : i4
    %1009 = comb.concat %false, %1008 {sv.namehint = "_metaArb_io_in_3_bits_data_T_11"} : i1, i1
    %1010 = comb.icmp bin eq %1007, %c0_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_12"} : i4
    %1011 = comb.icmp bin eq %1007, %c4_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_14"} : i4
    %1012 = comb.or bin %1011, %1010 : i1
    %1013 = comb.mux bin %1012, %c-2_i2, %1009 {sv.namehint = "_metaArb_io_in_3_bits_data_T_15"} : i2
    %1014 = comb.icmp bin eq %1007, %c-4_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_16"} : i4
    %1015 = comb.mux bin %1014, %c-1_i2, %1013 {sv.namehint = "metaArb_io_in_3_bits_data_meta_state"} : i2
    %1016 = comb.concat %1015, %274 {sv.namehint = "metaArb.io_in_3_bits_data"} : i2, i20
    %blockUncachedGrant = seq.firreg %1031 clock %clock {firrtl.random_init_start = 1329 : ui64} : i1
    %1017 = comb.or bin %blockUncachedGrant, %s1_valid : i1
    %1018 = comb.and bin %921, %1017 : i1
    %1019 = comb.or bin %1018, %996 : i1
    %1020 = comb.xor %1019, %true : i1
    %1021 = comb.and %1020, %939 {sv.namehint = "nodeOut_d_ready"} : i1
    %1022 = comb.or bin %auto_out_d_valid, %17, %86 : i1
    %1023 = comb.xor %1022, %true : i1
    %1024 = comb.and %1023, %56 : i1
    %1025 = comb.mux bin %1018, %1024, %97 {sv.namehint = "io_cpu_req_ready"} : i1
    %1026 = comb.and bin %1018, %auto_out_d_valid : i1
    %1027 = comb.or %1026, %994 {sv.namehint = "dataArb.io_in_1_valid"} : i1
    %1028 = comb.xor bin %auto_out_d_valid, %true : i1
    %1029 = comb.xor %1018, %true : i1
    %1030 = comb.or %1029, %1028 {sv.namehint = "dataArb.io_in_1_bits_write"} : i1
    %1031 = comb.mux bin %1026, %995, %dataArb.io_out_valid : i1
    %1032 = comb.or bin %929, %277 {sv.namehint = "block_probe_for_core_progress"} : i1
    %1033 = comb.extract %auto_out_b_bits_address from 6 : (i32) -> i15
    %1034 = comb.extract %release_ack_addr from 6 : (i32) -> i15
    %1035 = comb.xor bin %1033, %1034 {sv.namehint = "_block_probe_for_pending_release_ack_T"} : i15
    %1036 = comb.icmp bin eq %1035, %c0_i15 {sv.namehint = "_block_probe_for_pending_release_ack_T_2"} : i15
    %1037 = comb.and bin %release_ack_wait, %1036 {sv.namehint = "block_probe_for_pending_release_ack"} : i1
    %1038 = comb.xor bin %1032, %true {sv.namehint = "_metaArb_io_in_6_valid_T"} : i1
    %1039 = comb.or bin %1038, %280 {sv.namehint = "_metaArb_io_in_6_valid_T_1"} : i1
    %1040 = comb.and bin %auto_out_b_valid, %1039 {sv.namehint = "_metaArb_io_in_6_valid_T_2"} : i1
    %1041 = comb.or bin %1032, %132, %1037, %grantInProgress, %s1_valid, %s2_valid {sv.namehint = "_nodeOut_b_ready_T_2"} : i1
    %1042 = comb.xor bin %1041, %true {sv.namehint = "_nodeOut_b_ready_T_3"} : i1
    %1043 = comb.and bin %metaArb.io_in_6_ready, %1042 {sv.namehint = "nodeOut_b_ready"} : i1
    %1044 = comb.extract %auto_out_b_bits_address from 6 {sv.namehint = "_metaArb_io_in_6_bits_idx_T"} : (i32) -> i6
    %1045 = comb.extract %io_cpu_req_bits_addr from 32 {sv.namehint = "_metaArb_io_in_6_bits_addr_T_2"} : (i34) -> i2
    %1046 = comb.and bin %auto_out_c_ready, %1132 {sv.namehint = "_io_cpu_perf_release_T"} : i1
    %1047 = comb.concat %c0_i23, %1148 : i23, i4
    %1048 = comb.shl bin %c4095_i27, %1047 {sv.namehint = "_beats1_decode_T_5"} : i27
    %1049 = comb.extract %1048 from 3 : (i27) -> i9
    %1050 = comb.xor bin %1049, %c-1_i9 {sv.namehint = "_beats1_decode_T_7"} : i9
    %1051 = comb.extract %1146 from 0 {sv.namehint = "beats1_opdata_1"} : (i3) -> i1
    %1052 = comb.mux bin %1051, %1050, %c0_i9 {sv.namehint = "beats1_1"} : i9
    %counter_1 = seq.firreg %1062 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1330 : ui64} : i9
    %1053 = comb.add %counter_1, %c-1_i9 {sv.namehint = "_counter1_T_1"} : i9
    %1054 = comb.icmp bin eq %counter_1, %c0_i9 {sv.namehint = "c_first"} : i9
    %1055 = comb.icmp bin eq %counter_1, %c1_i9 {sv.namehint = "_last_T_2"} : i9
    %1056 = comb.icmp bin eq %1052, %c0_i9 {sv.namehint = "_last_T_3"} : i9
    %1057 = comb.or bin %1055, %1056 {sv.namehint = "c_last"} : i1
    %1058 = comb.and bin %1057, %1046 {sv.namehint = "releaseDone"} : i1
    %1059 = comb.xor bin %1053, %c-1_i9 {sv.namehint = "_count_T_1"} : i9
    %1060 = comb.and bin %1052, %1059 {sv.namehint = "c_count"} : i9
    %1061 = comb.mux bin %1054, %1052, %1053 {sv.namehint = "_counter_T_1"} : i9
    %1062 = comb.mux bin %1046, %1061, %counter_1 : i9
    %1063 = comb.and bin %dataArb.io_in_2_ready, %1156 {sv.namehint = "_s1_release_data_valid_T"} : i1
    %s1_release_data_valid = seq.firreg %1063 clock %clock {firrtl.random_init_start = 1339 : ui64} : i1
    %1064 = comb.xor bin %1067, %true {sv.namehint = "_s2_release_data_valid_T"} : i1
    %1065 = comb.and bin %s1_release_data_valid, %1064 {sv.namehint = "_s2_release_data_valid_T_1"} : i1
    %s2_release_data_valid = seq.firreg %1065 clock %clock {firrtl.random_init_start = 1340 : ui64} : i1
    %1066 = comb.xor bin %1046, %true {sv.namehint = "_releaseRejected_T_1"} : i1
    %1067 = comb.and bin %s2_release_data_valid, %1066 {sv.namehint = "releaseRejected"} : i1
    %1068 = comb.concat %false, %s1_release_data_valid : i1, i1
    %1069 = comb.concat %false, %s2_release_data_valid : i1, i1
    %1070 = comb.add bin %1068, %1069 {sv.namehint = "_releaseDataBeat_T_2"} : i2
    %1071 = comb.mux bin %1067, %c0_i2, %1070 {sv.namehint = "_releaseDataBeat_T_4"} : i2
    %1072 = comb.concat %false, %1060 : i1, i9
    %1073 = comb.concat %c0_i8, %1071 : i8, i2
    %1074 = comb.add bin %1072, %1073 {sv.namehint = "_releaseDataBeat_T_5"} : i10
    %1075 = comb.and bin %1054, %release_ack_wait {sv.namehint = "_nodeOut_c_valid_T_4"} : i1
    %1076 = comb.xor bin %1075, %true {sv.namehint = "_nodeOut_c_valid_T_5"} : i1
    %1077 = comb.and bin %s2_release_data_valid, %1076 {sv.namehint = "_nodeOut_c_valid_T_6"} : i1
    %1078 = comb.or bin %203, %268 : i1
    %1079 = comb.and bin %209, %328 : i1
    %1080 = comb.extract %s2_req_size from 1 {sv.namehint = "_discard_line_T"} : (i2) -> i1
    %1081 = comb.and bin %203, %1080 {sv.namehint = "_discard_line_T_1"} : i1
    %1082 = comb.xor bin %1081, %true {sv.namehint = "_release_state_T"} : i1
    %1083 = comb.and bin %258, %1082 {sv.namehint = "_release_state_T_1"} : i1
    %1084 = comb.mux bin %1083, %c1_i4, %c6_i4 {sv.namehint = "_release_state_T_14"} : i4
    %1085 = comb.mux bin %209, %1084, %release_state : i4
    %1086 = comb.extract %s2_req_addr from 6 {sv.namehint = "_probe_bits_T_1"} : (i34) -> i6
    %1087 = comb.concat %213, %1086, %c0_i6 {sv.namehint = "probe_bits_res_address"} : i20, i6, i6
    %1088 = comb.mux bin %209, %c0_i2, %5 : i2
    %1089 = comb.mux bin %209, %c0_i4, %6 : i4
    %1090 = comb.xor %209, %true : i1
    %1091 = comb.and %1090, %7 : i1
    %1092 = comb.mux bin %209, %1087, %8 : i32
    %1093 = comb.icmp bin ne %s2_probe_state_state, %c0_i2 : i2
    %1094 = comb.xor %1093, %true : i1
    %1095 = comb.xor %s2_probe, %true : i1
    %1096 = comb.or %1095, %249, %1094 : i1
    %1097 = comb.concat %false, %1058, %c-1_i2 {sv.namehint = "_release_state_T_15"} : i1, i1, i2
    %1098 = comb.xor %249, %true : i1
    %1099 = comb.and %s2_probe, %1098 : i1
    %1100 = comb.xor bin %1058, %true {sv.namehint = "_probeNack_T"} : i1
    %1101 = comb.mux bin %1058, %c0_i4, %c5_i4 {sv.namehint = "_release_state_T_16"} : i4
    %1102 = comb.mux bin %1093, %1097, %1101 : i4
    %1103 = comb.mux bin %1093, %c3_i4, %c5_i4 : i4
    %1104 = comb.mux bin %1093, %c3_i4, %1101 : i4
    %1105 = comb.mux bin %249, %c2_i4, %1102 : i4
    %1106 = comb.mux bin %249, %c2_i4, %1103 : i4
    %1107 = comb.mux bin %249, %c2_i4, %1104 : i4
    %1108 = comb.mux bin %s2_probe, %1105, %1085 : i4
    %1109 = comb.mux bin %s2_probe, %1106, %1085 : i4
    %1110 = comb.mux bin %s2_probe, %1107, %1085 : i4
    %1111 = comb.or bin %249, %1093, %1100, %391, %270 : i1
    %1112 = comb.mux bin %s2_probe, %1111, %392 {sv.namehint = "s1_nack"} : i1
    %1113 = comb.icmp bin eq %release_state, %c4_i4 : i4
    %1114 = comb.or %1113, %1040 {sv.namehint = "metaArb.io_in_6_valid"} : i1
    %1115 = comb.mux bin %1113, %271, %1044 {sv.namehint = "metaArb.io_in_6_bits_idx"} : i6
    %1116 = comb.mux bin %1113, %probe_bits_address, %auto_out_b_bits_address : i32
    %1117 = comb.concat %1045, %1116 {sv.namehint = "metaArb.io_in_6_bits_addr"} : i2, i32
    %1118 = comb.and bin %1113, %metaArb.io_in_6_ready : i1
    %1119 = comb.mux bin %1118, %c0_i4, %1110 : i4
    %1120 = comb.or %1118, %4 : i1
    %1121 = comb.icmp bin eq %release_state, %c5_i4 : i4
    %1122 = comb.or bin %1058, %1118 : i1
    %1123 = comb.mux bin %1122, %c0_i4, %1109 : i4
    %1124 = comb.and %1121, %1058 : i1
    %1125 = comb.or %1124, %1118 : i1
    %1126 = comb.mux bin %1125, %c0_i4, %1108 : i4
    %1127 = comb.and %1121, %1058 : i1
    %1128 = comb.or %1127, %1118 : i1
    %1129 = comb.mux bin %1128, %c0_i4, %1109 : i4
    %1130 = comb.mux bin %1121, %1123, %1119 : i4
    %1131 = comb.icmp bin eq %release_state, %c3_i4 : i4
    %1132 = comb.or %1131, %1121, %1099, %1077 {sv.namehint = "nodeOut_c_valid"} : i1
    %1133 = comb.xor %1096, %true : i1
    %1134 = comb.mux bin %1058, %c7_i4, %1129 : i4
    %1135 = comb.mux bin %1131, %1134, %1126 : i4
    %1136 = comb.concat %c-2_i2, %52 : i2, i1
    %1137 = comb.or %52, %1131, %1133 : i1
    %1138 = comb.mux bin %1137, %251, %c-3_i3 : i3
    %1139 = comb.mux bin %1058, %c7_i4, %1129 : i4
    %1140 = comb.mux bin %52, %1139, %1135 : i4
    %1141 = comb.mux %52, %1129, %1130 : i4
    %1142 = comb.mux bin %1131, %1141, %1126 : i4
    %1143 = comb.or bin %51, %932, %933 : i1
    %1144 = comb.xor %933, %true : i1
    %1145 = comb.concat %c-1_i2, %1144 : i2, i1
    %1146 = comb.mux bin %1143, %1145, %1136 {sv.namehint = "nodeOut_c_bits_opcode"} : i3
    %1147 = comb.mux bin %1143, %260, %1138 {sv.namehint = "nodeOut_c_bits_param"} : i3
    %1148 = comb.mux bin %1143, %c6_i4, %probe_bits_size {sv.namehint = "nodeOut_c_bits_size"} : i4
    %1149 = comb.mux bin %1143, %c0_i2, %252 {sv.namehint = "newCoh_state"} : i2
    %1150 = comb.mux bin %1058, %c6_i4, %1142 : i4
    %1151 = comb.mux bin %1143, %1150, %1140 : i4
    %1152 = comb.and bin %1143, %1046, %1054 : i1
    %1153 = comb.or %1152, %990 : i1
    %1154 = comb.mux bin %1152, %probe_bits_address, %release_ack_addr : i32
    %1155 = comb.icmp bin ult %1074, %c8_i10 {sv.namehint = "_dataArb_io_in_2_valid_T"} : i10
    %1156 = comb.and bin %53, %1155 {sv.namehint = "dataArb.io_in_2_valid"} : i1
    %1157 = comb.extract %1074 from 0 {sv.namehint = "_dataArb_io_in_2_bits_addr_T_2"} : (i10) -> i3
    %1158 = comb.concat %271, %1157, %c0_i3 {sv.namehint = "dataArb.io_in_2_bits_addr"} : i6, i3, i3
    %1159 = comb.icmp bin eq %release_state, %c7_i4 {sv.namehint = "_metaArb_io_in_4_valid_T_1"} : i4
    %1160 = comb.or bin %932, %1159 {sv.namehint = "metaArb.io_in_4_valid"} : i1
    %1161 = comb.extract %probe_bits_address from 0 {sv.namehint = "_metaArb_io_in_4_bits_addr_T_1"} : (i32) -> i12
    %1162 = comb.concat %83, %1161 {sv.namehint = "metaArb.io_in_4_bits_addr"} : i22, i12
    %1163 = comb.extract %probe_bits_address from 12 {sv.namehint = "metaArb_io_in_4_bits_data_meta_tag"} : (i32) -> i20
    %1164 = comb.concat %1149, %1163 {sv.namehint = "metaArb.io_in_7_bits_data"} : i2, i20
    %1165 = comb.and bin %metaArb.io_in_4_ready, %1160 : i1
    %1166 = comb.mux bin %1165, %c0_i4, %1151 : i4
    %1167 = comb.or bin %s1_valid, %s2_valid, %cached_grant_wait, %uncachedInFlight_0 {sv.namehint = "_io_cpu_ordered_T_7"} : i1
    %1168 = comb.xor bin %1167, %true {sv.namehint = "io_cpu_ordered"} : i1
    %1169 = comb.and bin %s1_valid, %9, %94, %10 {sv.namehint = "s1_xcpt_valid"} : i1
    %io_cpu_s2_xcpt_REG = seq.firreg %1169 clock %clock {firrtl.random_init_start = 1341 : ui64} : i1
    %1170 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_pf_ld {sv.namehint = "io_cpu_s2_xcpt_pf_ld"} : i1
    %1171 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_pf_st {sv.namehint = "io_cpu_s2_xcpt_pf_st"} : i1
    %1172 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ae_ld {sv.namehint = "io_cpu_s2_xcpt_ae_ld"} : i1
    %1173 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ae_st {sv.namehint = "io_cpu_s2_xcpt_ae_st"} : i1
    %1174 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ma_ld {sv.namehint = "io_cpu_s2_xcpt_ma_ld"} : i1
    %1175 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ma_st {sv.namehint = "io_cpu_s2_xcpt_ma_st"} : i1
    %doUncachedResp = seq.firreg %1177 clock %clock {firrtl.random_init_start = 1406 : ui64, sv.namehint = "doUncachedResp"} : i1
    %1176 = comb.or bin %202, %doUncachedResp {sv.namehint = "io_cpu_resp_valid"} : i1
    %1177 = comb.and bin %903, %921 {sv.namehint = "io_cpu_replay_next"} : i1
    %1178 = comb.and bin %doUncachedResp, %328 : i1
    sv.always posedge %0 {
      sv.if %81 {
        sv.assert %80, immediate label "assert__dataArb_io_in_3_valid_assert"
      }
      sv.if %314 {
        sv.assert %313, immediate label "assert__pstore_drain_opportunistic_assert"
      }
      sv.if %328 {
        sv.assert %327, immediate label "assert__assert_1"
      }
      sv.if %941 {
        sv.assert %cached_grant_wait, immediate label "assert__assert_2"
      }
      sv.if %951 {
        sv.assert %uncachedInFlight_0, immediate label "assert__assert_3"
      }
      sv.if %986 {
        sv.assert %release_ack_wait, immediate label "assert__assert_4"
      }
      sv.if %328 {
        sv.assert %993, immediate label "assert__assert_5"
      }
      sv.if %1079 {
        sv.assert %1078, immediate label "assert__assert_6"
      }
      sv.if %1178 {
        sv.assert %267, immediate label "assert__assert_7"
      }
    }
    %1179 = comb.extract %s2_data from 32 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_6"} : (i64) -> i32
    %1180 = comb.extract %s2_data from 0 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_shifted_T_2"} : (i64) -> i32
    %1181 = comb.mux bin %398, %1179, %1180 {sv.namehint = "io_cpu_resp_bits_data_zeroed"} : i32
    %1182 = comb.icmp bin eq %s2_req_size, %c-2_i2 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_1"} : i2
    %1183 = comb.extract %1181 from 31 {sv.namehint = "_io_cpu_resp_bits_data_T_2"} : (i32) -> i1
    %1184 = comb.and bin %s2_req_signed, %1183 {sv.namehint = "_io_cpu_resp_bits_data_T_4"} : i1
    %1185 = comb.replicate %1184 {sv.namehint = "_io_cpu_resp_bits_data_T_5"} : (i1) -> i32
    %1186 = comb.mux bin %1182, %1185, %1179 {sv.namehint = "_io_cpu_resp_bits_data_T_7"} : i32
    %1187 = comb.extract %1181 from 16 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_4"} : (i32) -> i16
    %1188 = comb.extract %1181 from 0 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_5"} : (i32) -> i16
    %1189 = comb.mux bin %405, %1187, %1188 {sv.namehint = "io_cpu_resp_bits_data_zeroed_1"} : i16
    %1190 = comb.icmp bin eq %s2_req_size, %c1_i2 {sv.namehint = "_io_cpu_resp_bits_data_T_10"} : i2
    %1191 = comb.extract %1189 from 15 {sv.namehint = "_io_cpu_resp_bits_data_T_11"} : (i16) -> i1
    %1192 = comb.and bin %s2_req_signed, %1191 {sv.namehint = "_io_cpu_resp_bits_data_T_13"} : i1
    %1193 = comb.replicate %1192 {sv.namehint = "_io_cpu_resp_bits_data_T_14"} : (i1) -> i48
    %1194 = comb.extract %1181 from 16 : (i32) -> i16
    %1195 = comb.concat %1186, %1194 {sv.namehint = "_io_cpu_resp_bits_data_T_15"} : i32, i16
    %1196 = comb.mux bin %1190, %1193, %1195 {sv.namehint = "_io_cpu_resp_bits_data_T_16"} : i48
    %1197 = comb.extract %1189 from 8 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_7"} : (i16) -> i8
    %1198 = comb.extract %1189 from 0 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_8"} : (i16) -> i8
    %1199 = comb.mux bin %419, %1197, %1198 {sv.namehint = "io_cpu_resp_bits_data_shifted_2"} : i8
    %1200 = comb.mux bin %154, %c0_i8, %1199 {sv.namehint = "io_cpu_resp_bits_data_zeroed_2"} : i8
    %1201 = comb.icmp bin eq %s2_req_size, %c0_i2 {sv.namehint = "_io_cpu_resp_bits_data_T_18"} : i2
    %1202 = comb.or bin %1201, %154 {sv.namehint = "_io_cpu_resp_bits_data_T_19"} : i1
    %1203 = comb.extract %1200 from 7 {sv.namehint = "_io_cpu_resp_bits_data_T_20"} : (i8) -> i1
    %1204 = comb.and bin %s2_req_signed, %1203 {sv.namehint = "_io_cpu_resp_bits_data_T_22"} : i1
    %1205 = comb.replicate %1204 {sv.namehint = "_io_cpu_resp_bits_data_T_23"} : (i1) -> i56
    %1206 = comb.extract %1189 from 8 : (i16) -> i8
    %1207 = comb.concat %1196, %1206 {sv.namehint = "_io_cpu_resp_bits_data_T_24"} : i48, i8
    %1208 = comb.mux bin %1202, %1205, %1207 {sv.namehint = "_io_cpu_resp_bits_data_T_25"} : i56
    %1209 = comb.extract %1200 from 1 : (i8) -> i7
    %1210 = comb.extract %1200 from 0 : (i8) -> i1
    %1211 = comb.or bin %1210, %285 : i1
    %1212 = comb.concat %1208, %1209, %1211 {sv.namehint = "io_cpu_resp_bits_data"} : i56, i7, i1
    %1213 = comb.mux bin %398, %1179, %1180 {sv.namehint = "io_cpu_resp_bits_data_word_bypass_zeroed"} : i32
    %1214 = comb.extract %1213 from 31 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_2"} : (i32) -> i1
    %1215 = comb.and bin %s2_req_signed, %1214 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_4"} : i1
    %1216 = comb.replicate %1215 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_5"} : (i1) -> i32
    %1217 = comb.mux bin %1182, %1216, %1179 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_7"} : i32
    %1218 = comb.concat %1217, %1213 {sv.namehint = "io_cpu_resp_bits_data_word_bypass"} : i32, i32
    %amoalus_0.io_out = hw.instance "amoalus_0" @AMOALU(io_mask: %pstore1_mask: i8, io_cmd: %pstore1_cmd: i5, io_lhs: %s2_data: i64, io_rhs: %pstore1_data: i64) -> (io_out: i64) {sv.namehint = "amoalus_0.io_out"}
    %REG = seq.firreg %reset clock %clock {firrtl.random_init_start = 1407 : ui64} : i1
    %1219 = comb.or %REG, %resetting : i1
    %1220 = comb.concat %false, %flushCounter : i1, i6
    %1221 = comb.add bin %1220, %c1_i7 {sv.namehint = "flushCounterNext"} : i7
    %1222 = comb.extract %1221 from 6 {sv.namehint = "flushDone"} : (i7) -> i1
    %1223 = comb.concat %83, %flushCounter, %c0_i6 {sv.namehint = "metaArb.io_in_5_bits_addr"} : i22, i6, i6
    %1224 = comb.extract %1221 from 0 : (i7) -> i6
    %1225 = comb.mux bin %resetting, %1224, %flushCounter : i6
    %1226 = comb.and bin %resetting, %1222 : i1
    %1227 = comb.xor %1226, %true : i1
    %1228 = comb.and %1227, %1219 : i1
    %1229 = comb.shl bin %c4095_i27, %1047 {sv.namehint = "_io_cpu_perf_release_beats1_decode_T_1"} : i27
    %1230 = comb.extract %1229 from 3 : (i27) -> i9
    %1231 = comb.xor bin %1230, %c-1_i9 {sv.namehint = "_io_cpu_perf_release_beats1_decode_T_3"} : i9
    %1232 = comb.mux bin %1051, %1231, %c0_i9 {sv.namehint = "io_cpu_perf_release_beats1"} : i9
    %io_cpu_perf_release_counter = seq.firreg %1240 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1417 : ui64} : i9
    %1233 = comb.add %io_cpu_perf_release_counter, %c-1_i9 {sv.namehint = "_io_cpu_perf_release_counter1_T"} : i9
    %1234 = comb.icmp bin eq %io_cpu_perf_release_counter, %c0_i9 {sv.namehint = "io_cpu_perf_release_first"} : i9
    %1235 = comb.icmp bin eq %io_cpu_perf_release_counter, %c1_i9 {sv.namehint = "_io_cpu_perf_release_last_T"} : i9
    %1236 = comb.icmp bin eq %1232, %c0_i9 {sv.namehint = "_io_cpu_perf_release_last_T_1"} : i9
    %1237 = comb.or bin %1235, %1236 {sv.namehint = "io_cpu_perf_release_last"} : i1
    %1238 = comb.and bin %1237, %1046 {sv.namehint = "io_cpu_perf_release"} : i1
    %1239 = comb.mux bin %1234, %1232, %1233 {sv.namehint = "_io_cpu_perf_release_counter_T"} : i9
    %1240 = comb.mux bin %1046, %1239, %io_cpu_perf_release_counter : i9
    %1241 = comb.and bin %auto_out_d_valid, %915 {sv.namehint = "io_cpu_perf_grant"} : i1
    hw.output %859, %884, %885, %886, %888, %889, %890, %893, %1043, %1132, %1146, %1147, %1148, %probe_bits_source, %probe_bits_address, %s2_data, %1021, %998, %auto_out_d_bits_sink, %1025, %268, %1176, %s2_req_tag, %1212, %doUncachedResp, %164, %1218, %1177, %1174, %1175, %1170, %1171, %1172, %1173, %1168, %1238, %1241 : i1, i3, i3, i4, i1, i32, i8, i64, i1, i1, i3, i3, i4, i1, i32, i64, i1, i1, i2, i1, i1, i1, i6, i64, i1, i1, i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @ICache(in %clock : !seq.clock, in %reset : i1, in %auto_master_out_a_ready : i1, out auto_master_out_a_valid : i1, out auto_master_out_a_bits_address : i32, in %auto_master_out_d_valid : i1, in %auto_master_out_d_bits_opcode : i3, in %auto_master_out_d_bits_size : i4, in %auto_master_out_d_bits_data : i64, in %auto_master_out_d_bits_corrupt : i1, in %io_req_valid : i1, in %io_req_bits_addr : i33, in %io_s1_paddr : i32, in %io_s1_kill : i1, in %io_s2_kill : i1, out io_resp_valid : i1, out io_resp_bits_data : i32, out io_resp_bits_ae : i1, in %io_invalidate : i1) {
    %c0_i58 = hw.constant 0 : i58
    %c0_i122 = hw.constant 0 : i122
    %c1_i128 = hw.constant 1 : i128
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i6 = hw.constant 0 : i6
    %c0_i3 = hw.constant 0 : i3
    %c-1_i64 = hw.constant -1 : i64
    %c-1_i9 = hw.constant -1 : i9
    %c0_i23 = hw.constant 0 : i23
    %c0_i9 = hw.constant 0 : i9
    %c0_i64 = hw.constant 0 : i64
    %false = hw.constant false
    %true = hw.constant true
    %0 = comb.and bin %16, %io_req_valid {sv.namehint = "s0_valid"} : i1
    %s1_valid = seq.firreg %0 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %1 = comb.xor bin %io_s1_kill, %true {sv.namehint = "_s2_valid_T"} : i1
    %2 = comb.and bin %s1_valid, %1 {sv.namehint = "_s2_valid_T_1"} : i1
    %s2_valid = seq.firreg %2 clock %clock reset sync %reset, %false {firrtl.random_init_start = 38 : ui64} : i1
    %s2_hit = seq.firreg %66 clock %clock {firrtl.random_init_start = 39 : ui64} : i1
    %invalidated = seq.firreg %95 clock %clock {firrtl.random_init_start = 40 : ui64} : i1
    %refill_valid = seq.firreg %98 clock %clock reset sync %reset, %false {firrtl.random_init_start = 41 : ui64} : i1
    %3 = comb.and bin %auto_master_out_a_ready, %9 {sv.namehint = "_refill_fire_T"} : i1
    %4 = comb.xor bin %s2_hit, %true {sv.namehint = "_s2_miss_T"} : i1
    %5 = comb.xor bin %io_s2_kill, %true {sv.namehint = "_s2_miss_T_2"} : i1
    %6 = comb.and bin %s2_valid, %4, %5 {sv.namehint = "s2_miss"} : i1
    %7 = comb.or bin %6, %refill_valid {sv.namehint = "_s1_can_request_refill_T"} : i1
    %8 = comb.xor bin %7, %true {sv.namehint = "s1_can_request_refill"} : i1
    %s2_request_refill_REG = seq.firreg %8 clock %clock {firrtl.random_init_start = 44 : ui64} : i1
    %9 = comb.and bin %6, %s2_request_refill_REG {sv.namehint = "s2_request_refill"} : i1
    %10 = comb.and bin %s1_valid, %8 {sv.namehint = "_refill_vaddr_T"} : i1
    %refill_paddr = seq.firreg %11 clock %clock {firrtl.random_init_start = 45 : ui64} : i32
    %11 = comb.mux bin %10, %io_s1_paddr, %refill_paddr : i32
    %12 = comb.extract %refill_paddr from 12 {sv.namehint = "refill_tag"} : (i32) -> i20
    %13 = comb.extract %refill_paddr from 6 {sv.namehint = "writeAddr"} : (i32) -> i6
    %14 = comb.extract %auto_master_out_d_bits_opcode from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %15 = comb.and bin %auto_master_out_d_valid, %14 {sv.namehint = "refill_one_beat"} : i1
    %16 = comb.xor bin %15, %true {sv.namehint = "io_req_ready"} : i1
    %17 = comb.concat %c0_i23, %auto_master_out_d_bits_size : i23, i4
    %18 = comb.shl bin %c4095_i27, %17 {sv.namehint = "_beats1_decode_T_1"} : i27
    %19 = comb.extract %18 from 3 : (i27) -> i9
    %20 = comb.xor bin %19, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %21 = comb.mux bin %14, %20, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %30 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %22 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %23 = comb.icmp bin eq %counter, %c0_i9 {sv.namehint = "first"} : i9
    %24 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %25 = comb.icmp bin eq %21, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %26 = comb.or bin %24, %25 {sv.namehint = "last"} : i1
    %27 = comb.xor bin %22, %c-1_i9 {sv.namehint = "_count_T"} : i9
    %28 = comb.and bin %21, %27 {sv.namehint = "refill_cnt"} : i9
    %29 = comb.mux bin %23, %21, %22 {sv.namehint = "_counter_T"} : i9
    %30 = comb.mux bin %auto_master_out_d_valid, %29, %counter : i9
    %31 = comb.and bin %15, %26 {sv.namehint = "writeEnable"} : i1
    %tag_array_0 = seq.firmem 1, 1, undefined, port_order : <64 x 21>
    %32 = seq.firmem.read_write_port %tag_array_0[%33] = %41 if %15, clock %clock enable %34 {sv.namehint = "tag_array_tag_rdata_data_0"} : <64 x 21>
    %33 = comb.mux bin %31, %13, %35 : i6
    %34 = comb.or bin %37, %31 : i1
    %35 = comb.extract %io_req_bits_addr from 6 {sv.namehint = "_tag_rdata_T"} : (i33) -> i6
    %36 = comb.xor bin %31, %true {sv.namehint = "_tag_rdata_T_1"} : i1
    %37 = comb.and bin %36, %0 {sv.namehint = "readEnable"} : i1
    %accruedRefillError = seq.firreg %43 clock %clock {firrtl.random_init_start = 119 : ui64} : i1
    %38 = comb.icmp bin ne %28, %c0_i9 {sv.namehint = "_refillError_T"} : i9
    %39 = comb.and bin %38, %accruedRefillError {sv.namehint = "_refillError_T_1"} : i1
    %40 = comb.or bin %auto_master_out_d_bits_corrupt, %39 {sv.namehint = "refillError"} : i1
    %41 = comb.concat %40, %12 {sv.namehint = "enc_tag"} : i1, i20
    %42 = comb.extract %refill_paddr from 6 {sv.namehint = "_masterNodeOut_a_bits_T"} : (i32) -> i26
    %vb_array = seq.firreg %56 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 120 : ui64} : i64
    %43 = comb.mux bin %15, %40, %accruedRefillError : i1
    %44 = comb.xor bin %invalidated, %true {sv.namehint = "_vb_array_T_1"} : i1
    %45 = comb.and bin %31, %44 {sv.namehint = "_vb_array_T_2"} : i1
    %46 = comb.concat %c0_i122, %13 : i122, i6
    %47 = comb.shl bin %c1_i128, %46 {sv.namehint = "_vb_array_T_3"} : i128
    %48 = comb.extract %47 from 0 : (i128) -> i64
    %49 = comb.or bin %vb_array, %48 {sv.namehint = "_vb_array_T_4"} : i64
    %50 = comb.xor bin %vb_array, %c-1_i64 {sv.namehint = "_vb_array_T_5"} : i64
    %51 = comb.extract %47 from 0 : (i128) -> i64
    %52 = comb.or bin %50, %51 {sv.namehint = "_vb_array_T_6"} : i64
    %53 = comb.xor bin %52, %c-1_i64 {sv.namehint = "_vb_array_T_7"} : i64
    %54 = comb.mux bin %45, %49, %53 {sv.namehint = "_vb_array_T_8"} : i64
    %55 = comb.mux bin %15, %54, %vb_array : i64
    %56 = comb.mux bin %io_invalidate, %c0_i64, %55 : i64
    %57 = comb.or %io_invalidate, %invalidated : i1
    %58 = comb.extract %io_s1_paddr from 6 {sv.namehint = "s1_idx"} : (i32) -> i6
    %59 = comb.extract %io_s1_paddr from 12 {sv.namehint = "s1_tag"} : (i32) -> i20
    %60 = comb.concat %c0_i58, %58 : i58, i6
    %61 = comb.shru bin %vb_array, %60 {sv.namehint = "_s1_vb_T_1"} : i64
    %62 = comb.extract %61 from 0 {sv.namehint = "_s1_vb_T_2"} : (i64) -> i1
    %63 = comb.extract %32 from 20 {sv.namehint = "tl_error"} : (i21) -> i1
    %64 = comb.extract %32 from 0 {sv.namehint = "tag"} : (i21) -> i20
    %65 = comb.icmp bin eq %64, %59 {sv.namehint = "_tagMatch_T"} : i20
    %66 = comb.and bin %62, %65 {sv.namehint = "tagMatch"} : i1
    %67 = comb.and bin %66, %63 {sv.namehint = "s1_tl_error_0"} : i1
    %data_arrays_0_0 = seq.firmem 1, 1, undefined, port_order : <512 x 32>
    %68 = seq.firmem.read_write_port %data_arrays_0_0[%79] = %80 if %15, clock %clock enable %69 {sv.namehint = "data_arrays_0_dout_data_0"} : <512 x 32>
    %69 = comb.or bin %82, %75 : i1
    %data_arrays_1_0 = seq.firmem 1, 1, undefined, port_order : <512 x 32>
    %70 = seq.firmem.read_write_port %data_arrays_1_0[%85] = %86 if %15, clock %clock enable %71 {sv.namehint = "data_arrays_1_dout_1_data_0"} : <512 x 32>
    %71 = comb.or bin %88, %83 : i1
    %72 = comb.extract %io_req_bits_addr from 2 {sv.namehint = "_s0_ren_T_6"} : (i33) -> i1
    %73 = comb.xor bin %72, %true {sv.namehint = "_s0_ren_T_1"} : i1
    %74 = comb.xor bin %invalidated, %true {sv.namehint = "_wen_T_5"} : i1
    %75 = comb.and bin %15, %74 {sv.namehint = "wen"} : i1
    %76 = comb.concat %13, %c0_i3 {sv.namehint = "_mem_idx_T_6"} : i6, i3
    %77 = comb.or bin %76, %28 {sv.namehint = "_mem_idx_T_1"} : i9
    %78 = comb.extract %io_req_bits_addr from 3 {sv.namehint = "_mem_idx_T_11"} : (i33) -> i9
    %79 = comb.mux bin %15, %77, %78 {sv.namehint = "writeAddr"} : i9
    %80 = comb.extract %auto_master_out_d_bits_data from 0 {sv.namehint = "data"} : (i64) -> i32
    %81 = comb.xor bin %75, %true {sv.namehint = "_dout_T"} : i1
    %82 = comb.and bin %81, %0, %73 {sv.namehint = "readEnable"} : i1
    %83 = comb.and bin %15, %74 {sv.namehint = "writeEnable"} : i1
    %84 = comb.or bin %76, %28 {sv.namehint = "_mem_idx_T_7"} : i9
    %85 = comb.mux bin %15, %84, %78 {sv.namehint = "writeAddr"} : i9
    %86 = comb.extract %auto_master_out_d_bits_data from 32 {sv.namehint = "data_1"} : (i64) -> i32
    %87 = comb.xor bin %83, %true {sv.namehint = "_dout_T_2"} : i1
    %88 = comb.and bin %87, %0, %72 {sv.namehint = "readEnable"} : i1
    %89 = comb.extract %io_s1_paddr from 2 : (i32) -> i1
    %90 = comb.mux bin %89, %70, %68 {sv.namehint = "s1_dout_0"} : i32
    %s2_dout_0 = seq.firreg %91 clock %clock {firrtl.random_init_start = 229 : ui64, sv.namehint = "s2_dout_0"} : i32
    %91 = comb.mux bin %s1_valid, %90, %s2_dout_0 : i32
    %s2_tl_error = seq.firreg %92 clock %clock {firrtl.random_init_start = 262 : ui64, sv.namehint = "s2_tl_error"} : i1
    %92 = comb.mux bin %s1_valid, %67, %s2_tl_error : i1
    %93 = comb.and bin %s2_valid, %s2_hit {sv.namehint = "io_resp_valid"} : i1
    %94 = comb.concat %42, %c0_i6 {sv.namehint = "masterNodeOut_a_bits_a_address"} : i26, i6
    %95 = comb.and %refill_valid, %57 : i1
    %96 = comb.or %3, %refill_valid : i1
    %97 = comb.xor %31, %true : i1
    %98 = comb.and %97, %96 : i1
    hw.output %9, %94, %93, %s2_dout_0, %s2_tl_error : i1, i32, i1, i32, i1
  }
  hw.module private @ShiftQueue(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_pc : i34, in %io_enq_bits_data : i32, in %io_enq_bits_xcpt_pf_inst : i1, in %io_enq_bits_xcpt_ae_inst : i1, in %io_enq_bits_replay : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_pc : i34, out io_deq_bits_data : i32, out io_deq_bits_xcpt_pf_inst : i1, out io_deq_bits_xcpt_ae_inst : i1, out io_deq_bits_replay : i1, out io_mask : i5) {
    %true = hw.constant true
    %false = hw.constant false
    %valid_0 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %valid_1 = seq.firreg %39 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %valid_2 = seq.firreg %59 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %valid_3 = seq.firreg %79 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %valid_4 = seq.firreg %92 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %elts_0_pc = seq.firreg %11 clock %clock {firrtl.random_init_start = 54 : ui64} : i34
    %elts_0_data = seq.firreg %12 clock %clock {firrtl.random_init_start = 88 : ui64} : i32
    %elts_0_xcpt_pf_inst = seq.firreg %13 clock %clock {firrtl.random_init_start = 122 : ui64} : i1
    %elts_0_xcpt_ae_inst = seq.firreg %14 clock %clock {firrtl.random_init_start = 124 : ui64} : i1
    %elts_0_replay = seq.firreg %15 clock %clock {firrtl.random_init_start = 125 : ui64} : i1
    %elts_1_pc = seq.firreg %30 clock %clock {firrtl.random_init_start = 175 : ui64} : i34
    %elts_1_data = seq.firreg %31 clock %clock {firrtl.random_init_start = 209 : ui64} : i32
    %elts_1_xcpt_pf_inst = seq.firreg %32 clock %clock {firrtl.random_init_start = 243 : ui64} : i1
    %elts_1_xcpt_ae_inst = seq.firreg %33 clock %clock {firrtl.random_init_start = 245 : ui64} : i1
    %elts_1_replay = seq.firreg %34 clock %clock {firrtl.random_init_start = 246 : ui64} : i1
    %elts_2_pc = seq.firreg %50 clock %clock {firrtl.random_init_start = 296 : ui64} : i34
    %elts_2_data = seq.firreg %51 clock %clock {firrtl.random_init_start = 330 : ui64} : i32
    %elts_2_xcpt_pf_inst = seq.firreg %52 clock %clock {firrtl.random_init_start = 364 : ui64} : i1
    %elts_2_xcpt_ae_inst = seq.firreg %53 clock %clock {firrtl.random_init_start = 366 : ui64} : i1
    %elts_2_replay = seq.firreg %54 clock %clock {firrtl.random_init_start = 367 : ui64} : i1
    %elts_3_pc = seq.firreg %70 clock %clock {firrtl.random_init_start = 417 : ui64} : i34
    %elts_3_data = seq.firreg %71 clock %clock {firrtl.random_init_start = 451 : ui64} : i32
    %elts_3_xcpt_pf_inst = seq.firreg %72 clock %clock {firrtl.random_init_start = 485 : ui64} : i1
    %elts_3_xcpt_ae_inst = seq.firreg %73 clock %clock {firrtl.random_init_start = 487 : ui64} : i1
    %elts_3_replay = seq.firreg %74 clock %clock {firrtl.random_init_start = 488 : ui64} : i1
    %elts_4_pc = seq.firreg %84 clock %clock {firrtl.random_init_start = 538 : ui64} : i34
    %elts_4_data = seq.firreg %85 clock %clock {firrtl.random_init_start = 572 : ui64} : i32
    %elts_4_xcpt_pf_inst = seq.firreg %86 clock %clock {firrtl.random_init_start = 606 : ui64} : i1
    %elts_4_xcpt_ae_inst = seq.firreg %87 clock %clock {firrtl.random_init_start = 608 : ui64} : i1
    %elts_4_replay = seq.firreg %88 clock %clock {firrtl.random_init_start = 609 : ui64} : i1
    %0 = comb.mux bin %valid_1, %elts_1_pc, %io_enq_bits_pc {sv.namehint = "wdata_pc"} : i34
    %1 = comb.mux bin %valid_1, %elts_1_data, %io_enq_bits_data {sv.namehint = "wdata_data"} : i32
    %2 = comb.mux bin %valid_1, %elts_1_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_xcpt_pf_inst"} : i1
    %3 = comb.mux bin %valid_1, %elts_1_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_xcpt_ae_inst"} : i1
    %4 = comb.mux bin %valid_1, %elts_1_replay, %io_enq_bits_replay {sv.namehint = "wdata_replay"} : i1
    %5 = comb.and bin %81, %io_enq_valid {sv.namehint = "_valid_4_T_4"} : i1
    %6 = comb.and bin %5, %valid_0 {sv.namehint = "_wen_T_2"} : i1
    %7 = comb.or bin %valid_1, %6 {sv.namehint = "_wen_T_3"} : i1
    %8 = comb.xor bin %valid_0, %true {sv.namehint = "_wen_T_6"} : i1
    %9 = comb.and bin %5, %8 {sv.namehint = "_wen_T_7"} : i1
    %10 = comb.mux bin %io_deq_ready, %7, %9 {sv.namehint = "wen"} : i1
    %11 = comb.mux bin %10, %0, %elts_0_pc : i34
    %12 = comb.mux bin %10, %1, %elts_0_data : i32
    %13 = comb.mux bin %10, %2, %elts_0_xcpt_pf_inst : i1
    %14 = comb.mux bin %10, %3, %elts_0_xcpt_ae_inst : i1
    %15 = comb.mux bin %10, %4, %elts_0_replay : i1
    %16 = comb.and bin %5, %valid_0 {sv.namehint = "_valid_0_T_2"} : i1
    %17 = comb.or bin %valid_1, %16 {sv.namehint = "_valid_0_T_3"} : i1
    %18 = comb.or bin %5, %valid_0 {sv.namehint = "_valid_0_T_6"} : i1
    %19 = comb.mux bin %io_deq_ready, %17, %18 {sv.namehint = "_valid_0_T_7"} : i1
    %20 = comb.mux bin %valid_2, %elts_2_pc, %io_enq_bits_pc {sv.namehint = "wdata_1_pc"} : i34
    %21 = comb.mux bin %valid_2, %elts_2_data, %io_enq_bits_data {sv.namehint = "wdata_1_data"} : i32
    %22 = comb.mux bin %valid_2, %elts_2_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_1_xcpt_pf_inst"} : i1
    %23 = comb.mux bin %valid_2, %elts_2_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_1_xcpt_ae_inst"} : i1
    %24 = comb.mux bin %valid_2, %elts_2_replay, %io_enq_bits_replay {sv.namehint = "wdata_1_replay"} : i1
    %25 = comb.and bin %5, %valid_1 {sv.namehint = "_wen_T_10"} : i1
    %26 = comb.or bin %valid_2, %25 {sv.namehint = "_wen_T_11"} : i1
    %27 = comb.xor bin %valid_1, %true {sv.namehint = "_wen_T_14"} : i1
    %28 = comb.and bin %5, %valid_0, %27 {sv.namehint = "_wen_T_15"} : i1
    %29 = comb.mux bin %io_deq_ready, %26, %28 {sv.namehint = "wen_1"} : i1
    %30 = comb.mux bin %29, %20, %elts_1_pc : i34
    %31 = comb.mux bin %29, %21, %elts_1_data : i32
    %32 = comb.mux bin %29, %22, %elts_1_xcpt_pf_inst : i1
    %33 = comb.mux bin %29, %23, %elts_1_xcpt_ae_inst : i1
    %34 = comb.mux bin %29, %24, %elts_1_replay : i1
    %35 = comb.and bin %5, %valid_1 {sv.namehint = "_valid_1_T_2"} : i1
    %36 = comb.or bin %valid_2, %35 {sv.namehint = "_valid_1_T_3"} : i1
    %37 = comb.and bin %5, %valid_0 {sv.namehint = "_valid_1_T_5"} : i1
    %38 = comb.or bin %37, %valid_1 {sv.namehint = "_valid_1_T_6"} : i1
    %39 = comb.mux bin %io_deq_ready, %36, %38 {sv.namehint = "_valid_1_T_7"} : i1
    %40 = comb.mux bin %valid_3, %elts_3_pc, %io_enq_bits_pc {sv.namehint = "wdata_2_pc"} : i34
    %41 = comb.mux bin %valid_3, %elts_3_data, %io_enq_bits_data {sv.namehint = "wdata_2_data"} : i32
    %42 = comb.mux bin %valid_3, %elts_3_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_2_xcpt_pf_inst"} : i1
    %43 = comb.mux bin %valid_3, %elts_3_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_2_xcpt_ae_inst"} : i1
    %44 = comb.mux bin %valid_3, %elts_3_replay, %io_enq_bits_replay {sv.namehint = "wdata_2_replay"} : i1
    %45 = comb.and bin %5, %valid_2 {sv.namehint = "_wen_T_18"} : i1
    %46 = comb.or bin %valid_3, %45 {sv.namehint = "_wen_T_19"} : i1
    %47 = comb.xor bin %valid_2, %true {sv.namehint = "_wen_T_22"} : i1
    %48 = comb.and bin %5, %valid_1, %47 {sv.namehint = "_wen_T_23"} : i1
    %49 = comb.mux bin %io_deq_ready, %46, %48 {sv.namehint = "wen_2"} : i1
    %50 = comb.mux bin %49, %40, %elts_2_pc : i34
    %51 = comb.mux bin %49, %41, %elts_2_data : i32
    %52 = comb.mux bin %49, %42, %elts_2_xcpt_pf_inst : i1
    %53 = comb.mux bin %49, %43, %elts_2_xcpt_ae_inst : i1
    %54 = comb.mux bin %49, %44, %elts_2_replay : i1
    %55 = comb.and bin %5, %valid_2 {sv.namehint = "_valid_2_T_2"} : i1
    %56 = comb.or bin %valid_3, %55 {sv.namehint = "_valid_2_T_3"} : i1
    %57 = comb.and bin %5, %valid_1 {sv.namehint = "_valid_2_T_5"} : i1
    %58 = comb.or bin %57, %valid_2 {sv.namehint = "_valid_2_T_6"} : i1
    %59 = comb.mux bin %io_deq_ready, %56, %58 {sv.namehint = "_valid_2_T_7"} : i1
    %60 = comb.mux bin %valid_4, %elts_4_pc, %io_enq_bits_pc {sv.namehint = "wdata_3_pc"} : i34
    %61 = comb.mux bin %valid_4, %elts_4_data, %io_enq_bits_data {sv.namehint = "wdata_3_data"} : i32
    %62 = comb.mux bin %valid_4, %elts_4_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_3_xcpt_pf_inst"} : i1
    %63 = comb.mux bin %valid_4, %elts_4_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_3_xcpt_ae_inst"} : i1
    %64 = comb.mux bin %valid_4, %elts_4_replay, %io_enq_bits_replay {sv.namehint = "wdata_3_replay"} : i1
    %65 = comb.and bin %5, %valid_3 {sv.namehint = "_wen_T_26"} : i1
    %66 = comb.or bin %valid_4, %65 {sv.namehint = "_wen_T_27"} : i1
    %67 = comb.xor bin %valid_3, %true {sv.namehint = "_wen_T_30"} : i1
    %68 = comb.and bin %5, %valid_2, %67 {sv.namehint = "_wen_T_31"} : i1
    %69 = comb.mux bin %io_deq_ready, %66, %68 {sv.namehint = "wen_3"} : i1
    %70 = comb.mux bin %69, %60, %elts_3_pc : i34
    %71 = comb.mux bin %69, %61, %elts_3_data : i32
    %72 = comb.mux bin %69, %62, %elts_3_xcpt_pf_inst : i1
    %73 = comb.mux bin %69, %63, %elts_3_xcpt_ae_inst : i1
    %74 = comb.mux bin %69, %64, %elts_3_replay : i1
    %75 = comb.and bin %5, %valid_3 {sv.namehint = "_valid_3_T_2"} : i1
    %76 = comb.or bin %valid_4, %75 {sv.namehint = "_valid_3_T_3"} : i1
    %77 = comb.and bin %5, %valid_2 {sv.namehint = "_valid_3_T_5"} : i1
    %78 = comb.or bin %77, %valid_3 {sv.namehint = "_valid_3_T_6"} : i1
    %79 = comb.mux bin %io_deq_ready, %76, %78 {sv.namehint = "_valid_3_T_7"} : i1
    %80 = comb.and bin %5, %valid_4 {sv.namehint = "_wen_T_35"} : i1
    %81 = comb.xor bin %valid_4, %true {sv.namehint = "io_enq_ready"} : i1
    %82 = comb.and bin %5, %valid_3 {sv.namehint = "_wen_T_39"} : i1
    %83 = comb.mux bin %io_deq_ready, %80, %82 {sv.namehint = "wen_4"} : i1
    %84 = comb.mux bin %83, %io_enq_bits_pc, %elts_4_pc : i34
    %85 = comb.mux bin %83, %io_enq_bits_data, %elts_4_data : i32
    %86 = comb.mux bin %83, %io_enq_bits_xcpt_pf_inst, %elts_4_xcpt_pf_inst : i1
    %87 = comb.mux bin %83, %io_enq_bits_xcpt_ae_inst, %elts_4_xcpt_ae_inst : i1
    %88 = comb.mux bin %83, %io_enq_bits_replay, %elts_4_replay : i1
    %89 = comb.and bin %5, %valid_4 {sv.namehint = "_valid_4_T_3"} : i1
    %90 = comb.and bin %5, %valid_3 {sv.namehint = "_valid_4_T_5"} : i1
    %91 = comb.or bin %90, %valid_4 {sv.namehint = "_valid_4_T_6"} : i1
    %92 = comb.mux bin %io_deq_ready, %89, %91 {sv.namehint = "_valid_4_T_7"} : i1
    %93 = comb.or %io_enq_valid, %valid_0 {sv.namehint = "io_deq_valid"} : i1
    %94 = comb.mux bin %valid_0, %elts_0_pc, %io_enq_bits_pc {sv.namehint = "io_deq_bits_pc"} : i34
    %95 = comb.mux bin %valid_0, %elts_0_data, %io_enq_bits_data {sv.namehint = "io_deq_bits_data"} : i32
    %96 = comb.mux bin %valid_0, %elts_0_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "io_deq_bits_xcpt_pf_inst"} : i1
    %97 = comb.mux bin %valid_0, %elts_0_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "io_deq_bits_xcpt_ae_inst"} : i1
    %98 = comb.mux bin %valid_0, %elts_0_replay, %io_enq_bits_replay {sv.namehint = "io_deq_bits_replay"} : i1
    %99 = comb.concat %valid_4, %valid_3, %valid_2, %valid_1, %valid_0 {sv.namehint = "io_mask"} : i1, i1, i1, i1, i1
    hw.output %81, %93, %94, %95, %96, %97, %98, %99 : i1, i1, i34, i32, i1, i1, i1, i5
  }
  hw.module private @PMPChecker_2(in %io_prv : i2, in %io_pmp_0_cfg_l : i1, in %io_pmp_0_cfg_a : i2, in %io_pmp_0_cfg_x : i1, in %io_pmp_0_addr : i30, in %io_pmp_0_mask : i32, in %io_pmp_1_cfg_l : i1, in %io_pmp_1_cfg_a : i2, in %io_pmp_1_cfg_x : i1, in %io_pmp_1_addr : i30, in %io_pmp_1_mask : i32, in %io_pmp_2_cfg_l : i1, in %io_pmp_2_cfg_a : i2, in %io_pmp_2_cfg_x : i1, in %io_pmp_2_addr : i30, in %io_pmp_2_mask : i32, in %io_pmp_3_cfg_l : i1, in %io_pmp_3_cfg_a : i2, in %io_pmp_3_cfg_x : i1, in %io_pmp_3_addr : i30, in %io_pmp_3_mask : i32, in %io_pmp_4_cfg_l : i1, in %io_pmp_4_cfg_a : i2, in %io_pmp_4_cfg_x : i1, in %io_pmp_4_addr : i30, in %io_pmp_4_mask : i32, in %io_pmp_5_cfg_l : i1, in %io_pmp_5_cfg_a : i2, in %io_pmp_5_cfg_x : i1, in %io_pmp_5_addr : i30, in %io_pmp_5_mask : i32, in %io_pmp_6_cfg_l : i1, in %io_pmp_6_cfg_a : i2, in %io_pmp_6_cfg_x : i1, in %io_pmp_6_addr : i30, in %io_pmp_6_mask : i32, in %io_pmp_7_cfg_l : i1, in %io_pmp_7_cfg_a : i2, in %io_pmp_7_cfg_x : i1, in %io_pmp_7_addr : i30, in %io_pmp_7_mask : i32, in %io_addr : i32, out io_x : i1) {
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %c-1_i32 = hw.constant -1 : i32
    %true = hw.constant true
    %0 = comb.extract %io_prv from 1 {sv.namehint = "default"} : (i2) -> i1
    %1 = comb.extract %io_pmp_7_cfg_a from 1 {sv.namehint = "_res_hit_T"} : (i2) -> i1
    %2 = comb.concat %io_pmp_7_addr, %c0_i2 {sv.namehint = "_res_hit_T_4"} : i30, i2
    %3 = comb.xor bin %io_addr, %2 {sv.namehint = "_res_hit_T_5"} : i32
    %4 = comb.xor bin %io_pmp_7_mask, %c-1_i32 {sv.namehint = "_res_hit_T_6"} : i32
    %5 = comb.and bin %3, %4 {sv.namehint = "_res_hit_T_7"} : i32
    %6 = comb.icmp bin eq %5, %c0_i32 {sv.namehint = "_res_hit_T_8"} : i32
    %7 = comb.extract %io_pmp_7_cfg_a from 0 {sv.namehint = "_res_hit_T_9"} : (i2) -> i1
    %8 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_17"} : i30, i2
    %9 = comb.icmp bin uge %io_addr, %8 {sv.namehint = "_res_hit_T_19"} : i32
    %10 = comb.concat %io_pmp_7_addr, %c0_i2 {sv.namehint = "_res_hit_T_23"} : i30, i2
    %11 = comb.icmp bin ult %io_addr, %10 {sv.namehint = "_res_hit_T_24"} : i32
    %12 = comb.and bin %7, %9, %11 {sv.namehint = "_res_hit_T_26"} : i1
    %13 = comb.mux bin %1, %6, %12 {sv.namehint = "res_hit"} : i1
    %14 = comb.xor bin %io_pmp_7_cfg_l, %true {sv.namehint = "_res_ignore_T"} : i1
    %15 = comb.and bin %0, %14 {sv.namehint = "res_ignore"} : i1
    %16 = comb.or bin %io_pmp_7_cfg_x, %15 {sv.namehint = "res_cur_cfg_x"} : i1
    %17 = comb.mux bin %13, %16, %0 {sv.namehint = "_res_T_44_cfg_x"} : i1
    %18 = comb.extract %io_pmp_6_cfg_a from 1 {sv.namehint = "_res_hit_T_27"} : (i2) -> i1
    %19 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_31"} : i30, i2
    %20 = comb.xor bin %io_addr, %19 {sv.namehint = "_res_hit_T_32"} : i32
    %21 = comb.xor bin %io_pmp_6_mask, %c-1_i32 {sv.namehint = "_res_hit_T_33"} : i32
    %22 = comb.and bin %20, %21 {sv.namehint = "_res_hit_T_34"} : i32
    %23 = comb.icmp bin eq %22, %c0_i32 {sv.namehint = "_res_hit_T_35"} : i32
    %24 = comb.extract %io_pmp_6_cfg_a from 0 {sv.namehint = "_res_hit_T_36"} : (i2) -> i1
    %25 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_44"} : i30, i2
    %26 = comb.icmp bin uge %io_addr, %25 {sv.namehint = "_res_hit_T_46"} : i32
    %27 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_50"} : i30, i2
    %28 = comb.icmp bin ult %io_addr, %27 {sv.namehint = "_res_hit_T_51"} : i32
    %29 = comb.and bin %24, %26, %28 {sv.namehint = "_res_hit_T_53"} : i1
    %30 = comb.mux bin %18, %23, %29 {sv.namehint = "res_hit_1"} : i1
    %31 = comb.xor bin %io_pmp_6_cfg_l, %true {sv.namehint = "_res_ignore_T_1"} : i1
    %32 = comb.and bin %0, %31 {sv.namehint = "res_ignore_1"} : i1
    %33 = comb.or bin %io_pmp_6_cfg_x, %32 {sv.namehint = "res_cur_1_cfg_x"} : i1
    %34 = comb.mux bin %30, %33, %17 {sv.namehint = "_res_T_89_cfg_x"} : i1
    %35 = comb.extract %io_pmp_5_cfg_a from 1 {sv.namehint = "_res_hit_T_54"} : (i2) -> i1
    %36 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_58"} : i30, i2
    %37 = comb.xor bin %io_addr, %36 {sv.namehint = "_res_hit_T_59"} : i32
    %38 = comb.xor bin %io_pmp_5_mask, %c-1_i32 {sv.namehint = "_res_hit_T_60"} : i32
    %39 = comb.and bin %37, %38 {sv.namehint = "_res_hit_T_61"} : i32
    %40 = comb.icmp bin eq %39, %c0_i32 {sv.namehint = "_res_hit_T_62"} : i32
    %41 = comb.extract %io_pmp_5_cfg_a from 0 {sv.namehint = "_res_hit_T_63"} : (i2) -> i1
    %42 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_71"} : i30, i2
    %43 = comb.icmp bin uge %io_addr, %42 {sv.namehint = "_res_hit_T_73"} : i32
    %44 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_77"} : i30, i2
    %45 = comb.icmp bin ult %io_addr, %44 {sv.namehint = "_res_hit_T_78"} : i32
    %46 = comb.and bin %41, %43, %45 {sv.namehint = "_res_hit_T_80"} : i1
    %47 = comb.mux bin %35, %40, %46 {sv.namehint = "res_hit_2"} : i1
    %48 = comb.xor bin %io_pmp_5_cfg_l, %true {sv.namehint = "_res_ignore_T_2"} : i1
    %49 = comb.and bin %0, %48 {sv.namehint = "res_ignore_2"} : i1
    %50 = comb.or bin %io_pmp_5_cfg_x, %49 {sv.namehint = "res_cur_2_cfg_x"} : i1
    %51 = comb.mux bin %47, %50, %34 {sv.namehint = "_res_T_134_cfg_x"} : i1
    %52 = comb.extract %io_pmp_4_cfg_a from 1 {sv.namehint = "_res_hit_T_81"} : (i2) -> i1
    %53 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_85"} : i30, i2
    %54 = comb.xor bin %io_addr, %53 {sv.namehint = "_res_hit_T_86"} : i32
    %55 = comb.xor bin %io_pmp_4_mask, %c-1_i32 {sv.namehint = "_res_hit_T_87"} : i32
    %56 = comb.and bin %54, %55 {sv.namehint = "_res_hit_T_88"} : i32
    %57 = comb.icmp bin eq %56, %c0_i32 {sv.namehint = "_res_hit_T_89"} : i32
    %58 = comb.extract %io_pmp_4_cfg_a from 0 {sv.namehint = "_res_hit_T_90"} : (i2) -> i1
    %59 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_98"} : i30, i2
    %60 = comb.icmp bin uge %io_addr, %59 {sv.namehint = "_res_hit_T_100"} : i32
    %61 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_104"} : i30, i2
    %62 = comb.icmp bin ult %io_addr, %61 {sv.namehint = "_res_hit_T_105"} : i32
    %63 = comb.and bin %58, %60, %62 {sv.namehint = "_res_hit_T_107"} : i1
    %64 = comb.mux bin %52, %57, %63 {sv.namehint = "res_hit_3"} : i1
    %65 = comb.xor bin %io_pmp_4_cfg_l, %true {sv.namehint = "_res_ignore_T_3"} : i1
    %66 = comb.and bin %0, %65 {sv.namehint = "res_ignore_3"} : i1
    %67 = comb.or bin %io_pmp_4_cfg_x, %66 {sv.namehint = "res_cur_3_cfg_x"} : i1
    %68 = comb.mux bin %64, %67, %51 {sv.namehint = "_res_T_179_cfg_x"} : i1
    %69 = comb.extract %io_pmp_3_cfg_a from 1 {sv.namehint = "_res_hit_T_108"} : (i2) -> i1
    %70 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_112"} : i30, i2
    %71 = comb.xor bin %io_addr, %70 {sv.namehint = "_res_hit_T_113"} : i32
    %72 = comb.xor bin %io_pmp_3_mask, %c-1_i32 {sv.namehint = "_res_hit_T_114"} : i32
    %73 = comb.and bin %71, %72 {sv.namehint = "_res_hit_T_115"} : i32
    %74 = comb.icmp bin eq %73, %c0_i32 {sv.namehint = "_res_hit_T_116"} : i32
    %75 = comb.extract %io_pmp_3_cfg_a from 0 {sv.namehint = "_res_hit_T_117"} : (i2) -> i1
    %76 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_125"} : i30, i2
    %77 = comb.icmp bin uge %io_addr, %76 {sv.namehint = "_res_hit_T_127"} : i32
    %78 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_131"} : i30, i2
    %79 = comb.icmp bin ult %io_addr, %78 {sv.namehint = "_res_hit_T_132"} : i32
    %80 = comb.and bin %75, %77, %79 {sv.namehint = "_res_hit_T_134"} : i1
    %81 = comb.mux bin %69, %74, %80 {sv.namehint = "res_hit_4"} : i1
    %82 = comb.xor bin %io_pmp_3_cfg_l, %true {sv.namehint = "_res_ignore_T_4"} : i1
    %83 = comb.and bin %0, %82 {sv.namehint = "res_ignore_4"} : i1
    %84 = comb.or bin %io_pmp_3_cfg_x, %83 {sv.namehint = "res_cur_4_cfg_x"} : i1
    %85 = comb.mux bin %81, %84, %68 {sv.namehint = "_res_T_224_cfg_x"} : i1
    %86 = comb.extract %io_pmp_2_cfg_a from 1 {sv.namehint = "_res_hit_T_135"} : (i2) -> i1
    %87 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_139"} : i30, i2
    %88 = comb.xor bin %io_addr, %87 {sv.namehint = "_res_hit_T_140"} : i32
    %89 = comb.xor bin %io_pmp_2_mask, %c-1_i32 {sv.namehint = "_res_hit_T_141"} : i32
    %90 = comb.and bin %88, %89 {sv.namehint = "_res_hit_T_142"} : i32
    %91 = comb.icmp bin eq %90, %c0_i32 {sv.namehint = "_res_hit_T_143"} : i32
    %92 = comb.extract %io_pmp_2_cfg_a from 0 {sv.namehint = "_res_hit_T_144"} : (i2) -> i1
    %93 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_152"} : i30, i2
    %94 = comb.icmp bin uge %io_addr, %93 {sv.namehint = "_res_hit_T_154"} : i32
    %95 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_158"} : i30, i2
    %96 = comb.icmp bin ult %io_addr, %95 {sv.namehint = "_res_hit_T_159"} : i32
    %97 = comb.and bin %92, %94, %96 {sv.namehint = "_res_hit_T_161"} : i1
    %98 = comb.mux bin %86, %91, %97 {sv.namehint = "res_hit_5"} : i1
    %99 = comb.xor bin %io_pmp_2_cfg_l, %true {sv.namehint = "_res_ignore_T_5"} : i1
    %100 = comb.and bin %0, %99 {sv.namehint = "res_ignore_5"} : i1
    %101 = comb.or bin %io_pmp_2_cfg_x, %100 {sv.namehint = "res_cur_5_cfg_x"} : i1
    %102 = comb.mux bin %98, %101, %85 {sv.namehint = "_res_T_269_cfg_x"} : i1
    %103 = comb.extract %io_pmp_1_cfg_a from 1 {sv.namehint = "_res_hit_T_162"} : (i2) -> i1
    %104 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_166"} : i30, i2
    %105 = comb.xor bin %io_addr, %104 {sv.namehint = "_res_hit_T_167"} : i32
    %106 = comb.xor bin %io_pmp_1_mask, %c-1_i32 {sv.namehint = "_res_hit_T_168"} : i32
    %107 = comb.and bin %105, %106 {sv.namehint = "_res_hit_T_169"} : i32
    %108 = comb.icmp bin eq %107, %c0_i32 {sv.namehint = "_res_hit_T_170"} : i32
    %109 = comb.extract %io_pmp_1_cfg_a from 0 {sv.namehint = "_res_hit_T_171"} : (i2) -> i1
    %110 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_179"} : i30, i2
    %111 = comb.icmp bin uge %io_addr, %110 {sv.namehint = "_res_hit_T_181"} : i32
    %112 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_185"} : i30, i2
    %113 = comb.icmp bin ult %io_addr, %112 {sv.namehint = "_res_hit_T_186"} : i32
    %114 = comb.and bin %109, %111, %113 {sv.namehint = "_res_hit_T_188"} : i1
    %115 = comb.mux bin %103, %108, %114 {sv.namehint = "res_hit_6"} : i1
    %116 = comb.xor bin %io_pmp_1_cfg_l, %true {sv.namehint = "_res_ignore_T_6"} : i1
    %117 = comb.and bin %0, %116 {sv.namehint = "res_ignore_6"} : i1
    %118 = comb.or bin %io_pmp_1_cfg_x, %117 {sv.namehint = "res_cur_6_cfg_x"} : i1
    %119 = comb.mux bin %115, %118, %102 {sv.namehint = "_res_T_314_cfg_x"} : i1
    %120 = comb.extract %io_pmp_0_cfg_a from 1 {sv.namehint = "_res_hit_T_189"} : (i2) -> i1
    %121 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_193"} : i30, i2
    %122 = comb.xor bin %io_addr, %121 {sv.namehint = "_res_hit_T_194"} : i32
    %123 = comb.xor bin %io_pmp_0_mask, %c-1_i32 {sv.namehint = "_res_hit_T_195"} : i32
    %124 = comb.and bin %122, %123 {sv.namehint = "_res_hit_T_196"} : i32
    %125 = comb.icmp bin eq %124, %c0_i32 {sv.namehint = "_res_hit_T_197"} : i32
    %126 = comb.extract %io_pmp_0_cfg_a from 0 {sv.namehint = "_res_hit_T_198"} : (i2) -> i1
    %127 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_212"} : i30, i2
    %128 = comb.icmp bin ult %io_addr, %127 {sv.namehint = "_res_hit_T_214"} : i32
    %129 = comb.and bin %126, %128 {sv.namehint = "_res_hit_T_215"} : i1
    %130 = comb.mux bin %120, %125, %129 {sv.namehint = "res_hit_7"} : i1
    %131 = comb.xor bin %io_pmp_0_cfg_l, %true {sv.namehint = "_res_ignore_T_7"} : i1
    %132 = comb.and bin %0, %131 {sv.namehint = "res_ignore_7"} : i1
    %133 = comb.or bin %io_pmp_0_cfg_x, %132 {sv.namehint = "res_cur_7_cfg_x"} : i1
    %134 = comb.mux bin %130, %133, %119 {sv.namehint = "io_x"} : i1
    hw.output %134 : i1
  }
  hw.module private @TLB_1(in %io_req_bits_vaddr : i34, out io_resp_paddr : i32, out io_resp_pf_inst : i1, out io_resp_ae_inst : i1, out io_resp_cacheable : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_x : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_x : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_x : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_x : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_x : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_x : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_x : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_x : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-8_i4 = hw.constant -8 : i4
    %false = hw.constant false {sv.namehint = "entries_barrier.io_x_c"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i5 = hw.constant 0 : i5
    %c0_i6 = hw.constant 0 : i6
    %c0_i18 = hw.constant 0 : i18
    %c-512_i10 = hw.constant -512 : i10
    %c0_i8 = hw.constant 0 : i8
    %c0_i22 = hw.constant 0 : i22
    %c-1_i2 = hw.constant -1 : i2 {sv.namehint = "pmp.io_prv"}
    %true = hw.constant true
    %pmp.io_x = hw.instance "pmp" @PMPChecker_2(io_prv: %c-1_i2: i2, io_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_pmp_0_cfg_x: %io_ptw_pmp_0_cfg_x: i1, io_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_pmp_1_cfg_x: %io_ptw_pmp_1_cfg_x: i1, io_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_pmp_2_cfg_x: %io_ptw_pmp_2_cfg_x: i1, io_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_pmp_3_cfg_x: %io_ptw_pmp_3_cfg_x: i1, io_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_pmp_4_cfg_x: %io_ptw_pmp_4_cfg_x: i1, io_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_pmp_5_cfg_x: %io_ptw_pmp_5_cfg_x: i1, io_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_pmp_6_cfg_x: %io_ptw_pmp_6_cfg_x: i1, io_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_pmp_7_cfg_x: %io_ptw_pmp_7_cfg_x: i1, io_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_pmp_7_mask: %io_ptw_pmp_7_mask: i32, io_addr: %0: i32) -> (io_x: i1) {sv.namehint = "pmp.io_x"}
    %0 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "pmp.io_addr"} : (i34) -> i32
    %1 = comb.extract %io_req_bits_vaddr from 14 : (i34) -> i20
    %2 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i2
    %3 = comb.xor bin %2, %c-1_i2 : i2
    %4 = comb.concat %1, %3 : i20, i2
    %5 = comb.icmp bin eq %4, %c0_i22 {sv.namehint = "_legal_address_T_4"} : i22
    %6 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i6
    %7 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i2
    %8 = comb.xor bin %7, %c-1_i2 : i2
    %9 = comb.concat %6, %8 : i6, i2
    %10 = comb.icmp bin eq %9, %c0_i8 {sv.namehint = "_legal_address_T_9"} : i8
    %11 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i8
    %12 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i10
    %13 = comb.xor bin %12, %c-512_i10 : i10
    %14 = comb.concat %11, %13 : i8, i10
    %15 = comb.icmp bin eq %14, %c0_i18 {sv.namehint = "_legal_address_T_14"} : i18
    %16 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i22
    %17 = comb.icmp bin ne %16, %c0_i22 : i22
    %18 = comb.xor bin %17, %true {sv.namehint = "_legal_address_T_19"} : i1
    %19 = comb.extract %io_req_bits_vaddr from 17 : (i34) -> i17
    %20 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %21 = comb.xor bin %20, %true : i1
    %22 = comb.concat %19, %21 : i17, i1
    %23 = comb.icmp bin eq %22, %c0_i18 {sv.namehint = "_legal_address_T_24"} : i18
    %24 = comb.extract %io_req_bits_vaddr from 32 : (i34) -> i2
    %25 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i4
    %26 = comb.xor bin %25, %c-8_i4 : i4
    %27 = comb.concat %24, %26 : i2, i4
    %28 = comb.icmp bin eq %27, %c0_i6 {sv.namehint = "_legal_address_T_29"} : i6
    %29 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i3
    %30 = comb.extract %io_req_bits_vaddr from 29 : (i34) -> i2
    %31 = comb.xor bin %30, %c-1_i2 : i2
    %32 = comb.concat %29, %31 : i3, i2
    %33 = comb.icmp bin eq %32, %c0_i5 {sv.namehint = "_legal_address_T_34"} : i5
    %34 = comb.or bin %5, %10, %15, %18, %23, %28, %33 {sv.namehint = "legal_address"} : i1
    %35 = comb.extract %26 from 3 : (i4) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "_cacheable_T_12"} : i1
    %37 = comb.and bin %34, %36 {sv.namehint = "cacheable"} : i1
    %38 = comb.xor bin %io_ptw_status_debug, %true {sv.namehint = "_deny_access_to_debug_T"} : i1
    %39 = comb.xor bin %17, %true {sv.namehint = "_deny_access_to_debug_T_5"} : i1
    %40 = comb.and bin %38, %39 {sv.namehint = "deny_access_to_debug"} : i1
    %41 = comb.xor bin %40, %true {sv.namehint = "_prot_x_T_32"} : i1
    %42 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i1
    %43 = comb.xor bin %42, %true : i1
    %44 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %45 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %46 = comb.extract %io_req_bits_vaddr from 25 : (i34) -> i1
    %47 = comb.concat %44, %45, %46 : i2, i1, i1
    %48 = comb.icmp bin eq %47, %c0_i4 {sv.namehint = "_prot_x_T_4"} : i4
    %49 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i1
    %50 = comb.concat %49, %43 : i1, i1
    %51 = comb.icmp bin eq %50, %c0_i2 {sv.namehint = "_prot_x_T_9"} : i2
    %52 = comb.extract %26 from 2 : (i4) -> i2
    %53 = comb.icmp bin eq %52, %c0_i2 {sv.namehint = "_prot_x_T_14"} : i2
    %54 = comb.or bin %48, %51, %53 {sv.namehint = "_prot_x_T_30"} : i1
    %55 = comb.and bin %34, %54, %41, %pmp.io_x {sv.namehint = "prot_x"} : i1
    %entries_barrier.io_y_u, %entries_barrier.io_y_ae_ptw, %entries_barrier.io_y_ae_final, %entries_barrier.io_y_pf, %entries_barrier.io_y_gf, %entries_barrier.io_y_sw, %entries_barrier.io_y_sx, %entries_barrier.io_y_sr, %entries_barrier.io_y_pw, %entries_barrier.io_y_px, %entries_barrier.io_y_pr, %entries_barrier.io_y_ppp, %entries_barrier.io_y_pal, %entries_barrier.io_y_paa, %entries_barrier.io_y_eff, %entries_barrier.io_y_c = hw.instance "entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier.io_y_c"}
    %entries_barrier_1.io_y_u, %entries_barrier_1.io_y_ae_ptw, %entries_barrier_1.io_y_ae_final, %entries_barrier_1.io_y_pf, %entries_barrier_1.io_y_gf, %entries_barrier_1.io_y_sw, %entries_barrier_1.io_y_sx, %entries_barrier_1.io_y_sr, %entries_barrier_1.io_y_pw, %entries_barrier_1.io_y_px, %entries_barrier_1.io_y_pr, %entries_barrier_1.io_y_ppp, %entries_barrier_1.io_y_pal, %entries_barrier_1.io_y_paa, %entries_barrier_1.io_y_eff, %entries_barrier_1.io_y_c = hw.instance "entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_1.io_y_c"}
    %entries_barrier_2.io_y_u, %entries_barrier_2.io_y_ae_ptw, %entries_barrier_2.io_y_ae_final, %entries_barrier_2.io_y_pf, %entries_barrier_2.io_y_gf, %entries_barrier_2.io_y_sw, %entries_barrier_2.io_y_sx, %entries_barrier_2.io_y_sr, %entries_barrier_2.io_y_pw, %entries_barrier_2.io_y_px, %entries_barrier_2.io_y_pr, %entries_barrier_2.io_y_ppp, %entries_barrier_2.io_y_pal, %entries_barrier_2.io_y_paa, %entries_barrier_2.io_y_eff, %entries_barrier_2.io_y_c = hw.instance "entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_2.io_y_c"}
    %entries_barrier_3.io_y_u, %entries_barrier_3.io_y_ae_ptw, %entries_barrier_3.io_y_ae_final, %entries_barrier_3.io_y_pf, %entries_barrier_3.io_y_gf, %entries_barrier_3.io_y_sw, %entries_barrier_3.io_y_sx, %entries_barrier_3.io_y_sr, %entries_barrier_3.io_y_pw, %entries_barrier_3.io_y_px, %entries_barrier_3.io_y_pr, %entries_barrier_3.io_y_ppp, %entries_barrier_3.io_y_pal, %entries_barrier_3.io_y_paa, %entries_barrier_3.io_y_eff, %entries_barrier_3.io_y_c = hw.instance "entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_3.io_y_c"}
    %entries_barrier_4.io_y_u, %entries_barrier_4.io_y_ae_ptw, %entries_barrier_4.io_y_ae_final, %entries_barrier_4.io_y_pf, %entries_barrier_4.io_y_gf, %entries_barrier_4.io_y_sw, %entries_barrier_4.io_y_sx, %entries_barrier_4.io_y_sr, %entries_barrier_4.io_y_pw, %entries_barrier_4.io_y_px, %entries_barrier_4.io_y_pr, %entries_barrier_4.io_y_ppp, %entries_barrier_4.io_y_pal, %entries_barrier_4.io_y_paa, %entries_barrier_4.io_y_eff, %entries_barrier_4.io_y_c = hw.instance "entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_4.io_y_c"}
    %entries_barrier_5.io_y_u, %entries_barrier_5.io_y_ae_ptw, %entries_barrier_5.io_y_ae_final, %entries_barrier_5.io_y_pf, %entries_barrier_5.io_y_gf, %entries_barrier_5.io_y_sw, %entries_barrier_5.io_y_sx, %entries_barrier_5.io_y_sr, %entries_barrier_5.io_y_pw, %entries_barrier_5.io_y_px, %entries_barrier_5.io_y_pr, %entries_barrier_5.io_y_ppp, %entries_barrier_5.io_y_pal, %entries_barrier_5.io_y_paa, %entries_barrier_5.io_y_eff, %entries_barrier_5.io_y_c = hw.instance "entries_barrier_5" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae_ptw: %false: i1, io_x_ae_final: %false: i1, io_x_pf: %false: i1, io_x_gf: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae_ptw: i1, io_y_ae_final: i1, io_y_pf: i1, io_y_gf: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_5.io_y_u"}
    %56 = comb.xor bin %55, %true {sv.namehint = "_io_resp_ae_inst_T"} : i1
    %57 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "io_resp_paddr"} : (i34) -> i32
    hw.output %57, %false, %56, %37 : i32, i1, i1, i1
  }
  hw.module private @Frontend(in %clock : !seq.clock, in %reset : i1, in %auto_icache_master_out_a_ready : i1, out auto_icache_master_out_a_valid : i1, out auto_icache_master_out_a_bits_address : i32, in %auto_icache_master_out_d_valid : i1, in %auto_icache_master_out_d_bits_opcode : i3, in %auto_icache_master_out_d_bits_size : i4, in %auto_icache_master_out_d_bits_data : i64, in %auto_icache_master_out_d_bits_corrupt : i1, in %io_cpu_might_request : i1, in %io_cpu_req_valid : i1, in %io_cpu_req_bits_pc : i34, in %io_cpu_req_bits_speculative : i1, in %io_cpu_resp_ready : i1, out io_cpu_resp_valid : i1, out io_cpu_resp_bits_pc : i34, out io_cpu_resp_bits_data : i32, out io_cpu_resp_bits_xcpt_pf_inst : i1, out io_cpu_resp_bits_xcpt_gf_inst : i1, out io_cpu_resp_bits_xcpt_ae_inst : i1, out io_cpu_resp_bits_replay : i1, in %io_cpu_btb_update_valid : i1, in %io_cpu_bht_update_valid : i1, in %io_cpu_flush_icache : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_x : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_x : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_x : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_x : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_x : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_x : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_x : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_x : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32, in %io_ptw_customCSRs_csrs_0_value : i64) {
    %c4_i34 = hw.constant 4 : i34
    %c0_i2 = hw.constant 0 : i2
    %c65536_i34 = hw.constant 65536 : i34
    %false = hw.constant false
    %true = hw.constant true
    %0 = seq.from_clock %clock
    %icache.auto_master_out_a_valid, %icache.auto_master_out_a_bits_address, %icache.io_resp_valid, %icache.io_resp_bits_data, %icache.io_resp_bits_ae = hw.instance "icache" @ICache(clock: %clock: !seq.clock, reset: %reset: i1, auto_master_out_a_ready: %auto_icache_master_out_a_ready: i1, auto_master_out_d_valid: %auto_icache_master_out_d_valid: i1, auto_master_out_d_bits_opcode: %auto_icache_master_out_d_bits_opcode: i3, auto_master_out_d_bits_size: %auto_icache_master_out_d_bits_size: i4, auto_master_out_d_bits_data: %auto_icache_master_out_d_bits_data: i64, auto_master_out_d_bits_corrupt: %auto_icache_master_out_d_bits_corrupt: i1, io_req_valid: %17: i1, io_req_bits_addr: %45: i33, io_s1_paddr: %tlb.io_resp_paddr: i32, io_s1_kill: %46: i1, io_s2_kill: %52: i1, io_invalidate: %io_cpu_flush_icache: i1) -> (auto_master_out_a_valid: i1, auto_master_out_a_bits_address: i32, io_resp_valid: i1, io_resp_bits_data: i32, io_resp_bits_ae: i1) {sv.namehint = "icache.io_resp_valid"}
    %1 = comb.or bin %reset, %io_cpu_req_valid : i1
    %fq.io_enq_ready, %fq.io_deq_valid, %fq.io_deq_bits_pc, %fq.io_deq_bits_data, %fq.io_deq_bits_xcpt_pf_inst, %fq.io_deq_bits_xcpt_ae_inst, %fq.io_deq_bits_replay, %fq.io_mask = hw.instance "fq" @ShiftQueue(clock: %clock: !seq.clock, reset: %1: i1, io_enq_valid: %54: i1, io_enq_bits_pc: %s2_pc: i34, io_enq_bits_data: %icache.io_resp_bits_data: i32, io_enq_bits_xcpt_pf_inst: %s2_tlb_resp_pf_inst: i1, io_enq_bits_xcpt_ae_inst: %65: i1, io_enq_bits_replay: %60: i1, io_deq_ready: %io_cpu_resp_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_pc: i34, io_deq_bits_data: i32, io_deq_bits_xcpt_pf_inst: i1, io_deq_bits_xcpt_ae_inst: i1, io_deq_bits_replay: i1, io_mask: i5) {sv.namehint = "fq.io_mask"}
    %2 = comb.or bin %io_cpu_req_valid, %io_cpu_flush_icache, %io_cpu_bht_update_valid, %io_cpu_btb_update_valid : i1
    %3 = comb.xor bin %2, %true : i1
    %4 = comb.or bin %3, %io_cpu_might_request : i1
    %5 = comb.xor bin %reset, %true : i1
    %tlb.io_resp_paddr, %tlb.io_resp_pf_inst, %tlb.io_resp_ae_inst, %tlb.io_resp_cacheable = hw.instance "tlb" @TLB_1(io_req_bits_vaddr: %s1_pc: i34, io_ptw_status_debug: %io_ptw_status_debug: i1, io_ptw_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: %io_ptw_pmp_0_cfg_x: i1, io_ptw_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: %io_ptw_pmp_1_cfg_x: i1, io_ptw_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: %io_ptw_pmp_2_cfg_x: i1, io_ptw_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: %io_ptw_pmp_3_cfg_x: i1, io_ptw_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: %io_ptw_pmp_4_cfg_x: i1, io_ptw_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: %io_ptw_pmp_5_cfg_x: i1, io_ptw_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: %io_ptw_pmp_6_cfg_x: i1, io_ptw_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: %io_ptw_pmp_7_cfg_x: i1, io_ptw_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: %io_ptw_pmp_7_mask: i32) -> (io_resp_paddr: i32, io_resp_pf_inst: i1, io_resp_ae_inst: i1, io_resp_cacheable: i1) {sv.namehint = "tlb.io_resp_paddr"}
    %s1_valid = seq.firreg %17 clock %clock {firrtl.random_init_start = 1 : ui64} : i1
    %s2_valid = seq.firreg %38 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %6 = comb.extract %fq.io_mask from 2 {sv.namehint = "_s0_fq_has_space_T"} : (i5) -> i1
    %7 = comb.xor bin %6, %true {sv.namehint = "_s0_fq_has_space_T_1"} : i1
    %8 = comb.extract %fq.io_mask from 3 {sv.namehint = "_s0_fq_has_space_T_2"} : (i5) -> i1
    %9 = comb.xor bin %8, %true {sv.namehint = "_s0_fq_has_space_T_3"} : i1
    %10 = comb.xor bin %s1_valid, %true {sv.namehint = "_s0_fq_has_space_T_11"} : i1
    %11 = comb.xor bin %s2_valid, %true {sv.namehint = "_tlb_io_kill_T"} : i1
    %12 = comb.or bin %10, %11 {sv.namehint = "_s0_fq_has_space_T_6"} : i1
    %13 = comb.and bin %9, %12 {sv.namehint = "_s0_fq_has_space_T_7"} : i1
    %14 = comb.extract %fq.io_mask from 4 {sv.namehint = "_clock_en_reg_T_7"} : (i5) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "_s0_fq_has_space_T_10"} : i1
    %16 = comb.and bin %15, %10, %11 {sv.namehint = "_s0_fq_has_space_T_14"} : i1
    %17 = comb.or bin %io_cpu_req_valid, %7, %13, %16 {sv.namehint = "s0_valid"} : i1
    %s1_pc = seq.firreg %57 clock %clock {firrtl.random_init_start = 3 : ui64, sv.namehint = "s1_pc"} : i34
    %s1_speculative = seq.firreg %35 clock %clock {firrtl.random_init_start = 37 : ui64} : i1
    %s2_pc = seq.firreg %39 clock %clock reset sync %reset, %c65536_i34 {firrtl.random_init_start = 38 : ui64, sv.namehint = "s2_pc"} : i34
    %s2_tlb_resp_pf_inst = seq.firreg %41 clock %clock {firrtl.random_init_start = 191 : ui64, sv.namehint = "s2_tlb_resp_pf_inst"} : i1
    %s2_tlb_resp_ae_inst = seq.firreg %42 clock %clock {firrtl.random_init_start = 197 : ui64} : i1
    %s2_tlb_resp_cacheable = seq.firreg %43 clock %clock {firrtl.random_init_start = 201 : ui64} : i1
    %18 = comb.or bin %s2_tlb_resp_ae_inst, %s2_tlb_resp_pf_inst {sv.namehint = "_s2_xcpt_T"} : i1
    %s2_speculative = seq.firreg %40 clock %clock reset sync %reset, %false {firrtl.random_init_start = 204 : ui64} : i1
    %19 = comb.extract %s1_pc from 2 : (i34) -> i32
    %20 = comb.concat %19, %c0_i2 : i32, i2
    %21 = comb.add bin %20, %c4_i34 {sv.namehint = "predicted_npc"} : i34
    %22 = comb.and bin %fq.io_enq_ready, %54 {sv.namehint = "_s2_replay_T"} : i1
    %23 = comb.xor bin %22, %true {sv.namehint = "_s2_replay_T_1"} : i1
    %24 = comb.and bin %s2_valid, %23 {sv.namehint = "_s2_replay_T_2"} : i1
    %25 = comb.xor bin %17, %true {sv.namehint = "_s2_replay_T_3"} : i1
    %26 = comb.and bin %27, %25 {sv.namehint = "_s2_replay_T_4"} : i1
    %s2_replay_REG = seq.firreg %26 clock %clock reset sync %reset, %true {firrtl.random_init_start = 223 : ui64} : i1
    %27 = comb.or bin %24, %s2_replay_REG {sv.namehint = "s2_replay"} : i1
    %28 = comb.extract %s2_pc from 1 : (i34) -> i33
    %29 = comb.extract %21 from 1 : (i34) -> i33
    %30 = comb.mux bin %27, %28, %29 {sv.namehint = "npc"} : i33
    %31 = comb.xor bin %s2_speculative, %true {sv.namehint = "_s0_speculative_T"} : i1
    %32 = comb.and bin %s2_valid, %31 {sv.namehint = "_s0_speculative_T_1"} : i1
    %33 = comb.or bin %s1_speculative, %32 {sv.namehint = "s0_speculative"} : i1
    %34 = comb.mux bin %27, %s2_speculative, %33 {sv.namehint = "_s1_speculative_T"} : i1
    %35 = comb.mux bin %io_cpu_req_valid, %io_cpu_req_bits_speculative, %34 {sv.namehint = "_s1_speculative_T_1"} : i1
    %36 = comb.xor bin %27, %true {sv.namehint = "_tlb_io_req_valid_T"} : i1
    %37 = comb.xor bin %io_cpu_req_valid, %true {sv.namehint = "_s2_valid_T"} : i1
    %38 = comb.and %36, %37 : i1
    %39 = comb.mux bin %27, %s2_pc, %s1_pc : i34
    %40 = comb.mux bin %27, %s2_speculative, %s1_speculative : i1
    %41 = comb.mux bin %27, %s2_tlb_resp_pf_inst, %tlb.io_resp_pf_inst : i1
    %42 = comb.mux bin %27, %s2_tlb_resp_ae_inst, %tlb.io_resp_ae_inst : i1
    %43 = comb.mux bin %27, %s2_tlb_resp_cacheable, %tlb.io_resp_cacheable : i1
    %44 = comb.extract %56 from 0 : (i33) -> i32
    %45 = comb.concat %44, %false {sv.namehint = "icache.io_req_bits_addr"} : i32, i1
    %46 = comb.or bin %io_cpu_req_valid, %27 {sv.namehint = "icache.io_s1_kill"} : i1
    %47 = comb.extract %io_ptw_customCSRs_csrs_0_value from 3 {sv.namehint = "_s2_can_speculatively_refill_T"} : (i64) -> i1
    %48 = comb.xor bin %47, %true {sv.namehint = "_s2_can_speculatively_refill_T_1"} : i1
    %49 = comb.and bin %s2_tlb_resp_cacheable, %48 {sv.namehint = "s2_can_speculatively_refill"} : i1
    %50 = comb.xor bin %49, %true {sv.namehint = "_icache_io_s2_kill_T"} : i1
    %51 = comb.and bin %s2_speculative, %50 {sv.namehint = "_icache_io_s2_kill_T_1"} : i1
    %52 = comb.or bin %51, %18 {sv.namehint = "icache.io_s2_kill"} : i1
    %fq_io_enq_valid_REG = seq.firreg %s1_valid clock %clock {firrtl.random_init_start = 226 : ui64} : i1
    %53 = comb.or bin %icache.io_resp_valid, %52 {sv.namehint = "_fq_io_enq_valid_T_5"} : i1
    %54 = comb.and bin %fq_io_enq_valid_REG, %s2_valid, %53 {sv.namehint = "fq.io_enq_valid"} : i1
    %55 = comb.extract %io_cpu_req_bits_pc from 1 : (i34) -> i33
    %56 = comb.mux bin %io_cpu_req_valid, %55, %30 {sv.namehint = "_io_cpu_npc_T"} : i33
    %57 = comb.concat %56, %false {sv.namehint = "io_cpu_npc"} : i33, i1
    %58 = comb.xor bin %icache.io_resp_valid, %true {sv.namehint = "_fq_io_enq_bits_replay_T"} : i1
    %59 = comb.xor bin %18, %true {sv.namehint = "_fq_io_enq_bits_replay_T_2"} : i1
    %60 = comb.and bin %52, %58, %59 {sv.namehint = "fq.io_enq_bits_replay"} : i1
    %61 = comb.xor bin %52, %true : i1
    %62 = comb.and bin %s2_speculative, %47, %61 : i1
    %63 = comb.xor bin %62, %true : i1
    sv.always posedge %0 {
      sv.if %5 {
        sv.assert %4, immediate label "assert__assert"
      }
      sv.if %5 {
        sv.assert %63, immediate label "assert__assert_1"
      }
    }
    %64 = comb.and bin %icache.io_resp_valid, %icache.io_resp_bits_ae : i1
    %65 = comb.or %64, %s2_tlb_resp_ae_inst {sv.namehint = "fq.io_enq_bits_xcpt_ae_inst"} : i1
    hw.output %icache.auto_master_out_a_valid, %icache.auto_master_out_a_bits_address, %fq.io_deq_valid, %fq.io_deq_bits_pc, %fq.io_deq_bits_data, %fq.io_deq_bits_xcpt_pf_inst, %false, %fq.io_deq_bits_xcpt_ae_inst, %fq.io_deq_bits_replay : i1, i32, i1, i34, i32, i1, i1, i1, i1
  }
  hw.module private @TLWidthWidget_9(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_address : i32, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_address : i32, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_address : i1, i1, i3, i4, i64, i1, i1, i32
  }
  hw.module private @TLBuffer_7(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_opcode : i3, out auto_in_b_bits_param : i2, out auto_in_b_bits_size : i4, out auto_in_b_bits_source : i2, out auto_in_b_bits_address : i32, out auto_in_b_bits_mask : i8, out auto_in_b_bits_corrupt : i1, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, out auto_in_e_ready : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_opcode : i3, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i2, in %auto_out_b_bits_address : i32, in %auto_out_b_bits_mask : i8, in %auto_out_b_bits_corrupt : i1, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_opcode, %auto_out_b_bits_param, %auto_out_b_bits_size, %auto_out_b_bits_source, %auto_out_b_bits_address, %auto_out_b_bits_mask, %auto_out_b_bits_corrupt, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_out_e_ready, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i3, i2, i4, i2, i32, i8, i1, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i2
  }
  hw.module private @HellaCacheArbiter(out io_requestor_0_req_ready : i1, in %io_requestor_0_req_valid : i1, in %io_requestor_0_req_bits_addr : i34, in %io_requestor_0_req_bits_tag : i6, in %io_requestor_0_req_bits_cmd : i5, in %io_requestor_0_req_bits_size : i2, in %io_requestor_0_req_bits_signed : i1, in %io_requestor_0_s1_kill : i1, in %io_requestor_0_s1_data_data : i64, out io_requestor_0_s2_nack : i1, out io_requestor_0_resp_valid : i1, out io_requestor_0_resp_bits_tag : i6, out io_requestor_0_resp_bits_data : i64, out io_requestor_0_resp_bits_replay : i1, out io_requestor_0_resp_bits_has_data : i1, out io_requestor_0_resp_bits_data_word_bypass : i64, out io_requestor_0_replay_next : i1, out io_requestor_0_s2_xcpt_ma_ld : i1, out io_requestor_0_s2_xcpt_ma_st : i1, out io_requestor_0_s2_xcpt_pf_ld : i1, out io_requestor_0_s2_xcpt_pf_st : i1, out io_requestor_0_s2_xcpt_ae_ld : i1, out io_requestor_0_s2_xcpt_ae_st : i1, out io_requestor_0_ordered : i1, out io_requestor_0_perf_release : i1, out io_requestor_0_perf_grant : i1, in %io_mem_req_ready : i1, out io_mem_req_valid : i1, out io_mem_req_bits_addr : i34, out io_mem_req_bits_tag : i6, out io_mem_req_bits_cmd : i5, out io_mem_req_bits_size : i2, out io_mem_req_bits_signed : i1, out io_mem_s1_kill : i1, out io_mem_s1_data_data : i64, in %io_mem_s2_nack : i1, in %io_mem_resp_valid : i1, in %io_mem_resp_bits_tag : i6, in %io_mem_resp_bits_data : i64, in %io_mem_resp_bits_replay : i1, in %io_mem_resp_bits_has_data : i1, in %io_mem_resp_bits_data_word_bypass : i64, in %io_mem_replay_next : i1, in %io_mem_s2_xcpt_ma_ld : i1, in %io_mem_s2_xcpt_ma_st : i1, in %io_mem_s2_xcpt_pf_ld : i1, in %io_mem_s2_xcpt_pf_st : i1, in %io_mem_s2_xcpt_ae_ld : i1, in %io_mem_s2_xcpt_ae_st : i1, in %io_mem_ordered : i1, in %io_mem_perf_release : i1, in %io_mem_perf_grant : i1) {
    hw.output %io_mem_req_ready, %io_mem_s2_nack, %io_mem_resp_valid, %io_mem_resp_bits_tag, %io_mem_resp_bits_data, %io_mem_resp_bits_replay, %io_mem_resp_bits_has_data, %io_mem_resp_bits_data_word_bypass, %io_mem_replay_next, %io_mem_s2_xcpt_ma_ld, %io_mem_s2_xcpt_ma_st, %io_mem_s2_xcpt_pf_ld, %io_mem_s2_xcpt_pf_st, %io_mem_s2_xcpt_ae_ld, %io_mem_s2_xcpt_ae_st, %io_mem_ordered, %io_mem_perf_release, %io_mem_perf_grant, %io_requestor_0_req_valid, %io_requestor_0_req_bits_addr, %io_requestor_0_req_bits_tag, %io_requestor_0_req_bits_cmd, %io_requestor_0_req_bits_size, %io_requestor_0_req_bits_signed, %io_requestor_0_s1_kill, %io_requestor_0_s1_data_data : i1, i1, i1, i6, i64, i1, i1, i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i34, i6, i5, i2, i1, i1, i64
  }
  hw.module private @PTW(out io_requestor_0_status_debug : i1, out io_requestor_0_pmp_0_cfg_l : i1, out io_requestor_0_pmp_0_cfg_a : i2, out io_requestor_0_pmp_0_cfg_w : i1, out io_requestor_0_pmp_0_cfg_r : i1, out io_requestor_0_pmp_0_addr : i30, out io_requestor_0_pmp_0_mask : i32, out io_requestor_0_pmp_1_cfg_l : i1, out io_requestor_0_pmp_1_cfg_a : i2, out io_requestor_0_pmp_1_cfg_w : i1, out io_requestor_0_pmp_1_cfg_r : i1, out io_requestor_0_pmp_1_addr : i30, out io_requestor_0_pmp_1_mask : i32, out io_requestor_0_pmp_2_cfg_l : i1, out io_requestor_0_pmp_2_cfg_a : i2, out io_requestor_0_pmp_2_cfg_w : i1, out io_requestor_0_pmp_2_cfg_r : i1, out io_requestor_0_pmp_2_addr : i30, out io_requestor_0_pmp_2_mask : i32, out io_requestor_0_pmp_3_cfg_l : i1, out io_requestor_0_pmp_3_cfg_a : i2, out io_requestor_0_pmp_3_cfg_w : i1, out io_requestor_0_pmp_3_cfg_r : i1, out io_requestor_0_pmp_3_addr : i30, out io_requestor_0_pmp_3_mask : i32, out io_requestor_0_pmp_4_cfg_l : i1, out io_requestor_0_pmp_4_cfg_a : i2, out io_requestor_0_pmp_4_cfg_w : i1, out io_requestor_0_pmp_4_cfg_r : i1, out io_requestor_0_pmp_4_addr : i30, out io_requestor_0_pmp_4_mask : i32, out io_requestor_0_pmp_5_cfg_l : i1, out io_requestor_0_pmp_5_cfg_a : i2, out io_requestor_0_pmp_5_cfg_w : i1, out io_requestor_0_pmp_5_cfg_r : i1, out io_requestor_0_pmp_5_addr : i30, out io_requestor_0_pmp_5_mask : i32, out io_requestor_0_pmp_6_cfg_l : i1, out io_requestor_0_pmp_6_cfg_a : i2, out io_requestor_0_pmp_6_cfg_w : i1, out io_requestor_0_pmp_6_cfg_r : i1, out io_requestor_0_pmp_6_addr : i30, out io_requestor_0_pmp_6_mask : i32, out io_requestor_0_pmp_7_cfg_l : i1, out io_requestor_0_pmp_7_cfg_a : i2, out io_requestor_0_pmp_7_cfg_w : i1, out io_requestor_0_pmp_7_cfg_r : i1, out io_requestor_0_pmp_7_addr : i30, out io_requestor_0_pmp_7_mask : i32, out io_requestor_1_status_debug : i1, out io_requestor_1_pmp_0_cfg_l : i1, out io_requestor_1_pmp_0_cfg_a : i2, out io_requestor_1_pmp_0_cfg_x : i1, out io_requestor_1_pmp_0_addr : i30, out io_requestor_1_pmp_0_mask : i32, out io_requestor_1_pmp_1_cfg_l : i1, out io_requestor_1_pmp_1_cfg_a : i2, out io_requestor_1_pmp_1_cfg_x : i1, out io_requestor_1_pmp_1_addr : i30, out io_requestor_1_pmp_1_mask : i32, out io_requestor_1_pmp_2_cfg_l : i1, out io_requestor_1_pmp_2_cfg_a : i2, out io_requestor_1_pmp_2_cfg_x : i1, out io_requestor_1_pmp_2_addr : i30, out io_requestor_1_pmp_2_mask : i32, out io_requestor_1_pmp_3_cfg_l : i1, out io_requestor_1_pmp_3_cfg_a : i2, out io_requestor_1_pmp_3_cfg_x : i1, out io_requestor_1_pmp_3_addr : i30, out io_requestor_1_pmp_3_mask : i32, out io_requestor_1_pmp_4_cfg_l : i1, out io_requestor_1_pmp_4_cfg_a : i2, out io_requestor_1_pmp_4_cfg_x : i1, out io_requestor_1_pmp_4_addr : i30, out io_requestor_1_pmp_4_mask : i32, out io_requestor_1_pmp_5_cfg_l : i1, out io_requestor_1_pmp_5_cfg_a : i2, out io_requestor_1_pmp_5_cfg_x : i1, out io_requestor_1_pmp_5_addr : i30, out io_requestor_1_pmp_5_mask : i32, out io_requestor_1_pmp_6_cfg_l : i1, out io_requestor_1_pmp_6_cfg_a : i2, out io_requestor_1_pmp_6_cfg_x : i1, out io_requestor_1_pmp_6_addr : i30, out io_requestor_1_pmp_6_mask : i32, out io_requestor_1_pmp_7_cfg_l : i1, out io_requestor_1_pmp_7_cfg_a : i2, out io_requestor_1_pmp_7_cfg_x : i1, out io_requestor_1_pmp_7_addr : i30, out io_requestor_1_pmp_7_mask : i32, out io_requestor_1_customCSRs_csrs_0_value : i64, in %io_dpath_status_debug : i1, in %io_dpath_pmp_0_cfg_l : i1, in %io_dpath_pmp_0_cfg_a : i2, in %io_dpath_pmp_0_cfg_x : i1, in %io_dpath_pmp_0_cfg_w : i1, in %io_dpath_pmp_0_cfg_r : i1, in %io_dpath_pmp_0_addr : i30, in %io_dpath_pmp_0_mask : i32, in %io_dpath_pmp_1_cfg_l : i1, in %io_dpath_pmp_1_cfg_a : i2, in %io_dpath_pmp_1_cfg_x : i1, in %io_dpath_pmp_1_cfg_w : i1, in %io_dpath_pmp_1_cfg_r : i1, in %io_dpath_pmp_1_addr : i30, in %io_dpath_pmp_1_mask : i32, in %io_dpath_pmp_2_cfg_l : i1, in %io_dpath_pmp_2_cfg_a : i2, in %io_dpath_pmp_2_cfg_x : i1, in %io_dpath_pmp_2_cfg_w : i1, in %io_dpath_pmp_2_cfg_r : i1, in %io_dpath_pmp_2_addr : i30, in %io_dpath_pmp_2_mask : i32, in %io_dpath_pmp_3_cfg_l : i1, in %io_dpath_pmp_3_cfg_a : i2, in %io_dpath_pmp_3_cfg_x : i1, in %io_dpath_pmp_3_cfg_w : i1, in %io_dpath_pmp_3_cfg_r : i1, in %io_dpath_pmp_3_addr : i30, in %io_dpath_pmp_3_mask : i32, in %io_dpath_pmp_4_cfg_l : i1, in %io_dpath_pmp_4_cfg_a : i2, in %io_dpath_pmp_4_cfg_x : i1, in %io_dpath_pmp_4_cfg_w : i1, in %io_dpath_pmp_4_cfg_r : i1, in %io_dpath_pmp_4_addr : i30, in %io_dpath_pmp_4_mask : i32, in %io_dpath_pmp_5_cfg_l : i1, in %io_dpath_pmp_5_cfg_a : i2, in %io_dpath_pmp_5_cfg_x : i1, in %io_dpath_pmp_5_cfg_w : i1, in %io_dpath_pmp_5_cfg_r : i1, in %io_dpath_pmp_5_addr : i30, in %io_dpath_pmp_5_mask : i32, in %io_dpath_pmp_6_cfg_l : i1, in %io_dpath_pmp_6_cfg_a : i2, in %io_dpath_pmp_6_cfg_x : i1, in %io_dpath_pmp_6_cfg_w : i1, in %io_dpath_pmp_6_cfg_r : i1, in %io_dpath_pmp_6_addr : i30, in %io_dpath_pmp_6_mask : i32, in %io_dpath_pmp_7_cfg_l : i1, in %io_dpath_pmp_7_cfg_a : i2, in %io_dpath_pmp_7_cfg_x : i1, in %io_dpath_pmp_7_cfg_w : i1, in %io_dpath_pmp_7_cfg_r : i1, in %io_dpath_pmp_7_addr : i30, in %io_dpath_pmp_7_mask : i32, in %io_dpath_customCSRs_csrs_0_value : i64) {
    hw.output %io_dpath_status_debug, %io_dpath_pmp_0_cfg_l, %io_dpath_pmp_0_cfg_a, %io_dpath_pmp_0_cfg_w, %io_dpath_pmp_0_cfg_r, %io_dpath_pmp_0_addr, %io_dpath_pmp_0_mask, %io_dpath_pmp_1_cfg_l, %io_dpath_pmp_1_cfg_a, %io_dpath_pmp_1_cfg_w, %io_dpath_pmp_1_cfg_r, %io_dpath_pmp_1_addr, %io_dpath_pmp_1_mask, %io_dpath_pmp_2_cfg_l, %io_dpath_pmp_2_cfg_a, %io_dpath_pmp_2_cfg_w, %io_dpath_pmp_2_cfg_r, %io_dpath_pmp_2_addr, %io_dpath_pmp_2_mask, %io_dpath_pmp_3_cfg_l, %io_dpath_pmp_3_cfg_a, %io_dpath_pmp_3_cfg_w, %io_dpath_pmp_3_cfg_r, %io_dpath_pmp_3_addr, %io_dpath_pmp_3_mask, %io_dpath_pmp_4_cfg_l, %io_dpath_pmp_4_cfg_a, %io_dpath_pmp_4_cfg_w, %io_dpath_pmp_4_cfg_r, %io_dpath_pmp_4_addr, %io_dpath_pmp_4_mask, %io_dpath_pmp_5_cfg_l, %io_dpath_pmp_5_cfg_a, %io_dpath_pmp_5_cfg_w, %io_dpath_pmp_5_cfg_r, %io_dpath_pmp_5_addr, %io_dpath_pmp_5_mask, %io_dpath_pmp_6_cfg_l, %io_dpath_pmp_6_cfg_a, %io_dpath_pmp_6_cfg_w, %io_dpath_pmp_6_cfg_r, %io_dpath_pmp_6_addr, %io_dpath_pmp_6_mask, %io_dpath_pmp_7_cfg_l, %io_dpath_pmp_7_cfg_a, %io_dpath_pmp_7_cfg_w, %io_dpath_pmp_7_cfg_r, %io_dpath_pmp_7_addr, %io_dpath_pmp_7_mask, %io_dpath_status_debug, %io_dpath_pmp_0_cfg_l, %io_dpath_pmp_0_cfg_a, %io_dpath_pmp_0_cfg_x, %io_dpath_pmp_0_addr, %io_dpath_pmp_0_mask, %io_dpath_pmp_1_cfg_l, %io_dpath_pmp_1_cfg_a, %io_dpath_pmp_1_cfg_x, %io_dpath_pmp_1_addr, %io_dpath_pmp_1_mask, %io_dpath_pmp_2_cfg_l, %io_dpath_pmp_2_cfg_a, %io_dpath_pmp_2_cfg_x, %io_dpath_pmp_2_addr, %io_dpath_pmp_2_mask, %io_dpath_pmp_3_cfg_l, %io_dpath_pmp_3_cfg_a, %io_dpath_pmp_3_cfg_x, %io_dpath_pmp_3_addr, %io_dpath_pmp_3_mask, %io_dpath_pmp_4_cfg_l, %io_dpath_pmp_4_cfg_a, %io_dpath_pmp_4_cfg_x, %io_dpath_pmp_4_addr, %io_dpath_pmp_4_mask, %io_dpath_pmp_5_cfg_l, %io_dpath_pmp_5_cfg_a, %io_dpath_pmp_5_cfg_x, %io_dpath_pmp_5_addr, %io_dpath_pmp_5_mask, %io_dpath_pmp_6_cfg_l, %io_dpath_pmp_6_cfg_a, %io_dpath_pmp_6_cfg_x, %io_dpath_pmp_6_addr, %io_dpath_pmp_6_mask, %io_dpath_pmp_7_cfg_l, %io_dpath_pmp_7_cfg_a, %io_dpath_pmp_7_cfg_x, %io_dpath_pmp_7_addr, %io_dpath_pmp_7_mask, %io_dpath_customCSRs_csrs_0_value : i1, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i64
  }
  hw.module private @RVCExpander(in %io_in : i32, out io_out_bits : i32, out io_out_rd : i5, out io_out_rs1 : i5, out io_out_rs2 : i5, out io_rvc : i1) {
    %c18_i8 = hw.constant 18 : i8
    %c19_i8 = hw.constant 19 : i8
    %true = hw.constant true
    %c115_i15 = hw.constant 115 : i15
    %c231_i15 = hw.constant 231 : i15
    %c31_i15 = hw.constant 31 : i15
    %c103_i15 = hw.constant 103 : i15
    %c18_i10 = hw.constant 18 : i10
    %c19_i11 = hw.constant 19 : i11
    %c111_i12 = hw.constant 111 : i12
    %c1_i8 = hw.constant 1 : i8
    %c0_i30 = hw.constant 0 : i30
    %c3_i4 = hw.constant 3 : i4
    %c35_i10 = hw.constant 35 : i10
    %c35_i9 = hw.constant 35 : i9
    %c39_i10 = hw.constant 39 : i10
    %c63_i9 = hw.constant 63 : i9
    %c1_i4 = hw.constant 1 : i4
    %c65_i12 = hw.constant 65 : i12
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c8_i5 = hw.constant 8 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c5_i5 = hw.constant 5 : i5
    %c4_i5 = hw.constant 4 : i5
    %c3_i5 = hw.constant 3 : i5
    %c0_i6 = hw.constant 0 : i6
    %c0_i8 = hw.constant 0 : i8
    %c-1_i2 = hw.constant -1 : i2
    %c19_i7 = hw.constant 19 : i7
    %c31_i7 = hw.constant 31 : i7
    %c0_i2 = hw.constant 0 : i2
    %c1_i2 = hw.constant 1 : i2
    %c0_i3 = hw.constant 0 : i3
    %c7_i7 = hw.constant 7 : i7
    %c3_i3 = hw.constant 3 : i3
    %c3_i7 = hw.constant 3 : i7
    %c2_i3 = hw.constant 2 : i3
    %c0_i7 = hw.constant 0 : i7
    %c0_i12 = hw.constant 0 : i12
    %c-1_i3 = hw.constant -1 : i3
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c51_i7 = hw.constant 51 : i7
    %c-1_i5 = hw.constant -1 : i5
    %c-29_i7 = hw.constant -29 : i7
    %c1_i3 = hw.constant 1 : i3
    %c-16_i5 = hw.constant -16 : i5
    %c-15_i5 = hw.constant -15 : i5
    %c-14_i5 = hw.constant -14 : i5
    %c-13_i5 = hw.constant -13 : i5
    %c-12_i5 = hw.constant -12 : i5
    %c-11_i5 = hw.constant -11 : i5
    %c-10_i5 = hw.constant -10 : i5
    %c-9_i5 = hw.constant -9 : i5
    %c-8_i5 = hw.constant -8 : i5
    %c-7_i5 = hw.constant -7 : i5
    %c-6_i5 = hw.constant -6 : i5
    %c-5_i5 = hw.constant -5 : i5
    %c-4_i5 = hw.constant -4 : i5
    %c-3_i5 = hw.constant -3 : i5
    %c-2_i5 = hw.constant -2 : i5
    %c0_i5 = hw.constant 0 : i5
    %c1_i5 = hw.constant 1 : i5
    %c2_i5 = hw.constant 2 : i5
    %c1_i7 = hw.constant 1 : i7
    %0 = comb.extract %io_in from 0 {sv.namehint = "_io_out_T"} : (i32) -> i2
    %1 = comb.icmp bin ne %0, %c-1_i2 {sv.namehint = "io_rvc"} : i2
    %2 = comb.extract %io_in from 5 {sv.namehint = "_io_out_s_opc_T"} : (i32) -> i8
    %3 = comb.icmp bin ne %2, %c0_i8 {sv.namehint = "_io_out_s_opc_T_1"} : i8
    %4 = comb.mux bin %3, %c19_i7, %c31_i7 {sv.namehint = "io_out_s_opc"} : i7
    %5 = comb.extract %io_in from 7 {sv.namehint = "_io_out_s_T"} : (i32) -> i4
    %6 = comb.extract %io_in from 11 {sv.namehint = "_io_out_s_T_1"} : (i32) -> i2
    %7 = comb.extract %io_in from 5 {sv.namehint = "_io_out_s_T_189"} : (i32) -> i1
    %8 = comb.extract %io_in from 6 {sv.namehint = "_io_out_s_T_291"} : (i32) -> i1
    %9 = comb.extract %io_in from 2 {sv.namehint = "_io_out_s_T_418"} : (i32) -> i3
    %10 = comb.concat %c0_i2, %5, %6, %7, %8, %c65_i12, %9, %4 {sv.namehint = "io_out_s_0_bits"} : i2, i4, i2, i1, i1, i12, i3, i7
    %11 = comb.extract %io_in from 5 {sv.namehint = "_io_out_s_T_420"} : (i32) -> i2
    %12 = comb.extract %io_in from 10 {sv.namehint = "_io_out_s_T_460"} : (i32) -> i3
    %13 = comb.extract %io_in from 7 {sv.namehint = "_io_out_s_T_459"} : (i32) -> i3
    %14 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_1_rs1"} : i2, i3
    %15 = comb.concat %c0_i4, %11, %12, %c1_i5, %13, %c13_i5, %9, %c7_i7 {sv.namehint = "io_out_s_1_bits"} : i4, i2, i3, i5, i3, i5, i3, i7
    %16 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_2_rs1"} : i2, i3
    %17 = comb.concat %c0_i5, %7, %12, %8, %c1_i4, %13, %c9_i5, %9, %c3_i7 {sv.namehint = "io_out_s_2_bits"} : i5, i1, i3, i1, i4, i3, i5, i3, i7
    %18 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_3_rs1"} : i2, i3
    %19 = comb.concat %c0_i4, %11, %12, %c1_i5, %13, %c13_i5, %9, %c3_i7 {sv.namehint = "io_out_s_3_bits"} : i4, i2, i3, i5, i3, i5, i3, i7
    %20 = comb.extract %io_in from 12 : (i32) -> i1
    %21 = comb.extract %io_in from 10 : (i32) -> i2
    %22 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_4_rs1"} : i2, i3
    %23 = comb.concat %c0_i5, %7, %20, %c1_i2, %9, %c1_i2, %13, %c2_i3, %21, %8, %c63_i9 {sv.namehint = "io_out_s_4_bits"} : i5, i1, i1, i2, i3, i2, i3, i3, i2, i1, i9
    %24 = comb.extract %io_in from 12 : (i32) -> i1
    %25 = comb.extract %io_in from 10 : (i32) -> i2
    %26 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_5_rs1"} : i2, i3
    %27 = comb.concat %c0_i4, %11, %24, %c1_i2, %9, %c1_i2, %13, %c3_i3, %25, %c39_i10 {sv.namehint = "io_out_s_5_bits"} : i4, i2, i1, i2, i3, i2, i3, i3, i2, i10
    %28 = comb.extract %io_in from 12 : (i32) -> i1
    %29 = comb.extract %io_in from 10 : (i32) -> i2
    %30 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_6_rs1"} : i2, i3
    %31 = comb.concat %c0_i5, %7, %28, %c1_i2, %9, %c1_i2, %13, %c2_i3, %29, %8, %c35_i9 {sv.namehint = "io_out_s_6_bits"} : i5, i1, i1, i2, i3, i2, i3, i3, i2, i1, i9
    %32 = comb.extract %io_in from 12 : (i32) -> i1
    %33 = comb.extract %io_in from 10 : (i32) -> i2
    %34 = comb.concat %c1_i2, %9 {sv.namehint = "io_out_s_7_rd"} : i2, i3
    %35 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_7_rs1"} : i2, i3
    %36 = comb.concat %c0_i4, %11, %32, %c1_i2, %9, %c1_i2, %13, %c3_i3, %33, %c35_i10 {sv.namehint = "io_out_s_7_bits"} : i4, i2, i1, i2, i3, i2, i3, i3, i2, i10
    %37 = comb.extract %io_in from 12 {sv.namehint = "_io_out_s_T_427"} : (i32) -> i1
    %38 = comb.replicate %37 {sv.namehint = "_io_out_s_T_145"} : (i1) -> i7
    %39 = comb.extract %io_in from 2 {sv.namehint = "io_out_s_23_rs2"} : (i32) -> i5
    %40 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_9_rd"} : (i32) -> i5
    %41 = comb.concat %38, %39, %40, %c0_i3, %40, %c19_i7 {sv.namehint = "io_out_s_8_bits"} : i7, i5, i5, i3, i5, i7
    %42 = comb.icmp bin eq %40, %c0_i5 : i5
    %43 = comb.replicate %37 {sv.namehint = "_io_out_s_T_158"} : (i1) -> i7
    %44 = comb.concat %43, %39, %40, %c0_i3, %40, %c3_i4, %42, %c-1_i2 {sv.namehint = "io_out_s_9_bits"} : i7, i5, i5, i3, i5, i4, i1, i2
    %45 = comb.replicate %37 {sv.namehint = "_io_out_s_T_171"} : (i1) -> i7
    %46 = comb.concat %45, %39, %c0_i8, %40, %c19_i7 {sv.namehint = "io_out_s_10_bits"} : i7, i5, i8, i5, i7
    %47 = comb.replicate %37 {sv.namehint = "_io_out_s_opc_T_6"} : (i1) -> i7
    %48 = comb.concat %47, %39 {sv.namehint = "_io_out_s_opc_T_8"} : i7, i5
    %49 = comb.icmp bin eq %48, %c0_i12 : i12
    %50 = comb.icmp bin eq %40, %c0_i5 {sv.namehint = "_io_out_s_T_181"} : i5
    %51 = comb.icmp bin eq %40, %c2_i5 {sv.namehint = "_io_out_s_T_183"} : i5
    %52 = comb.or bin %50, %51 {sv.namehint = "_io_out_s_T_184"} : i1
    %53 = comb.replicate %37 {sv.namehint = "_io_out_s_opc_T_12"} : (i1) -> i7
    %54 = comb.concat %53, %39 {sv.namehint = "_io_out_s_opc_T_14"} : i7, i5
    %55 = comb.icmp bin ne %54, %c0_i12 {sv.namehint = "_io_out_s_opc_T_15"} : i12
    %56 = comb.mux bin %55, %c19_i7, %c31_i7 {sv.namehint = "io_out_s_opc_3"} : i7
    %57 = comb.extract %io_in from 3 {sv.namehint = "_io_out_s_T_383"} : (i32) -> i2
    %58 = comb.extract %io_in from 2 {sv.namehint = "_io_out_s_T_381"} : (i32) -> i1
    %59 = comb.replicate %37 : (i1) -> i3
    %60 = comb.concat %57, %7, %58, %8, %c0_i4, %40, %c0_i3, %40, %56 : i2, i1, i1, i1, i4, i5, i3, i5, i7
    %61 = comb.replicate %37 : (i1) -> i12
    %62 = comb.concat %61, %39, %40, %c3_i3, %49, %c-1_i3 : i12, i5, i5, i3, i1, i3
    %63 = comb.mux bin %52, %60, %62 : i29
    %64 = comb.concat %59, %63 {sv.namehint = "io_out_s_11_bits"} : i3, i29
    %65 = comb.concat %37, %11 {sv.namehint = "_io_out_s_funct_T_2"} : i1, i2
    %66 = comb.icmp bin eq %65, %c1_i3 {sv.namehint = "_io_out_s_funct_T_3"} : i3
    %67 = comb.concat %66, %c0_i2 {sv.namehint = "_io_out_s_funct_T_4"} : i1, i2
    %68 = hw.array_create %c3_i3, %c2_i3, %c0_i3, %c0_i3, %c-1_i3, %c-2_i3, %67, %67 : i3
    %69 = hw.array_get %68[%65] {sv.namehint = "io_out_s_funct"} : !hw.array<8xi3>, i3
    %70 = comb.icmp bin eq %11, %c0_i2 {sv.namehint = "_io_out_s_sub_T_1"} : i2
    %71 = comb.concat %70, %c0_i30 {sv.namehint = "io_out_s_sub"} : i1, i30
    %72 = comb.concat %c1_i8, %9, %c1_i2, %13, %69, %c1_i2, %13, %c3_i3, %37, %c3_i3 : i8, i3, i2, i3, i3, i2, i3, i3, i1, i3
    %73 = comb.or bin %72, %71 {sv.namehint = "_io_out_s_T_235"} : i31
    %74 = comb.extract %io_in from 10 {sv.namehint = "_io_out_s_T_382"} : (i32) -> i2
    %75 = comb.icmp bin eq %74, %c1_i2 {sv.namehint = "_io_out_s_T_237"} : i2
    %76 = comb.icmp bin eq %74, %c-2_i2 {sv.namehint = "_io_out_s_T_239"} : i2
    %77 = comb.replicate %37 : (i1) -> i7
    %78 = comb.concat %77, %39, %c1_i2, %13, %c-3_i5 : i7, i5, i2, i3, i5
    %79 = comb.concat %false, %75, %c0_i4, %37, %39, %c1_i2, %13, %c-11_i5 : i1, i1, i4, i1, i5, i2, i3, i5
    %80 = comb.mux bin %76, %78, %79 : i22
    %81 = comb.concat %80, %13, %c19_i7 {sv.namehint = "_io_out_s_T_240"} : i22, i3, i7
    %82 = comb.icmp bin eq %74, %c-1_i2 {sv.namehint = "_io_out_s_T_241"} : i2
    %83 = comb.concat %false, %73 : i1, i31
    %84 = comb.mux bin %82, %83, %81 {sv.namehint = "io_out_s_12_bits"} : i32
    %85 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_12_rd"} : i2, i3
    %86 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_12_rs1"} : i2, i3
    %87 = comb.extract %io_in from 8 {sv.namehint = "_io_out_s_T_289"} : (i32) -> i1
    %88 = comb.extract %io_in from 9 {sv.namehint = "_io_out_s_T_290"} : (i32) -> i2
    %89 = comb.extract %io_in from 7 {sv.namehint = "_io_out_s_T_292"} : (i32) -> i1
    %90 = comb.extract %io_in from 11 {sv.namehint = "_io_out_s_T_294"} : (i32) -> i1
    %91 = comb.extract %io_in from 3 {sv.namehint = "_io_out_s_T_295"} : (i32) -> i3
    %92 = comb.replicate %37 : (i1) -> i9
    %93 = comb.concat %37, %87, %88, %8, %89, %58, %90, %91, %92, %c111_i12 {sv.namehint = "io_out_s_13_bits"} : i1, i1, i2, i1, i1, i1, i1, i3, i9, i12
    %94 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_13_rs1"} : i2, i3
    %95 = comb.concat %c1_i2, %9 {sv.namehint = "io_out_s_13_rs2"} : i2, i3
    %96 = comb.replicate %37 : (i1) -> i4
    %97 = comb.concat %96, %11, %58, %c1_i7, %13, %c0_i3, %74, %57, %37, %c-29_i7 {sv.namehint = "io_out_s_14_bits"} : i4, i2, i1, i7, i3, i3, i2, i2, i1, i7
    %98 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_14_rd"} : i2, i3
    %99 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_14_rs1"} : i2, i3
    %100 = comb.replicate %37 : (i1) -> i4
    %101 = comb.concat %100, %11, %58, %c1_i7, %13, %c1_i3, %74, %57, %37, %c-29_i7 {sv.namehint = "io_out_s_15_bits"} : i4, i2, i1, i7, i3, i3, i2, i2, i1, i7
    %102 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_15_rs1"} : i2, i3
    %103 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_load_opc_T_1"} : i5
    %104 = comb.mux bin %103, %c3_i7, %c31_i7 {sv.namehint = "io_out_s_load_opc"} : i7
    %105 = comb.concat %c0_i6, %37, %39, %40, %c1_i3, %40, %c19_i7 {sv.namehint = "io_out_s_16_bits"} : i6, i1, i5, i5, i3, i5, i7
    %106 = comb.concat %c0_i3, %9, %37, %11, %c19_i11, %40, %c7_i7 {sv.namehint = "io_out_s_17_bits"} : i3, i3, i1, i2, i11, i5, i7
    %107 = comb.extract %io_in from 2 {sv.namehint = "_io_out_s_T_409"} : (i32) -> i2
    %108 = comb.extract %io_in from 4 {sv.namehint = "_io_out_s_T_411"} : (i32) -> i3
    %109 = comb.concat %c0_i4, %107, %37, %108, %c18_i10, %40, %104 {sv.namehint = "io_out_s_18_bits"} : i4, i2, i1, i3, i10, i5, i7
    %110 = comb.concat %c0_i3, %9, %37, %11, %c19_i11, %40, %104 {sv.namehint = "io_out_s_19_bits"} : i3, i3, i1, i2, i11, i5, i7
    %111 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_jr_reserved_T_1"} : i5
    %112 = comb.mux bin %111, %c103_i15, %c31_i15 : i15
    %113 = comb.icmp bin ne %39, %c0_i5 {sv.namehint = "_io_out_s_jr_mv_T_1"} : i5
    %114 = comb.concat %c0_i8, %40, %c51_i7 : i8, i5, i7
    %115 = comb.concat %40, %112 : i5, i15
    %116 = comb.mux bin %113, %114, %115 : i20
    %117 = comb.mux bin %113, %40, %c0_i5 {sv.namehint = "io_out_s_jr_mv_rd"} : i5
    %118 = comb.concat %39, %40, %c231_i15 {sv.namehint = "io_out_s_jalr"} : i5, i5, i15
    %119 = comb.extract %io_in from 3 : (i32) -> i4
    %120 = comb.concat %119, %true, %40, %c115_i15 {sv.namehint = "io_out_s_ebreak"} : i4, i1, i5, i15
    %121 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_jalr_ebreak_T_1"} : i5
    %122 = comb.mux bin %121, %118, %120 {sv.namehint = "_io_out_s_jalr_ebreak_T_2"} : i25
    %123 = comb.icmp bin ne %39, %c0_i5 {sv.namehint = "_io_out_s_jalr_add_T_1"} : i5
    %124 = comb.concat %39, %40, %c0_i3, %40, %c51_i7 : i5, i5, i3, i5, i7
    %125 = comb.mux bin %123, %124, %122 : i25
    %126 = comb.mux bin %123, %40, %c1_i5 {sv.namehint = "io_out_s_jalr_add_rd"} : i5
    %127 = comb.concat %39, %116 : i5, i20
    %128 = comb.mux bin %37, %125, %127 : i25
    %129 = comb.concat %c0_i7, %128 {sv.namehint = "io_out_s_20_bits"} : i7, i25
    %130 = comb.mux bin %37, %126, %117 {sv.namehint = "io_out_s_20_rd"} : i5
    %131 = comb.xor %113, %true : i1
    %132 = comb.or %37, %131 : i1
    %133 = comb.mux bin %132, %40, %c0_i5 {sv.namehint = "io_out_s_20_rs1"} : i5
    %134 = comb.extract %io_in from 12 : (i32) -> i1
    %135 = comb.extract %io_in from 10 : (i32) -> i2
    %136 = comb.concat %c0_i3, %13, %134, %39, %c19_i8, %135, %c39_i10 {sv.namehint = "io_out_s_21_bits"} : i3, i3, i1, i5, i8, i2, i10
    %137 = comb.extract %io_in from 7 {sv.namehint = "_io_out_s_T_446"} : (i32) -> i2
    %138 = comb.extract %io_in from 12 : (i32) -> i1
    %139 = comb.extract %io_in from 9 : (i32) -> i3
    %140 = comb.concat %c0_i4, %137, %138, %39, %c18_i8, %139, %c35_i9 {sv.namehint = "io_out_s_22_bits"} : i4, i2, i1, i5, i8, i3, i9
    %141 = comb.extract %io_in from 12 : (i32) -> i1
    %142 = comb.extract %io_in from 10 : (i32) -> i2
    %143 = comb.concat %c0_i3, %13, %141, %39, %c19_i8, %142, %c35_i10 {sv.namehint = "io_out_s_23_bits"} : i3, i3, i1, i5, i8, i2, i10
    %144 = comb.extract %io_in from 15 {sv.namehint = "io_out_s_31_rs1"} : (i32) -> i5
    %145 = comb.extract %io_in from 20 {sv.namehint = "io_out_s_31_rs2"} : (i32) -> i5
    %146 = comb.extract %io_in from 13 {sv.namehint = "_io_out_T_1"} : (i32) -> i3
    %147 = comb.concat %0, %146 {sv.namehint = "_io_out_T_2"} : i2, i3
    %148 = comb.icmp bin eq %147, %c1_i5 {sv.namehint = "_io_out_T_3"} : i5
    %149 = comb.mux bin %148, %15, %10 {sv.namehint = "_io_out_T_4_bits"} : i32
    %150 = comb.icmp bin eq %147, %c2_i5 {sv.namehint = "_io_out_T_5"} : i5
    %151 = comb.mux bin %150, %17, %149 {sv.namehint = "_io_out_T_6_bits"} : i32
    %152 = comb.icmp bin eq %147, %c3_i5 {sv.namehint = "_io_out_T_7"} : i5
    %153 = comb.mux bin %152, %19, %151 {sv.namehint = "_io_out_T_8_bits"} : i32
    %154 = comb.icmp bin eq %147, %c4_i5 {sv.namehint = "_io_out_T_9"} : i5
    %155 = comb.mux bin %154, %23, %153 {sv.namehint = "_io_out_T_10_bits"} : i32
    %156 = comb.icmp bin eq %147, %c5_i5 {sv.namehint = "_io_out_T_11"} : i5
    %157 = comb.mux bin %156, %27, %155 {sv.namehint = "_io_out_T_12_bits"} : i32
    %158 = comb.icmp bin eq %147, %c6_i5 {sv.namehint = "_io_out_T_13"} : i5
    %159 = comb.mux bin %158, %31, %157 {sv.namehint = "_io_out_T_14_bits"} : i32
    %160 = comb.icmp bin eq %147, %c7_i5 {sv.namehint = "_io_out_T_15"} : i5
    %161 = comb.mux bin %160, %36, %159 {sv.namehint = "_io_out_T_16_bits"} : i32
    %162 = comb.icmp bin eq %147, %c8_i5 {sv.namehint = "_io_out_T_17"} : i5
    %163 = comb.mux bin %162, %41, %161 {sv.namehint = "_io_out_T_18_bits"} : i32
    %164 = comb.icmp bin eq %147, %c9_i5 {sv.namehint = "_io_out_T_19"} : i5
    %165 = comb.mux bin %164, %44, %163 {sv.namehint = "_io_out_T_20_bits"} : i32
    %166 = comb.icmp bin eq %147, %c10_i5 {sv.namehint = "_io_out_T_21"} : i5
    %167 = comb.mux bin %166, %46, %165 {sv.namehint = "_io_out_T_22_bits"} : i32
    %168 = comb.icmp bin eq %147, %c11_i5 {sv.namehint = "_io_out_T_23"} : i5
    %169 = comb.mux bin %168, %64, %167 {sv.namehint = "_io_out_T_24_bits"} : i32
    %170 = comb.icmp bin eq %147, %c12_i5 {sv.namehint = "_io_out_T_25"} : i5
    %171 = comb.mux bin %170, %84, %169 {sv.namehint = "_io_out_T_26_bits"} : i32
    %172 = comb.icmp bin eq %147, %c13_i5 {sv.namehint = "_io_out_T_27"} : i5
    %173 = comb.mux bin %172, %93, %171 {sv.namehint = "_io_out_T_28_bits"} : i32
    %174 = comb.icmp bin eq %147, %c14_i5 {sv.namehint = "_io_out_T_29"} : i5
    %175 = comb.mux bin %174, %97, %173 {sv.namehint = "_io_out_T_30_bits"} : i32
    %176 = comb.icmp bin eq %147, %c15_i5 {sv.namehint = "_io_out_T_31"} : i5
    %177 = comb.mux bin %176, %101, %175 {sv.namehint = "_io_out_T_32_bits"} : i32
    %178 = comb.or bin %176, %174 : i1
    %179 = comb.mux bin %178, %c0_i5, %95 {sv.namehint = "_io_out_T_32_rs2"} : i5
    %180 = comb.icmp bin eq %147, %c-16_i5 {sv.namehint = "_io_out_T_33"} : i5
    %181 = comb.mux bin %180, %105, %177 {sv.namehint = "_io_out_T_34_bits"} : i32
    %182 = comb.icmp bin eq %147, %c-15_i5 {sv.namehint = "_io_out_T_35"} : i5
    %183 = comb.mux bin %182, %106, %181 {sv.namehint = "_io_out_T_36_bits"} : i32
    %184 = comb.icmp bin eq %147, %c-14_i5 {sv.namehint = "_io_out_T_37"} : i5
    %185 = comb.mux bin %184, %109, %183 {sv.namehint = "_io_out_T_38_bits"} : i32
    %186 = comb.icmp bin eq %147, %c-13_i5 {sv.namehint = "_io_out_T_39"} : i5
    %187 = comb.mux bin %186, %110, %185 {sv.namehint = "_io_out_T_40_bits"} : i32
    %188 = comb.icmp bin eq %147, %c-12_i5 {sv.namehint = "_io_out_T_41"} : i5
    %189 = comb.mux bin %188, %129, %187 {sv.namehint = "_io_out_T_42_bits"} : i32
    %190 = comb.icmp bin eq %147, %c-11_i5 {sv.namehint = "_io_out_T_43"} : i5
    %191 = comb.mux bin %190, %136, %189 {sv.namehint = "_io_out_T_44_bits"} : i32
    %192 = comb.icmp bin eq %147, %c-10_i5 {sv.namehint = "_io_out_T_45"} : i5
    %193 = comb.mux bin %192, %140, %191 {sv.namehint = "_io_out_T_46_bits"} : i32
    %194 = comb.icmp bin eq %147, %c-9_i5 {sv.namehint = "_io_out_T_47"} : i5
    %195 = comb.mux bin %194, %143, %193 {sv.namehint = "_io_out_T_48_bits"} : i32
    %196 = comb.or %194, %192, %190, %188, %186, %184, %182, %180 : i1
    %197 = comb.mux bin %196, %39, %179 {sv.namehint = "_io_out_T_48_rs2"} : i5
    %198 = comb.icmp bin eq %147, %c-8_i5 {sv.namehint = "_io_out_T_49"} : i5
    %199 = comb.icmp bin eq %147, %c-7_i5 {sv.namehint = "_io_out_T_51"} : i5
    %200 = comb.icmp bin eq %147, %c-6_i5 {sv.namehint = "_io_out_T_53"} : i5
    %201 = comb.icmp bin eq %147, %c-5_i5 {sv.namehint = "_io_out_T_55"} : i5
    %202 = comb.icmp bin eq %147, %c-4_i5 {sv.namehint = "_io_out_T_57"} : i5
    %203 = comb.icmp bin eq %147, %c-3_i5 {sv.namehint = "_io_out_T_59"} : i5
    %204 = comb.icmp bin eq %147, %c-2_i5 {sv.namehint = "_io_out_T_61"} : i5
    %205 = comb.icmp bin eq %147, %c-1_i5 {sv.namehint = "_io_out_T_63"} : i5
    %206 = comb.or bin %205, %204, %203, %202, %201, %200, %199, %198 : i1
    %207 = comb.mux bin %206, %io_in, %195 {sv.namehint = "io_out_bits"} : i32
    %208 = hw.array_create %40, %40, %40, %40, %40, %40, %40, %40, %40, %40, %40, %130, %40, %40, %40, %40, %c0_i5, %98, %c0_i5, %85, %40, %40, %40, %40, %34, %34, %34, %34, %34, %34, %34, %34 : i5
    %209 = hw.array_get %208[%147] {sv.namehint = "io_out_rd"} : !hw.array<32xi5>, i5
    %210 = hw.array_create %144, %144, %144, %144, %144, %144, %144, %144, %c2_i5, %c2_i5, %c2_i5, %133, %c2_i5, %c2_i5, %c2_i5, %40, %102, %99, %94, %86, %40, %c0_i5, %40, %40, %35, %30, %26, %22, %18, %16, %14, %c2_i5 : i5
    %211 = hw.array_get %210[%147] {sv.namehint = "io_out_rs1"} : !hw.array<32xi5>, i5
    %212 = comb.or %205, %204, %203, %202, %201, %200, %199, %198 : i1
    %213 = comb.mux bin %212, %145, %197 {sv.namehint = "io_out_rs2"} : i5
    hw.output %207, %209, %211, %213, %1 : i32, i5, i5, i5, i1
  }
  hw.module private @IBuf(in %clock : !seq.clock, in %reset : i1, out io_imem_ready : i1, in %io_imem_valid : i1, in %io_imem_bits_pc : i34, in %io_imem_bits_data : i32, in %io_imem_bits_xcpt_pf_inst : i1, in %io_imem_bits_xcpt_gf_inst : i1, in %io_imem_bits_xcpt_ae_inst : i1, in %io_imem_bits_replay : i1, in %io_kill : i1, out io_pc : i34, in %io_inst_0_ready : i1, out io_inst_0_valid : i1, out io_inst_0_bits_xcpt0_pf_inst : i1, out io_inst_0_bits_xcpt0_gf_inst : i1, out io_inst_0_bits_xcpt0_ae_inst : i1, out io_inst_0_bits_xcpt1_pf_inst : i1, out io_inst_0_bits_xcpt1_gf_inst : i1, out io_inst_0_bits_xcpt1_ae_inst : i1, out io_inst_0_bits_replay : i1, out io_inst_0_bits_rvc : i1, out io_inst_0_bits_inst_bits : i32, out io_inst_0_bits_inst_rd : i5, out io_inst_0_bits_inst_rs1 : i5, out io_inst_0_bits_inst_rs2 : i5, out io_inst_0_bits_raw : i32) {
    %c0_i31 = hw.constant 0 : i31
    %c1_i4 = hw.constant 1 : i4
    %c4294967295_i63 = hw.constant 4294967295 : i63
    %c-1_i2 = hw.constant -1 : i2
    %c0_i185 = hw.constant 0 : i185
    %c0_i63 = hw.constant 0 : i63
    %c0_i16 = hw.constant 0 : i16
    %c0_i58 = hw.constant 0 : i58
    %c0_i4 = hw.constant 0 : i4
    %c0_i2 = hw.constant 0 : i2
    %c3_i34 = hw.constant 3 : i34
    %c-4_i34 = hw.constant -4 : i34
    %c-1_i32 = hw.constant -1 : i32
    %c0_i3 = hw.constant 0 : i3
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true
    %false = hw.constant false
    %nBufValid = seq.firreg %51 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "_io_pc_T"} : i1
    %buf_pc = seq.firreg %49 clock %clock {firrtl.random_init_start = 50 : ui64} : i34
    %buf_data = seq.firreg %43 clock %clock {firrtl.random_init_start = 84 : ui64} : i32
    %buf_xcpt_pf_inst = seq.firreg %32 clock %clock {firrtl.random_init_start = 118 : ui64} : i1
    %buf_xcpt_gf_inst = seq.firreg %33 clock %clock {firrtl.random_init_start = 119 : ui64} : i1
    %buf_xcpt_ae_inst = seq.firreg %34 clock %clock {firrtl.random_init_start = 120 : ui64} : i1
    %buf_replay = seq.firreg %35 clock %clock {firrtl.random_init_start = 121 : ui64} : i1
    %0 = comb.extract %io_imem_bits_pc from 1 {sv.namehint = "pcWordBits"} : (i34) -> i1
    %1 = comb.concat %false, %0 : i1, i1
    %2 = comb.sub bin %c-2_i2, %1 {sv.namehint = "_nIC_T_2"} : i2
    %3 = comb.concat %false, %nBufValid : i1, i1
    %4 = comb.sub bin %108, %3 {sv.namehint = "_nICReady_T"} : i2
    %5 = comb.mux bin %io_imem_valid, %2, %c0_i2 {sv.namehint = "_nValid_T"} : i2
    %6 = comb.concat %false, %nBufValid : i1, i1
    %7 = comb.add bin %5, %6 {sv.namehint = "_nValid_T_1"} : i2
    %8 = comb.concat %false, %nBufValid : i1, i1
    %9 = comb.icmp bin uge %108, %8 {sv.namehint = "_nBufValid_T"} : i2
    %10 = comb.icmp bin uge %4, %2 {sv.namehint = "_io_imem_ready_T_2"} : i2
    %11 = comb.sub bin %2, %4 {sv.namehint = "_nBufValid_T_6"} : i2
    %12 = comb.extract %11 from 1 : (i2) -> i1
    %13 = comb.xor bin %12, %true {sv.namehint = "_io_imem_ready_T_5"} : i1
    %14 = comb.or bin %10, %13 {sv.namehint = "_io_imem_ready_T_6"} : i1
    %15 = comb.and bin %io_inst_0_ready, %9, %14 {sv.namehint = "io_imem_ready"} : i1
    %16 = comb.xor bin %nBufValid, %true {sv.namehint = "_nBufValid_T_1"} : i1
    %17 = comb.or bin %9, %16 {sv.namehint = "_nBufValid_T_2"} : i1
    %18 = comb.extract %108 from 0 : (i2) -> i1
    %19 = comb.sub bin %nBufValid, %18 {sv.namehint = "_nBufValid_T_3"} : i1
    %20 = comb.xor %17, %true : i1
    %21 = comb.and %20, %19 {sv.namehint = "_nBufValid_T_5"} : i1
    %22 = comb.icmp bin ult %4, %2 : i2
    %23 = comb.extract %11 from 1 : (i2) -> i1
    %24 = comb.xor bin %23, %true : i1
    %25 = comb.and bin %io_imem_valid, %9, %22, %24 : i1
    %26 = comb.concat %false, %0 : i1, i1
    %27 = comb.add bin %26, %4 {sv.namehint = "_shamt_T"} : i2
    %28 = comb.extract %11 from 0 : (i2) -> i1
    %29 = comb.mux bin %25, %28, %21 : i1
    %30 = comb.mux bin %io_inst_0_ready, %29, %nBufValid : i1
    %31 = comb.and bin %io_inst_0_ready, %25 : i1
    %32 = comb.mux bin %31, %io_imem_bits_xcpt_pf_inst, %buf_xcpt_pf_inst : i1
    %33 = comb.mux bin %31, %io_imem_bits_xcpt_gf_inst, %buf_xcpt_gf_inst : i1
    %34 = comb.mux bin %31, %io_imem_bits_xcpt_ae_inst, %buf_xcpt_ae_inst : i1
    %35 = comb.mux bin %31, %io_imem_bits_replay, %buf_replay : i1
    %36 = comb.extract %io_imem_bits_data from 16 {sv.namehint = "_buf_data_data_T"} : (i32) -> i16
    %37 = comb.replicate %36 {sv.namehint = "_buf_data_data_T_1"} : (i16) -> i32
    %38 = comb.concat %37, %io_imem_bits_data {sv.namehint = "buf_data_data"} : i32, i32
    %39 = comb.concat %c0_i58, %27, %c0_i4 : i58, i2, i4
    %40 = comb.shru bin %38, %39 {sv.namehint = "_buf_data_T_1"} : i64
    %41 = comb.extract %40 from 0 {sv.namehint = "_buf_data_T_2"} : (i64) -> i16
    %42 = comb.concat %c0_i16, %41 : i16, i16
    %43 = comb.mux bin %31, %42, %buf_data : i32
    %44 = comb.and bin %io_imem_bits_pc, %c-4_i34 {sv.namehint = "_buf_pc_T_1"} : i34
    %45 = comb.concat %c0_i31, %4, %false : i31, i2, i1
    %46 = comb.add bin %io_imem_bits_pc, %45 {sv.namehint = "_buf_pc_T_3"} : i34
    %47 = comb.and bin %46, %c3_i34 {sv.namehint = "_buf_pc_T_5"} : i34
    %48 = comb.or bin %44, %47 {sv.namehint = "_buf_pc_T_6"} : i34
    %49 = comb.mux bin %31, %48, %buf_pc : i34
    %50 = comb.xor %io_kill, %true : i1
    %51 = comb.and %50, %30 : i1
    %52 = comb.concat %false, %nBufValid : i1, i1
    %53 = comb.add bin %52, %c-2_i2 {sv.namehint = "_icShiftAmt_T"} : i2
    %54 = comb.concat %false, %0 : i1, i1
    %55 = comb.sub bin %53, %54 {sv.namehint = "_icShiftAmt_T_2"} : i2
    %56 = comb.extract %io_imem_bits_data from 0 {sv.namehint = "_icData_T"} : (i32) -> i16
    %57 = comb.replicate %56 {sv.namehint = "_icData_T_1"} : (i16) -> i32
    %58 = comb.extract %io_imem_bits_data from 16 {sv.namehint = "_icData_data_T"} : (i32) -> i16
    %59 = comb.replicate %58 {sv.namehint = "_icData_data_T_1"} : (i16) -> i32
    %60 = comb.replicate %59 {sv.namehint = "_icData_data_T_2"} : (i32) -> i64
    %61 = comb.concat %c0_i63, %60, %io_imem_bits_data, %57 : i63, i64, i32, i32
    %62 = comb.concat %c0_i185, %55, %c0_i4 : i185, i2, i4
    %63 = comb.shl bin %61, %62 {sv.namehint = "_icData_T_4"} : i191
    %64 = comb.extract %63 from 64 {sv.namehint = "icData"} : (i191) -> i32
    %65 = comb.concat %c0_i58, %nBufValid, %c0_i4 : i58, i1, i4
    %66 = comb.shl bin %c4294967295_i63, %65 {sv.namehint = "_icMask_T_2"} : i63
    %67 = comb.extract %66 from 0 {sv.namehint = "icMask"} : (i63) -> i32
    %68 = comb.and bin %64, %67 {sv.namehint = "_inst_T"} : i32
    %69 = comb.xor bin %67, %c-1_i32 {sv.namehint = "_inst_T_1"} : i32
    %70 = comb.and bin %buf_data, %69 {sv.namehint = "_inst_T_2"} : i32
    %71 = comb.or bin %68, %70 {sv.namehint = "inst"} : i32
    %72 = comb.concat %c0_i2, %7 : i2, i2
    %73 = comb.shl bin %c1_i4, %72 {sv.namehint = "_valid_T"} : i4
    %74 = comb.extract %73 from 0 : (i4) -> i2
    %75 = comb.add %74, %c-1_i2 {sv.namehint = "_valid_T_1"} : i2
    %76 = comb.shl bin %c1_i2, %8 {sv.namehint = "_bufMask_T"} : i2
    %77 = comb.add %76, %c-1_i2 {sv.namehint = "_bufMask_T_1"} : i2
    %78 = comb.extract %77 from 0 {sv.namehint = "_xcpt_T"} : (i2) -> i1
    %79 = comb.mux bin %78, %buf_xcpt_pf_inst, %io_imem_bits_xcpt_pf_inst {sv.namehint = "xcpt_0_pf_inst"} : i1
    %80 = comb.mux bin %78, %buf_xcpt_gf_inst, %io_imem_bits_xcpt_gf_inst {sv.namehint = "xcpt_0_gf_inst"} : i1
    %81 = comb.mux bin %78, %buf_xcpt_ae_inst, %io_imem_bits_xcpt_ae_inst {sv.namehint = "xcpt_0_ae_inst"} : i1
    %82 = comb.extract %77 from 1 {sv.namehint = "_xcpt_T_1"} : (i2) -> i1
    %83 = comb.mux bin %82, %buf_xcpt_pf_inst, %io_imem_bits_xcpt_pf_inst {sv.namehint = "xcpt_1_pf_inst"} : i1
    %84 = comb.mux bin %82, %buf_xcpt_gf_inst, %io_imem_bits_xcpt_gf_inst {sv.namehint = "xcpt_1_gf_inst"} : i1
    %85 = comb.mux bin %82, %buf_xcpt_ae_inst, %io_imem_bits_xcpt_ae_inst {sv.namehint = "xcpt_1_ae_inst"} : i1
    %86 = comb.mux bin %buf_replay, %77, %c0_i2 {sv.namehint = "buf_replay"} : i2
    %87 = comb.xor bin %77, %c-1_i2 {sv.namehint = "_ic_replay_T"} : i2
    %88 = comb.and bin %75, %87 {sv.namehint = "_ic_replay_T_1"} : i2
    %89 = comb.mux bin %io_imem_bits_replay, %88, %c0_i2 {sv.namehint = "_ic_replay_T_2"} : i2
    %90 = comb.or bin %86, %89 {sv.namehint = "ic_replay"} : i2
    %91 = comb.mux bin %nBufValid, %buf_pc, %io_imem_bits_pc {sv.namehint = "io_pc"} : i34
    %exp.io_out_bits, %exp.io_out_rd, %exp.io_out_rs1, %exp.io_out_rs2, %exp.io_rvc = hw.instance "exp" @RVCExpander(io_in: %71: i32) -> (io_out_bits: i32, io_out_rd: i5, io_out_rs1: i5, io_out_rs2: i5, io_rvc: i1) {sv.namehint = "exp.io_rvc"}
    %92 = comb.extract %90 from 0 {sv.namehint = "_replay_T_1"} : (i2) -> i1
    %93 = comb.xor bin %exp.io_rvc, %true {sv.namehint = "_replay_T_2"} : i1
    %94 = comb.extract %90 from 1 {sv.namehint = "_replay_T_6"} : (i2) -> i1
    %95 = comb.and bin %93, %94 {sv.namehint = "_replay_T_7"} : i1
    %96 = comb.or bin %92, %95 {sv.namehint = "replay"} : i1
    %97 = comb.extract %75 from 1 {sv.namehint = "_full_insn_T_3"} : (i2) -> i1
    %98 = comb.extract %86 from 0 {sv.namehint = "_full_insn_T_6"} : (i2) -> i1
    %99 = comb.or bin %exp.io_rvc, %97, %98 {sv.namehint = "full_insn"} : i1
    %100 = comb.extract %75 from 0 {sv.namehint = "_io_inst_0_valid_T_1"} : (i2) -> i1
    %101 = comb.and bin %100, %99 {sv.namehint = "io_inst_0_valid"} : i1
    %102 = comb.concat %83, %84, %85 {sv.namehint = "_io_inst_0_bits_xcpt1_T_4"} : i1, i1, i1
    %103 = comb.mux bin %exp.io_rvc, %c0_i3, %102 {sv.namehint = "_io_inst_0_bits_xcpt1_T_5"} : i3
    %104 = comb.extract %103 from 0 {sv.namehint = "_io_inst_0_bits_xcpt1_T_6"} : (i3) -> i1
    %105 = comb.extract %103 from 1 {sv.namehint = "_io_inst_0_bits_xcpt1_T_7"} : (i3) -> i1
    %106 = comb.extract %103 from 2 {sv.namehint = "_io_inst_0_bits_xcpt1_T_8"} : (i3) -> i1
    %107 = comb.mux bin %exp.io_rvc, %c1_i2, %c-2_i2 {sv.namehint = "_nReady_T_4"} : i2
    %108 = comb.mux bin %99, %107, %c0_i2 {sv.namehint = "nReady"} : i2
    hw.output %15, %91, %101, %79, %80, %81, %106, %105, %104, %96, %exp.io_rvc, %exp.io_out_bits, %exp.io_out_rd, %exp.io_out_rs1, %exp.io_out_rs2, %71 : i1, i34, i1, i1, i1, i1, i1, i1, i1, i1, i1, i32, i5, i5, i5, i32
  }
  hw.module private @CSRFile(in %clock : !seq.clock, in %reset : i1, in %io_ungated_clock : !seq.clock, in %io_interrupts_debug : i1, in %io_interrupts_mtip : i1, in %io_interrupts_msip : i1, in %io_interrupts_meip : i1, in %io_rw_addr : i12, in %io_rw_cmd : i3, out io_rw_rdata : i64, in %io_rw_wdata : i64, in %io_decode_0_inst : i32, out io_decode_0_read_illegal : i1, out io_decode_0_write_illegal : i1, out io_decode_0_write_flush : i1, out io_decode_0_system_illegal : i1, out io_decode_0_virtual_access_illegal : i1, out io_decode_0_virtual_system_illegal : i1, out io_csr_stall : i1, out io_eret : i1, out io_singleStep : i1, out io_status_debug : i1, out io_status_wfi : i1, out io_status_isa : i32, out io_status_dv : i1, out io_status_v : i1, out io_evec : i34, in %io_exception : i1, in %io_retire : i1, in %io_cause : i64, in %io_pc : i34, in %io_tval : i34, in %io_gva : i1, out io_time : i64, out io_interrupt : i1, out io_interrupt_cause : i64, out io_bp_0_control_action : i1, out io_bp_0_control_tmatch : i2, out io_bp_0_control_x : i1, out io_bp_0_control_w : i1, out io_bp_0_control_r : i1, out io_bp_0_address : i33, out io_pmp_0_cfg_l : i1, out io_pmp_0_cfg_a : i2, out io_pmp_0_cfg_x : i1, out io_pmp_0_cfg_w : i1, out io_pmp_0_cfg_r : i1, out io_pmp_0_addr : i30, out io_pmp_0_mask : i32, out io_pmp_1_cfg_l : i1, out io_pmp_1_cfg_a : i2, out io_pmp_1_cfg_x : i1, out io_pmp_1_cfg_w : i1, out io_pmp_1_cfg_r : i1, out io_pmp_1_addr : i30, out io_pmp_1_mask : i32, out io_pmp_2_cfg_l : i1, out io_pmp_2_cfg_a : i2, out io_pmp_2_cfg_x : i1, out io_pmp_2_cfg_w : i1, out io_pmp_2_cfg_r : i1, out io_pmp_2_addr : i30, out io_pmp_2_mask : i32, out io_pmp_3_cfg_l : i1, out io_pmp_3_cfg_a : i2, out io_pmp_3_cfg_x : i1, out io_pmp_3_cfg_w : i1, out io_pmp_3_cfg_r : i1, out io_pmp_3_addr : i30, out io_pmp_3_mask : i32, out io_pmp_4_cfg_l : i1, out io_pmp_4_cfg_a : i2, out io_pmp_4_cfg_x : i1, out io_pmp_4_cfg_w : i1, out io_pmp_4_cfg_r : i1, out io_pmp_4_addr : i30, out io_pmp_4_mask : i32, out io_pmp_5_cfg_l : i1, out io_pmp_5_cfg_a : i2, out io_pmp_5_cfg_x : i1, out io_pmp_5_cfg_w : i1, out io_pmp_5_cfg_r : i1, out io_pmp_5_addr : i30, out io_pmp_5_mask : i32, out io_pmp_6_cfg_l : i1, out io_pmp_6_cfg_a : i2, out io_pmp_6_cfg_x : i1, out io_pmp_6_cfg_w : i1, out io_pmp_6_cfg_r : i1, out io_pmp_6_addr : i30, out io_pmp_6_mask : i32, out io_pmp_7_cfg_l : i1, out io_pmp_7_cfg_a : i2, out io_pmp_7_cfg_x : i1, out io_pmp_7_cfg_w : i1, out io_pmp_7_cfg_r : i1, out io_pmp_7_addr : i30, out io_pmp_7_mask : i32, out io_inhibit_cycle : i1, out io_customCSRs_0_value : i64) {
    %c-1_i48 = hw.constant -1 : i48
    %c0_i63 = hw.constant 0 : i63
    %c2_i3 = hw.constant 2 : i3
    %c0_i22 = hw.constant 0 : i22
    %c-128_i8 = hw.constant -128 : i8
    %c1_i3 = hw.constant 1 : i3
    %c-897_i12 = hw.constant -897 : i12
    %c-1025_i12 = hw.constant -1025 : i12
    %c-1_i24 = hw.constant -1 : i24
    %c0_i25 = hw.constant 0 : i25
    %c-1_i30 = hw.constant -1 : i30
    %c1_i30 = hw.constant 1 : i30
    %c-9223372036854775808_i64 = hw.constant -9223372036854775808 : i64
    %c0_i4 = hw.constant 0 : i4
    %c1_i58 = hw.constant 1 : i58
    %c14_i8 = hw.constant 14 : i8
    %c1985_i12 = hw.constant 1985 : i12
    %c959_i12 = hw.constant 959 : i12
    %c958_i12 = hw.constant 958 : i12
    %c957_i12 = hw.constant 957 : i12
    %c956_i12 = hw.constant 956 : i12
    %c955_i12 = hw.constant 955 : i12
    %c954_i12 = hw.constant 954 : i12
    %c953_i12 = hw.constant 953 : i12
    %c952_i12 = hw.constant 952 : i12
    %c951_i12 = hw.constant 951 : i12
    %c950_i12 = hw.constant 950 : i12
    %c949_i12 = hw.constant 949 : i12
    %c948_i12 = hw.constant 948 : i12
    %c947_i12 = hw.constant 947 : i12
    %c946_i12 = hw.constant 946 : i12
    %c945_i12 = hw.constant 945 : i12
    %c944_i12 = hw.constant 944 : i12
    %c930_i12 = hw.constant 930 : i12
    %c928_i12 = hw.constant 928 : i12
    %c831_i12 = hw.constant 831 : i12
    %c830_i12 = hw.constant 830 : i12
    %c829_i12 = hw.constant 829 : i12
    %c828_i12 = hw.constant 828 : i12
    %c827_i12 = hw.constant 827 : i12
    %c826_i12 = hw.constant 826 : i12
    %c825_i12 = hw.constant 825 : i12
    %c824_i12 = hw.constant 824 : i12
    %c823_i12 = hw.constant 823 : i12
    %c822_i12 = hw.constant 822 : i12
    %c821_i12 = hw.constant 821 : i12
    %c820_i12 = hw.constant 820 : i12
    %c819_i12 = hw.constant 819 : i12
    %c818_i12 = hw.constant 818 : i12
    %c817_i12 = hw.constant 817 : i12
    %c816_i12 = hw.constant 816 : i12
    %c815_i12 = hw.constant 815 : i12
    %c814_i12 = hw.constant 814 : i12
    %c813_i12 = hw.constant 813 : i12
    %c812_i12 = hw.constant 812 : i12
    %c811_i12 = hw.constant 811 : i12
    %c810_i12 = hw.constant 810 : i12
    %c809_i12 = hw.constant 809 : i12
    %c808_i12 = hw.constant 808 : i12
    %c807_i12 = hw.constant 807 : i12
    %c806_i12 = hw.constant 806 : i12
    %c805_i12 = hw.constant 805 : i12
    %c804_i12 = hw.constant 804 : i12
    %c803_i12 = hw.constant 803 : i12
    %c800_i12 = hw.constant 800 : i12
    %c1970_i12 = hw.constant 1970 : i12
    %c1969_i12 = hw.constant 1969 : i12
    %c1968_i12 = hw.constant 1968 : i12
    %c834_i12 = hw.constant 834 : i12
    %c835_i12 = hw.constant 835 : i12
    %c833_i12 = hw.constant 833 : i12
    %c832_i12 = hw.constant 832 : i12
    %c772_i12 = hw.constant 772 : i12
    %c836_i12 = hw.constant 836 : i12
    %c773_i12 = hw.constant 773 : i12
    %c768_i12 = hw.constant 768 : i12
    %c769_i12 = hw.constant 769 : i12
    %c1955_i12 = hw.constant 1955 : i12
    %c1954_i12 = hw.constant 1954 : i12
    %c1953_i12 = hw.constant 1953 : i12
    %c1952_i12 = hw.constant 1952 : i12
    %c16384_i16 = hw.constant 16384 : i16
    %false = hw.constant false {sv.namehint = "mip_usip"}
    %true = hw.constant true
    %c-1_i2 = hw.constant -1 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i30 = hw.constant 0 : i30
    %c0_i6 = hw.constant 0 : i6
    %c0_i64 = hw.constant 0 : i64
    %c538447876_i64 = hw.constant 538447876 : i64
    %c0_i24 = hw.constant 0 : i24
    %c0_i3 = hw.constant 0 : i3
    %c-521_i64 = hw.constant -521 : i64
    %c-4102_i64 = hw.constant -4102 : i64
    %c3_i64 = hw.constant 3 : i64
    %c4398046511104_i46 = hw.constant 4398046511104 : i46
    %c2_i8 = hw.constant 2 : i8
    %c3_i4 = hw.constant 3 : i4
    %c7_i4 = hw.constant 7 : i4
    %c1_i4 = hw.constant 1 : i4
    %c5_i4 = hw.constant 5 : i4
    %c6_i4 = hw.constant 6 : i4
    %c2184_i16 = hw.constant 2184 : i16
    %c2_i4 = hw.constant 2 : i4
    %c0_i16 = hw.constant 0 : i16
    %c1_i2 = hw.constant 1 : i2
    %c0_i32 = hw.constant 0 : i32
    %c-9223372036854775793_i64 = hw.constant -9223372036854775793 : i64
    %c4101_i64 = hw.constant 4101 : i64
    %c-2048_i12 = hw.constant -2048 : i12
    %c-235_i12 = hw.constant -235 : i12
    %c-1022_i12 = hw.constant -1022 : i12
    %c-993_i12 = hw.constant -993 : i12
    %c-1249_i12 = hw.constant -1249 : i12
    %c-994_i12 = hw.constant -994 : i12
    %c-1250_i12 = hw.constant -1250 : i12
    %c-995_i12 = hw.constant -995 : i12
    %c-1251_i12 = hw.constant -1251 : i12
    %c-996_i12 = hw.constant -996 : i12
    %c-1252_i12 = hw.constant -1252 : i12
    %c-997_i12 = hw.constant -997 : i12
    %c-1253_i12 = hw.constant -1253 : i12
    %c-998_i12 = hw.constant -998 : i12
    %c-1254_i12 = hw.constant -1254 : i12
    %c-999_i12 = hw.constant -999 : i12
    %c-1255_i12 = hw.constant -1255 : i12
    %c-1000_i12 = hw.constant -1000 : i12
    %c-1256_i12 = hw.constant -1256 : i12
    %c-1001_i12 = hw.constant -1001 : i12
    %c-1257_i12 = hw.constant -1257 : i12
    %c-1002_i12 = hw.constant -1002 : i12
    %c-1258_i12 = hw.constant -1258 : i12
    %c-1003_i12 = hw.constant -1003 : i12
    %c-1259_i12 = hw.constant -1259 : i12
    %c-1004_i12 = hw.constant -1004 : i12
    %c-1260_i12 = hw.constant -1260 : i12
    %c-1005_i12 = hw.constant -1005 : i12
    %c-1261_i12 = hw.constant -1261 : i12
    %c-1006_i12 = hw.constant -1006 : i12
    %c-1262_i12 = hw.constant -1262 : i12
    %c-1007_i12 = hw.constant -1007 : i12
    %c-1263_i12 = hw.constant -1263 : i12
    %c-1008_i12 = hw.constant -1008 : i12
    %c-1264_i12 = hw.constant -1264 : i12
    %c-1009_i12 = hw.constant -1009 : i12
    %c-1265_i12 = hw.constant -1265 : i12
    %c-1010_i12 = hw.constant -1010 : i12
    %c-1266_i12 = hw.constant -1266 : i12
    %c-1011_i12 = hw.constant -1011 : i12
    %c-1267_i12 = hw.constant -1267 : i12
    %c-1012_i12 = hw.constant -1012 : i12
    %c-1268_i12 = hw.constant -1268 : i12
    %c-1013_i12 = hw.constant -1013 : i12
    %c-1269_i12 = hw.constant -1269 : i12
    %c-1014_i12 = hw.constant -1014 : i12
    %c-1270_i12 = hw.constant -1270 : i12
    %c-1015_i12 = hw.constant -1015 : i12
    %c-1271_i12 = hw.constant -1271 : i12
    %c-1016_i12 = hw.constant -1016 : i12
    %c-1272_i12 = hw.constant -1272 : i12
    %c-1017_i12 = hw.constant -1017 : i12
    %c-1273_i12 = hw.constant -1273 : i12
    %c-1018_i12 = hw.constant -1018 : i12
    %c-1274_i12 = hw.constant -1274 : i12
    %c-1019_i12 = hw.constant -1019 : i12
    %c-1275_i12 = hw.constant -1275 : i12
    %c-1020_i12 = hw.constant -1020 : i12
    %c-1276_i12 = hw.constant -1276 : i12
    %c-1021_i12 = hw.constant -1021 : i12
    %c-1277_i12 = hw.constant -1277 : i12
    %c-1278_i12 = hw.constant -1278 : i12
    %c-1280_i12 = hw.constant -1280 : i12
    %c-236_i12 = hw.constant -236 : i12
    %c-256_i10 = hw.constant -256 : i10
    %c-864_i12 = hw.constant -864 : i12
    %c-992_i12 = hw.constant -992 : i12
    %c-1024_i12 = hw.constant -1024 : i12
    %c-237_i12 = hw.constant -237 : i12
    %c-239_i12 = hw.constant -239 : i12
    %c-238_i12 = hw.constant -238 : i12
    %c520_i64 = hw.constant 520 : i64
    %c-9223372036846382843_i64 = hw.constant -9223372036846382843 : i64
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c-6_i4 = hw.constant -6 : i4
    %c-2_i3 = hw.constant -2 : i3
    %c-8_i4 = hw.constant -8 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c0_i58 = hw.constant 0 : i58
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i8 = hw.constant -2 : i8
    %c0_i48 = hw.constant 0 : i48
    %c-1_i34 = hw.constant -1 : i34
    %c-1_i12 = hw.constant -1 : i12
    %c-1_i11 = hw.constant -1 : i11
    %c-1_i10 = hw.constant -1 : i10
    %c-1_i6 = hw.constant -1 : i6
    %c-1_i64 = hw.constant -1 : i64
    %c0_i27 = hw.constant 0 : i27
    %c-1_i8 = hw.constant -1 : i8
    %c0_i60 = hw.constant 0 : i60
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %reg_mstatus_v = seq.firreg %637 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64, sv.namehint = "io_status_v"} : i1
    %reg_mstatus_mpv = seq.firreg %635 clock %clock reset sync %reset, %false {firrtl.random_init_start = 65 : ui64, sv.namehint = "io_status_mpv"} : i1
    %reg_mstatus_gva = seq.firreg %594 clock %clock reset sync %reset, %false {firrtl.random_init_start = 66 : ui64, sv.namehint = "io_status_gva"} : i1
    %reg_mstatus_mpp = seq.firreg %632 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 92 : ui64, sv.namehint = "io_status_mpp"} : i2
    %reg_mstatus_mpie = seq.firreg %707 clock %clock reset sync %reset, %false {firrtl.random_init_start = 97 : ui64, sv.namehint = "io_status_mpie"} : i1
    %reg_mstatus_mie = seq.firreg %706 clock %clock reset sync %reset, %false {firrtl.random_init_start = 101 : ui64, sv.namehint = "io_status_mie"} : i1
    %reg_dcsr_ebreakm = seq.firreg %777 clock %clock reset sync %reset, %false {firrtl.random_init_start = 121 : ui64} : i1
    %reg_dcsr_cause = seq.firreg %584 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 128 : ui64} : i3
    %reg_dcsr_v = seq.firreg %585 clock %clock reset sync %reset, %false {firrtl.random_init_start = 131 : ui64} : i1
    %reg_dcsr_step = seq.firreg %776 clock %clock reset sync %reset, %false {firrtl.random_init_start = 134 : ui64} : i1
    %reg_debug = seq.firreg %617 clock %clock reset sync %reset, %false {firrtl.random_init_start = 137 : ui64, sv.namehint = "reg_debug"} : i1
    %reg_dpc = seq.firreg %781 clock %clock {firrtl.random_init_start = 138 : ui64} : i34
    %reg_dscratch0 = seq.firreg %783 clock %clock {firrtl.random_init_start = 172 : ui64} : i64
    %reg_singleStepped = seq.firreg %570 clock %clock {firrtl.random_init_start = 236 : ui64} : i1
    %reg_bp_0_control_dmode = seq.firreg %812 clock %clock reset sync %reset, %false {firrtl.random_init_start = 242 : ui64} : i1
    %reg_bp_0_control_action = seq.firreg %814 clock %clock reset sync %reset, %false {firrtl.random_init_start = 289 : ui64, sv.namehint = "io_bp_0_control_action"} : i1
    %reg_bp_0_control_tmatch = seq.firreg %796 clock %clock {firrtl.random_init_start = 293 : ui64, sv.namehint = "io_bp_0_control_tmatch"} : i2
    %reg_bp_0_control_x = seq.firreg %797 clock %clock reset sync %reset, %false {firrtl.random_init_start = 299 : ui64, sv.namehint = "io_bp_0_control_x"} : i1
    %reg_bp_0_control_w = seq.firreg %798 clock %clock reset sync %reset, %false {firrtl.random_init_start = 300 : ui64, sv.namehint = "io_bp_0_control_w"} : i1
    %reg_bp_0_control_r = seq.firreg %799 clock %clock reset sync %reset, %false {firrtl.random_init_start = 301 : ui64, sv.namehint = "io_bp_0_control_r"} : i1
    %reg_bp_0_address = seq.firreg %790 clock %clock {firrtl.random_init_start = 302 : ui64, sv.namehint = "io_bp_0_address"} : i33
    %reg_pmp_0_cfg_l = seq.firreg %825 clock %clock reset sync %reset, %false {firrtl.random_init_start = 534 : ui64, sv.namehint = "pmp_cfg_l"} : i1
    %reg_pmp_0_cfg_a = seq.firreg %826 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 537 : ui64, sv.namehint = "pmp_cfg_a"} : i2
    %reg_pmp_0_cfg_x = seq.firreg %827 clock %clock {firrtl.random_init_start = 539 : ui64, sv.namehint = "pmp_cfg_x"} : i1
    %reg_pmp_0_cfg_w = seq.firreg %830 clock %clock {firrtl.random_init_start = 540 : ui64, sv.namehint = "pmp_cfg_w"} : i1
    %reg_pmp_0_cfg_r = seq.firreg %828 clock %clock {firrtl.random_init_start = 541 : ui64, sv.namehint = "pmp_cfg_r"} : i1
    %reg_pmp_0_addr = seq.firreg %841 clock %clock {firrtl.random_init_start = 542 : ui64, sv.namehint = "pmp_addr"} : i30
    %reg_pmp_1_cfg_l = seq.firreg %852 clock %clock reset sync %reset, %false {firrtl.random_init_start = 572 : ui64, sv.namehint = "pmp_1_cfg_l"} : i1
    %reg_pmp_1_cfg_a = seq.firreg %853 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 575 : ui64, sv.namehint = "pmp_1_cfg_a"} : i2
    %reg_pmp_1_cfg_x = seq.firreg %854 clock %clock {firrtl.random_init_start = 577 : ui64, sv.namehint = "pmp_1_cfg_x"} : i1
    %reg_pmp_1_cfg_w = seq.firreg %857 clock %clock {firrtl.random_init_start = 578 : ui64, sv.namehint = "pmp_1_cfg_w"} : i1
    %reg_pmp_1_cfg_r = seq.firreg %855 clock %clock {firrtl.random_init_start = 579 : ui64, sv.namehint = "pmp_1_cfg_r"} : i1
    %reg_pmp_1_addr = seq.firreg %865 clock %clock {firrtl.random_init_start = 580 : ui64, sv.namehint = "pmp_1_addr"} : i30
    %reg_pmp_2_cfg_l = seq.firreg %876 clock %clock reset sync %reset, %false {firrtl.random_init_start = 610 : ui64, sv.namehint = "pmp_2_cfg_l"} : i1
    %reg_pmp_2_cfg_a = seq.firreg %877 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 613 : ui64, sv.namehint = "pmp_2_cfg_a"} : i2
    %reg_pmp_2_cfg_x = seq.firreg %878 clock %clock {firrtl.random_init_start = 615 : ui64, sv.namehint = "pmp_2_cfg_x"} : i1
    %reg_pmp_2_cfg_w = seq.firreg %881 clock %clock {firrtl.random_init_start = 616 : ui64, sv.namehint = "pmp_2_cfg_w"} : i1
    %reg_pmp_2_cfg_r = seq.firreg %879 clock %clock {firrtl.random_init_start = 617 : ui64, sv.namehint = "pmp_2_cfg_r"} : i1
    %reg_pmp_2_addr = seq.firreg %889 clock %clock {firrtl.random_init_start = 618 : ui64, sv.namehint = "pmp_2_addr"} : i30
    %reg_pmp_3_cfg_l = seq.firreg %900 clock %clock reset sync %reset, %false {firrtl.random_init_start = 648 : ui64, sv.namehint = "pmp_3_cfg_l"} : i1
    %reg_pmp_3_cfg_a = seq.firreg %901 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 651 : ui64, sv.namehint = "pmp_3_cfg_a"} : i2
    %reg_pmp_3_cfg_x = seq.firreg %902 clock %clock {firrtl.random_init_start = 653 : ui64, sv.namehint = "pmp_3_cfg_x"} : i1
    %reg_pmp_3_cfg_w = seq.firreg %905 clock %clock {firrtl.random_init_start = 654 : ui64, sv.namehint = "pmp_3_cfg_w"} : i1
    %reg_pmp_3_cfg_r = seq.firreg %903 clock %clock {firrtl.random_init_start = 655 : ui64, sv.namehint = "pmp_3_cfg_r"} : i1
    %reg_pmp_3_addr = seq.firreg %913 clock %clock {firrtl.random_init_start = 656 : ui64, sv.namehint = "pmp_3_addr"} : i30
    %reg_pmp_4_cfg_l = seq.firreg %924 clock %clock reset sync %reset, %false {firrtl.random_init_start = 686 : ui64, sv.namehint = "pmp_4_cfg_l"} : i1
    %reg_pmp_4_cfg_a = seq.firreg %925 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 689 : ui64, sv.namehint = "pmp_4_cfg_a"} : i2
    %reg_pmp_4_cfg_x = seq.firreg %926 clock %clock {firrtl.random_init_start = 691 : ui64, sv.namehint = "pmp_4_cfg_x"} : i1
    %reg_pmp_4_cfg_w = seq.firreg %929 clock %clock {firrtl.random_init_start = 692 : ui64, sv.namehint = "pmp_4_cfg_w"} : i1
    %reg_pmp_4_cfg_r = seq.firreg %927 clock %clock {firrtl.random_init_start = 693 : ui64, sv.namehint = "pmp_4_cfg_r"} : i1
    %reg_pmp_4_addr = seq.firreg %937 clock %clock {firrtl.random_init_start = 694 : ui64, sv.namehint = "pmp_4_addr"} : i30
    %reg_pmp_5_cfg_l = seq.firreg %948 clock %clock reset sync %reset, %false {firrtl.random_init_start = 724 : ui64, sv.namehint = "pmp_5_cfg_l"} : i1
    %reg_pmp_5_cfg_a = seq.firreg %949 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 727 : ui64, sv.namehint = "pmp_5_cfg_a"} : i2
    %reg_pmp_5_cfg_x = seq.firreg %950 clock %clock {firrtl.random_init_start = 729 : ui64, sv.namehint = "pmp_5_cfg_x"} : i1
    %reg_pmp_5_cfg_w = seq.firreg %953 clock %clock {firrtl.random_init_start = 730 : ui64, sv.namehint = "pmp_5_cfg_w"} : i1
    %reg_pmp_5_cfg_r = seq.firreg %951 clock %clock {firrtl.random_init_start = 731 : ui64, sv.namehint = "pmp_5_cfg_r"} : i1
    %reg_pmp_5_addr = seq.firreg %961 clock %clock {firrtl.random_init_start = 732 : ui64, sv.namehint = "pmp_5_addr"} : i30
    %reg_pmp_6_cfg_l = seq.firreg %972 clock %clock reset sync %reset, %false {firrtl.random_init_start = 762 : ui64, sv.namehint = "pmp_6_cfg_l"} : i1
    %reg_pmp_6_cfg_a = seq.firreg %973 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 765 : ui64, sv.namehint = "pmp_6_cfg_a"} : i2
    %reg_pmp_6_cfg_x = seq.firreg %974 clock %clock {firrtl.random_init_start = 767 : ui64, sv.namehint = "pmp_6_cfg_x"} : i1
    %reg_pmp_6_cfg_w = seq.firreg %977 clock %clock {firrtl.random_init_start = 768 : ui64, sv.namehint = "pmp_6_cfg_w"} : i1
    %reg_pmp_6_cfg_r = seq.firreg %975 clock %clock {firrtl.random_init_start = 769 : ui64, sv.namehint = "pmp_6_cfg_r"} : i1
    %reg_pmp_6_addr = seq.firreg %985 clock %clock {firrtl.random_init_start = 770 : ui64, sv.namehint = "pmp_6_addr"} : i30
    %reg_pmp_7_cfg_l = seq.firreg %996 clock %clock reset sync %reset, %false {firrtl.random_init_start = 800 : ui64, sv.namehint = "pmp_7_cfg_l"} : i1
    %reg_pmp_7_cfg_a = seq.firreg %997 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 803 : ui64, sv.namehint = "pmp_7_cfg_a"} : i2
    %reg_pmp_7_cfg_x = seq.firreg %998 clock %clock {firrtl.random_init_start = 805 : ui64, sv.namehint = "pmp_7_cfg_x"} : i1
    %reg_pmp_7_cfg_w = seq.firreg %1001 clock %clock {firrtl.random_init_start = 806 : ui64, sv.namehint = "pmp_7_cfg_w"} : i1
    %reg_pmp_7_cfg_r = seq.firreg %999 clock %clock {firrtl.random_init_start = 807 : ui64, sv.namehint = "pmp_7_cfg_r"} : i1
    %reg_pmp_7_addr = seq.firreg %1005 clock %clock {firrtl.random_init_start = 808 : ui64, sv.namehint = "pmp_7_addr"} : i30
    %reg_mie = seq.firreg %735 clock %clock {firrtl.random_init_start = 838 : ui64} : i64
    %reg_mepc = seq.firreg %739 clock %clock {firrtl.random_init_start = 1046 : ui64} : i34
    %reg_mcause = seq.firreg %749 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 1080 : ui64} : i64
    %reg_mtval = seq.firreg %754 clock %clock {firrtl.random_init_start = 1144 : ui64} : i34
    %reg_mscratch = seq.firreg %741 clock %clock {firrtl.random_init_start = 1218 : ui64} : i64
    %reg_mtvec = seq.firreg %746 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 1282 : ui64} : i32
    %reg_wfi = seq.firreg %568 clock %io_ungated_clock reset sync %reset, %false {firrtl.random_init_start = 2766 : ui64, sv.namehint = "reg_wfi"} : i1
    %reg_mcountinhibit = seq.firreg %759 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 2775 : ui64} : i3
    %1 = comb.extract %reg_mcountinhibit from 0 {sv.namehint = "x11"} : (i3) -> i1
    %2 = comb.extract %reg_mcountinhibit from 2 {sv.namehint = "x3"} : (i3) -> i1
    %small = seq.firreg %770 clock %clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 2778 : ui64} : i6
    %3 = comb.concat %false, %small : i1, i6
    %4 = comb.concat %c0_i6, %io_retire : i6, i1
    %5 = comb.add bin %3, %4 {sv.namehint = "nextSmall"} : i7
    %6 = comb.xor bin %2, %true {sv.namehint = "_large_T_1"} : i1
    %7 = comb.extract %5 from 0 : (i7) -> i6
    %8 = comb.mux bin %2, %small, %7 : i6
    %large = seq.firreg %772 clock %clock reset sync %reset, %c0_i58 {firrtl.random_init_start = 2784 : ui64} : i58
    %9 = comb.extract %5 from 6 {sv.namehint = "_large_T"} : (i7) -> i1
    %10 = comb.and bin %9, %6 {sv.namehint = "_large_T_2"} : i1
    %11 = comb.add bin %large, %c1_i58 {sv.namehint = "_large_r_T"} : i58
    %12 = comb.mux bin %10, %11, %large : i58
    %13 = comb.concat %large, %small {sv.namehint = "value"} : i58, i6
    %14 = comb.xor bin %645, %true {sv.namehint = "x10"} : i1
    %small_1 = seq.firreg %764 clock %io_ungated_clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 2842 : ui64} : i6
    %15 = comb.concat %false, %small_1 : i1, i6
    %16 = comb.concat %c0_i6, %14 : i6, i1
    %17 = comb.add bin %15, %16 {sv.namehint = "nextSmall_1"} : i7
    %18 = comb.xor bin %1, %true {sv.namehint = "_large_T_4"} : i1
    %19 = comb.extract %17 from 0 : (i7) -> i6
    %20 = comb.mux bin %1, %small_1, %19 : i6
    %large_1 = seq.firreg %768 clock %io_ungated_clock reset sync %reset, %c0_i58 {firrtl.random_init_start = 2848 : ui64} : i58
    %21 = comb.extract %17 from 6 {sv.namehint = "_large_T_3"} : (i7) -> i1
    %22 = comb.and bin %21, %18 {sv.namehint = "_large_T_5"} : i1
    %23 = comb.add bin %large_1, %c1_i58 {sv.namehint = "_large_r_T_2"} : i58
    %24 = comb.mux bin %22, %23, %large_1 : i58
    %25 = comb.concat %large_1, %small_1 {sv.namehint = "io_time"} : i58, i6
    %26 = comb.concat %c0_i4, %io_interrupts_meip, %c0_i3, %io_interrupts_mtip, %c0_i3, %io_interrupts_msip, %c0_i3 {sv.namehint = "read_mip"} : i4, i1, i3, i1, i3, i1, i3
    %27 = comb.extract %reg_mie from 0 : (i64) -> i16
    %28 = comb.and bin %27, %26 : i16
    %29 = comb.mux bin %reg_mstatus_mie, %28, %c0_i16 {sv.namehint = "m_interrupts"} : i16
    %30 = comb.extract %29 from 15 {sv.namehint = "_which_T_15"} : (i16) -> i1
    %31 = comb.extract %29 from 14 {sv.namehint = "_which_T_16"} : (i16) -> i1
    %32 = comb.extract %29 from 13 {sv.namehint = "_which_T_17"} : (i16) -> i1
    %33 = comb.extract %29 from 12 {sv.namehint = "_which_T_18"} : (i16) -> i1
    %34 = comb.extract %29 from 11 {sv.namehint = "_which_T_19"} : (i16) -> i1
    %35 = comb.extract %29 from 3 {sv.namehint = "_which_T_20"} : (i16) -> i1
    %36 = comb.extract %29 from 7 {sv.namehint = "_which_T_21"} : (i16) -> i1
    %37 = comb.extract %29 from 9 {sv.namehint = "_which_T_22"} : (i16) -> i1
    %38 = comb.extract %29 from 1 {sv.namehint = "_which_T_23"} : (i16) -> i1
    %39 = comb.extract %29 from 5 {sv.namehint = "_which_T_24"} : (i16) -> i1
    %40 = comb.extract %29 from 10 {sv.namehint = "_which_T_25"} : (i16) -> i1
    %41 = comb.extract %29 from 2 {sv.namehint = "_which_T_26"} : (i16) -> i1
    %42 = comb.extract %29 from 6 {sv.namehint = "_which_T_27"} : (i16) -> i1
    %43 = comb.extract %29 from 8 {sv.namehint = "_which_T_28"} : (i16) -> i1
    %44 = comb.extract %29 from 0 {sv.namehint = "_which_T_29"} : (i16) -> i1
    %45 = comb.extract %29 from 4 {sv.namehint = "_which_T_30"} : (i16) -> i1
    %46 = comb.or bin %io_interrupts_debug, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45 {sv.namehint = "anyInterrupt"} : i1
    %47 = comb.xor %44, %true : i1
    %48 = comb.concat %false, %47, %c0_i2 {sv.namehint = "_which_T_95"} : i1, i1, i2
    %49 = comb.mux bin %43, %c-8_i4, %48 {sv.namehint = "_which_T_96"} : i4
    %50 = comb.mux bin %42, %c6_i4, %49 {sv.namehint = "_which_T_97"} : i4
    %51 = comb.mux bin %41, %c2_i4, %50 {sv.namehint = "_which_T_98"} : i4
    %52 = comb.mux bin %40, %c-6_i4, %51 {sv.namehint = "_which_T_99"} : i4
    %53 = comb.mux bin %39, %c5_i4, %52 {sv.namehint = "_which_T_100"} : i4
    %54 = comb.mux bin %38, %c1_i4, %53 {sv.namehint = "_which_T_101"} : i4
    %55 = comb.mux bin %37, %c-7_i4, %54 {sv.namehint = "_which_T_102"} : i4
    %56 = comb.mux bin %36, %c7_i4, %55 {sv.namehint = "_which_T_103"} : i4
    %57 = comb.mux bin %35, %c3_i4, %56 {sv.namehint = "_which_T_104"} : i4
    %58 = comb.mux bin %34, %c-5_i4, %57 {sv.namehint = "_which_T_105"} : i4
    %59 = comb.mux bin %33, %c-4_i4, %58 {sv.namehint = "_which_T_106"} : i4
    %60 = comb.mux bin %32, %c-3_i4, %59 {sv.namehint = "_which_T_107"} : i4
    %61 = comb.mux bin %31, %c-2_i4, %60 {sv.namehint = "_which_T_108"} : i4
    %62 = comb.mux bin %30, %c-1_i4, %61 {sv.namehint = "_which_T_110"} : i4
    %63 = comb.mux bin %io_interrupts_debug, %c-2_i4, %62 {sv.namehint = "whichInterrupt"} : i4
    %64 = comb.concat %c0_i60, %63 : i60, i4
    %65 = comb.add bin %64, %c-9223372036854775808_i64 {sv.namehint = "_interruptCause_T_3"} : i64
    %66 = comb.xor bin %545, %true {sv.namehint = "_io_interrupt_T"} : i1
    %67 = comb.and bin %46, %66 {sv.namehint = "_io_interrupt_T_1"} : i1
    %68 = comb.or bin %67, %reg_singleStepped {sv.namehint = "_io_interrupt_T_2"} : i1
    %69 = comb.or bin %reg_debug, %io_status_cease_r {sv.namehint = "_io_interrupt_T_3"} : i1
    %70 = comb.xor bin %69, %true {sv.namehint = "_io_interrupt_T_4"} : i1
    %71 = comb.and bin %68, %70 {sv.namehint = "io_interrupt"} : i1
    %72 = comb.extract %reg_pmp_0_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T"} : (i2) -> i1
    %73 = comb.extract %reg_pmp_0_addr from 0 : (i30) -> i29
    %74 = comb.concat %73, %72 : i29, i1
    %75 = comb.add bin %74, %c1_i30 {sv.namehint = "_pmp_mask_T"} : i30
    %76 = comb.xor bin %75, %c-1_i30 {sv.namehint = "_pmp_mask_T_2"} : i30
    %77 = comb.extract %reg_pmp_0_addr from 0 : (i30) -> i29
    %78 = comb.concat %77, %72 : i29, i1
    %79 = comb.and bin %78, %76 {sv.namehint = "_pmp_mask_T_3"} : i30
    %80 = comb.concat %79, %c-1_i2 {sv.namehint = "pmp_mask"} : i30, i2
    %81 = comb.extract %reg_pmp_1_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_3"} : (i2) -> i1
    %82 = comb.extract %reg_pmp_1_addr from 0 : (i30) -> i29
    %83 = comb.concat %82, %81 : i29, i1
    %84 = comb.add bin %83, %c1_i30 {sv.namehint = "_pmp_mask_T_5"} : i30
    %85 = comb.xor bin %84, %c-1_i30 {sv.namehint = "_pmp_mask_T_7"} : i30
    %86 = comb.extract %reg_pmp_1_addr from 0 : (i30) -> i29
    %87 = comb.concat %86, %81 : i29, i1
    %88 = comb.and bin %87, %85 {sv.namehint = "_pmp_mask_T_8"} : i30
    %89 = comb.concat %88, %c-1_i2 {sv.namehint = "pmp_1_mask"} : i30, i2
    %90 = comb.extract %reg_pmp_2_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_6"} : (i2) -> i1
    %91 = comb.extract %reg_pmp_2_addr from 0 : (i30) -> i29
    %92 = comb.concat %91, %90 : i29, i1
    %93 = comb.add bin %92, %c1_i30 {sv.namehint = "_pmp_mask_T_10"} : i30
    %94 = comb.xor bin %93, %c-1_i30 {sv.namehint = "_pmp_mask_T_12"} : i30
    %95 = comb.extract %reg_pmp_2_addr from 0 : (i30) -> i29
    %96 = comb.concat %95, %90 : i29, i1
    %97 = comb.and bin %96, %94 {sv.namehint = "_pmp_mask_T_13"} : i30
    %98 = comb.concat %97, %c-1_i2 {sv.namehint = "pmp_2_mask"} : i30, i2
    %99 = comb.extract %reg_pmp_3_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_9"} : (i2) -> i1
    %100 = comb.extract %reg_pmp_3_addr from 0 : (i30) -> i29
    %101 = comb.concat %100, %99 : i29, i1
    %102 = comb.add bin %101, %c1_i30 {sv.namehint = "_pmp_mask_T_15"} : i30
    %103 = comb.xor bin %102, %c-1_i30 {sv.namehint = "_pmp_mask_T_17"} : i30
    %104 = comb.extract %reg_pmp_3_addr from 0 : (i30) -> i29
    %105 = comb.concat %104, %99 : i29, i1
    %106 = comb.and bin %105, %103 {sv.namehint = "_pmp_mask_T_18"} : i30
    %107 = comb.concat %106, %c-1_i2 {sv.namehint = "pmp_3_mask"} : i30, i2
    %108 = comb.extract %reg_pmp_4_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_12"} : (i2) -> i1
    %109 = comb.extract %reg_pmp_4_addr from 0 : (i30) -> i29
    %110 = comb.concat %109, %108 : i29, i1
    %111 = comb.add bin %110, %c1_i30 {sv.namehint = "_pmp_mask_T_20"} : i30
    %112 = comb.xor bin %111, %c-1_i30 {sv.namehint = "_pmp_mask_T_22"} : i30
    %113 = comb.extract %reg_pmp_4_addr from 0 : (i30) -> i29
    %114 = comb.concat %113, %108 : i29, i1
    %115 = comb.and bin %114, %112 {sv.namehint = "_pmp_mask_T_23"} : i30
    %116 = comb.concat %115, %c-1_i2 {sv.namehint = "pmp_4_mask"} : i30, i2
    %117 = comb.extract %reg_pmp_5_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_15"} : (i2) -> i1
    %118 = comb.extract %reg_pmp_5_addr from 0 : (i30) -> i29
    %119 = comb.concat %118, %117 : i29, i1
    %120 = comb.add bin %119, %c1_i30 {sv.namehint = "_pmp_mask_T_25"} : i30
    %121 = comb.xor bin %120, %c-1_i30 {sv.namehint = "_pmp_mask_T_27"} : i30
    %122 = comb.extract %reg_pmp_5_addr from 0 : (i30) -> i29
    %123 = comb.concat %122, %117 : i29, i1
    %124 = comb.and bin %123, %121 {sv.namehint = "_pmp_mask_T_28"} : i30
    %125 = comb.concat %124, %c-1_i2 {sv.namehint = "pmp_5_mask"} : i30, i2
    %126 = comb.extract %reg_pmp_6_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_18"} : (i2) -> i1
    %127 = comb.extract %reg_pmp_6_addr from 0 : (i30) -> i29
    %128 = comb.concat %127, %126 : i29, i1
    %129 = comb.add bin %128, %c1_i30 {sv.namehint = "_pmp_mask_T_30"} : i30
    %130 = comb.xor bin %129, %c-1_i30 {sv.namehint = "_pmp_mask_T_32"} : i30
    %131 = comb.extract %reg_pmp_6_addr from 0 : (i30) -> i29
    %132 = comb.concat %131, %126 : i29, i1
    %133 = comb.and bin %132, %130 {sv.namehint = "_pmp_mask_T_33"} : i30
    %134 = comb.concat %133, %c-1_i2 {sv.namehint = "pmp_6_mask"} : i30, i2
    %135 = comb.extract %reg_pmp_7_cfg_a from 0 {sv.namehint = "_pmp_mask_base_T_21"} : (i2) -> i1
    %136 = comb.extract %reg_pmp_7_addr from 0 : (i30) -> i29
    %137 = comb.concat %136, %135 : i29, i1
    %138 = comb.add bin %137, %c1_i30 {sv.namehint = "_pmp_mask_T_35"} : i30
    %139 = comb.xor bin %138, %c-1_i30 {sv.namehint = "_pmp_mask_T_37"} : i30
    %140 = comb.extract %reg_pmp_7_addr from 0 : (i30) -> i29
    %141 = comb.concat %140, %135 : i29, i1
    %142 = comb.and bin %141, %139 {sv.namehint = "_pmp_mask_T_38"} : i30
    %143 = comb.concat %142, %c-1_i2 {sv.namehint = "pmp_7_mask"} : i30, i2
    %reg_misa = seq.firreg %729 clock %clock reset sync %reset, %c-9223372036846382843_i64 {firrtl.random_init_start = 2906 : ui64} : i64
    %144 = comb.concat %c0_i24, %reg_mstatus_mpv, %reg_mstatus_gva, %c0_i25, %reg_mstatus_mpp, %c0_i3, %reg_mstatus_mpie, %c0_i3, %reg_mstatus_mie, %c0_i3 {sv.namehint = "read_mstatus"} : i24, i1, i1, i25, i2, i3, i1, i3, i1, i3
    %145 = comb.extract %reg_mtvec from 0 {sv.namehint = "_read_mtvec_T"} : (i32) -> i1
    %146 = comb.mux bin %145, %c-2_i8, %c2_i8 {sv.namehint = "_read_mtvec_T_1"} : i8
    %147 = comb.xor %146, %c-1_i8 : i8
    %148 = comb.concat %c-1_i24, %147 {sv.namehint = "_read_mtvec_T_4"} : i24, i8
    %149 = comb.and bin %reg_mtvec, %148 {sv.namehint = "_read_mtvec_T_5"} : i32
    %150 = comb.concat %c0_i32, %149 {sv.namehint = "read_mtvec"} : i32, i32
    %151 = comb.concat %c2_i4, %reg_bp_0_control_dmode, %c4398046511104_i46, %reg_bp_0_control_action, %c0_i3, %reg_bp_0_control_tmatch, %c-8_i4, %reg_bp_0_control_x, %reg_bp_0_control_w, %reg_bp_0_control_r : i4, i1, i46, i1, i3, i2, i4, i1, i1, i1
    %152 = comb.extract %reg_bp_0_address from 32 : (i33) -> i1
    %153 = comb.replicate %152 : (i1) -> i31
    %154 = comb.concat %153, %reg_bp_0_address : i31, i33
    %155 = comb.xor bin %reg_mepc, %c-1_i34 {sv.namehint = "_io_evec_T_20"} : i34
    %156 = comb.extract %reg_misa from 2 {sv.namehint = "_io_evec_T_21"} : (i64) -> i1
    %157 = comb.xor %156, %true : i1
    %158 = comb.concat %157, %true : i1, i1
    %159 = comb.extract %155 from 2 : (i34) -> i32
    %160 = comb.extract %155 from 0 : (i34) -> i2
    %161 = comb.or bin %160, %158 : i2
    %162 = comb.concat %159, %161 : i32, i2
    %163 = comb.xor bin %162, %c-1_i34 : i34
    %164 = comb.extract %163 from 33 : (i34) -> i1
    %165 = comb.replicate %164 : (i1) -> i30
    %166 = comb.concat %165, %163 : i30, i34
    %167 = comb.extract %reg_mtval from 33 : (i34) -> i1
    %168 = comb.replicate %167 : (i1) -> i30
    %169 = comb.concat %168, %reg_mtval : i30, i34
    %170 = comb.concat %c16384_i16, %reg_dcsr_ebreakm, %c0_i6, %reg_dcsr_cause, %reg_dcsr_v, %c0_i2, %reg_dcsr_step, %c-1_i2 : i16, i1, i6, i3, i1, i2, i1, i2
    %171 = comb.xor bin %reg_dpc, %c-1_i34 {sv.namehint = "_io_evec_T_10"} : i34
    %172 = comb.extract %171 from 2 : (i34) -> i32
    %173 = comb.extract %171 from 0 : (i34) -> i2
    %174 = comb.or bin %173, %158 : i2
    %175 = comb.concat %172, %174 : i32, i2
    %176 = comb.xor bin %175, %c-1_i34 : i34
    %177 = comb.extract %176 from 33 : (i34) -> i1
    %178 = comb.replicate %177 : (i1) -> i30
    %179 = comb.concat %178, %176 : i30, i34
    %180 = comb.concat %reg_pmp_7_cfg_l, %c0_i2, %reg_pmp_7_cfg_a, %reg_pmp_7_cfg_x, %reg_pmp_7_cfg_w, %reg_pmp_7_cfg_r, %reg_pmp_6_cfg_l, %c0_i2, %reg_pmp_6_cfg_a, %reg_pmp_6_cfg_x, %reg_pmp_6_cfg_w, %reg_pmp_6_cfg_r, %reg_pmp_5_cfg_l, %c0_i2, %reg_pmp_5_cfg_a, %reg_pmp_5_cfg_x, %reg_pmp_5_cfg_w, %reg_pmp_5_cfg_r, %reg_pmp_4_cfg_l, %c0_i2, %reg_pmp_4_cfg_a, %reg_pmp_4_cfg_x, %reg_pmp_4_cfg_w, %reg_pmp_4_cfg_r, %reg_pmp_3_cfg_l, %c0_i2, %reg_pmp_3_cfg_a, %reg_pmp_3_cfg_x, %reg_pmp_3_cfg_w, %reg_pmp_3_cfg_r, %reg_pmp_2_cfg_l, %c0_i2, %reg_pmp_2_cfg_a, %reg_pmp_2_cfg_x, %reg_pmp_2_cfg_w, %reg_pmp_2_cfg_r, %reg_pmp_1_cfg_l, %c0_i2, %reg_pmp_1_cfg_a, %reg_pmp_1_cfg_x, %reg_pmp_1_cfg_w, %reg_pmp_1_cfg_r, %reg_pmp_0_cfg_l, %c0_i2, %reg_pmp_0_cfg_a, %reg_pmp_0_cfg_x, %reg_pmp_0_cfg_w, %reg_pmp_0_cfg_r : i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1
    %reg_custom_0 = seq.firreg %1010 clock %clock reset sync %reset, %c520_i64 {firrtl.random_init_start = 2970 : ui64, sv.namehint = "reg_custom_0"} : i64
    %181 = comb.xor bin %io_rw_addr, %c-1_i12 {sv.namehint = "decoded_decoded_invInputs"} : i12
    %182 = comb.extract %181 from 0 {sv.namehint = "decoded_decoded_andMatrixInput_0"} : (i12) -> i1
    %183 = comb.extract %181 from 1 {sv.namehint = "decoded_decoded_andMatrixInput_1"} : (i12) -> i1
    %184 = comb.extract %181 from 2 {sv.namehint = "decoded_decoded_andMatrixInput_2"} : (i12) -> i1
    %185 = comb.extract %181 from 3 {sv.namehint = "decoded_decoded_andMatrixInput_3"} : (i12) -> i1
    %186 = comb.extract %181 from 4 {sv.namehint = "decoded_decoded_andMatrixInput_4"} : (i12) -> i1
    %187 = comb.extract %181 from 5 {sv.namehint = "decoded_decoded_andMatrixInput_5"} : (i12) -> i1
    %188 = comb.extract %181 from 6 {sv.namehint = "decoded_decoded_andMatrixInput_6"} : (i12) -> i1
    %189 = comb.extract %181 from 7 {sv.namehint = "decoded_decoded_andMatrixInput_7"} : (i12) -> i1
    %190 = comb.extract %io_rw_addr from 8 {sv.namehint = "decoded_decoded_andMatrixInput_8"} : (i12) -> i1
    %191 = comb.extract %io_rw_addr from 9 {sv.namehint = "decoded_decoded_andMatrixInput_9"} : (i12) -> i1
    %192 = comb.extract %181 from 10 {sv.namehint = "decoded_decoded_andMatrixInput_10"} : (i12) -> i1
    %193 = comb.extract %181 from 11 {sv.namehint = "decoded_decoded_andMatrixInput_11"} : (i12) -> i1
    %194 = comb.concat %182, %183, %184, %185, %186, %187, %188, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %195 = comb.icmp bin eq %194, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_126"} : i12
    %196 = comb.extract %io_rw_addr from 0 {sv.namehint = "decoded_decoded_andMatrixInput_0_1"} : (i12) -> i1
    %197 = comb.concat %196, %183, %184, %185, %186, %187, %188, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_2"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %198 = comb.icmp bin eq %197, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_127"} : i12
    %199 = comb.extract %io_rw_addr from 2 {sv.namehint = "decoded_decoded_andMatrixInput_2_2"} : (i12) -> i1
    %200 = comb.concat %182, %183, %199, %185, %186, %187, %188, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_4"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %201 = comb.icmp bin eq %200, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_123"} : i12
    %202 = comb.concat %196, %183, %199, %185, %186, %187, %188, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_6"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %203 = comb.icmp bin eq %202, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_125"} : i12
    %204 = comb.extract %io_rw_addr from 5 {sv.namehint = "decoded_decoded_andMatrixInput_4_4"} : (i12) -> i1
    %205 = comb.concat %183, %184, %185, %186, %204, %188, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_8"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %206 = comb.icmp bin eq %205, %c-1_i11 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_114"} : i11
    %207 = comb.extract %io_rw_addr from 1 {sv.namehint = "decoded_decoded_andMatrixInput_0_5"} : (i12) -> i1
    %208 = comb.extract %io_rw_addr from 4 {sv.namehint = "decoded_decoded_andMatrixInput_4_18"} : (i12) -> i1
    %209 = comb.extract %io_rw_addr from 6 {sv.namehint = "decoded_decoded_andMatrixInput_6_34"} : (i12) -> i1
    %210 = comb.concat %182, %183, %184, %185, %186, %187, %209, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_68"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %211 = comb.icmp bin eq %210, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_122"} : i12
    %212 = comb.concat %196, %183, %184, %185, %186, %187, %209, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_70"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %213 = comb.icmp bin eq %212, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_121"} : i12
    %214 = comb.concat %182, %207, %184, %185, %186, %187, %209, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_72"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %215 = comb.icmp bin eq %214, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_119"} : i12
    %216 = comb.concat %196, %207, %184, %185, %186, %187, %209, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_74"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %217 = comb.icmp bin eq %216, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_120"} : i12
    %218 = comb.concat %199, %185, %186, %187, %209, %189, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_76"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %219 = comb.icmp bin eq %218, %c-1_i10 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_124"} : i10
    %220 = comb.extract %io_rw_addr from 7 {sv.namehint = "decoded_decoded_andMatrixInput_6_39"} : (i12) -> i1
    %221 = comb.concat %183, %184, %185, %186, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_78"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %222 = comb.icmp bin eq %221, %c-1_i11 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_22"} : i11
    %223 = comb.concat %182, %183, %184, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_82"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %224 = comb.icmp bin eq %223, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_20"} : i12
    %225 = comb.concat %196, %183, %184, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_84"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %226 = comb.icmp bin eq %225, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_19"} : i12
    %227 = comb.concat %182, %207, %184, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_86"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %228 = comb.icmp bin eq %227, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_18"} : i12
    %229 = comb.concat %196, %207, %184, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_88"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %230 = comb.icmp bin eq %229, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_17"} : i12
    %231 = comb.concat %182, %183, %199, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_90"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %232 = comb.icmp bin eq %231, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_16"} : i12
    %233 = comb.concat %196, %183, %199, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_92"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %234 = comb.icmp bin eq %233, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_15"} : i12
    %235 = comb.concat %182, %207, %199, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_94"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %236 = comb.icmp bin eq %235, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_14"} : i12
    %237 = comb.concat %196, %207, %199, %185, %208, %204, %188, %220, %190, %191, %192, %193 {sv.namehint = "_decoded_decoded_T_96"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %238 = comb.icmp bin eq %237, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_13"} : i12
    %239 = comb.extract %io_rw_addr from 10 {sv.namehint = "decoded_decoded_andMatrixInput_9_63"} : (i12) -> i1
    %240 = comb.concat %196, %183, %184, %185, %186, %204, %188, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_116"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %241 = comb.icmp bin eq %240, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_130"} : i12
    %242 = comb.concat %182, %207, %184, %185, %186, %204, %188, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_118"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %243 = comb.icmp bin eq %242, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_129"} : i12
    %244 = comb.concat %182, %183, %184, %185, %208, %204, %188, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_122"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %245 = comb.icmp bin eq %244, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_117"} : i12
    %246 = comb.concat %196, %183, %184, %185, %208, %204, %188, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_124"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %247 = comb.icmp bin eq %246, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_116"} : i12
    %248 = comb.concat %207, %184, %185, %208, %204, %188, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_126"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %249 = comb.icmp bin eq %248, %c-1_i11 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_115"} : i11
    %250 = comb.concat %209, %220, %190, %191, %239, %193 {sv.namehint = "_decoded_decoded_T_128"} : i1, i1, i1, i1, i1, i1
    %251 = comb.icmp bin eq %250, %c-1_i6 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_4"} : i6
    %252 = comb.extract %io_rw_addr from 11 {sv.namehint = "decoded_decoded_andMatrixInput_10_63"} : (i12) -> i1
    %253 = comb.concat %183, %184, %185, %186, %187, %188, %189, %190, %191, %192, %252 {sv.namehint = "_decoded_decoded_T_130"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %254 = comb.icmp bin eq %253, %c-1_i11 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_113"} : i11
    %255 = comb.concat %182, %207, %184, %185, %186, %187, %188, %189, %190, %191, %192, %252 {sv.namehint = "_decoded_decoded_T_132"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %256 = comb.icmp bin eq %255, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_112"} : i12
    %257 = comb.extract %181 from 8 {sv.namehint = "decoded_decoded_andMatrixInput_7_95"} : (i12) -> i1
    %258 = comb.extract %181 from 9 {sv.namehint = "decoded_decoded_andMatrixInput_8_95"} : (i12) -> i1
    %259 = comb.concat %183, %184, %185, %186, %187, %188, %189, %257, %258, %239, %252 {sv.namehint = "_decoded_decoded_T_192"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %260 = comb.icmp bin eq %259, %c-1_i11 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_24"} : i11
    %261 = comb.concat %182, %207, %184, %185, %186, %187, %188, %189, %257, %258, %239, %252 {sv.namehint = "_decoded_decoded_T_194"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %262 = comb.icmp bin eq %261, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_23"} : i12
    %263 = comb.concat %182, %207, %184, %185, %208, %187, %188, %189, %190, %191, %239, %252 {sv.namehint = "_decoded_decoded_T_256"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %264 = comb.icmp bin eq %263, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_3"} : i12
    %265 = comb.concat %196, %207, %184, %185, %208, %187, %188, %189, %190, %191, %239, %252 {sv.namehint = "_decoded_decoded_T_258"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %266 = comb.icmp bin eq %265, %c-1_i12 {sv.namehint = "_decoded_decoded_orMatrixOutputs_T_1"} : i12
    %267 = comb.extract %io_rw_cmd from 1 {sv.namehint = "_newBPC_T_25"} : (i3) -> i1
    %268 = comb.mux bin %267, %698, %c0_i64 {sv.namehint = "_wdata_T_1"} : i64
    %269 = comb.or bin %268, %io_rw_wdata {sv.namehint = "_wdata_T_2"} : i64
    %270 = comb.extract %io_rw_cmd from 0 {sv.namehint = "_newBPC_T_28"} : (i3) -> i2
    %271 = comb.icmp bin eq %270, %c-1_i2 {sv.namehint = "_wdata_T_4"} : i2
    %272 = comb.mux bin %271, %io_rw_wdata, %c0_i64 {sv.namehint = "_wdata_T_5"} : i64
    %273 = comb.xor bin %272, %c-1_i64 {sv.namehint = "_wdata_T_6"} : i64
    %274 = comb.and bin %269, %273 {sv.namehint = "wdata"} : i64
    %275 = comb.icmp bin eq %io_rw_cmd, %c-4_i3 {sv.namehint = "system_insn"} : i3
    %276 = comb.xor %io_rw_addr, %c-1_i12 : i12
    %277 = comb.extract %276 from 0 {sv.namehint = "decoded_andMatrixInput_0"} : (i12) -> i1
    %278 = comb.extract %276 from 1 {sv.namehint = "decoded_andMatrixInput_1"} : (i12) -> i1
    %279 = comb.extract %276 from 2 {sv.namehint = "decoded_andMatrixInput_2"} : (i12) -> i1
    %280 = comb.extract %276 from 3 {sv.namehint = "decoded_andMatrixInput_3"} : (i12) -> i1
    %281 = comb.extract %276 from 4 {sv.namehint = "decoded_andMatrixInput_4"} : (i12) -> i1
    %282 = comb.extract %276 from 5 {sv.namehint = "decoded_andMatrixInput_5"} : (i12) -> i1
    %283 = comb.extract %276 from 6 {sv.namehint = "decoded_andMatrixInput_6"} : (i12) -> i1
    %284 = comb.extract %276 from 7 {sv.namehint = "decoded_andMatrixInput_7"} : (i12) -> i1
    %285 = comb.extract %276 from 8 {sv.namehint = "decoded_andMatrixInput_8"} : (i12) -> i1
    %286 = comb.extract %276 from 9 {sv.namehint = "decoded_andMatrixInput_9"} : (i12) -> i1
    %287 = comb.extract %276 from 10 {sv.namehint = "decoded_andMatrixInput_10"} : (i12) -> i1
    %288 = comb.extract %276 from 11 {sv.namehint = "decoded_andMatrixInput_11"} : (i12) -> i1
    %289 = comb.concat %277, %278, %279, %280, %281, %282, %283, %284, %285, %286, %287, %288 {sv.namehint = "_decoded_T"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %290 = comb.icmp bin eq %289, %c-1_i12 {sv.namehint = "_decoded_orMatrixOutputs_T_5"} : i12
    %291 = comb.extract %io_rw_addr from 0 {sv.namehint = "decoded_andMatrixInput_0_1"} : (i12) -> i1
    %292 = comb.concat %291, %278, %279, %280, %281, %282, %283, %284, %285, %286, %287, %288 {sv.namehint = "_decoded_T_2"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %293 = comb.icmp bin eq %292, %c-1_i12 {sv.namehint = "_decoded_orMatrixOutputs_T_4"} : i12
    %294 = comb.extract %io_rw_addr from 8 {sv.namehint = "decoded_andMatrixInput_0_2"} : (i12) -> i1
    %295 = comb.concat %294, %286, %287, %288 {sv.namehint = "_decoded_T_4"} : i1, i1, i1, i1
    %296 = comb.icmp bin eq %295, %c-1_i4 {sv.namehint = "_decoded_orMatrixOutputs_T"} : i4
    %297 = comb.extract %io_rw_addr from 9 {sv.namehint = "decoded_andMatrixInput_7_2"} : (i12) -> i1
    %298 = comb.concat %279, %280, %281, %282, %283, %284, %294, %297, %287, %288 {sv.namehint = "_decoded_T_6"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %299 = comb.icmp bin eq %298, %c-1_i10 {sv.namehint = "_decoded_T_7"} : i10
    %300 = comb.extract %io_rw_addr from 2 {sv.namehint = "decoded_andMatrixInput_0_4"} : (i12) -> i1
    %301 = comb.concat %300, %280, %281, %282, %283, %284, %294, %297, %287, %288 {sv.namehint = "_decoded_T_8"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %302 = comb.icmp bin eq %301, %c-1_i10 {sv.namehint = "_decoded_orMatrixOutputs_T_1"} : i10
    %303 = comb.extract %io_rw_addr from 10 {sv.namehint = "decoded_andMatrixInput_0_5"} : (i12) -> i1
    %304 = comb.concat %303, %288 {sv.namehint = "_decoded_T_10"} : i1, i1
    %305 = comb.icmp bin eq %304, %c-1_i2 {sv.namehint = "_decoded_T_11"} : i2
    %306 = comb.concat %299, %305 {sv.namehint = "_decoded_orMatrixOutputs_T_2"} : i1, i1
    %307 = comb.icmp bin ne %306, %c0_i2 {sv.namehint = "_decoded_orMatrixOutputs_T_3"} : i2
    %308 = comb.and bin %275, %290 {sv.namehint = "insn_call"} : i1
    %309 = comb.and bin %275, %293 {sv.namehint = "insn_break"} : i1
    %310 = comb.and bin %275, %307 {sv.namehint = "insn_ret"} : i1
    %311 = comb.and bin %275, %302 {sv.namehint = "insn_cease"} : i1
    %312 = comb.extract %io_decode_0_inst from 20 {sv.namehint = "addr_1"} : (i32) -> i12
    %313 = comb.extract %io_decode_0_inst from 22 : (i32) -> i10
    %314 = comb.xor bin %313, %c-1_i10 {sv.namehint = "decoded_invInputs_1"} : i10
    %315 = comb.extract %314 from 0 {sv.namehint = "decoded_andMatrixInput_2_5"} : (i10) -> i1
    %316 = comb.extract %314 from 1 {sv.namehint = "decoded_andMatrixInput_3_5"} : (i10) -> i1
    %317 = comb.extract %314 from 2 {sv.namehint = "decoded_andMatrixInput_4_4"} : (i10) -> i1
    %318 = comb.extract %314 from 3 {sv.namehint = "decoded_andMatrixInput_5_4"} : (i10) -> i1
    %319 = comb.extract %314 from 4 {sv.namehint = "decoded_andMatrixInput_6_4"} : (i10) -> i1
    %320 = comb.extract %314 from 5 {sv.namehint = "decoded_andMatrixInput_7_4"} : (i10) -> i1
    %321 = comb.extract %314 from 8 {sv.namehint = "decoded_andMatrixInput_2_7"} : (i10) -> i1
    %322 = comb.extract %314 from 9 {sv.namehint = "decoded_andMatrixInput_3_7"} : (i10) -> i1
    %323 = comb.extract %io_decode_0_inst from 28 {sv.namehint = "decoded_andMatrixInput_0_8"} : (i32) -> i1
    %324 = comb.extract %io_decode_0_inst from 29 {sv.namehint = "decoded_andMatrixInput_7_6"} : (i32) -> i1
    %325 = comb.concat %315, %316, %317, %318, %319, %320, %323, %324, %321, %322 {sv.namehint = "_decoded_T_18"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %326 = comb.icmp bin eq %325, %c-1_i10 {sv.namehint = "_decoded_T_19"} : i10
    %327 = comb.extract %io_decode_0_inst from 30 {sv.namehint = "decoded_andMatrixInput_0_11"} : (i32) -> i1
    %328 = comb.concat %327, %322 {sv.namehint = "_decoded_T_22"} : i1, i1
    %329 = comb.icmp bin eq %328, %c-1_i2 {sv.namehint = "_decoded_T_23"} : i2
    %330 = comb.concat %326, %329 {sv.namehint = "_decoded_orMatrixOutputs_T_8"} : i1, i1
    %331 = comb.icmp bin ne %330, %c0_i2 {sv.namehint = "_decoded_orMatrixOutputs_T_9"} : i2
    %332 = comb.icmp bin ugt %312, %c-1025_i12 {sv.namehint = "_is_counter_T"} : i12
    %333 = comb.icmp bin ult %312, %c-992_i12 {sv.namehint = "_is_counter_T_1"} : i12
    %334 = comb.and bin %332, %333 {sv.namehint = "_is_counter_T_2"} : i1
    %335 = comb.icmp bin ugt %312, %c-897_i12 {sv.namehint = "_is_counter_T_3"} : i12
    %336 = comb.icmp bin ult %312, %c-864_i12 {sv.namehint = "_is_counter_T_4"} : i12
    %337 = comb.and bin %335, %336 {sv.namehint = "_is_counter_T_5"} : i1
    %338 = comb.or bin %334, %337 {sv.namehint = "is_counter"} : i1
    %339 = comb.extract %io_decode_0_inst from 20 {sv.namehint = "counter_addr"} : (i32) -> i5
    %340 = comb.concat %c0_i27, %339 : i27, i5
    %341 = comb.shru bin %c0_i32, %340 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_3"} : i32
    %342 = comb.shru bin %c0_i32, %340 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_6"} : i32
    %343 = comb.extract %io_decode_0_inst from 28 {sv.namehint = "_io_decode_0_virtual_system_illegal_T_9"} : (i32) -> i2
    %344 = comb.icmp bin eq %312, %c1952_i12 {sv.namehint = "_csr_exists_T"} : i12
    %345 = comb.icmp bin eq %312, %c1953_i12 {sv.namehint = "_csr_exists_T_1"} : i12
    %346 = comb.icmp bin eq %312, %c1954_i12 {sv.namehint = "_csr_exists_T_2"} : i12
    %347 = comb.icmp bin eq %312, %c1955_i12 {sv.namehint = "_csr_exists_T_3"} : i12
    %348 = comb.icmp bin eq %312, %c769_i12 {sv.namehint = "_csr_exists_T_4"} : i12
    %349 = comb.icmp bin eq %312, %c768_i12 {sv.namehint = "_csr_exists_T_5"} : i12
    %350 = comb.icmp bin eq %312, %c773_i12 {sv.namehint = "_csr_exists_T_6"} : i12
    %351 = comb.icmp bin eq %312, %c836_i12 {sv.namehint = "_csr_exists_T_7"} : i12
    %352 = comb.icmp bin eq %312, %c772_i12 {sv.namehint = "_csr_exists_T_8"} : i12
    %353 = comb.icmp bin eq %312, %c832_i12 {sv.namehint = "_csr_exists_T_9"} : i12
    %354 = comb.icmp bin eq %312, %c833_i12 {sv.namehint = "_csr_exists_T_10"} : i12
    %355 = comb.icmp bin eq %312, %c835_i12 {sv.namehint = "_csr_exists_T_11"} : i12
    %356 = comb.icmp bin eq %312, %c834_i12 {sv.namehint = "_csr_exists_T_12"} : i12
    %357 = comb.icmp bin eq %312, %c-236_i12 {sv.namehint = "_csr_exists_T_13"} : i12
    %358 = comb.icmp bin eq %312, %c1968_i12 {sv.namehint = "_csr_exists_T_14"} : i12
    %359 = comb.icmp bin eq %312, %c1969_i12 {sv.namehint = "_csr_exists_T_15"} : i12
    %360 = comb.icmp bin eq %312, %c1970_i12 {sv.namehint = "_csr_exists_T_16"} : i12
    %361 = comb.icmp bin eq %312, %c800_i12 {sv.namehint = "_csr_exists_T_17"} : i12
    %362 = comb.icmp bin eq %312, %c-1280_i12 {sv.namehint = "_csr_exists_T_18"} : i12
    %363 = comb.icmp bin eq %312, %c-1278_i12 {sv.namehint = "_csr_exists_T_19"} : i12
    %364 = comb.icmp bin eq %312, %c803_i12 {sv.namehint = "_csr_exists_T_20"} : i12
    %365 = comb.icmp bin eq %312, %c-1277_i12 {sv.namehint = "_csr_exists_T_21"} : i12
    %366 = comb.icmp bin eq %312, %c-1021_i12 {sv.namehint = "_csr_exists_T_22"} : i12
    %367 = comb.icmp bin eq %312, %c804_i12 {sv.namehint = "_csr_exists_T_23"} : i12
    %368 = comb.icmp bin eq %312, %c-1276_i12 {sv.namehint = "_csr_exists_T_24"} : i12
    %369 = comb.icmp bin eq %312, %c-1020_i12 {sv.namehint = "_csr_exists_T_25"} : i12
    %370 = comb.icmp bin eq %312, %c805_i12 {sv.namehint = "_csr_exists_T_26"} : i12
    %371 = comb.icmp bin eq %312, %c-1275_i12 {sv.namehint = "_csr_exists_T_27"} : i12
    %372 = comb.icmp bin eq %312, %c-1019_i12 {sv.namehint = "_csr_exists_T_28"} : i12
    %373 = comb.icmp bin eq %312, %c806_i12 {sv.namehint = "_csr_exists_T_29"} : i12
    %374 = comb.icmp bin eq %312, %c-1274_i12 {sv.namehint = "_csr_exists_T_30"} : i12
    %375 = comb.icmp bin eq %312, %c-1018_i12 {sv.namehint = "_csr_exists_T_31"} : i12
    %376 = comb.icmp bin eq %312, %c807_i12 {sv.namehint = "_csr_exists_T_32"} : i12
    %377 = comb.icmp bin eq %312, %c-1273_i12 {sv.namehint = "_csr_exists_T_33"} : i12
    %378 = comb.icmp bin eq %312, %c-1017_i12 {sv.namehint = "_csr_exists_T_34"} : i12
    %379 = comb.icmp bin eq %312, %c808_i12 {sv.namehint = "_csr_exists_T_35"} : i12
    %380 = comb.icmp bin eq %312, %c-1272_i12 {sv.namehint = "_csr_exists_T_36"} : i12
    %381 = comb.icmp bin eq %312, %c-1016_i12 {sv.namehint = "_csr_exists_T_37"} : i12
    %382 = comb.icmp bin eq %312, %c809_i12 {sv.namehint = "_csr_exists_T_38"} : i12
    %383 = comb.icmp bin eq %312, %c-1271_i12 {sv.namehint = "_csr_exists_T_39"} : i12
    %384 = comb.icmp bin eq %312, %c-1015_i12 {sv.namehint = "_csr_exists_T_40"} : i12
    %385 = comb.icmp bin eq %312, %c810_i12 {sv.namehint = "_csr_exists_T_41"} : i12
    %386 = comb.icmp bin eq %312, %c-1270_i12 {sv.namehint = "_csr_exists_T_42"} : i12
    %387 = comb.icmp bin eq %312, %c-1014_i12 {sv.namehint = "_csr_exists_T_43"} : i12
    %388 = comb.icmp bin eq %312, %c811_i12 {sv.namehint = "_csr_exists_T_44"} : i12
    %389 = comb.icmp bin eq %312, %c-1269_i12 {sv.namehint = "_csr_exists_T_45"} : i12
    %390 = comb.icmp bin eq %312, %c-1013_i12 {sv.namehint = "_csr_exists_T_46"} : i12
    %391 = comb.icmp bin eq %312, %c812_i12 {sv.namehint = "_csr_exists_T_47"} : i12
    %392 = comb.icmp bin eq %312, %c-1268_i12 {sv.namehint = "_csr_exists_T_48"} : i12
    %393 = comb.icmp bin eq %312, %c-1012_i12 {sv.namehint = "_csr_exists_T_49"} : i12
    %394 = comb.icmp bin eq %312, %c813_i12 {sv.namehint = "_csr_exists_T_50"} : i12
    %395 = comb.icmp bin eq %312, %c-1267_i12 {sv.namehint = "_csr_exists_T_51"} : i12
    %396 = comb.icmp bin eq %312, %c-1011_i12 {sv.namehint = "_csr_exists_T_52"} : i12
    %397 = comb.icmp bin eq %312, %c814_i12 {sv.namehint = "_csr_exists_T_53"} : i12
    %398 = comb.icmp bin eq %312, %c-1266_i12 {sv.namehint = "_csr_exists_T_54"} : i12
    %399 = comb.icmp bin eq %312, %c-1010_i12 {sv.namehint = "_csr_exists_T_55"} : i12
    %400 = comb.icmp bin eq %312, %c815_i12 {sv.namehint = "_csr_exists_T_56"} : i12
    %401 = comb.icmp bin eq %312, %c-1265_i12 {sv.namehint = "_csr_exists_T_57"} : i12
    %402 = comb.icmp bin eq %312, %c-1009_i12 {sv.namehint = "_csr_exists_T_58"} : i12
    %403 = comb.icmp bin eq %312, %c816_i12 {sv.namehint = "_csr_exists_T_59"} : i12
    %404 = comb.icmp bin eq %312, %c-1264_i12 {sv.namehint = "_csr_exists_T_60"} : i12
    %405 = comb.icmp bin eq %312, %c-1008_i12 {sv.namehint = "_csr_exists_T_61"} : i12
    %406 = comb.icmp bin eq %312, %c817_i12 {sv.namehint = "_csr_exists_T_62"} : i12
    %407 = comb.icmp bin eq %312, %c-1263_i12 {sv.namehint = "_csr_exists_T_63"} : i12
    %408 = comb.icmp bin eq %312, %c-1007_i12 {sv.namehint = "_csr_exists_T_64"} : i12
    %409 = comb.icmp bin eq %312, %c818_i12 {sv.namehint = "_csr_exists_T_65"} : i12
    %410 = comb.icmp bin eq %312, %c-1262_i12 {sv.namehint = "_csr_exists_T_66"} : i12
    %411 = comb.icmp bin eq %312, %c-1006_i12 {sv.namehint = "_csr_exists_T_67"} : i12
    %412 = comb.icmp bin eq %312, %c819_i12 {sv.namehint = "_csr_exists_T_68"} : i12
    %413 = comb.icmp bin eq %312, %c-1261_i12 {sv.namehint = "_csr_exists_T_69"} : i12
    %414 = comb.icmp bin eq %312, %c-1005_i12 {sv.namehint = "_csr_exists_T_70"} : i12
    %415 = comb.icmp bin eq %312, %c820_i12 {sv.namehint = "_csr_exists_T_71"} : i12
    %416 = comb.icmp bin eq %312, %c-1260_i12 {sv.namehint = "_csr_exists_T_72"} : i12
    %417 = comb.icmp bin eq %312, %c-1004_i12 {sv.namehint = "_csr_exists_T_73"} : i12
    %418 = comb.icmp bin eq %312, %c821_i12 {sv.namehint = "_csr_exists_T_74"} : i12
    %419 = comb.icmp bin eq %312, %c-1259_i12 {sv.namehint = "_csr_exists_T_75"} : i12
    %420 = comb.icmp bin eq %312, %c-1003_i12 {sv.namehint = "_csr_exists_T_76"} : i12
    %421 = comb.icmp bin eq %312, %c822_i12 {sv.namehint = "_csr_exists_T_77"} : i12
    %422 = comb.icmp bin eq %312, %c-1258_i12 {sv.namehint = "_csr_exists_T_78"} : i12
    %423 = comb.icmp bin eq %312, %c-1002_i12 {sv.namehint = "_csr_exists_T_79"} : i12
    %424 = comb.icmp bin eq %312, %c823_i12 {sv.namehint = "_csr_exists_T_80"} : i12
    %425 = comb.icmp bin eq %312, %c-1257_i12 {sv.namehint = "_csr_exists_T_81"} : i12
    %426 = comb.icmp bin eq %312, %c-1001_i12 {sv.namehint = "_csr_exists_T_82"} : i12
    %427 = comb.icmp bin eq %312, %c824_i12 {sv.namehint = "_csr_exists_T_83"} : i12
    %428 = comb.icmp bin eq %312, %c-1256_i12 {sv.namehint = "_csr_exists_T_84"} : i12
    %429 = comb.icmp bin eq %312, %c-1000_i12 {sv.namehint = "_csr_exists_T_85"} : i12
    %430 = comb.icmp bin eq %312, %c825_i12 {sv.namehint = "_csr_exists_T_86"} : i12
    %431 = comb.icmp bin eq %312, %c-1255_i12 {sv.namehint = "_csr_exists_T_87"} : i12
    %432 = comb.icmp bin eq %312, %c-999_i12 {sv.namehint = "_csr_exists_T_88"} : i12
    %433 = comb.icmp bin eq %312, %c826_i12 {sv.namehint = "_csr_exists_T_89"} : i12
    %434 = comb.icmp bin eq %312, %c-1254_i12 {sv.namehint = "_csr_exists_T_90"} : i12
    %435 = comb.icmp bin eq %312, %c-998_i12 {sv.namehint = "_csr_exists_T_91"} : i12
    %436 = comb.icmp bin eq %312, %c827_i12 {sv.namehint = "_csr_exists_T_92"} : i12
    %437 = comb.icmp bin eq %312, %c-1253_i12 {sv.namehint = "_csr_exists_T_93"} : i12
    %438 = comb.icmp bin eq %312, %c-997_i12 {sv.namehint = "_csr_exists_T_94"} : i12
    %439 = comb.icmp bin eq %312, %c828_i12 {sv.namehint = "_csr_exists_T_95"} : i12
    %440 = comb.icmp bin eq %312, %c-1252_i12 {sv.namehint = "_csr_exists_T_96"} : i12
    %441 = comb.icmp bin eq %312, %c-996_i12 {sv.namehint = "_csr_exists_T_97"} : i12
    %442 = comb.icmp bin eq %312, %c829_i12 {sv.namehint = "_csr_exists_T_98"} : i12
    %443 = comb.icmp bin eq %312, %c-1251_i12 {sv.namehint = "_csr_exists_T_99"} : i12
    %444 = comb.icmp bin eq %312, %c-995_i12 {sv.namehint = "_csr_exists_T_100"} : i12
    %445 = comb.icmp bin eq %312, %c830_i12 {sv.namehint = "_csr_exists_T_101"} : i12
    %446 = comb.icmp bin eq %312, %c-1250_i12 {sv.namehint = "_csr_exists_T_102"} : i12
    %447 = comb.icmp bin eq %312, %c-994_i12 {sv.namehint = "_csr_exists_T_103"} : i12
    %448 = comb.icmp bin eq %312, %c831_i12 {sv.namehint = "_csr_exists_T_104"} : i12
    %449 = comb.icmp bin eq %312, %c-1249_i12 {sv.namehint = "_csr_exists_T_105"} : i12
    %450 = comb.icmp bin eq %312, %c-993_i12 {sv.namehint = "_csr_exists_T_106"} : i12
    %451 = comb.icmp bin eq %312, %c-1024_i12 {sv.namehint = "_csr_exists_T_107"} : i12
    %452 = comb.icmp bin eq %312, %c-1022_i12 {sv.namehint = "_csr_exists_T_108"} : i12
    %453 = comb.icmp bin eq %312, %c928_i12 {sv.namehint = "_csr_exists_T_109"} : i12
    %454 = comb.icmp bin eq %312, %c930_i12 {sv.namehint = "_csr_exists_T_110"} : i12
    %455 = comb.icmp bin eq %312, %c944_i12 {sv.namehint = "_csr_exists_T_111"} : i12
    %456 = comb.icmp bin eq %312, %c945_i12 {sv.namehint = "_csr_exists_T_112"} : i12
    %457 = comb.icmp bin eq %312, %c946_i12 {sv.namehint = "_csr_exists_T_113"} : i12
    %458 = comb.icmp bin eq %312, %c947_i12 {sv.namehint = "_csr_exists_T_114"} : i12
    %459 = comb.icmp bin eq %312, %c948_i12 {sv.namehint = "_csr_exists_T_115"} : i12
    %460 = comb.icmp bin eq %312, %c949_i12 {sv.namehint = "_csr_exists_T_116"} : i12
    %461 = comb.icmp bin eq %312, %c950_i12 {sv.namehint = "_csr_exists_T_117"} : i12
    %462 = comb.icmp bin eq %312, %c951_i12 {sv.namehint = "_csr_exists_T_118"} : i12
    %463 = comb.icmp bin eq %312, %c952_i12 {sv.namehint = "_csr_exists_T_119"} : i12
    %464 = comb.icmp bin eq %312, %c953_i12 {sv.namehint = "_csr_exists_T_120"} : i12
    %465 = comb.icmp bin eq %312, %c954_i12 {sv.namehint = "_csr_exists_T_121"} : i12
    %466 = comb.icmp bin eq %312, %c955_i12 {sv.namehint = "_csr_exists_T_122"} : i12
    %467 = comb.icmp bin eq %312, %c956_i12 {sv.namehint = "_csr_exists_T_123"} : i12
    %468 = comb.icmp bin eq %312, %c957_i12 {sv.namehint = "_csr_exists_T_124"} : i12
    %469 = comb.icmp bin eq %312, %c958_i12 {sv.namehint = "_csr_exists_T_125"} : i12
    %470 = comb.icmp bin eq %312, %c959_i12 {sv.namehint = "_csr_exists_T_126"} : i12
    %471 = comb.icmp bin eq %312, %c1985_i12 {sv.namehint = "_csr_exists_T_127"} : i12
    %472 = comb.icmp bin eq %312, %c-238_i12 {sv.namehint = "_csr_exists_T_128"} : i12
    %473 = comb.icmp bin eq %312, %c-239_i12 {sv.namehint = "_csr_exists_T_129"} : i12
    %474 = comb.icmp bin eq %312, %c-237_i12 {sv.namehint = "_csr_exists_T_130"} : i12
    %475 = comb.icmp bin eq %312, %c-235_i12 {sv.namehint = "_csr_exists_T_131"} : i12
    %476 = comb.or bin %344, %345, %346, %347, %348, %349, %350, %351, %352, %353, %354, %355, %356, %357, %358, %359, %360, %361, %362, %363, %364, %365, %366, %367, %368, %369, %370, %371, %372, %373, %374, %375, %376, %377, %378, %379, %380, %381, %382, %383, %384, %385, %386, %387, %388, %389, %390, %391, %392, %393, %394, %395, %396, %397, %398, %399, %400, %401, %402, %403, %404, %405, %406, %407, %408, %409, %410, %411, %412, %413, %414, %415, %416, %417, %418, %419, %420, %421, %422, %423, %424, %425, %426, %427, %428, %429, %430, %431, %432, %433, %434, %435, %436, %437, %438, %439, %440, %441, %442, %443, %444, %445, %446, %447, %448, %449, %450, %451, %452, %453, %454, %455, %456, %457, %458, %459, %460, %461, %462, %463, %464, %465, %466, %467, %468, %469, %470, %471, %472, %473, %474, %475 {sv.namehint = "csr_exists"} : i1
    %477 = comb.xor bin %476, %true {sv.namehint = "_io_decode_0_read_illegal_T_1"} : i1
    %478 = comb.extract %io_decode_0_inst from 26 : (i32) -> i6
    %479 = comb.xor bin %478, %c-1_i6 {sv.namehint = "io_decode_0_read_illegal_invInputs"} : i6
    %480 = comb.extract %io_decode_0_inst from 24 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_0"} : (i32) -> i1
    %481 = comb.extract %io_decode_0_inst from 25 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_1"} : (i32) -> i1
    %482 = comb.extract %479 from 0 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_2"} : (i6) -> i1
    %483 = comb.extract %io_decode_0_inst from 27 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_3"} : (i32) -> i1
    %484 = comb.extract %io_decode_0_inst from 28 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_4"} : (i32) -> i1
    %485 = comb.extract %io_decode_0_inst from 29 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_5"} : (i32) -> i1
    %486 = comb.extract %io_decode_0_inst from 30 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_6"} : (i32) -> i1
    %487 = comb.extract %479 from 5 {sv.namehint = "io_decode_0_read_illegal_andMatrixInput_7"} : (i6) -> i1
    %488 = comb.concat %480, %481, %482, %483, %484, %485, %486, %487 {sv.namehint = "_io_decode_0_read_illegal_T_12"} : i1, i1, i1, i1, i1, i1, i1, i1
    %489 = comb.icmp bin eq %488, %c-1_i8 {sv.namehint = "io_decode_0_read_illegal_plaOutput"} : i8
    %490 = comb.xor bin %reg_debug, %true {sv.namehint = "_io_status_dv_T"} : i1
    %491 = comb.and bin %489, %490 {sv.namehint = "_io_decode_0_read_illegal_T_16"} : i1
    %492 = comb.or bin %477, %491 {sv.namehint = "io_decode_0_read_illegal"} : i1
    %493 = comb.extract %io_decode_0_inst from 30 {sv.namehint = "_io_decode_0_write_illegal_T"} : (i32) -> i2
    %494 = comb.icmp bin eq %493, %c-1_i2 {sv.namehint = "io_decode_0_write_illegal"} : i2
    %495 = comb.extract %io_decode_0_inst from 30 : (i32) -> i2
    %496 = comb.extract %io_decode_0_inst from 20 : (i32) -> i10
    %497 = comb.or bin %496, %c-256_i10 : i10
    %498 = comb.concat %495, %497 {sv.namehint = "io_decode_0_write_flush_addr_m"} : i2, i10
    %499 = comb.icmp bin ugt %498, %c831_i12 {sv.namehint = "_io_decode_0_write_flush_T"} : i12
    %500 = comb.icmp bin ult %498, %c836_i12 {sv.namehint = "_io_decode_0_write_flush_T_1"} : i12
    %501 = comb.and bin %499, %500 {sv.namehint = "_io_decode_0_write_flush_T_2"} : i1
    %502 = comb.xor bin %501, %true {sv.namehint = "io_decode_0_write_flush"} : i1
    %503 = comb.extract %io_decode_0_inst from 30 {sv.namehint = "_io_decode_0_system_illegal_T_9"} : (i32) -> i1
    %504 = comb.extract %io_decode_0_inst from 27 {sv.namehint = "_io_decode_0_system_illegal_T_11"} : (i32) -> i1
    %505 = comb.and bin %331, %503, %504, %490 {sv.namehint = "io_decode_0_system_illegal"} : i1
    %506 = comb.icmp bin eq %343, %c-2_i2 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_2"} : i2
    %507 = comb.extract %341 from 0 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_4"} : (i32) -> i1
    %508 = comb.extract %342 from 0 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_7"} : (i32) -> i1
    %509 = comb.xor bin %508, %true {sv.namehint = "_io_decode_0_virtual_access_illegal_T_8"} : i1
    %510 = comb.and bin %338, %507, %509 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_16"} : i1
    %511 = comb.or bin %506, %510 {sv.namehint = "_io_decode_0_virtual_access_illegal_T_17"} : i1
    %512 = comb.and bin %reg_mstatus_v, %476, %511 {sv.namehint = "io_decode_0_virtual_access_illegal"} : i1
    %513 = comb.xor %reg_mstatus_v, %true : i1
    %514 = comb.concat %c1_i3, %513 : i3, i1
    %515 = comb.add bin %514, %c-8_i4 {sv.namehint = "_cause_T_3"} : i4
    %516 = comb.mux bin %309, %c3_i64, %io_cause {sv.namehint = "_cause_T_5"} : i64
    %517 = comb.concat %c0_i60, %515 : i60, i4
    %518 = comb.mux bin %308, %517, %516 {sv.namehint = "cause"} : i64
    %519 = comb.extract %518 from 0 {sv.namehint = "cause_lsbs"} : (i64) -> i8
    %520 = comb.extract %518 from 63 {sv.namehint = "_io_trace_0_interrupt_T"} : (i64) -> i1
    %521 = comb.icmp bin eq %519, %c14_i8 {sv.namehint = "_causeIsDebugTrigger_T_2"} : i8
    %522 = comb.and bin %520, %521 {sv.namehint = "causeIsDebugInt"} : i1
    %523 = comb.xor bin %520, %true {sv.namehint = "_causeIsDebugTrigger_T_1"} : i1
    %524 = comb.and bin %523, %521 {sv.namehint = "causeIsDebugTrigger"} : i1
    %525 = comb.xor bin %520, %true {sv.namehint = "_causeIsDebugBreak_T_1"} : i1
    %526 = comb.and bin %525, %309, %reg_dcsr_ebreakm {sv.namehint = "causeIsDebugBreak"} : i1
    %527 = comb.or bin %reg_singleStepped, %522, %524, %526, %reg_debug {sv.namehint = "trapToDebug"} : i1
    %528 = comb.xor %309, %true : i1
    %529 = comb.concat %c-128_i8, %528, %c0_i3 {sv.namehint = "_debugTVec_T"} : i8, i1, i3
    %530 = comb.mux bin %reg_debug, %529, %c-2048_i12 {sv.namehint = "debugTVec"} : i12
    %531 = comb.extract %518 from 0 {sv.namehint = "_notDebugTVec_interruptOffset_T"} : (i64) -> i6
    %532 = comb.extract %149 from 8 : (i32) -> i24
    %533 = comb.extract %149 from 0 {sv.namehint = "_notDebugTVec_doVector_T"} : (i32) -> i1
    %534 = comb.extract %518 from 6 {sv.namehint = "_notDebugTVec_doVector_T_3"} : (i64) -> i2
    %535 = comb.icmp bin eq %534, %c0_i2 {sv.namehint = "_notDebugTVec_doVector_T_4"} : i2
    %536 = comb.and bin %533, %520, %535 {sv.namehint = "notDebugTVec_doVector"} : i1
    %537 = comb.extract %149 from 2 : (i32) -> i30
    %538 = comb.concat %532, %531 : i24, i6
    %539 = comb.mux bin %536, %538, %537 : i30
    %540 = comb.concat %c0_i22, %530 : i22, i12
    %541 = comb.concat %c0_i2, %539, %c0_i2 : i2, i30, i2
    %542 = comb.mux bin %527, %540, %541 {sv.namehint = "tvec"} : i34
    %543 = comb.or bin %308, %309 {sv.namehint = "_exception_T"} : i1
    %544 = comb.or bin %543, %310 {sv.namehint = "io_eret"} : i1
    %545 = comb.and bin %reg_dcsr_step, %490 {sv.namehint = "io_singleStep"} : i1
    %546 = comb.extract %reg_misa from 0 {sv.namehint = "io_status_isa"} : (i64) -> i32
    %547 = comb.or bin %543, %io_exception {sv.namehint = "exception"} : i1
    %548 = comb.concat %false, %310 : i1, i1
    %549 = comb.concat %false, %308 : i1, i1
    %550 = comb.add bin %548, %549 : i2
    %551 = comb.concat %false, %309 : i1, i1
    %552 = comb.concat %false, %io_exception : i1, i1
    %553 = comb.add bin %551, %552 : i2
    %554 = comb.concat %false, %550 : i1, i2
    %555 = comb.concat %false, %553 : i1, i2
    %556 = comb.add bin %554, %555 : i3
    %557 = comb.icmp bin ult %556, %c2_i3 : i3
    %558 = comb.xor bin %reset, %true : i1
    %559 = comb.and bin %275, %296, %66, %490 : i1
    %560 = comb.or %559, %reg_wfi : i1
    %561 = comb.extract %28 from 11 : (i16) -> i1
    %562 = comb.extract %28 from 7 : (i16) -> i1
    %563 = comb.extract %28 from 3 : (i16) -> i1
    %564 = comb.concat %561, %562, %563 : i1, i1, i1
    %565 = comb.icmp bin ne %564, %c0_i3 : i3
    %566 = comb.or bin %565, %io_interrupts_debug, %547 : i1
    %567 = comb.xor %566, %true : i1
    %568 = comb.and %567, %560 : i1
    %569 = comb.or %io_retire, %547, %reg_singleStepped : i1
    %570 = comb.and %545, %569 : i1
    %571 = comb.xor bin %reg_singleStepped, %true : i1
    %572 = comb.xor bin %io_retire, %true : i1
    %573 = comb.or bin %571, %572 : i1
    sv.always posedge %0 {
      sv.if %558 {
        sv.assert %557, immediate label "assert__assert"
      }
      sv.if %558 {
        sv.assert %573, immediate label "assert__assert_2"
      }
    }
    %574 = comb.extract %io_pc from 1 : (i34) -> i33
    %575 = comb.concat %574, %false {sv.namehint = "epc"} : i33, i1
    %576 = comb.mux bin %309, %575, %io_tval {sv.namehint = "tval"} : i34
    %577 = comb.and bin %547, %527, %490 : i1
    %578 = comb.or %577, %reg_debug : i1
    %579 = comb.mux bin %577, %575, %reg_dpc : i34
    %580 = comb.mux bin %524, %c-2_i2, %c1_i2 {sv.namehint = "_reg_dcsr_cause_T"} : i2
    %581 = comb.mux bin %522, %c-1_i2, %580 {sv.namehint = "_reg_dcsr_cause_T_1"} : i2
    %582 = comb.concat %false, %581 : i1, i2
    %583 = comb.mux bin %reg_singleStepped, %c-4_i3, %582 {sv.namehint = "_reg_dcsr_cause_T_2"} : i3
    %584 = comb.mux bin %577, %583, %reg_dcsr_cause : i3
    %585 = comb.mux bin %577, %reg_mstatus_v, %reg_dcsr_v : i1
    %586 = comb.and %527, %reg_debug : i1
    %587 = comb.xor %547, %true : i1
    %588 = comb.or %587, %586 : i1
    %589 = comb.xor %547, %true : i1
    %590 = comb.or %589, %527 : i1
    %591 = comb.mux bin %590, %reg_mstatus_mpv, %reg_mstatus_v : i1
    %592 = comb.xor %547, %true : i1
    %593 = comb.or %592, %527 : i1
    %594 = comb.mux bin %593, %reg_mstatus_gva, %io_gva : i1
    %595 = comb.xor %547, %true : i1
    %596 = comb.or %595, %527 : i1
    %597 = comb.mux bin %596, %reg_mepc, %575 : i34
    %598 = comb.xor %547, %true : i1
    %599 = comb.or %598, %527 : i1
    %600 = comb.mux bin %599, %reg_mcause, %518 : i64
    %601 = comb.xor %547, %true : i1
    %602 = comb.or %601, %527 : i1
    %603 = comb.mux bin %602, %reg_mtval, %576 : i34
    %604 = comb.xor %547, %true : i1
    %605 = comb.or %604, %527 : i1
    %606 = comb.mux bin %605, %reg_mstatus_mpie, %reg_mstatus_mie : i1
    %607 = comb.xor %547, %true : i1
    %608 = comb.or %607, %527 : i1
    %609 = comb.xor %547, %true : i1
    %610 = comb.or %609, %527 : i1
    %611 = comb.and %610, %reg_mstatus_mie : i1
    %612 = comb.extract %io_rw_addr from 10 : (i12) -> i1
    %613 = comb.extract %io_rw_addr from 7 : (i12) -> i1
    %614 = comb.and bin %612, %613 : i1
    %615 = comb.and bin %310, %614 : i1
    %616 = comb.xor %615, %true : i1
    %617 = comb.and %616, %578 : i1
    %618 = comb.xor %156, %true : i1
    %619 = comb.concat %618, %true {sv.namehint = "_io_evec_T_12"} : i1, i1
    %620 = comb.or bin %173, %619 : i2
    %621 = comb.concat %172, %620 {sv.namehint = "_io_evec_T_13"} : i32, i2
    %622 = comb.xor bin %621, %c-1_i34 {sv.namehint = "_io_evec_T_14"} : i34
    %623 = comb.xor %310, %true : i1
    %624 = comb.or %623, %614 : i1
    %625 = comb.mux bin %624, %611, %reg_mstatus_mpie : i1
    %626 = comb.xor %614, %true : i1
    %627 = comb.and %310, %626 : i1
    %628 = comb.or %627, %606 : i1
    %629 = comb.xor %310, %true : i1
    %630 = comb.or %629, %614 : i1
    %631 = comb.and %630, %608 : i1
    %632 = comb.mux bin %631, %reg_mstatus_mpp, %c-1_i2 : i2
    %633 = comb.xor %310, %true : i1
    %634 = comb.or %633, %614 : i1
    %635 = comb.and %634, %591 : i1
    %636 = comb.xor %310, %true : i1
    %637 = comb.and %636, %588, %reg_mstatus_v : i1
    %638 = comb.xor %156, %true : i1
    %639 = comb.concat %638, %true {sv.namehint = "_io_evec_T_22"} : i1, i1
    %640 = comb.or bin %160, %639 : i2
    %641 = comb.concat %159, %640 {sv.namehint = "_io_evec_T_23"} : i32, i2
    %642 = comb.xor bin %641, %c-1_i34 {sv.namehint = "_io_evec_T_24"} : i34
    %643 = comb.mux bin %614, %622, %642 : i34
    %644 = comb.mux bin %310, %643, %542 {sv.namehint = "io_evec"} : i34
    %645 = comb.or bin %reg_wfi, %io_status_cease_r {sv.namehint = "io_csr_stall"} : i1
    %io_status_cease_r = seq.firreg %646 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3226 : ui64, sv.namehint = "io_status_cease"} : i1
    %646 = comb.or %311, %io_status_cease_r : i1
    %647 = comb.mux bin %241, %151, %c0_i64 {sv.namehint = "_io_rw_rdata_T_1"} : i64
    %648 = comb.mux bin %243, %154, %c0_i64 {sv.namehint = "_io_rw_rdata_T_2"} : i64
    %649 = comb.mux bin %198, %reg_misa, %c0_i64 {sv.namehint = "_io_rw_rdata_T_4"} : i64
    %650 = comb.mux bin %195, %144, %c0_i64 {sv.namehint = "_io_rw_rdata_T_5"} : i64
    %651 = comb.mux bin %203, %150, %c0_i64 {sv.namehint = "_io_rw_rdata_T_6"} : i64
    %652 = comb.mux bin %219, %26, %c0_i16 {sv.namehint = "_io_rw_rdata_T_7"} : i16
    %653 = comb.mux bin %201, %reg_mie, %c0_i64 {sv.namehint = "_io_rw_rdata_T_8"} : i64
    %654 = comb.mux bin %211, %reg_mscratch, %c0_i64 {sv.namehint = "_io_rw_rdata_T_9"} : i64
    %655 = comb.mux bin %213, %166, %c0_i64 {sv.namehint = "_io_rw_rdata_T_10"} : i64
    %656 = comb.mux bin %217, %169, %c0_i64 {sv.namehint = "_io_rw_rdata_T_11"} : i64
    %657 = comb.mux bin %215, %reg_mcause, %c0_i64 {sv.namehint = "_io_rw_rdata_T_12"} : i64
    %658 = comb.mux bin %245, %170, %c0_i32 {sv.namehint = "_io_rw_rdata_T_14"} : i32
    %659 = comb.mux bin %247, %179, %c0_i64 {sv.namehint = "_io_rw_rdata_T_15"} : i64
    %660 = comb.mux bin %249, %reg_dscratch0, %c0_i64 {sv.namehint = "_io_rw_rdata_T_16"} : i64
    %661 = comb.mux bin %206, %reg_mcountinhibit, %c0_i3 {sv.namehint = "_io_rw_rdata_T_17"} : i3
    %662 = comb.mux bin %254, %25, %c0_i64 {sv.namehint = "_io_rw_rdata_T_18"} : i64
    %663 = comb.mux bin %256, %13, %c0_i64 {sv.namehint = "_io_rw_rdata_T_19"} : i64
    %664 = comb.mux bin %260, %25, %c0_i64 {sv.namehint = "_io_rw_rdata_T_107"} : i64
    %665 = comb.mux bin %262, %13, %c0_i64 {sv.namehint = "_io_rw_rdata_T_108"} : i64
    %666 = comb.mux bin %222, %180, %c0_i64 {sv.namehint = "_io_rw_rdata_T_109"} : i64
    %667 = comb.mux bin %224, %reg_pmp_0_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_111"} : i30
    %668 = comb.mux bin %226, %reg_pmp_1_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_112"} : i30
    %669 = comb.mux bin %228, %reg_pmp_2_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_113"} : i30
    %670 = comb.mux bin %230, %reg_pmp_3_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_114"} : i30
    %671 = comb.mux bin %232, %reg_pmp_4_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_115"} : i30
    %672 = comb.mux bin %234, %reg_pmp_5_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_116"} : i30
    %673 = comb.mux bin %236, %reg_pmp_6_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_117"} : i30
    %674 = comb.mux bin %238, %reg_pmp_7_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_118"} : i30
    %675 = comb.mux bin %251, %reg_custom_0, %c0_i64 {sv.namehint = "_io_rw_rdata_T_127"} : i64
    %676 = comb.concat %c0_i63, %264 {sv.namehint = "_io_rw_rdata_T_128"} : i63, i1
    %677 = comb.mux bin %266, %c538447876_i64, %c0_i64 {sv.namehint = "_io_rw_rdata_T_130"} : i64
    %678 = comb.or bin %647, %648, %649, %650, %651 {sv.namehint = "_io_rw_rdata_T_137"} : i64
    %679 = comb.extract %678 from 16 : (i64) -> i48
    %680 = comb.extract %678 from 0 : (i64) -> i16
    %681 = comb.or bin %680, %652 : i16
    %682 = comb.concat %679, %681 {sv.namehint = "_io_rw_rdata_T_138"} : i48, i16
    %683 = comb.or bin %682, %653, %654, %655, %656, %657 {sv.namehint = "_io_rw_rdata_T_143"} : i64
    %684 = comb.extract %683 from 32 : (i64) -> i32
    %685 = comb.extract %683 from 0 : (i64) -> i32
    %686 = comb.or bin %685, %658 : i32
    %687 = comb.concat %684, %686 {sv.namehint = "_io_rw_rdata_T_145"} : i32, i32
    %688 = comb.or bin %687, %659, %660 {sv.namehint = "_io_rw_rdata_T_147"} : i64
    %689 = comb.extract %688 from 3 : (i64) -> i61
    %690 = comb.extract %688 from 0 : (i64) -> i3
    %691 = comb.or bin %690, %661 : i3
    %692 = comb.concat %689, %691 {sv.namehint = "_io_rw_rdata_T_148"} : i61, i3
    %693 = comb.or bin %692, %662, %663, %664, %665, %666 {sv.namehint = "_io_rw_rdata_T_241"} : i64
    %694 = comb.extract %693 from 30 : (i64) -> i34
    %695 = comb.extract %693 from 0 : (i64) -> i30
    %696 = comb.or bin %695, %667, %668, %669, %670, %671, %672, %673, %674 : i30
    %697 = comb.concat %694, %696 {sv.namehint = "_io_rw_rdata_T_257"} : i34, i30
    %698 = comb.or bin %697, %675, %676, %677 {sv.namehint = "_io_rw_rdata_T_262"} : i64
    %699 = comb.icmp bin eq %io_rw_cmd, %c-2_i3 {sv.namehint = "_csr_wen_T"} : i3
    %700 = comb.icmp bin eq %io_rw_cmd, %c-1_i3 {sv.namehint = "_csr_wen_T_1"} : i3
    %701 = comb.icmp bin eq %io_rw_cmd, %c-3_i3 {sv.namehint = "_csr_wen_T_2"} : i3
    %702 = comb.or bin %699, %700, %701 {sv.namehint = "_csr_wen_T_4"} : i1
    %703 = comb.extract %274 from 3 {sv.namehint = "new_mstatus_mie"} : (i64) -> i1
    %704 = comb.extract %274 from 7 {sv.namehint = "new_mstatus_mpie"} : (i64) -> i1
    %705 = comb.and bin %702, %195 : i1
    %706 = comb.mux bin %705, %703, %625 : i1
    %707 = comb.mux bin %705, %704, %628 : i1
    %708 = comb.extract %269 from 5 : (i64) -> i1
    %709 = comb.extract %273 from 5 : (i64) -> i1
    %710 = comb.and bin %708, %709 {sv.namehint = "f"} : i1
    %711 = comb.extract %io_pc from 1 : (i34) -> i1
    %712 = comb.xor bin %711, %true : i1
    %713 = comb.extract %269 from 2 : (i64) -> i1
    %714 = comb.extract %273 from 2 : (i64) -> i1
    %715 = comb.and bin %713, %714 : i1
    %716 = comb.or bin %712, %715 : i1
    %717 = comb.xor bin %274, %c-1_i64 {sv.namehint = "_reg_misa_T"} : i64
    %718 = comb.xor bin %710, %true {sv.namehint = "_reg_misa_T_1"} : i1
    %719 = comb.concat %718, %c0_i3 {sv.namehint = "_reg_misa_T_2"} : i1, i3
    %720 = comb.extract %717 from 4 : (i64) -> i60
    %721 = comb.extract %717 from 0 : (i64) -> i4
    %722 = comb.or bin %721, %719 : i4
    %723 = comb.concat %720, %722 {sv.namehint = "_reg_misa_T_3"} : i60, i4
    %724 = comb.xor bin %723, %c-1_i64 {sv.namehint = "_reg_misa_T_4"} : i64
    %725 = comb.and bin %724, %c4101_i64 {sv.namehint = "_reg_misa_T_5"} : i64
    %726 = comb.and bin %reg_misa, %c-4102_i64 {sv.namehint = "_reg_misa_T_7"} : i64
    %727 = comb.or bin %725, %726 {sv.namehint = "_reg_misa_T_8"} : i64
    %728 = comb.and bin %702, %198, %716 : i1
    %729 = comb.mux bin %728, %727, %reg_misa : i64
    %730 = comb.extract %269 from 0 : (i64) -> i16
    %731 = comb.extract %273 from 0 : (i64) -> i16
    %732 = comb.and bin %730, %731, %c2184_i16 : i16
    %733 = comb.concat %c0_i48, %732 : i48, i16
    %734 = comb.and bin %702, %201 : i1
    %735 = comb.mux bin %734, %733, %reg_mie : i64
    %736 = comb.extract %274 from 1 : (i64) -> i33
    %737 = comb.concat %736, %false : i33, i1
    %738 = comb.and bin %702, %213 : i1
    %739 = comb.mux bin %738, %737, %597 : i34
    %740 = comb.and bin %702, %211 : i1
    %741 = comb.mux bin %740, %274, %reg_mscratch : i64
    %742 = comb.extract %269 from 0 : (i64) -> i32
    %743 = comb.extract %273 from 0 : (i64) -> i32
    %744 = comb.and bin %742, %743 {sv.namehint = "_new_dcsr_WIRE"} : i32
    %745 = comb.and bin %702, %203 : i1
    %746 = comb.mux bin %745, %744, %reg_mtvec : i32
    %747 = comb.and bin %274, %c-9223372036854775793_i64 {sv.namehint = "_reg_mcause_T"} : i64
    %748 = comb.and bin %702, %215 : i1
    %749 = comb.mux bin %748, %747, %600 : i64
    %750 = comb.extract %269 from 0 : (i64) -> i34
    %751 = comb.extract %273 from 0 : (i64) -> i34
    %752 = comb.and bin %750, %751 : i34
    %753 = comb.and bin %702, %217 : i1
    %754 = comb.mux bin %753, %752, %603 : i34
    %755 = comb.extract %269 from 0 : (i64) -> i3
    %756 = comb.extract %273 from 0 : (i64) -> i3
    %757 = comb.and bin %755, %756, %c-3_i3 : i3
    %758 = comb.and bin %702, %206 : i1
    %759 = comb.mux bin %758, %757, %reg_mcountinhibit : i3
    %760 = comb.extract %269 from 0 : (i64) -> i6
    %761 = comb.extract %273 from 0 : (i64) -> i6
    %762 = comb.and bin %760, %761 : i6
    %763 = comb.and bin %702, %254 : i1
    %764 = comb.mux bin %763, %762, %20 : i6
    %765 = comb.extract %269 from 6 : (i64) -> i58
    %766 = comb.extract %273 from 6 : (i64) -> i58
    %767 = comb.and bin %765, %766 {sv.namehint = "_large_T_6"} : i58
    %768 = comb.mux bin %763, %767, %24 : i58
    %769 = comb.and bin %702, %256 : i1
    %770 = comb.mux bin %769, %762, %8 : i6
    %771 = comb.and bin %765, %766 {sv.namehint = "_large_T_7"} : i58
    %772 = comb.mux bin %769, %771, %12 : i58
    %773 = comb.extract %744 from 2 {sv.namehint = "new_dcsr_step"} : (i32) -> i1
    %774 = comb.extract %744 from 15 {sv.namehint = "new_dcsr_ebreakm"} : (i32) -> i1
    %775 = comb.and bin %702, %245 : i1
    %776 = comb.mux bin %775, %773, %reg_dcsr_step : i1
    %777 = comb.mux bin %775, %774, %reg_dcsr_ebreakm : i1
    %778 = comb.extract %274 from 1 : (i64) -> i33
    %779 = comb.concat %778, %false : i33, i1
    %780 = comb.and bin %702, %247 : i1
    %781 = comb.mux bin %780, %779, %579 : i34
    %782 = comb.and bin %702, %249 : i1
    %783 = comb.mux bin %782, %274, %reg_dscratch0 : i64
    %784 = comb.xor bin %reg_bp_0_control_dmode, %true : i1
    %785 = comb.or bin %784, %reg_debug : i1
    %786 = comb.extract %269 from 0 : (i64) -> i33
    %787 = comb.extract %273 from 0 : (i64) -> i33
    %788 = comb.and bin %786, %787 : i33
    %789 = comb.and bin %702, %785, %243 : i1
    %790 = comb.mux bin %789, %788, %reg_bp_0_address : i33
    %791 = comb.extract %274 from 0 {sv.namehint = "_reg_bp_0_control_T"} : (i64) -> i1
    %792 = comb.extract %274 from 1 {sv.namehint = "_reg_bp_0_control_T_1"} : (i64) -> i1
    %793 = comb.extract %274 from 2 {sv.namehint = "_reg_bp_0_control_T_2"} : (i64) -> i1
    %794 = comb.extract %274 from 7 {sv.namehint = "_reg_bp_0_control_T_7"} : (i64) -> i2
    %795 = comb.and bin %702, %785, %241 : i1
    %796 = comb.mux bin %795, %794, %reg_bp_0_control_tmatch : i2
    %797 = comb.mux bin %795, %793, %reg_bp_0_control_x : i1
    %798 = comb.mux bin %795, %792, %reg_bp_0_control_w : i1
    %799 = comb.mux bin %795, %791, %reg_bp_0_control_r : i1
    %800 = comb.concat %reg_bp_0_control_dmode, %c4398046511104_i46, %reg_bp_0_control_action : i1, i46, i1
    %801 = comb.mux bin %267, %800, %c0_i48 {sv.namehint = "_newBPC_T_2"} : i48
    %802 = comb.extract %io_rw_wdata from 12 : (i64) -> i48
    %803 = comb.or bin %801, %802 {sv.namehint = "_newBPC_T_3"} : i48
    %804 = comb.icmp bin eq %270, %c-1_i2 {sv.namehint = "_newBPC_T_5"} : i2
    %805 = comb.extract %io_rw_wdata from 12 : (i64) -> i48
    %806 = comb.mux bin %804, %805, %c0_i48 {sv.namehint = "_newBPC_T_6"} : i48
    %807 = comb.xor bin %806, %c-1_i48 {sv.namehint = "_newBPC_T_7"} : i48
    %808 = comb.and bin %803, %807 {sv.namehint = "_newBPC_T_8"} : i48
    %809 = comb.extract %808 from 0 {sv.namehint = "newBPC_action"} : (i48) -> i1
    %810 = comb.extract %808 from 47 {sv.namehint = "newBPC_dmode"} : (i48) -> i1
    %811 = comb.and bin %810, %reg_debug {sv.namehint = "dMode"} : i1
    %812 = comb.mux bin %795, %811, %reg_bp_0_control_dmode : i1
    %813 = comb.and %811, %809 : i1
    %814 = comb.mux bin %795, %813, %reg_bp_0_control_action : i1
    %815 = comb.xor bin %reg_pmp_0_cfg_l, %true : i1
    %816 = comb.extract %269 from 0 : (i64) -> i8
    %817 = comb.extract %273 from 0 : (i64) -> i8
    %818 = comb.and bin %816, %817 {sv.namehint = "_newCfg_WIRE"} : i8
    %819 = comb.extract %818 from 0 {sv.namehint = "newCfg_r"} : (i8) -> i1
    %820 = comb.extract %818 from 1 {sv.namehint = "newCfg_w"} : (i8) -> i1
    %821 = comb.extract %818 from 2 {sv.namehint = "newCfg_x"} : (i8) -> i1
    %822 = comb.extract %818 from 3 {sv.namehint = "newCfg_a"} : (i8) -> i2
    %823 = comb.extract %818 from 7 {sv.namehint = "newCfg_l"} : (i8) -> i1
    %824 = comb.and bin %702, %222, %815 : i1
    %825 = comb.mux bin %824, %823, %reg_pmp_0_cfg_l : i1
    %826 = comb.mux bin %824, %822, %reg_pmp_0_cfg_a : i2
    %827 = comb.mux bin %824, %821, %reg_pmp_0_cfg_x : i1
    %828 = comb.mux bin %824, %819, %reg_pmp_0_cfg_r : i1
    %829 = comb.and bin %820, %819 {sv.namehint = "_reg_pmp_0_cfg_w_T"} : i1
    %830 = comb.mux bin %824, %829, %reg_pmp_0_cfg_w : i1
    %831 = comb.extract %reg_pmp_1_cfg_a from 1 : (i2) -> i1
    %832 = comb.xor bin %831, %true : i1
    %833 = comb.extract %reg_pmp_1_cfg_a from 0 : (i2) -> i1
    %834 = comb.and bin %reg_pmp_1_cfg_l, %832, %833 : i1
    %835 = comb.or bin %reg_pmp_0_cfg_l, %834 : i1
    %836 = comb.xor bin %835, %true : i1
    %837 = comb.extract %269 from 0 : (i64) -> i30
    %838 = comb.extract %273 from 0 : (i64) -> i30
    %839 = comb.and bin %837, %838 : i30
    %840 = comb.and bin %702, %224, %836 : i1
    %841 = comb.mux bin %840, %839, %reg_pmp_0_addr : i30
    %842 = comb.xor bin %reg_pmp_1_cfg_l, %true : i1
    %843 = comb.extract %269 from 8 : (i64) -> i8
    %844 = comb.extract %273 from 8 : (i64) -> i8
    %845 = comb.and bin %843, %844 {sv.namehint = "_newCfg_WIRE_1"} : i8
    %846 = comb.extract %845 from 0 {sv.namehint = "newCfg_1_r"} : (i8) -> i1
    %847 = comb.extract %845 from 1 {sv.namehint = "newCfg_1_w"} : (i8) -> i1
    %848 = comb.extract %845 from 2 {sv.namehint = "newCfg_1_x"} : (i8) -> i1
    %849 = comb.extract %845 from 3 {sv.namehint = "newCfg_1_a"} : (i8) -> i2
    %850 = comb.extract %845 from 7 {sv.namehint = "newCfg_1_l"} : (i8) -> i1
    %851 = comb.and bin %702, %222, %842 : i1
    %852 = comb.mux bin %851, %850, %reg_pmp_1_cfg_l : i1
    %853 = comb.mux bin %851, %849, %reg_pmp_1_cfg_a : i2
    %854 = comb.mux bin %851, %848, %reg_pmp_1_cfg_x : i1
    %855 = comb.mux bin %851, %846, %reg_pmp_1_cfg_r : i1
    %856 = comb.and bin %847, %846 {sv.namehint = "_reg_pmp_1_cfg_w_T"} : i1
    %857 = comb.mux bin %851, %856, %reg_pmp_1_cfg_w : i1
    %858 = comb.extract %reg_pmp_2_cfg_a from 1 : (i2) -> i1
    %859 = comb.xor bin %858, %true : i1
    %860 = comb.extract %reg_pmp_2_cfg_a from 0 : (i2) -> i1
    %861 = comb.and bin %reg_pmp_2_cfg_l, %859, %860 : i1
    %862 = comb.or bin %reg_pmp_1_cfg_l, %861 : i1
    %863 = comb.xor bin %862, %true : i1
    %864 = comb.and bin %702, %226, %863 : i1
    %865 = comb.mux bin %864, %839, %reg_pmp_1_addr : i30
    %866 = comb.xor bin %reg_pmp_2_cfg_l, %true : i1
    %867 = comb.extract %269 from 16 : (i64) -> i8
    %868 = comb.extract %273 from 16 : (i64) -> i8
    %869 = comb.and bin %867, %868 {sv.namehint = "_newCfg_WIRE_2"} : i8
    %870 = comb.extract %869 from 0 {sv.namehint = "newCfg_2_r"} : (i8) -> i1
    %871 = comb.extract %869 from 1 {sv.namehint = "newCfg_2_w"} : (i8) -> i1
    %872 = comb.extract %869 from 2 {sv.namehint = "newCfg_2_x"} : (i8) -> i1
    %873 = comb.extract %869 from 3 {sv.namehint = "newCfg_2_a"} : (i8) -> i2
    %874 = comb.extract %869 from 7 {sv.namehint = "newCfg_2_l"} : (i8) -> i1
    %875 = comb.and bin %702, %222, %866 : i1
    %876 = comb.mux bin %875, %874, %reg_pmp_2_cfg_l : i1
    %877 = comb.mux bin %875, %873, %reg_pmp_2_cfg_a : i2
    %878 = comb.mux bin %875, %872, %reg_pmp_2_cfg_x : i1
    %879 = comb.mux bin %875, %870, %reg_pmp_2_cfg_r : i1
    %880 = comb.and bin %871, %870 {sv.namehint = "_reg_pmp_2_cfg_w_T"} : i1
    %881 = comb.mux bin %875, %880, %reg_pmp_2_cfg_w : i1
    %882 = comb.extract %reg_pmp_3_cfg_a from 1 : (i2) -> i1
    %883 = comb.xor bin %882, %true : i1
    %884 = comb.extract %reg_pmp_3_cfg_a from 0 : (i2) -> i1
    %885 = comb.and bin %reg_pmp_3_cfg_l, %883, %884 : i1
    %886 = comb.or bin %reg_pmp_2_cfg_l, %885 : i1
    %887 = comb.xor bin %886, %true : i1
    %888 = comb.and bin %702, %228, %887 : i1
    %889 = comb.mux bin %888, %839, %reg_pmp_2_addr : i30
    %890 = comb.xor bin %reg_pmp_3_cfg_l, %true : i1
    %891 = comb.extract %269 from 24 : (i64) -> i8
    %892 = comb.extract %273 from 24 : (i64) -> i8
    %893 = comb.and bin %891, %892 {sv.namehint = "_newCfg_WIRE_3"} : i8
    %894 = comb.extract %893 from 0 {sv.namehint = "newCfg_3_r"} : (i8) -> i1
    %895 = comb.extract %893 from 1 {sv.namehint = "newCfg_3_w"} : (i8) -> i1
    %896 = comb.extract %893 from 2 {sv.namehint = "newCfg_3_x"} : (i8) -> i1
    %897 = comb.extract %893 from 3 {sv.namehint = "newCfg_3_a"} : (i8) -> i2
    %898 = comb.extract %893 from 7 {sv.namehint = "newCfg_3_l"} : (i8) -> i1
    %899 = comb.and bin %702, %222, %890 : i1
    %900 = comb.mux bin %899, %898, %reg_pmp_3_cfg_l : i1
    %901 = comb.mux bin %899, %897, %reg_pmp_3_cfg_a : i2
    %902 = comb.mux bin %899, %896, %reg_pmp_3_cfg_x : i1
    %903 = comb.mux bin %899, %894, %reg_pmp_3_cfg_r : i1
    %904 = comb.and bin %895, %894 {sv.namehint = "_reg_pmp_3_cfg_w_T"} : i1
    %905 = comb.mux bin %899, %904, %reg_pmp_3_cfg_w : i1
    %906 = comb.extract %reg_pmp_4_cfg_a from 1 : (i2) -> i1
    %907 = comb.xor bin %906, %true : i1
    %908 = comb.extract %reg_pmp_4_cfg_a from 0 : (i2) -> i1
    %909 = comb.and bin %reg_pmp_4_cfg_l, %907, %908 : i1
    %910 = comb.or bin %reg_pmp_3_cfg_l, %909 : i1
    %911 = comb.xor bin %910, %true : i1
    %912 = comb.and bin %702, %230, %911 : i1
    %913 = comb.mux bin %912, %839, %reg_pmp_3_addr : i30
    %914 = comb.xor bin %reg_pmp_4_cfg_l, %true : i1
    %915 = comb.extract %269 from 32 : (i64) -> i8
    %916 = comb.extract %273 from 32 : (i64) -> i8
    %917 = comb.and bin %915, %916 {sv.namehint = "_newCfg_WIRE_4"} : i8
    %918 = comb.extract %917 from 0 {sv.namehint = "newCfg_4_r"} : (i8) -> i1
    %919 = comb.extract %917 from 1 {sv.namehint = "newCfg_4_w"} : (i8) -> i1
    %920 = comb.extract %917 from 2 {sv.namehint = "newCfg_4_x"} : (i8) -> i1
    %921 = comb.extract %917 from 3 {sv.namehint = "newCfg_4_a"} : (i8) -> i2
    %922 = comb.extract %917 from 7 {sv.namehint = "newCfg_4_l"} : (i8) -> i1
    %923 = comb.and bin %702, %222, %914 : i1
    %924 = comb.mux bin %923, %922, %reg_pmp_4_cfg_l : i1
    %925 = comb.mux bin %923, %921, %reg_pmp_4_cfg_a : i2
    %926 = comb.mux bin %923, %920, %reg_pmp_4_cfg_x : i1
    %927 = comb.mux bin %923, %918, %reg_pmp_4_cfg_r : i1
    %928 = comb.and bin %919, %918 {sv.namehint = "_reg_pmp_4_cfg_w_T"} : i1
    %929 = comb.mux bin %923, %928, %reg_pmp_4_cfg_w : i1
    %930 = comb.extract %reg_pmp_5_cfg_a from 1 : (i2) -> i1
    %931 = comb.xor bin %930, %true : i1
    %932 = comb.extract %reg_pmp_5_cfg_a from 0 : (i2) -> i1
    %933 = comb.and bin %reg_pmp_5_cfg_l, %931, %932 : i1
    %934 = comb.or bin %reg_pmp_4_cfg_l, %933 : i1
    %935 = comb.xor bin %934, %true : i1
    %936 = comb.and bin %702, %232, %935 : i1
    %937 = comb.mux bin %936, %839, %reg_pmp_4_addr : i30
    %938 = comb.xor bin %reg_pmp_5_cfg_l, %true : i1
    %939 = comb.extract %269 from 40 : (i64) -> i8
    %940 = comb.extract %273 from 40 : (i64) -> i8
    %941 = comb.and bin %939, %940 {sv.namehint = "_newCfg_WIRE_5"} : i8
    %942 = comb.extract %941 from 0 {sv.namehint = "newCfg_5_r"} : (i8) -> i1
    %943 = comb.extract %941 from 1 {sv.namehint = "newCfg_5_w"} : (i8) -> i1
    %944 = comb.extract %941 from 2 {sv.namehint = "newCfg_5_x"} : (i8) -> i1
    %945 = comb.extract %941 from 3 {sv.namehint = "newCfg_5_a"} : (i8) -> i2
    %946 = comb.extract %941 from 7 {sv.namehint = "newCfg_5_l"} : (i8) -> i1
    %947 = comb.and bin %702, %222, %938 : i1
    %948 = comb.mux bin %947, %946, %reg_pmp_5_cfg_l : i1
    %949 = comb.mux bin %947, %945, %reg_pmp_5_cfg_a : i2
    %950 = comb.mux bin %947, %944, %reg_pmp_5_cfg_x : i1
    %951 = comb.mux bin %947, %942, %reg_pmp_5_cfg_r : i1
    %952 = comb.and bin %943, %942 {sv.namehint = "_reg_pmp_5_cfg_w_T"} : i1
    %953 = comb.mux bin %947, %952, %reg_pmp_5_cfg_w : i1
    %954 = comb.extract %reg_pmp_6_cfg_a from 1 : (i2) -> i1
    %955 = comb.xor bin %954, %true : i1
    %956 = comb.extract %reg_pmp_6_cfg_a from 0 : (i2) -> i1
    %957 = comb.and bin %reg_pmp_6_cfg_l, %955, %956 : i1
    %958 = comb.or bin %reg_pmp_5_cfg_l, %957 : i1
    %959 = comb.xor bin %958, %true : i1
    %960 = comb.and bin %702, %234, %959 : i1
    %961 = comb.mux bin %960, %839, %reg_pmp_5_addr : i30
    %962 = comb.xor bin %reg_pmp_6_cfg_l, %true : i1
    %963 = comb.extract %269 from 48 : (i64) -> i8
    %964 = comb.extract %273 from 48 : (i64) -> i8
    %965 = comb.and bin %963, %964 {sv.namehint = "_newCfg_WIRE_6"} : i8
    %966 = comb.extract %965 from 0 {sv.namehint = "newCfg_6_r"} : (i8) -> i1
    %967 = comb.extract %965 from 1 {sv.namehint = "newCfg_6_w"} : (i8) -> i1
    %968 = comb.extract %965 from 2 {sv.namehint = "newCfg_6_x"} : (i8) -> i1
    %969 = comb.extract %965 from 3 {sv.namehint = "newCfg_6_a"} : (i8) -> i2
    %970 = comb.extract %965 from 7 {sv.namehint = "newCfg_6_l"} : (i8) -> i1
    %971 = comb.and bin %702, %222, %962 : i1
    %972 = comb.mux bin %971, %970, %reg_pmp_6_cfg_l : i1
    %973 = comb.mux bin %971, %969, %reg_pmp_6_cfg_a : i2
    %974 = comb.mux bin %971, %968, %reg_pmp_6_cfg_x : i1
    %975 = comb.mux bin %971, %966, %reg_pmp_6_cfg_r : i1
    %976 = comb.and bin %967, %966 {sv.namehint = "_reg_pmp_6_cfg_w_T"} : i1
    %977 = comb.mux bin %971, %976, %reg_pmp_6_cfg_w : i1
    %978 = comb.extract %reg_pmp_7_cfg_a from 1 : (i2) -> i1
    %979 = comb.xor bin %978, %true : i1
    %980 = comb.extract %reg_pmp_7_cfg_a from 0 : (i2) -> i1
    %981 = comb.and bin %reg_pmp_7_cfg_l, %979, %980 : i1
    %982 = comb.or bin %reg_pmp_6_cfg_l, %981 : i1
    %983 = comb.xor bin %982, %true : i1
    %984 = comb.and bin %702, %236, %983 : i1
    %985 = comb.mux bin %984, %839, %reg_pmp_6_addr : i30
    %986 = comb.xor bin %reg_pmp_7_cfg_l, %true : i1
    %987 = comb.extract %269 from 56 : (i64) -> i8
    %988 = comb.extract %273 from 56 : (i64) -> i8
    %989 = comb.and bin %987, %988 {sv.namehint = "_newCfg_T_49"} : i8
    %990 = comb.extract %989 from 0 {sv.namehint = "newCfg_7_r"} : (i8) -> i1
    %991 = comb.extract %989 from 1 {sv.namehint = "newCfg_7_w"} : (i8) -> i1
    %992 = comb.extract %989 from 2 {sv.namehint = "newCfg_7_x"} : (i8) -> i1
    %993 = comb.extract %989 from 3 {sv.namehint = "newCfg_7_a"} : (i8) -> i2
    %994 = comb.extract %989 from 7 {sv.namehint = "newCfg_7_l"} : (i8) -> i1
    %995 = comb.and bin %702, %222, %986 : i1
    %996 = comb.mux bin %995, %994, %reg_pmp_7_cfg_l : i1
    %997 = comb.mux bin %995, %993, %reg_pmp_7_cfg_a : i2
    %998 = comb.mux bin %995, %992, %reg_pmp_7_cfg_x : i1
    %999 = comb.mux bin %995, %990, %reg_pmp_7_cfg_r : i1
    %1000 = comb.and bin %991, %990 {sv.namehint = "_reg_pmp_7_cfg_w_T"} : i1
    %1001 = comb.mux bin %995, %1000, %reg_pmp_7_cfg_w : i1
    %1002 = comb.or bin %reg_pmp_7_cfg_l, %981 : i1
    %1003 = comb.xor bin %1002, %true : i1
    %1004 = comb.and bin %702, %238, %1003 : i1
    %1005 = comb.mux bin %1004, %839, %reg_pmp_7_addr : i30
    %1006 = comb.and bin %274, %c520_i64 {sv.namehint = "_reg_custom_0_T"} : i64
    %1007 = comb.and bin %reg_custom_0, %c-521_i64 {sv.namehint = "_reg_custom_0_T_2"} : i64
    %1008 = comb.or bin %1006, %1007 {sv.namehint = "_reg_custom_0_T_3"} : i64
    %1009 = comb.and bin %702, %251 : i1
    %1010 = comb.mux bin %1009, %1008, %reg_custom_0 : i64
    hw.output %698, %492, %494, %502, %505, %512, %false, %645, %544, %545, %reg_debug, %reg_wfi, %546, %reg_mstatus_v, %reg_mstatus_v, %644, %25, %71, %65, %reg_bp_0_control_action, %reg_bp_0_control_tmatch, %reg_bp_0_control_x, %reg_bp_0_control_w, %reg_bp_0_control_r, %reg_bp_0_address, %reg_pmp_0_cfg_l, %reg_pmp_0_cfg_a, %reg_pmp_0_cfg_x, %reg_pmp_0_cfg_w, %reg_pmp_0_cfg_r, %reg_pmp_0_addr, %80, %reg_pmp_1_cfg_l, %reg_pmp_1_cfg_a, %reg_pmp_1_cfg_x, %reg_pmp_1_cfg_w, %reg_pmp_1_cfg_r, %reg_pmp_1_addr, %89, %reg_pmp_2_cfg_l, %reg_pmp_2_cfg_a, %reg_pmp_2_cfg_x, %reg_pmp_2_cfg_w, %reg_pmp_2_cfg_r, %reg_pmp_2_addr, %98, %reg_pmp_3_cfg_l, %reg_pmp_3_cfg_a, %reg_pmp_3_cfg_x, %reg_pmp_3_cfg_w, %reg_pmp_3_cfg_r, %reg_pmp_3_addr, %107, %reg_pmp_4_cfg_l, %reg_pmp_4_cfg_a, %reg_pmp_4_cfg_x, %reg_pmp_4_cfg_w, %reg_pmp_4_cfg_r, %reg_pmp_4_addr, %116, %reg_pmp_5_cfg_l, %reg_pmp_5_cfg_a, %reg_pmp_5_cfg_x, %reg_pmp_5_cfg_w, %reg_pmp_5_cfg_r, %reg_pmp_5_addr, %125, %reg_pmp_6_cfg_l, %reg_pmp_6_cfg_a, %reg_pmp_6_cfg_x, %reg_pmp_6_cfg_w, %reg_pmp_6_cfg_r, %reg_pmp_6_addr, %134, %reg_pmp_7_cfg_l, %reg_pmp_7_cfg_a, %reg_pmp_7_cfg_x, %reg_pmp_7_cfg_w, %reg_pmp_7_cfg_r, %reg_pmp_7_addr, %143, %1, %reg_custom_0 : i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i32, i1, i1, i34, i64, i1, i64, i1, i2, i1, i1, i1, i33, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i64
  }
  hw.module private @BreakpointUnit(in %io_status_debug : i1, in %io_bp_0_control_action : i1, in %io_bp_0_control_tmatch : i2, in %io_bp_0_control_x : i1, in %io_bp_0_control_w : i1, in %io_bp_0_control_r : i1, in %io_bp_0_address : i33, in %io_pc : i33, in %io_ea : i33, out io_xcpt_if : i1, out io_xcpt_ld : i1, out io_xcpt_st : i1, out io_debug_if : i1, out io_debug_ld : i1, out io_debug_st : i1) {
    %c-1_i33 = hw.constant -1 : i33
    %true = hw.constant true
    %0 = comb.xor bin %io_status_debug, %true {sv.namehint = "_en_T"} : i1
    %1 = comb.extract %io_bp_0_control_tmatch from 1 {sv.namehint = "_x_T_1"} : (i2) -> i1
    %2 = comb.icmp bin uge %io_ea, %io_bp_0_address {sv.namehint = "_w_T_2"} : i33
    %3 = comb.extract %io_bp_0_control_tmatch from 0 {sv.namehint = "_x_T_16"} : (i2) -> i1
    %4 = comb.xor bin %2, %3 {sv.namehint = "_r_T_4"} : i1
    %5 = comb.xor bin %io_ea, %c-1_i33 {sv.namehint = "_w_T_5"} : i33
    %6 = comb.extract %io_bp_0_address from 0 {sv.namehint = "_x_T_17"} : (i33) -> i1
    %7 = comb.and bin %3, %6 {sv.namehint = "_r_T_8"} : i1
    %8 = comb.extract %io_bp_0_address from 1 {sv.namehint = "_x_T_19"} : (i33) -> i1
    %9 = comb.and bin %7, %8 {sv.namehint = "_r_T_10"} : i1
    %10 = comb.extract %io_bp_0_address from 2 {sv.namehint = "_x_T_21"} : (i33) -> i1
    %11 = comb.and bin %9, %10 {sv.namehint = "_r_T_12"} : i1
    %12 = comb.concat %11, %9, %7, %3 {sv.namehint = "_r_T_13"} : i1, i1, i1, i1
    %13 = comb.extract %5 from 4 : (i33) -> i29
    %14 = comb.extract %5 from 0 : (i33) -> i4
    %15 = comb.or bin %14, %12 : i4
    %16 = comb.concat %13, %15 {sv.namehint = "_r_T_14"} : i29, i4
    %17 = comb.xor bin %io_bp_0_address, %c-1_i33 {sv.namehint = "_x_T_15"} : i33
    %18 = comb.and bin %3, %6 {sv.namehint = "_r_T_18"} : i1
    %19 = comb.and bin %18, %8 {sv.namehint = "_r_T_20"} : i1
    %20 = comb.and bin %19, %10 {sv.namehint = "_r_T_22"} : i1
    %21 = comb.concat %20, %19, %18, %3 {sv.namehint = "_r_T_23"} : i1, i1, i1, i1
    %22 = comb.extract %17 from 4 : (i33) -> i29
    %23 = comb.extract %17 from 0 : (i33) -> i4
    %24 = comb.or bin %23, %21 : i4
    %25 = comb.concat %22, %24 {sv.namehint = "_r_T_24"} : i29, i4
    %26 = comb.icmp bin eq %16, %25 {sv.namehint = "_r_T_25"} : i33
    %27 = comb.mux bin %1, %4, %26 {sv.namehint = "_r_T_26"} : i1
    %28 = comb.and bin %0, %io_bp_0_control_r, %27 {sv.namehint = "r"} : i1
    %29 = comb.xor bin %2, %3 {sv.namehint = "_w_T_4"} : i1
    %30 = comb.and bin %3, %6 {sv.namehint = "_w_T_8"} : i1
    %31 = comb.and bin %30, %8 {sv.namehint = "_w_T_10"} : i1
    %32 = comb.and bin %31, %10 {sv.namehint = "_w_T_12"} : i1
    %33 = comb.concat %32, %31, %30, %3 {sv.namehint = "_w_T_13"} : i1, i1, i1, i1
    %34 = comb.or bin %14, %33 : i4
    %35 = comb.concat %13, %34 {sv.namehint = "_w_T_14"} : i29, i4
    %36 = comb.and bin %3, %6 {sv.namehint = "_w_T_18"} : i1
    %37 = comb.and bin %36, %8 {sv.namehint = "_w_T_20"} : i1
    %38 = comb.and bin %37, %10 {sv.namehint = "_w_T_22"} : i1
    %39 = comb.concat %38, %37, %36, %3 {sv.namehint = "_w_T_23"} : i1, i1, i1, i1
    %40 = comb.or bin %23, %39 : i4
    %41 = comb.concat %22, %40 {sv.namehint = "_w_T_24"} : i29, i4
    %42 = comb.icmp bin eq %35, %41 {sv.namehint = "_w_T_25"} : i33
    %43 = comb.mux bin %1, %29, %42 {sv.namehint = "_w_T_26"} : i1
    %44 = comb.and bin %0, %io_bp_0_control_w, %43 {sv.namehint = "w"} : i1
    %45 = comb.icmp bin uge %io_pc, %io_bp_0_address {sv.namehint = "_x_T_2"} : i33
    %46 = comb.xor bin %45, %3 {sv.namehint = "_x_T_4"} : i1
    %47 = comb.xor bin %io_pc, %c-1_i33 {sv.namehint = "_x_T_5"} : i33
    %48 = comb.and bin %3, %6 {sv.namehint = "_x_T_8"} : i1
    %49 = comb.and bin %48, %8 {sv.namehint = "_x_T_10"} : i1
    %50 = comb.and bin %49, %10 {sv.namehint = "_x_T_12"} : i1
    %51 = comb.concat %50, %49, %48, %3 {sv.namehint = "_x_T_13"} : i1, i1, i1, i1
    %52 = comb.extract %47 from 4 : (i33) -> i29
    %53 = comb.extract %47 from 0 : (i33) -> i4
    %54 = comb.or bin %53, %51 : i4
    %55 = comb.concat %52, %54 {sv.namehint = "_x_T_14"} : i29, i4
    %56 = comb.and bin %3, %6 {sv.namehint = "_x_T_18"} : i1
    %57 = comb.and bin %56, %8 {sv.namehint = "_x_T_20"} : i1
    %58 = comb.and bin %57, %10 {sv.namehint = "_x_T_22"} : i1
    %59 = comb.concat %58, %57, %56, %3 {sv.namehint = "_x_T_23"} : i1, i1, i1, i1
    %60 = comb.or bin %23, %59 : i4
    %61 = comb.concat %22, %60 {sv.namehint = "_x_T_24"} : i29, i4
    %62 = comb.icmp bin eq %55, %61 {sv.namehint = "_x_T_25"} : i33
    %63 = comb.mux bin %1, %46, %62 {sv.namehint = "_x_T_26"} : i1
    %64 = comb.and bin %0, %io_bp_0_control_x, %63 {sv.namehint = "x"} : i1
    %65 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_ld_T"} : i1
    %66 = comb.and %28, %65 {sv.namehint = "io_xcpt_ld"} : i1
    %67 = comb.and %28, %io_bp_0_control_action {sv.namehint = "io_debug_ld"} : i1
    %68 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_st_T"} : i1
    %69 = comb.and %44, %68 {sv.namehint = "io_xcpt_st"} : i1
    %70 = comb.and %44, %io_bp_0_control_action {sv.namehint = "io_debug_st"} : i1
    %71 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_if_T"} : i1
    %72 = comb.and %64, %71 {sv.namehint = "io_xcpt_if"} : i1
    %73 = comb.and %64, %io_bp_0_control_action {sv.namehint = "io_debug_if"} : i1
    hw.output %72, %66, %69, %73, %67, %70 : i1, i1, i1, i1, i1, i1
  }
  hw.module private @ALU(in %io_dw : i1, in %io_fn : i4, in %io_in2 : i64, in %io_in1 : i64, out io_out : i64, out io_adder_out : i64, out io_cmp_out : i1) {
    %c7_i4 = hw.constant 7 : i4
    %c6_i4 = hw.constant 6 : i4
    %c4_i4 = hw.constant 4 : i4
    %c1_i4 = hw.constant 1 : i4
    %c5_i4 = hw.constant 5 : i4
    %c0_i63 = hw.constant 0 : i63
    %c0_i59 = hw.constant 0 : i59
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i8 = hw.constant 0 : i8
    %c0_i16 = hw.constant 0 : i16
    %false = hw.constant false
    %c0_i32 = hw.constant 0 : i32
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-4294901761_i48 = hw.constant -4294901761 : i48
    %c-280379743338241_i56 = hw.constant -280379743338241 : i56
    %c-67818912035696881_i60 = hw.constant -67818912035696881 : i60
    %c-922337203685477581_i62 = hw.constant -922337203685477581 : i62
    %c-3074457345618258603_i63 = hw.constant -3074457345618258603 : i63
    %c0_i64 = hw.constant 0 : i64
    %0 = comb.extract %io_fn from 3 {sv.namehint = "_shout_r_T"} : (i4) -> i1
    %1 = comb.replicate %0 : (i1) -> i64
    %2 = comb.xor %1, %io_in2 {sv.namehint = "in2_inv"} : i64
    %3 = comb.xor bin %io_in1, %2 {sv.namehint = "in1_xor_in2"} : i64
    %4 = comb.concat %c0_i63, %0 : i63, i1
    %5 = comb.add bin %io_in1, %2, %4 {sv.namehint = "_io_adder_out_T_3"} : i64
    %6 = comb.extract %io_in1 from 63 {sv.namehint = "_slt_T_6"} : (i64) -> i1
    %7 = comb.extract %io_in2 from 63 {sv.namehint = "_slt_T_5"} : (i64) -> i1
    %8 = comb.icmp bin eq %6, %7 {sv.namehint = "_slt_T_2"} : i1
    %9 = comb.extract %5 from 63 {sv.namehint = "_slt_T_3"} : (i64) -> i1
    %10 = comb.extract %io_fn from 1 {sv.namehint = "_slt_T_4"} : (i4) -> i1
    %11 = comb.mux bin %10, %7, %6 {sv.namehint = "_slt_T_7"} : i1
    %12 = comb.mux bin %8, %9, %11 {sv.namehint = "slt"} : i1
    %13 = comb.extract %io_fn from 0 {sv.namehint = "_io_cmp_out_T"} : (i4) -> i1
    %14 = comb.icmp bin eq %3, %c0_i64 {sv.namehint = "_io_cmp_out_T_3"} : i64
    %15 = comb.mux bin %0, %12, %14 {sv.namehint = "_io_cmp_out_T_4"} : i1
    %16 = comb.xor bin %13, %15 {sv.namehint = "io_cmp_out"} : i1
    %17 = comb.extract %io_in1 from 31 {sv.namehint = "_shin_hi_32_T_1"} : (i64) -> i1
    %18 = comb.and bin %0, %17 {sv.namehint = "_shin_hi_32_T_3"} : i1
    %19 = comb.replicate %18 {sv.namehint = "shin_hi_32"} : (i1) -> i32
    %20 = comb.extract %io_in1 from 32 {sv.namehint = "_shin_hi_T_1"} : (i64) -> i32
    %21 = comb.mux bin %io_dw, %20, %19 {sv.namehint = "shin_hi"} : i32
    %22 = comb.extract %io_in2 from 5 {sv.namehint = "_shamt_T"} : (i64) -> i1
    %23 = comb.and bin %22, %io_dw {sv.namehint = "_shamt_T_2"} : i1
    %24 = comb.extract %io_in2 from 0 {sv.namehint = "_shamt_T_3"} : (i64) -> i5
    %25 = comb.extract %io_in1 from 0 {sv.namehint = "_shin_T_7"} : (i64) -> i32
    %26 = comb.concat %21, %25 {sv.namehint = "shin_r"} : i32, i32
    %27 = comb.icmp bin eq %io_fn, %c5_i4 {sv.namehint = "_shout_T"} : i4
    %28 = comb.icmp bin eq %io_fn, %c-5_i4 {sv.namehint = "_shout_T_1"} : i4
    %29 = comb.or bin %27, %28 {sv.namehint = "_shin_T_2"} : i1
    %30 = comb.concat %c0_i32, %21 : i32, i32
    %31 = comb.concat %25, %c0_i32 {sv.namehint = "_shin_T_10"} : i32, i32
    %32 = comb.or bin %30, %31 {sv.namehint = "_shin_T_11"} : i64
    %33 = comb.extract %32 from 16 {sv.namehint = "_shin_T_15"} : (i64) -> i48
    %34 = comb.and bin %33, %c-4294901761_i48 : i48
    %35 = comb.concat %c0_i16, %34 : i16, i48
    %36 = comb.extract %32 from 0 {sv.namehint = "_shin_T_17"} : (i64) -> i48
    %37 = comb.and %36, %c-4294901761_i48 : i48
    %38 = comb.concat %37, %c0_i16 {sv.namehint = "_shin_T_20"} : i48, i16
    %39 = comb.or bin %35, %38 {sv.namehint = "_shin_T_21"} : i64
    %40 = comb.extract %39 from 8 {sv.namehint = "_shin_T_25"} : (i64) -> i56
    %41 = comb.and bin %40, %c-280379743338241_i56 : i56
    %42 = comb.concat %c0_i8, %41 : i8, i56
    %43 = comb.extract %39 from 0 {sv.namehint = "_shin_T_27"} : (i64) -> i56
    %44 = comb.and %43, %c-280379743338241_i56 : i56
    %45 = comb.concat %44, %c0_i8 {sv.namehint = "_shin_T_30"} : i56, i8
    %46 = comb.or bin %42, %45 {sv.namehint = "_shin_T_31"} : i64
    %47 = comb.extract %46 from 4 {sv.namehint = "_shin_T_35"} : (i64) -> i60
    %48 = comb.and bin %47, %c-67818912035696881_i60 : i60
    %49 = comb.concat %c0_i4, %48 : i4, i60
    %50 = comb.extract %46 from 0 {sv.namehint = "_shin_T_37"} : (i64) -> i60
    %51 = comb.and %50, %c-67818912035696881_i60 : i60
    %52 = comb.concat %51, %c0_i4 {sv.namehint = "_shin_T_40"} : i60, i4
    %53 = comb.or bin %49, %52 {sv.namehint = "_shin_T_41"} : i64
    %54 = comb.extract %53 from 2 {sv.namehint = "_shin_T_45"} : (i64) -> i62
    %55 = comb.and bin %54, %c-922337203685477581_i62 : i62
    %56 = comb.concat %c0_i2, %55 : i2, i62
    %57 = comb.extract %53 from 0 {sv.namehint = "_shin_T_47"} : (i64) -> i62
    %58 = comb.and %57, %c-922337203685477581_i62 : i62
    %59 = comb.concat %58, %c0_i2 {sv.namehint = "_shin_T_50"} : i62, i2
    %60 = comb.or bin %56, %59 {sv.namehint = "_shin_T_51"} : i64
    %61 = comb.extract %60 from 1 {sv.namehint = "_shin_T_55"} : (i64) -> i63
    %62 = comb.and bin %61, %c-3074457345618258603_i63 : i63
    %63 = comb.concat %false, %62 : i1, i63
    %64 = comb.extract %60 from 0 {sv.namehint = "_shin_T_57"} : (i64) -> i63
    %65 = comb.and %64, %c-3074457345618258603_i63 : i63
    %66 = comb.concat %65, %false {sv.namehint = "_shin_T_60"} : i63, i1
    %67 = comb.or bin %63, %66 {sv.namehint = "_shin_T_61"} : i64
    %68 = comb.mux bin %29, %26, %67 {sv.namehint = "shin"} : i64
    %69 = comb.extract %68 from 63 {sv.namehint = "_shout_r_T_1"} : (i64) -> i1
    %70 = comb.and bin %0, %69 {sv.namehint = "_shout_r_T_2"} : i1
    %71 = comb.concat %70, %68 {sv.namehint = "_shout_r_T_3"} : i1, i64
    %72 = comb.concat %c0_i59, %23, %24 : i59, i1, i5
    %73 = comb.shrs bin %71, %72 {sv.namehint = "_shout_r_T_5"} : i65
    %74 = comb.extract %73 from 0 {sv.namehint = "shout_r"} : (i65) -> i64
    %75 = comb.extract %73 from 32 {sv.namehint = "_shout_l_T_2"} : (i65) -> i32
    %76 = comb.concat %c0_i32, %75 : i32, i32
    %77 = comb.extract %73 from 0 {sv.namehint = "_shout_l_T_4"} : (i65) -> i32
    %78 = comb.concat %77, %c0_i32 {sv.namehint = "_shout_l_T_7"} : i32, i32
    %79 = comb.or bin %76, %78 {sv.namehint = "_shout_l_T_8"} : i64
    %80 = comb.extract %79 from 16 {sv.namehint = "_shout_l_T_12"} : (i64) -> i48
    %81 = comb.and bin %80, %c-4294901761_i48 : i48
    %82 = comb.concat %c0_i16, %81 : i16, i48
    %83 = comb.extract %79 from 0 {sv.namehint = "_shout_l_T_14"} : (i64) -> i48
    %84 = comb.and %83, %c-4294901761_i48 : i48
    %85 = comb.concat %84, %c0_i16 {sv.namehint = "_shout_l_T_17"} : i48, i16
    %86 = comb.or bin %82, %85 {sv.namehint = "_shout_l_T_18"} : i64
    %87 = comb.extract %86 from 8 {sv.namehint = "_shout_l_T_22"} : (i64) -> i56
    %88 = comb.and bin %87, %c-280379743338241_i56 : i56
    %89 = comb.concat %c0_i8, %88 : i8, i56
    %90 = comb.extract %86 from 0 {sv.namehint = "_shout_l_T_24"} : (i64) -> i56
    %91 = comb.and %90, %c-280379743338241_i56 : i56
    %92 = comb.concat %91, %c0_i8 {sv.namehint = "_shout_l_T_27"} : i56, i8
    %93 = comb.or bin %89, %92 {sv.namehint = "_shout_l_T_28"} : i64
    %94 = comb.extract %93 from 4 {sv.namehint = "_shout_l_T_32"} : (i64) -> i60
    %95 = comb.and bin %94, %c-67818912035696881_i60 : i60
    %96 = comb.concat %c0_i4, %95 : i4, i60
    %97 = comb.extract %93 from 0 {sv.namehint = "_shout_l_T_34"} : (i64) -> i60
    %98 = comb.and %97, %c-67818912035696881_i60 : i60
    %99 = comb.concat %98, %c0_i4 {sv.namehint = "_shout_l_T_37"} : i60, i4
    %100 = comb.or bin %96, %99 {sv.namehint = "_shout_l_T_38"} : i64
    %101 = comb.extract %100 from 2 {sv.namehint = "_shout_l_T_42"} : (i64) -> i62
    %102 = comb.and bin %101, %c-922337203685477581_i62 : i62
    %103 = comb.concat %c0_i2, %102 : i2, i62
    %104 = comb.extract %100 from 0 {sv.namehint = "_shout_l_T_44"} : (i64) -> i62
    %105 = comb.and %104, %c-922337203685477581_i62 : i62
    %106 = comb.concat %105, %c0_i2 {sv.namehint = "_shout_l_T_47"} : i62, i2
    %107 = comb.or bin %103, %106 {sv.namehint = "_shout_l_T_48"} : i64
    %108 = comb.extract %107 from 1 {sv.namehint = "_shout_l_T_52"} : (i64) -> i63
    %109 = comb.and bin %108, %c-3074457345618258603_i63 : i63
    %110 = comb.concat %false, %109 : i1, i63
    %111 = comb.extract %107 from 0 {sv.namehint = "_shout_l_T_54"} : (i64) -> i63
    %112 = comb.and %111, %c-3074457345618258603_i63 : i63
    %113 = comb.concat %112, %false {sv.namehint = "_shout_l_T_57"} : i63, i1
    %114 = comb.or bin %110, %113 {sv.namehint = "shout_l"} : i64
    %115 = comb.or bin %27, %28 {sv.namehint = "_shout_T_2"} : i1
    %116 = comb.mux bin %115, %74, %c0_i64 {sv.namehint = "_shout_T_3"} : i64
    %117 = comb.icmp bin eq %io_fn, %c1_i4 {sv.namehint = "_shout_T_4"} : i4
    %118 = comb.mux bin %117, %114, %c0_i64 {sv.namehint = "_shout_T_5"} : i64
    %119 = comb.icmp bin eq %io_fn, %c4_i4 {sv.namehint = "_logic_T"} : i4
    %120 = comb.icmp bin eq %io_fn, %c6_i4 {sv.namehint = "_logic_T_4"} : i4
    %121 = comb.or bin %119, %120 {sv.namehint = "_logic_T_2"} : i1
    %122 = comb.mux bin %121, %3, %c0_i64 {sv.namehint = "_logic_T_3"} : i64
    %123 = comb.icmp bin eq %io_fn, %c7_i4 {sv.namehint = "_logic_T_5"} : i4
    %124 = comb.or bin %120, %123 {sv.namehint = "_logic_T_6"} : i1
    %125 = comb.and bin %io_in1, %io_in2 {sv.namehint = "_logic_T_7"} : i64
    %126 = comb.mux bin %124, %125, %c0_i64 {sv.namehint = "_logic_T_8"} : i64
    %127 = comb.icmp bin ugt %io_fn, %c-5_i4 {sv.namehint = "_shift_logic_T"} : i4
    %128 = comb.and bin %127, %12 {sv.namehint = "_shift_logic_T_1"} : i1
    %129 = comb.concat %c0_i63, %128 : i63, i1
    %130 = comb.or bin %129, %122, %126, %116, %118 {sv.namehint = "shift_logic"} : i64
    %131 = comb.icmp bin eq %io_fn, %c0_i4 {sv.namehint = "_out_T"} : i4
    %132 = comb.icmp bin eq %io_fn, %c-6_i4 {sv.namehint = "_out_T_1"} : i4
    %133 = comb.or bin %131, %132 {sv.namehint = "_out_T_2"} : i1
    %134 = comb.mux bin %133, %5, %130 {sv.namehint = "out"} : i64
    %135 = comb.extract %134 from 31 {sv.namehint = "_io_out_T_1"} : (i64) -> i1
    %136 = comb.replicate %135 {sv.namehint = "_io_out_T_2"} : (i1) -> i32
    %137 = comb.extract %134 from 0 {sv.namehint = "_io_out_T_3"} : (i64) -> i32
    %138 = comb.concat %136, %137 {sv.namehint = "_io_out_T_4"} : i32, i32
    %139 = comb.mux bin %io_dw, %134, %138 {sv.namehint = "io_out"} : i64
    hw.output %139, %5, %16 : i64, i64, i1
  }
  hw.module private @MulDiv(in %clock : !seq.clock, in %reset : i1, out io_req_ready : i1, in %io_req_valid : i1, in %io_req_bits_fn : i4, in %io_req_bits_dw : i1, in %io_req_bits_in1 : i64, in %io_req_bits_in2 : i64, in %io_req_bits_tag : i5, in %io_kill : i1, in %io_resp_ready : i1, out io_resp_valid : i1, out io_resp_bits_data : i64, out io_resp_bits_tag : i5) {
    %c0_i5 = hw.constant 0 : i5
    %c1_i7 = hw.constant 1 : i7
    %c0_i64 = hw.constant 0 : i64
    %c63_i7 = hw.constant 63 : i7
    %c62_i7 = hw.constant 62 : i7
    %c0_i7 = hw.constant 0 : i7
    %c0_i66 = hw.constant 0 : i66
    %c0_i2 = hw.constant 0 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c0_i3 = hw.constant 0 : i3
    %false = hw.constant false
    %true = hw.constant true
    %c1_i3 = hw.constant 1 : i3
    %c3_i3 = hw.constant 3 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c2_i3 = hw.constant 2 : i3
    %c-64_i7 = hw.constant -64 : i7
    %c-2_i3 = hw.constant -2 : i3
    %state = seq.firreg %113 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %req_dw = seq.firreg %127 clock %clock {firrtl.random_init_start = 7 : ui64} : i1
    %req_tag = seq.firreg %128 clock %clock {firrtl.random_init_start = 136 : ui64, sv.namehint = "req_tag"} : i5
    %count = seq.firreg %119 clock %clock {firrtl.random_init_start = 141 : ui64} : i7
    %neg_out = seq.firreg %122 clock %clock {firrtl.random_init_start = 148 : ui64} : i1
    %isHi = seq.firreg %114 clock %clock {firrtl.random_init_start = 149 : ui64} : i1
    %resHi = seq.firreg %116 clock %clock {firrtl.random_init_start = 150 : ui64} : i1
    %divisor = seq.firreg %124 clock %clock {firrtl.random_init_start = 151 : ui64} : i65
    %remainder = seq.firreg %126 clock %clock {firrtl.random_init_start = 216 : ui64} : i130
    %0 = comb.xor bin %19, %c-1_i3 {sv.namehint = "decoded_invInputs"} : i3
    %1 = comb.extract %0 from 0 {sv.namehint = "decoded_andMatrixInput_0"} : (i3) -> i1
    %2 = comb.extract %0 from 2 {sv.namehint = "decoded_andMatrixInput_1"} : (i3) -> i1
    %3 = comb.extract %0 from 1 {sv.namehint = "decoded_andMatrixInput_0_2"} : (i3) -> i1
    %4 = comb.concat %3, %2 {sv.namehint = "_decoded_T_2"} : i1, i1
    %5 = comb.icmp bin eq %4, %c-1_i2 {sv.namehint = "_decoded_T_3"} : i2
    %6 = comb.extract %io_req_bits_fn from 0 {sv.namehint = "decoded_andMatrixInput_0_3"} : (i4) -> i1
    %7 = comb.concat %6, %2 {sv.namehint = "_decoded_T_4"} : i1, i1
    %8 = comb.icmp bin eq %7, %c-1_i2 {sv.namehint = "_decoded_T_5"} : i2
    %9 = comb.extract %io_req_bits_fn from 1 {sv.namehint = "decoded_andMatrixInput_0_4"} : (i4) -> i1
    %10 = comb.extract %io_req_bits_fn from 2 {sv.namehint = "decoded_andMatrixInput_1_2"} : (i4) -> i1
    %11 = comb.concat %1, %10 {sv.namehint = "_decoded_T_7"} : i1, i1
    %12 = comb.icmp bin eq %11, %c-1_i2 {sv.namehint = "_decoded_T_8"} : i2
    %13 = comb.concat %5, %12 {sv.namehint = "_decoded_orMatrixOutputs_T"} : i1, i1
    %14 = comb.icmp bin ne %13, %c0_i2 {sv.namehint = "_decoded_orMatrixOutputs_T_1"} : i2
    %15 = comb.concat %1, %5 {sv.namehint = "_decoded_orMatrixOutputs_T_2"} : i1, i1
    %16 = comb.icmp bin ne %15, %c0_i2 {sv.namehint = "_decoded_orMatrixOutputs_T_3"} : i2
    %17 = comb.concat %8, %9 {sv.namehint = "_decoded_orMatrixOutputs_T_4"} : i1, i1
    %18 = comb.icmp bin ne %17, %c0_i2 {sv.namehint = "_decoded_orMatrixOutputs_T_5"} : i2
    %19 = comb.extract %io_req_bits_fn from 0 {sv.namehint = "decoded_plaInput"} : (i4) -> i3
    %20 = comb.xor bin %io_req_bits_dw, %true {sv.namehint = "_count_T_5"} : i1
    %21 = comb.extract %io_req_bits_in1 from 31 {sv.namehint = "_sign_T"} : (i64) -> i1
    %22 = comb.extract %io_req_bits_in1 from 63 {sv.namehint = "_sign_T_1"} : (i64) -> i1
    %23 = comb.mux bin %io_req_bits_dw, %22, %21 {sv.namehint = "_sign_T_2"} : i1
    %24 = comb.and bin %16, %23 {sv.namehint = "lhs_sign"} : i1
    %25 = comb.replicate %24 {sv.namehint = "_hi_T_1"} : (i1) -> i32
    %26 = comb.extract %io_req_bits_in1 from 32 {sv.namehint = "_hi_T_2"} : (i64) -> i32
    %27 = comb.mux bin %io_req_bits_dw, %26, %25 {sv.namehint = "hi"} : i32
    %28 = comb.extract %io_req_bits_in1 from 0 : (i64) -> i32
    %29 = comb.extract %io_req_bits_in2 from 31 {sv.namehint = "_sign_T_3"} : (i64) -> i1
    %30 = comb.extract %io_req_bits_in2 from 63 {sv.namehint = "_sign_T_4"} : (i64) -> i1
    %31 = comb.mux bin %io_req_bits_dw, %30, %29 {sv.namehint = "_sign_T_5"} : i1
    %32 = comb.and bin %14, %31 {sv.namehint = "rhs_sign"} : i1
    %33 = comb.replicate %32 {sv.namehint = "_hi_T_4"} : (i1) -> i32
    %34 = comb.extract %io_req_bits_in2 from 32 {sv.namehint = "_hi_T_5"} : (i64) -> i32
    %35 = comb.mux bin %io_req_bits_dw, %34, %33 {sv.namehint = "hi_1"} : i32
    %36 = comb.extract %io_req_bits_in2 from 0 : (i64) -> i32
    %37 = comb.extract %remainder from 64 {sv.namehint = "_subtractor_T"} : (i130) -> i65
    %38 = comb.sub bin %37, %divisor {sv.namehint = "_subtractor_T_1"} : i65
    %39 = comb.extract %remainder from 65 {sv.namehint = "_result_T"} : (i130) -> i64
    %40 = comb.extract %remainder from 0 {sv.namehint = "_unrolls_T_3"} : (i130) -> i64
    %41 = comb.mux bin %resHi, %39, %40 {sv.namehint = "result"} : i64
    %42 = comb.sub bin %c0_i64, %41 {sv.namehint = "negated_remainder"} : i64
    %43 = comb.icmp bin eq %state, %c1_i3 : i3
    %44 = comb.extract %remainder from 63 : (i130) -> i1
    %45 = comb.concat %c0_i66, %42 : i66, i64
    %46 = comb.and bin %43, %44 : i1
    %47 = comb.extract %divisor from 63 : (i65) -> i1
    %48 = comb.and bin %43, %47 : i1
    %49 = comb.mux bin %48, %38, %divisor : i65
    %50 = comb.mux bin %43, %c3_i3, %state : i3
    %51 = comb.icmp bin eq %state, %c-3_i3 : i3
    %52 = comb.or %51, %46 : i1
    %53 = comb.mux bin %52, %45, %remainder : i130
    %54 = comb.mux bin %51, %c-1_i3, %50 : i3
    %55 = comb.xor %51, %true : i1
    %56 = comb.and %55, %resHi : i1
    %57 = comb.icmp bin eq %state, %c2_i3 : i3
    %58 = comb.extract %remainder from 65 {sv.namehint = "_mulReg_T"} : (i130) -> i65
    %59 = comb.extract %remainder from 64 {sv.namehint = "mplierSign"} : (i130) -> i1
    %60 = comb.extract %remainder from 0 {sv.namehint = "_prod_T"} : (i130) -> i1
    %61 = comb.extract %divisor from 64 : (i65) -> i1
    %62 = comb.replicate %59 : (i1) -> i65
    %63 = comb.concat %62, %60 : i65, i1
    %64 = comb.concat %61, %divisor : i1, i65
    %65 = comb.mul bin %63, %64 {sv.namehint = "_prod_T_3"} : i66
    %66 = comb.extract %remainder from 129 : (i130) -> i1
    %67 = comb.concat %66, %58 : i1, i65
    %68 = comb.add bin %65, %67 {sv.namehint = "_prod_T_4"} : i66
    %69 = comb.extract %remainder from 1 {sv.namehint = "_nextMulReg_T"} : (i130) -> i63
    %70 = comb.icmp bin eq %count, %c62_i7 {sv.namehint = "_nextMplierSign_T"} : i7
    %71 = comb.and bin %70, %neg_out {sv.namehint = "nextMplierSign"} : i1
    %72 = comb.extract %68 from 1 {sv.namehint = "_remainder_T"} : (i66) -> i65
    %73 = comb.extract %68 from 0 : (i66) -> i1
    %74 = comb.concat %72, %71, %73, %69 {sv.namehint = "_remainder_T_2"} : i65, i1, i1, i63
    %75 = comb.mux bin %57, %74, %53 : i130
    %76 = comb.add bin %count, %c1_i7 {sv.namehint = "_count_T"} : i7
    %77 = comb.mux bin %57, %76, %count : i7
    %78 = comb.icmp bin eq %count, %c63_i7 : i7
    %79 = comb.and bin %57, %78 : i1
    %80 = comb.mux bin %79, %c-2_i3, %54 : i3
    %81 = comb.icmp bin eq %state, %c3_i3 : i3
    %82 = comb.extract %38 from 64 {sv.namehint = "unrolls_less"} : (i65) -> i1
    %83 = comb.extract %remainder from 64 {sv.namehint = "_unrolls_T"} : (i130) -> i64
    %84 = comb.extract %38 from 0 {sv.namehint = "_unrolls_T_1"} : (i65) -> i64
    %85 = comb.mux bin %82, %83, %84 {sv.namehint = "_unrolls_T_2"} : i64
    %86 = comb.xor bin %82, %true {sv.namehint = "_unrolls_T_4"} : i1
    %87 = comb.concat %false, %85, %40, %86 : i1, i64, i64, i1
    %88 = comb.mux bin %81, %87, %75 : i130
    %89 = comb.icmp bin eq %count, %c-64_i7 : i7
    %90 = comb.xor %neg_out, %true : i1
    %91 = comb.concat %true, %90, %true {sv.namehint = "_state_T"} : i1, i1, i1
    %92 = comb.and bin %81, %89 : i1
    %93 = comb.mux bin %92, %91, %80 : i3
    %94 = comb.and %81, %89 : i1
    %95 = comb.or %94, %79 : i1
    %96 = comb.mux bin %95, %isHi, %56 : i1
    %97 = comb.add bin %count, %c1_i7 {sv.namehint = "_count_T_2"} : i7
    %98 = comb.mux bin %81, %97, %77 : i7
    %99 = comb.icmp bin eq %count, %c0_i7 {sv.namehint = "_divby0_T"} : i7
    %100 = comb.xor bin %82, %true {sv.namehint = "_divby0_T_2"} : i1
    %101 = comb.xor bin %isHi, %true : i1
    %102 = comb.and bin %81, %99, %100, %101 : i1
    %103 = comb.xor %102, %true : i1
    %104 = comb.and %103, %neg_out : i1
    %105 = comb.and bin %io_resp_ready, %140 : i1
    %106 = comb.or bin %105, %io_kill : i1
    %107 = comb.mux bin %106, %c0_i3, %93 : i3
    %108 = comb.and bin %141, %io_req_valid : i1
    %109 = comb.or bin %24, %32 {sv.namehint = "_state_T_1"} : i1
    %110 = comb.xor %109, %true : i1
    %111 = comb.concat %false, %110, %true {sv.namehint = "_state_T_2"} : i1, i1, i1
    %112 = comb.mux bin %2, %c2_i3, %111 {sv.namehint = "_state_T_3"} : i3
    %113 = comb.mux bin %108, %112, %107 : i3
    %114 = comb.mux bin %108, %18, %isHi : i1
    %115 = comb.xor %108, %true : i1
    %116 = comb.and %115, %96 : i1
    %117 = comb.and bin %2, %20 {sv.namehint = "_count_T_6"} : i1
    %118 = comb.concat %false, %117, %c0_i5 : i1, i1, i5
    %119 = comb.mux bin %108, %118, %98 : i7
    %120 = comb.icmp bin ne %24, %32 {sv.namehint = "_neg_out_T"} : i1
    %121 = comb.mux bin %18, %24, %120 {sv.namehint = "_neg_out_T_1"} : i1
    %122 = comb.mux bin %108, %121, %104 : i1
    %123 = comb.concat %32, %35, %36 {sv.namehint = "_divisor_T"} : i1, i32, i32
    %124 = comb.mux bin %108, %123, %49 : i65
    %125 = comb.concat %c0_i66, %27, %28 : i66, i32, i32
    %126 = comb.mux bin %108, %125, %88 : i130
    %127 = comb.mux bin %108, %io_req_bits_dw, %req_dw : i1
    %128 = comb.mux bin %108, %io_req_bits_tag, %req_tag : i5
    %129 = comb.extract %state from 0 : (i3) -> i1
    %130 = comb.extract %41 from 32 {sv.namehint = "_hiOut_T_5"} : (i64) -> i32
    %131 = comb.extract %41 from 0 {sv.namehint = "_loOut_T_5"} : (i64) -> i32
    %132 = comb.or %req_dw, %129 : i1
    %133 = comb.mux bin %132, %131, %130 {sv.namehint = "loOut"} : i32
    %134 = comb.extract %133 from 31 {sv.namehint = "_hiOut_T_3"} : (i32) -> i1
    %135 = comb.replicate %134 {sv.namehint = "_hiOut_T_4"} : (i1) -> i32
    %136 = comb.mux bin %req_dw, %130, %135 {sv.namehint = "hiOut"} : i32
    %137 = comb.concat %136, %133 {sv.namehint = "io_resp_bits_data"} : i32, i32
    %138 = comb.icmp bin eq %state, %c-2_i3 {sv.namehint = "_io_resp_valid_T"} : i3
    %139 = comb.icmp bin eq %state, %c-1_i3 {sv.namehint = "_io_resp_valid_T_1"} : i3
    %140 = comb.or bin %138, %139 {sv.namehint = "io_resp_valid"} : i1
    %141 = comb.icmp bin eq %state, %c0_i3 {sv.namehint = "io_req_ready"} : i3
    hw.output %141, %140, %137, %req_tag : i1, i1, i64, i5
  }
  hw.module.extern private @plusarg_reader_40<DEFAULT: ui32, FORMAT: none, WIDTH: ui32>(out out : i32) attributes {verilogName = "plusarg_reader"}
  hw.module private @PlusArgTimeout(in %clock : !seq.clock, in %reset : i1, in %io_count : i32) {
    %c0_i32 = hw.constant 0 : i32
    %true = hw.constant true
    %0 = seq.from_clock %clock
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader_40<DEFAULT: ui32 = 0, FORMAT: none = "max_core_cycles=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %1 = comb.icmp bin ne %plusarg_reader.out, %c0_i32 : i32
    %2 = comb.icmp bin ult %io_count, %plusarg_reader.out : i32
    %3 = comb.xor bin %reset, %true : i1
    %4 = comb.and bin %1, %3 : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %2, immediate label "assert__assert"
      }
    }
    hw.output
  }
  hw.module private @Rocket(in %clock : !seq.clock, in %reset : i1, in %io_interrupts_debug : i1, in %io_interrupts_mtip : i1, in %io_interrupts_msip : i1, in %io_interrupts_meip : i1, out io_imem_might_request : i1, out io_imem_req_valid : i1, out io_imem_req_bits_pc : i34, out io_imem_req_bits_speculative : i1, out io_imem_resp_ready : i1, in %io_imem_resp_valid : i1, in %io_imem_resp_bits_pc : i34, in %io_imem_resp_bits_data : i32, in %io_imem_resp_bits_xcpt_pf_inst : i1, in %io_imem_resp_bits_xcpt_gf_inst : i1, in %io_imem_resp_bits_xcpt_ae_inst : i1, in %io_imem_resp_bits_replay : i1, out io_imem_btb_update_valid : i1, out io_imem_bht_update_valid : i1, out io_imem_flush_icache : i1, in %io_dmem_req_ready : i1, out io_dmem_req_valid : i1, out io_dmem_req_bits_addr : i34, out io_dmem_req_bits_tag : i6, out io_dmem_req_bits_cmd : i5, out io_dmem_req_bits_size : i2, out io_dmem_req_bits_signed : i1, out io_dmem_s1_kill : i1, out io_dmem_s1_data_data : i64, in %io_dmem_s2_nack : i1, in %io_dmem_resp_valid : i1, in %io_dmem_resp_bits_tag : i6, in %io_dmem_resp_bits_data : i64, in %io_dmem_resp_bits_replay : i1, in %io_dmem_resp_bits_has_data : i1, in %io_dmem_resp_bits_data_word_bypass : i64, in %io_dmem_replay_next : i1, in %io_dmem_s2_xcpt_ma_ld : i1, in %io_dmem_s2_xcpt_ma_st : i1, in %io_dmem_s2_xcpt_pf_ld : i1, in %io_dmem_s2_xcpt_pf_st : i1, in %io_dmem_s2_xcpt_ae_ld : i1, in %io_dmem_s2_xcpt_ae_st : i1, in %io_dmem_ordered : i1, in %io_dmem_perf_release : i1, in %io_dmem_perf_grant : i1, out io_ptw_status_debug : i1, out io_ptw_pmp_0_cfg_l : i1, out io_ptw_pmp_0_cfg_a : i2, out io_ptw_pmp_0_cfg_x : i1, out io_ptw_pmp_0_cfg_w : i1, out io_ptw_pmp_0_cfg_r : i1, out io_ptw_pmp_0_addr : i30, out io_ptw_pmp_0_mask : i32, out io_ptw_pmp_1_cfg_l : i1, out io_ptw_pmp_1_cfg_a : i2, out io_ptw_pmp_1_cfg_x : i1, out io_ptw_pmp_1_cfg_w : i1, out io_ptw_pmp_1_cfg_r : i1, out io_ptw_pmp_1_addr : i30, out io_ptw_pmp_1_mask : i32, out io_ptw_pmp_2_cfg_l : i1, out io_ptw_pmp_2_cfg_a : i2, out io_ptw_pmp_2_cfg_x : i1, out io_ptw_pmp_2_cfg_w : i1, out io_ptw_pmp_2_cfg_r : i1, out io_ptw_pmp_2_addr : i30, out io_ptw_pmp_2_mask : i32, out io_ptw_pmp_3_cfg_l : i1, out io_ptw_pmp_3_cfg_a : i2, out io_ptw_pmp_3_cfg_x : i1, out io_ptw_pmp_3_cfg_w : i1, out io_ptw_pmp_3_cfg_r : i1, out io_ptw_pmp_3_addr : i30, out io_ptw_pmp_3_mask : i32, out io_ptw_pmp_4_cfg_l : i1, out io_ptw_pmp_4_cfg_a : i2, out io_ptw_pmp_4_cfg_x : i1, out io_ptw_pmp_4_cfg_w : i1, out io_ptw_pmp_4_cfg_r : i1, out io_ptw_pmp_4_addr : i30, out io_ptw_pmp_4_mask : i32, out io_ptw_pmp_5_cfg_l : i1, out io_ptw_pmp_5_cfg_a : i2, out io_ptw_pmp_5_cfg_x : i1, out io_ptw_pmp_5_cfg_w : i1, out io_ptw_pmp_5_cfg_r : i1, out io_ptw_pmp_5_addr : i30, out io_ptw_pmp_5_mask : i32, out io_ptw_pmp_6_cfg_l : i1, out io_ptw_pmp_6_cfg_a : i2, out io_ptw_pmp_6_cfg_x : i1, out io_ptw_pmp_6_cfg_w : i1, out io_ptw_pmp_6_cfg_r : i1, out io_ptw_pmp_6_addr : i30, out io_ptw_pmp_6_mask : i32, out io_ptw_pmp_7_cfg_l : i1, out io_ptw_pmp_7_cfg_a : i2, out io_ptw_pmp_7_cfg_x : i1, out io_ptw_pmp_7_cfg_w : i1, out io_ptw_pmp_7_cfg_r : i1, out io_ptw_pmp_7_addr : i30, out io_ptw_pmp_7_mask : i32, out io_ptw_customCSRs_csrs_0_value : i64, out io_wfi : i1) {
    %c5_i4 = hw.constant 5 : i4
    %c-1_i30 = hw.constant -1 : i30
    %c1_i32 = hw.constant 1 : i32
    %c2_i64 = hw.constant 2 : i64
    %c20_i64 = hw.constant 20 : i64
    %c12_i64 = hw.constant 12 : i64
    %c1_i64 = hw.constant 1 : i64
    %c3_i64 = hw.constant 3 : i64
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c6_i5 = hw.constant 6 : i5
    %c7_i5 = hw.constant 7 : i5
    %false = hw.constant false {sv.namehint = "id_ctrl_dp"}
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c0_i64 = hw.constant 0 : i64
    %c0_i6 = hw.constant 0 : i6
    %c0_i34 = hw.constant 0 : i34
    %c0_i4 = hw.constant 0 : i4
    %c15_i5 = hw.constant 15 : i5
    %c13_i5 = hw.constant 13 : i5
    %c3_i4 = hw.constant 3 : i4
    %c-2_i34 = hw.constant -2 : i34
    %c2_i4 = hw.constant 2 : i4
    %c4_i4 = hw.constant 4 : i4
    %c14_i5 = hw.constant 14 : i5
    %c3_i5 = hw.constant 3 : i5
    %c12_i5 = hw.constant 12 : i5
    %c1_i5 = hw.constant 1 : i5
    %c2_i5 = hw.constant 2 : i5
    %c0_i32 = hw.constant 0 : i32
    %c-15_i5 = hw.constant -15 : i5
    %c-16_i5 = hw.constant -16 : i5
    %c1_i2 = hw.constant 1 : i2
    %c-2_i4 = hw.constant -2 : i4
    %c-12_i5 = hw.constant -12 : i5
    %c-2_i2 = hw.constant -2 : i2
    %c-10_i5 = hw.constant -10 : i5
    %c-1_i3 = hw.constant -1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c0_i3 = hw.constant 0 : i3
    %c1_i3 = hw.constant 1 : i3
    %c2_i3 = hw.constant 2 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c3_i3 = hw.constant 3 : i3
    %c-1_i32 = hw.constant -1 : i32
    %c-1_i7 = hw.constant -1 : i7
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i6 = hw.constant -1 : i6
    %c-1_i15 = hw.constant -1 : i15
    %c-1_i16 = hw.constant -1 : i16
    %c-1_i13 = hw.constant -1 : i13
    %c-1_i10 = hw.constant -1 : i10
    %c-1_i28 = hw.constant -1 : i28
    %c-1_i31 = hw.constant -1 : i31
    %c-1_i14 = hw.constant -1 : i14
    %c-1_i11 = hw.constant -1 : i11
    %c-1_i17 = hw.constant -1 : i17
    %c-1_i19 = hw.constant -1 : i19
    %c-1_i12 = hw.constant -1 : i12
    %c0_i22 = hw.constant 0 : i22
    %c0_i11 = hw.constant 0 : i11
    %c0_i12 = hw.constant 0 : i12
    %c0_i8 = hw.constant 0 : i8
    %c0_i7 = hw.constant 0 : i7
    %c0_i18 = hw.constant 0 : i18
    %c0_i21 = hw.constant 0 : i21
    %c0_i14 = hw.constant 0 : i14
    %c0_i19 = hw.constant 0 : i19
    %c0_i28 = hw.constant 0 : i28
    %c0_i5 = hw.constant 0 : i5
    %c-1_i5 = hw.constant -1 : i5
    %c0_i59 = hw.constant 0 : i59
    %c0_i16 = hw.constant 0 : i16
    %c0_i31 = hw.constant 0 : i31
    %c0_i60 = hw.constant 0 : i60
    %c0_i27 = hw.constant 0 : i27
    %0 = seq.from_clock %clock
    %id_reg_pause = seq.firreg %944 clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    %imem_might_request_reg = seq.firreg %917 clock %clock {firrtl.random_init_start = 3 : ui64, sv.namehint = "io_imem_might_request"} : i1
    %ex_ctrl_fp = seq.firreg %433 clock %clock {firrtl.random_init_start = 5 : ui64} : i1
    %ex_ctrl_rocc = seq.firreg %434 clock %clock {firrtl.random_init_start = 6 : ui64} : i1
    %ex_ctrl_branch = seq.firreg %435 clock %clock {firrtl.random_init_start = 7 : ui64} : i1
    %ex_ctrl_jal = seq.firreg %436 clock %clock {firrtl.random_init_start = 8 : ui64} : i1
    %ex_ctrl_jalr = seq.firreg %437 clock %clock {firrtl.random_init_start = 9 : ui64} : i1
    %ex_ctrl_rxs2 = seq.firreg %438 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %ex_ctrl_sel_alu2 = seq.firreg %470 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %ex_ctrl_sel_alu1 = seq.firreg %467 clock %clock {firrtl.random_init_start = 14 : ui64} : i2
    %ex_ctrl_sel_imm = seq.firreg %439 clock %clock {firrtl.random_init_start = 16 : ui64} : i3
    %ex_ctrl_alu_dw = seq.firreg %454 clock %clock {firrtl.random_init_start = 19 : ui64, sv.namehint = "ex_ctrl_alu_dw"} : i1
    %ex_ctrl_alu_fn = seq.firreg %452 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "ex_ctrl_alu_fn"} : i4
    %ex_ctrl_mem = seq.firreg %440 clock %clock {firrtl.random_init_start = 24 : ui64} : i1
    %ex_ctrl_mem_cmd = seq.firreg %482 clock %clock {firrtl.random_init_start = 25 : ui64, sv.namehint = "ex_ctrl_mem_cmd"} : i5
    %ex_ctrl_mul = seq.firreg %441 clock %clock {firrtl.random_init_start = 34 : ui64} : i1
    %ex_ctrl_div = seq.firreg %442 clock %clock {firrtl.random_init_start = 35 : ui64} : i1
    %ex_ctrl_wxd = seq.firreg %443 clock %clock {firrtl.random_init_start = 36 : ui64} : i1
    %ex_ctrl_csr = seq.firreg %445 clock %clock {firrtl.random_init_start = 37 : ui64} : i3
    %ex_ctrl_fence_i = seq.firreg %444 clock %clock {firrtl.random_init_start = 40 : ui64} : i1
    %mem_ctrl_fp = seq.firreg %605 clock %clock {firrtl.random_init_start = 45 : ui64} : i1
    %mem_ctrl_rocc = seq.firreg %608 clock %clock {firrtl.random_init_start = 46 : ui64} : i1
    %mem_ctrl_branch = seq.firreg %611 clock %clock {firrtl.random_init_start = 47 : ui64} : i1
    %mem_ctrl_jal = seq.firreg %614 clock %clock {firrtl.random_init_start = 48 : ui64} : i1
    %mem_ctrl_jalr = seq.firreg %617 clock %clock {firrtl.random_init_start = 49 : ui64} : i1
    %mem_ctrl_mem = seq.firreg %620 clock %clock {firrtl.random_init_start = 64 : ui64} : i1
    %mem_ctrl_mul = seq.firreg %623 clock %clock {firrtl.random_init_start = 74 : ui64} : i1
    %mem_ctrl_div = seq.firreg %626 clock %clock {firrtl.random_init_start = 75 : ui64} : i1
    %mem_ctrl_wxd = seq.firreg %629 clock %clock {firrtl.random_init_start = 76 : ui64} : i1
    %mem_ctrl_csr = seq.firreg %632 clock %clock {firrtl.random_init_start = 77 : ui64} : i3
    %mem_ctrl_fence_i = seq.firreg %702 clock %clock {firrtl.random_init_start = 80 : ui64} : i1
    %wb_ctrl_rocc = seq.firreg %733 clock %clock {firrtl.random_init_start = 86 : ui64} : i1
    %wb_ctrl_mem = seq.firreg %734 clock %clock {firrtl.random_init_start = 104 : ui64} : i1
    %wb_ctrl_div = seq.firreg %735 clock %clock {firrtl.random_init_start = 115 : ui64} : i1
    %wb_ctrl_wxd = seq.firreg %736 clock %clock {firrtl.random_init_start = 116 : ui64} : i1
    %wb_ctrl_csr = seq.firreg %737 clock %clock {firrtl.random_init_start = 117 : ui64} : i3
    %wb_ctrl_fence_i = seq.firreg %738 clock %clock {firrtl.random_init_start = 120 : ui64} : i1
    %ex_reg_xcpt_interrupt = seq.firreg %432 clock %clock {firrtl.random_init_start = 124 : ui64} : i1
    %ex_reg_valid = seq.firreg %428 clock %clock {firrtl.random_init_start = 125 : ui64} : i1
    %ex_reg_rvc = seq.firreg %460 clock %clock {firrtl.random_init_start = 126 : ui64} : i1
    %ex_reg_xcpt = seq.firreg %431 clock %clock {firrtl.random_init_start = 176 : ui64} : i1
    %ex_reg_flush_pipe = seq.firreg %472 clock %clock {firrtl.random_init_start = 177 : ui64} : i1
    %ex_reg_load_use = seq.firreg %473 clock %clock {firrtl.random_init_start = 178 : ui64} : i1
    %ex_reg_cause = seq.firreg %523 clock %clock {firrtl.random_init_start = 179 : ui64} : i64
    %ex_reg_replay = seq.firreg %430 clock %clock {firrtl.random_init_start = 243 : ui64} : i1
    %ex_reg_pc = seq.firreg %525 clock %clock {firrtl.random_init_start = 244 : ui64} : i34
    %ex_reg_mem_size = seq.firreg %481 clock %clock {firrtl.random_init_start = 278 : ui64, sv.namehint = "ex_reg_mem_size"} : i2
    %ex_reg_inst = seq.firreg %524 clock %clock {firrtl.random_init_start = 281 : ui64} : i32
    %mem_reg_xcpt_interrupt = seq.firreg %601 clock %clock {firrtl.random_init_start = 346 : ui64} : i1
    %mem_reg_valid = seq.firreg %598 clock %clock {firrtl.random_init_start = 347 : ui64} : i1
    %mem_reg_rvc = seq.firreg %635 clock %clock {firrtl.random_init_start = 348 : ui64} : i1
    %mem_reg_xcpt = seq.firreg %600 clock %clock {firrtl.random_init_start = 398 : ui64} : i1
    %mem_reg_replay = seq.firreg %599 clock %clock {firrtl.random_init_start = 399 : ui64} : i1
    %mem_reg_flush_pipe = seq.firreg %706 clock %clock {firrtl.random_init_start = 400 : ui64} : i1
    %mem_reg_cause = seq.firreg %665 clock %clock {firrtl.random_init_start = 401 : ui64} : i64
    %mem_mem_cmd_bh = seq.firreg %662 clock %clock {firrtl.random_init_start = 465 : ui64} : i1
    %mem_reg_load = seq.firreg %652 clock %clock {firrtl.random_init_start = 466 : ui64} : i1
    %mem_reg_store = seq.firreg %659 clock %clock {firrtl.random_init_start = 467 : ui64} : i1
    %mem_reg_pc = seq.firreg %674 clock %clock {firrtl.random_init_start = 469 : ui64} : i34
    %mem_reg_inst = seq.firreg %668 clock %clock {firrtl.random_init_start = 503 : ui64} : i32
    %mem_reg_hls_or_dv = seq.firreg %671 clock %clock {firrtl.random_init_start = 537 : ui64} : i1
    %mem_reg_wdata = seq.firreg %677 clock %clock {firrtl.random_init_start = 570 : ui64} : i64
    %mem_reg_rs2 = seq.firreg %697 clock %clock {firrtl.random_init_start = 634 : ui64, sv.namehint = "mem_reg_rs2"} : i64
    %mem_br_taken = seq.firreg %680 clock %clock {firrtl.random_init_start = 698 : ui64} : i1
    %wb_reg_valid = seq.firreg %728 clock %clock {firrtl.random_init_start = 700 : ui64} : i1
    %wb_reg_xcpt = seq.firreg %731 clock %clock {firrtl.random_init_start = 701 : ui64} : i1
    %wb_reg_replay = seq.firreg %730 clock %clock {firrtl.random_init_start = 702 : ui64} : i1
    %wb_reg_flush_pipe = seq.firreg %732 clock %clock {firrtl.random_init_start = 703 : ui64} : i1
    %wb_reg_cause = seq.firreg %742 clock %clock {firrtl.random_init_start = 704 : ui64} : i64
    %wb_reg_pc = seq.firreg %745 clock %clock {firrtl.random_init_start = 769 : ui64, sv.namehint = "csr.io_pc"} : i34
    %wb_reg_hls_or_dv = seq.firreg %744 clock %clock {firrtl.random_init_start = 805 : ui64} : i1
    %wb_reg_inst = seq.firreg %743 clock %clock {firrtl.random_init_start = 808 : ui64} : i32
    %wb_reg_wdata = seq.firreg %741 clock %clock {firrtl.random_init_start = 872 : ui64, sv.namehint = "wb_reg_wdata"} : i64
    %1 = comb.or bin %766, %597 {sv.namehint = "ibuf.io_kill"} : i1
    %ibuf.io_imem_ready, %ibuf.io_pc, %ibuf.io_inst_0_valid, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_gf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst, %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_gf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst, %ibuf.io_inst_0_bits_replay, %ibuf.io_inst_0_bits_rvc, %ibuf.io_inst_0_bits_inst_bits, %ibuf.io_inst_0_bits_inst_rd, %ibuf.io_inst_0_bits_inst_rs1, %ibuf.io_inst_0_bits_inst_rs2, %ibuf.io_inst_0_bits_raw = hw.instance "ibuf" @IBuf(clock: %clock: !seq.clock, reset: %reset: i1, io_imem_valid: %io_imem_resp_valid: i1, io_imem_bits_pc: %io_imem_resp_bits_pc: i34, io_imem_bits_data: %io_imem_resp_bits_data: i32, io_imem_bits_xcpt_pf_inst: %io_imem_resp_bits_xcpt_pf_inst: i1, io_imem_bits_xcpt_gf_inst: %io_imem_resp_bits_xcpt_gf_inst: i1, io_imem_bits_xcpt_ae_inst: %io_imem_resp_bits_xcpt_ae_inst: i1, io_imem_bits_replay: %io_imem_resp_bits_replay: i1, io_kill: %1: i1, io_inst_0_ready: %919: i1) -> (io_imem_ready: i1, io_pc: i34, io_inst_0_valid: i1, io_inst_0_bits_xcpt0_pf_inst: i1, io_inst_0_bits_xcpt0_gf_inst: i1, io_inst_0_bits_xcpt0_ae_inst: i1, io_inst_0_bits_xcpt1_pf_inst: i1, io_inst_0_bits_xcpt1_gf_inst: i1, io_inst_0_bits_xcpt1_ae_inst: i1, io_inst_0_bits_replay: i1, io_inst_0_bits_rvc: i1, io_inst_0_bits_inst_bits: i32, io_inst_0_bits_inst_rd: i5, io_inst_0_bits_inst_rs1: i5, io_inst_0_bits_inst_rs2: i5, io_inst_0_bits_raw: i32) {sv.namehint = "id_waddr"}
    %2 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i30
    %3 = comb.xor bin %2, %c-1_i30 {sv.namehint = "id_ctrl_decoder_decoded_invInputs"} : i30
    %4 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_0"} : (i32) -> i1
    %5 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 1 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_1"} : (i32) -> i1
    %6 = comb.extract %3 from 0 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_2"} : (i30) -> i1
    %7 = comb.extract %3 from 1 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_3"} : (i30) -> i1
    %8 = comb.extract %3 from 3 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_4"} : (i30) -> i1
    %9 = comb.extract %3 from 4 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_5"} : (i30) -> i1
    %10 = comb.extract %3 from 10 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_6"} : (i30) -> i1
    %11 = comb.concat %4, %5, %6, %7, %8, %9, %10 {sv.namehint = "_id_ctrl_decoder_decoded_T"} : i1, i1, i1, i1, i1, i1, i1
    %12 = comb.icmp bin eq %11, %c-1_i7 {sv.namehint = "_id_ctrl_decoder_decoded_T_1"} : i7
    %13 = comb.extract %3 from 2 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_4_1"} : (i30) -> i1
    %14 = comb.concat %4, %5, %6, %7, %13, %8, %9, %10 {sv.namehint = "_id_ctrl_decoder_decoded_T_2"} : i1, i1, i1, i1, i1, i1, i1, i1
    %15 = comb.icmp bin eq %14, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_3"} : i8
    %16 = comb.extract %3 from 11 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_1"} : (i30) -> i1
    %17 = comb.concat %4, %5, %6, %7, %13, %8, %9, %16 {sv.namehint = "_id_ctrl_decoder_decoded_T_4"} : i1, i1, i1, i1, i1, i1, i1, i1
    %18 = comb.icmp bin eq %17, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_5"} : i8
    %19 = comb.extract %3 from 12 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_8"} : (i30) -> i1
    %20 = comb.concat %4, %5, %6, %7, %13, %9, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_6"} : i1, i1, i1, i1, i1, i1, i1
    %21 = comb.icmp bin eq %20, %c-1_i7 {sv.namehint = "_id_ctrl_decoder_decoded_T_7"} : i7
    %22 = comb.concat %4, %5, %6, %7, %13, %8, %9, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_8"} : i1, i1, i1, i1, i1, i1, i1, i1
    %23 = comb.icmp bin eq %22, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_9"} : i8
    %24 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_2_5"} : (i32) -> i1
    %25 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_3_5"} : (i32) -> i1
    %26 = comb.concat %4, %5, %24, %25, %13, %8, %9, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_10"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %27 = comb.icmp bin eq %26, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_2"} : i9
    %28 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_3_6"} : (i32) -> i1
    %29 = comb.concat %4, %5, %6, %28, %8, %9, %10, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_12"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %30 = comb.icmp bin eq %29, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_13"} : i9
    %31 = comb.concat %4, %5, %24, %7, %28, %9 {sv.namehint = "_id_ctrl_decoder_decoded_T_14"} : i1, i1, i1, i1, i1, i1
    %32 = comb.icmp bin eq %31, %c-1_i6 {sv.namehint = "_id_ctrl_decoder_decoded_T_15"} : i6
    %33 = comb.concat %4, %5, %24, %7, %28, %8, %9 {sv.namehint = "_id_ctrl_decoder_decoded_T_16"} : i1, i1, i1, i1, i1, i1, i1
    %34 = comb.icmp bin eq %33, %c-1_i7 {sv.namehint = "_id_ctrl_decoder_decoded_T_17"} : i7
    %35 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_5_9"} : (i32) -> i1
    %36 = comb.concat %4, %5, %6, %7, %13, %35, %9, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_18"} : i1, i1, i1, i1, i1, i1, i1, i1
    %37 = comb.icmp bin eq %36, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_19"} : i8
    %38 = comb.concat %4, %5, %6, %7, %13, %35, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_20"} : i1, i1, i1, i1, i1, i1, i1, i1
    %39 = comb.icmp bin eq %38, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_21"} : i8
    %40 = comb.extract %3 from 23 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_9"} : (i30) -> i1
    %41 = comb.extract %3 from 24 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_10"} : (i30) -> i1
    %42 = comb.extract %3 from 25 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_11"} : (i30) -> i1
    %43 = comb.extract %3 from 26 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_12"} : (i30) -> i1
    %44 = comb.extract %3 from 27 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_13"} : (i30) -> i1
    %45 = comb.extract %3 from 29 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_14"} : (i30) -> i1
    %46 = comb.concat %4, %5, %6, %28, %35, %9, %10, %16, %19, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_22"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %47 = comb.icmp bin eq %46, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_23"} : i15
    %48 = comb.concat %4, %5, %6, %7, %28, %35, %9, %10, %16, %19, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_24"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %49 = comb.icmp bin eq %48, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_25"} : i16
    %50 = comb.extract %3 from 28 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_26"} : (i30) -> i1
    %51 = comb.concat %4, %5, %6, %7, %28, %35, %9, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_26"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %52 = comb.icmp bin eq %51, %c-1_i13 {sv.namehint = "_id_ctrl_decoder_decoded_T_27"} : i13
    %53 = comb.concat %4, %5, %6, %28, %35, %9, %10, %16, %19, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_28"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %53, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_29"} : i15
    %55 = comb.concat %4, %5, %6, %28, %35, %9, %16, %19, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_30"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %55, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_31"} : i15
    %57 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_6_15"} : (i32) -> i1
    %58 = comb.concat %4, %5, %6, %7, %13, %35, %57, %16 {sv.namehint = "_id_ctrl_decoder_decoded_T_32"} : i1, i1, i1, i1, i1, i1, i1, i1
    %59 = comb.icmp bin eq %58, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_33"} : i8
    %60 = comb.concat %4, %5, %6, %7, %13, %35, %57, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_34"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %61 = comb.icmp bin eq %60, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_35"} : i9
    %62 = comb.concat %4, %5, %7, %13, %35, %57, %10, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_36"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %63 = comb.icmp bin eq %62, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_37"} : i9
    %64 = comb.concat %4, %5, %24, %7, %13, %35, %57, %10, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_38"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %65 = comb.icmp bin eq %64, %c-1_i10 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_49"} : i10
    %66 = comb.concat %4, %5, %24, %25, %13, %35, %57 {sv.namehint = "_id_ctrl_decoder_decoded_T_40"} : i1, i1, i1, i1, i1, i1, i1
    %67 = comb.icmp bin eq %66, %c-1_i7 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_50"} : i7
    %68 = comb.extract %3 from 5 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_4_21"} : (i30) -> i1
    %69 = comb.extract %3 from 6 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_5_21"} : (i30) -> i1
    %70 = comb.extract %3 from 7 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_9_7"} : (i30) -> i1
    %71 = comb.extract %3 from 8 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_16"} : (i30) -> i1
    %72 = comb.extract %3 from 9 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_8_10"} : (i30) -> i1
    %73 = comb.extract %3 from 13 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_12_5"} : (i30) -> i1
    %74 = comb.extract %3 from 14 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_13_4"} : (i30) -> i1
    %75 = comb.extract %3 from 15 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_14_4"} : (i30) -> i1
    %76 = comb.extract %3 from 16 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_15_1"} : (i30) -> i1
    %77 = comb.extract %3 from 17 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_16"} : (i30) -> i1
    %78 = comb.extract %3 from 19 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_17"} : (i30) -> i1
    %79 = comb.extract %3 from 20 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_18"} : (i30) -> i1
    %80 = comb.extract %3 from 21 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_19"} : (i30) -> i1
    %81 = comb.extract %3 from 22 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_20"} : (i30) -> i1
    %82 = comb.concat %4, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %78, %79, %80, %81, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_42"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %83 = comb.icmp bin eq %82, %c-1_i28 {sv.namehint = "_id_ctrl_decoder_decoded_T_43"} : i28
    %84 = comb.concat %4, %5, %6, %7, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %78, %79, %80, %81, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_44"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %85 = comb.icmp bin eq %84, %c-1_i31 {sv.namehint = "_id_ctrl_decoder_decoded_T_45"} : i31
    %86 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_18"} : (i32) -> i1
    %87 = comb.concat %4, %5, %24, %25, %13, %8, %9, %86, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_46"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %88 = comb.icmp bin eq %87, %c-1_i10 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_3"} : i10
    %89 = comb.concat %4, %5, %6, %7, %28, %9, %86, %16, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_48"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %90 = comb.icmp bin eq %89, %c-1_i14 {sv.namehint = "_id_ctrl_decoder_decoded_T_49"} : i14
    %91 = comb.concat %4, %5, %6, %7, %28, %8, %9, %86, %16, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_50"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %92 = comb.icmp bin eq %91, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_51"} : i15
    %93 = comb.concat %4, %5, %6, %25, %28, %9, %86, %16, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_52"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %94 = comb.icmp bin eq %93, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_53"} : i15
    %95 = comb.concat %4, %5, %6, %25, %28, %8, %9, %86, %16, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_54"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %96 = comb.icmp bin eq %95, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_55"} : i16
    %97 = comb.concat %4, %5, %6, %7, %35, %57, %86, %16 {sv.namehint = "_id_ctrl_decoder_decoded_T_56"} : i1, i1, i1, i1, i1, i1, i1, i1
    %98 = comb.icmp bin eq %97, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_57"} : i8
    %99 = comb.concat %4, %5, %6, %7, %13, %35, %57, %86, %16 {sv.namehint = "_id_ctrl_decoder_decoded_T_58"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %100 = comb.icmp bin eq %99, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_59"} : i9
    %101 = comb.concat %4, %5, %6, %7, %35, %57, %86, %16, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_60"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %102 = comb.icmp bin eq %101, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_61"} : i9
    %103 = comb.concat %4, %5, %6, %7, %28, %35, %57, %86 {sv.namehint = "_id_ctrl_decoder_decoded_T_62"} : i1, i1, i1, i1, i1, i1, i1, i1
    %104 = comb.icmp bin eq %103, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_4"} : i8
    %105 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_27"} : (i32) -> i1
    %106 = comb.concat %4, %5, %6, %7, %28, %8, %9, %105 {sv.namehint = "_id_ctrl_decoder_decoded_T_64"} : i1, i1, i1, i1, i1, i1, i1, i1
    %107 = comb.icmp bin eq %106, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_65"} : i8
    %108 = comb.concat %4, %5, %6, %7, %28, %8, %9, %105, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_66"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %109 = comb.icmp bin eq %108, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_67"} : i9
    %110 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %42, %43 {sv.namehint = "_id_ctrl_decoder_decoded_T_68"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %111 = comb.icmp bin eq %110, %c-1_i11 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_18"} : i11
    %112 = comb.concat %4, %5, %6, %7, %28, %35, %9, %105, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_70"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %113 = comb.icmp bin eq %112, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_71"} : i15
    %114 = comb.concat %4, %5, %6, %7, %28, %35, %9, %105, %19, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_72"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %115 = comb.icmp bin eq %114, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_73"} : i16
    %116 = comb.concat %4, %5, %6, %7, %28, %35, %57, %105 {sv.namehint = "_id_ctrl_decoder_decoded_T_74"} : i1, i1, i1, i1, i1, i1, i1, i1
    %117 = comb.icmp bin eq %116, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_5"} : i8
    %118 = comb.concat %4, %5, %6, %7, %28, %35, %57, %105, %19 {sv.namehint = "_id_ctrl_decoder_decoded_T_76"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %119 = comb.icmp bin eq %118, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_77"} : i9
    %120 = comb.concat %4, %5, %6, %7, %28, %8, %9, %86, %105 {sv.namehint = "_id_ctrl_decoder_decoded_T_78"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %121 = comb.icmp bin eq %120, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_79"} : i9
    %122 = comb.concat %4, %5, %6, %7, %28, %35, %9, %86, %105, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_80"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %123 = comb.icmp bin eq %122, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_81"} : i15
    %124 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_8_26"} : (i32) -> i1
    %125 = comb.concat %4, %5, %6, %7, %28, %8, %9, %10, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_82"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %126 = comb.icmp bin eq %125, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_83"} : i9
    %127 = comb.concat %4, %5, %6, %7, %28, %35, %9, %124, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_84"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %128 = comb.icmp bin eq %127, %c-1_i14 {sv.namehint = "_id_ctrl_decoder_decoded_T_85"} : i14
    %129 = comb.concat %4, %5, %6, %7, %13, %35, %57, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_86"} : i1, i1, i1, i1, i1, i1, i1, i1
    %130 = comb.icmp bin eq %129, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_87"} : i8
    %131 = comb.concat %4, %5, %6, %7, %28, %8, %9, %86, %16, %124, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_88"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %132 = comb.icmp bin eq %131, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_89"} : i15
    %133 = comb.concat %4, %5, %6, %7, %28, %9, %86, %16, %124, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_90"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %134 = comb.icmp bin eq %133, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_91"} : i15
    %135 = comb.concat %4, %5, %6, %25, %28, %9, %86, %16, %124, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_92"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %136 = comb.icmp bin eq %135, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_93"} : i15
    %137 = comb.concat %4, %5, %6, %25, %28, %8, %9, %86, %16, %124, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_94"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %138 = comb.icmp bin eq %137, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_95"} : i16
    %139 = comb.concat %4, %5, %6, %25, %28, %9, %86, %16, %124, %40, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_96"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %140 = comb.icmp bin eq %139, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_97"} : i16
    %141 = comb.concat %4, %5, %6, %28, %35, %9, %86, %16, %124, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_98"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %142 = comb.icmp bin eq %141, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_99"} : i15
    %143 = comb.concat %4, %5, %6, %7, %28, %35, %9, %86, %16, %124, %40, %41, %42, %43, %44, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_100"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %144 = comb.icmp bin eq %143, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_101"} : i16
    %145 = comb.concat %4, %5, %6, %7, %28, %35, %9, %86, %124, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_102"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %146 = comb.icmp bin eq %145, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_103"} : i15
    %147 = comb.concat %4, %5, %6, %7, %35, %57, %86, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_104"} : i1, i1, i1, i1, i1, i1, i1, i1
    %148 = comb.icmp bin eq %147, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_105"} : i8
    %149 = comb.concat %4, %5, %6, %7, %13, %35, %57, %86, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_106"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %150 = comb.icmp bin eq %149, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_107"} : i9
    %151 = comb.concat %4, %5, %6, %7, %28, %35, %57, %86, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_108"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %152 = comb.icmp bin eq %151, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_109"} : i9
    %153 = comb.concat %4, %5, %6, %7, %28, %8, %9, %105, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_110"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %154 = comb.icmp bin eq %153, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_111"} : i9
    %155 = comb.concat %4, %5, %6, %7, %28, %35, %9, %105, %124, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_112"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %156 = comb.icmp bin eq %155, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_113"} : i15
    %157 = comb.concat %4, %5, %6, %7, %35, %57, %105, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_114"} : i1, i1, i1, i1, i1, i1, i1, i1
    %158 = comb.icmp bin eq %157, %c-1_i8 {sv.namehint = "_id_ctrl_decoder_decoded_T_115"} : i8
    %159 = comb.concat %4, %5, %6, %7, %13, %35, %57, %105, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_116"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %160 = comb.icmp bin eq %159, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_117"} : i9
    %161 = comb.concat %4, %5, %6, %7, %28, %35, %57, %105, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_118"} : i1, i1, i1, i1, i1, i1, i1, i1, i1
    %162 = comb.icmp bin eq %161, %c-1_i9 {sv.namehint = "_id_ctrl_decoder_decoded_T_119"} : i9
    %163 = comb.concat %4, %5, %6, %7, %28, %8, %9, %86, %105, %124 {sv.namehint = "_id_ctrl_decoder_decoded_T_120"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %164 = comb.icmp bin eq %163, %c-1_i10 {sv.namehint = "_id_ctrl_decoder_decoded_T_121"} : i10
    %165 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_56"} : (i32) -> i1
    %166 = comb.concat %4, %5, %6, %7, %28, %35, %9, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_122"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %167 = comb.icmp bin eq %166, %c-1_i14 {sv.namehint = "_id_ctrl_decoder_decoded_T_123"} : i14
    %168 = comb.concat %4, %5, %6, %28, %35, %9, %10, %16, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_124"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %169 = comb.icmp bin eq %168, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_125"} : i15
    %170 = comb.concat %4, %5, %6, %7, %28, %35, %9, %86, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_126"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %171 = comb.icmp bin eq %170, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_127"} : i15
    %172 = comb.concat %4, %5, %6, %7, %28, %35, %9, %105, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_128"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %173 = comb.icmp bin eq %172, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_129"} : i15
    %174 = comb.concat %4, %5, %6, %28, %35, %9, %124, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_130"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %175 = comb.icmp bin eq %174, %c-1_i14 {sv.namehint = "_id_ctrl_decoder_decoded_T_131"} : i14
    %176 = comb.concat %4, %5, %6, %28, %35, %9, %86, %124, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_132"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %177 = comb.icmp bin eq %176, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_133"} : i15
    %178 = comb.concat %4, %5, %6, %28, %35, %9, %105, %124, %165, %41, %42, %43, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_134"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %179 = comb.icmp bin eq %178, %c-1_i15 {sv.namehint = "_id_ctrl_decoder_decoded_T_135"} : i15
    %180 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_9_35"} : (i32) -> i1
    %181 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %180, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_136"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %182 = comb.icmp bin eq %181, %c-1_i13 {sv.namehint = "_id_ctrl_decoder_decoded_T_137"} : i13
    %183 = comb.extract %3 from 18 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_7_64"} : (i30) -> i1
    %184 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 28 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_15_9"} : (i32) -> i1
    %185 = comb.concat %4, %5, %24, %25, %13, %35, %9, %183, %78, %79, %80, %81, %42, %184, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_138"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %186 = comb.icmp bin eq %185, %c-1_i17 {sv.namehint = "_id_ctrl_decoder_decoded_T_139"} : i17
    %187 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %183, %78, %79, %80, %81, %42, %184, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_140"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %188 = comb.icmp bin eq %187, %c-1_i19 {sv.namehint = "_id_ctrl_decoder_decoded_T_141"} : i19
    %189 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 20 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_17_3"} : (i32) -> i1
    %190 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 22 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_19_2"} : (i32) -> i1
    %191 = comb.concat %4, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %189, %78, %190, %80, %81, %40, %41, %42, %184, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_142"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %192 = comb.icmp bin eq %191, %c-1_i28 {sv.namehint = "_id_ctrl_decoder_decoded_T_143"} : i28
    %193 = comb.concat %4, %5, %6, %7, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %189, %78, %190, %80, %81, %40, %41, %42, %184, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_144"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %194 = comb.icmp bin eq %193, %c-1_i31 {sv.namehint = "_id_ctrl_decoder_decoded_T_145"} : i31
    %195 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %180, %184, %44, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_146"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %196 = comb.icmp bin eq %195, %c-1_i14 {sv.namehint = "_id_ctrl_decoder_decoded_T_147"} : i14
    %197 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 29 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_25_4"} : (i32) -> i1
    %198 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %42, %43, %197 {sv.namehint = "_id_ctrl_decoder_decoded_T_148"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %199 = comb.icmp bin eq %198, %c-1_i12 {sv.namehint = "_id_ctrl_decoder_decoded_T_149"} : i12
    %200 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 21 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_17_5"} : (i32) -> i1
    %201 = comb.concat %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %183, %200, %79, %80, %81, %40, %41, %42, %184, %197, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_150"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %202 = comb.icmp bin eq %201, %c-1_i28 {sv.namehint = "_id_ctrl_decoder_decoded_T_151"} : i28
    %203 = comb.concat %4, %5, %6, %7, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %183, %200, %79, %80, %81, %40, %41, %42, %184, %197, %50, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_152"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %204 = comb.icmp bin eq %203, %c-1_i32 {sv.namehint = "_id_ctrl_decoder_decoded_T_153"} : i32
    %205 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_26_6"} : (i32) -> i1
    %206 = comb.concat %4, %5, %6, %28, %35, %9, %10, %16, %19, %40, %41, %42, %43, %44, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_154"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %207 = comb.icmp bin eq %206, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_155"} : i16
    %208 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %42, %43, %205 {sv.namehint = "_id_ctrl_decoder_decoded_T_156"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %209 = comb.icmp bin eq %208, %c-1_i12 {sv.namehint = "_id_ctrl_decoder_decoded_T_157"} : i12
    %210 = comb.concat %4, %5, %6, %7, %28, %8, %9, %86, %16, %124, %41, %42, %43, %44, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_158"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %211 = comb.icmp bin eq %210, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_159"} : i16
    %212 = comb.concat %4, %5, %6, %25, %28, %9, %86, %16, %124, %40, %41, %42, %43, %44, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_160"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %213 = comb.icmp bin eq %212, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_161"} : i16
    %214 = comb.concat %4, %5, %6, %28, %35, %9, %86, %16, %124, %40, %41, %42, %43, %44, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_162"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %215 = comb.icmp bin eq %214, %c-1_i16 {sv.namehint = "_id_ctrl_decoder_decoded_T_163"} : i16
    %216 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 24 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_20_6"} : (i32) -> i1
    %217 = comb.concat %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %183, %200, %79, %80, %216, %165, %41, %180, %184, %197, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_164"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %218 = comb.icmp bin eq %217, %c-1_i28 {sv.namehint = "_id_ctrl_decoder_decoded_T_165"} : i28
    %219 = comb.concat %4, %5, %6, %7, %28, %35, %57, %68, %69, %70, %71, %72, %10, %16, %19, %73, %74, %75, %76, %77, %183, %200, %79, %80, %216, %165, %41, %180, %184, %197, %205, %45 {sv.namehint = "_id_ctrl_decoder_decoded_T_166"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %220 = comb.icmp bin eq %219, %c-1_i32 {sv.namehint = "_id_ctrl_decoder_decoded_T_167"} : i32
    %221 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 31 {sv.namehint = "id_ctrl_decoder_decoded_andMatrixInput_11_47"} : (i32) -> i1
    %222 = comb.concat %4, %5, %24, %25, %13, %35, %9, %105, %19, %42, %43, %221 {sv.namehint = "_id_ctrl_decoder_decoded_T_168"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %223 = comb.icmp bin eq %222, %c-1_i12 {sv.namehint = "_id_ctrl_decoder_decoded_T_169"} : i12
    %224 = comb.concat %111, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T"} : i1, i1, i1
    %225 = comb.icmp bin ne %224, %c0_i3 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_1"} : i3
    %226 = comb.concat %83, %104, %117, %192, %202, %218 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_6"} : i1, i1, i1, i1, i1, i1
    %227 = comb.icmp bin ne %226, %c0_i6 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_7"} : i6
    %228 = comb.concat %12, %18, %23, %30, %32, %47, %52, %54, %65, %67, %90, %94, %104, %107, %111, %117, %132, %136, %142, %175, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_8"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %229 = comb.icmp bin ne %228, %c0_i22 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_9"} : i22
    %230 = comb.concat %167, %169, %175 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_10"} : i1, i1, i1
    %231 = comb.icmp bin ne %230, %c0_i3 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_11"} : i3
    %232 = comb.concat %37, %196, %199 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_12"} : i1, i1, i1
    %233 = comb.icmp bin ne %232, %c0_i3 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_13"} : i3
    %234 = comb.concat %186, %196, %209 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_14"} : i1, i1, i1
    %235 = comb.icmp bin ne %234, %c0_i3 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_15"} : i3
    %236 = comb.concat %182, %186, %223 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_16"} : i1, i1, i1
    %237 = comb.icmp bin ne %236, %c0_i3 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_17"} : i3
    %238 = comb.concat %15, %18, %21, %111, %182, %188 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_19"} : i1, i1, i1, i1, i1, i1
    %239 = comb.icmp bin ne %238, %c0_i6 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_20"} : i6
    %240 = comb.concat %90, %94, %100, %132, %136, %142, %146, %150, %164, %171, %177 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_21"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %241 = comb.icmp bin ne %240, %c0_i11 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_22"} : i11
    %242 = comb.concat %61, %121, %123, %154, %156, %160, %173, %179, %207, %211, %213, %215 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_23"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %243 = comb.icmp bin ne %242, %c0_i12 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_24"} : i12
    %244 = comb.concat %107, %113, %126, %128, %130, %134, %140, %175 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_25"} : i1, i1, i1, i1, i1, i1, i1, i1
    %245 = comb.icmp bin ne %244, %c0_i8 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_26"} : i8
    %246 = comb.concat %109, %115, %130, %207, %211, %213, %215 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_27"} : i1, i1, i1, i1, i1, i1, i1
    %247 = comb.icmp bin ne %246, %c0_i7 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_28"} : i7
    %248 = comb.concat %12, %18, %21, %32, %49, %52, %63, %67, %90, %98, %107, %111, %117, %130, %132, %144, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_29"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %249 = comb.icmp bin ne %248, %c0_i18 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_30"} : i18
    %250 = comb.concat %59, %67, %148, %158 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_31"} : i1, i1, i1, i1
    %251 = comb.icmp bin ne %250, %c0_i4 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_32"} : i4
    %252 = comb.concat %32, %67 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_33"} : i1, i1
    %253 = comb.icmp bin ne %252, %c0_i2 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_34"} : i2
    %254 = comb.concat %12, %18, %23, %30, %65, %92, %96, %107, %132, %138, %152, %162 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_35"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %255 = comb.icmp bin ne %254, %c0_i12 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_36"} : i12
    %256 = comb.concat %12, %18, %21, %30, %47, %52, %54, %63, %90, %94, %102, %107, %111, %119, %130, %132, %136, %142, %175, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_37"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %257 = comb.icmp bin ne %256, %c0_i21 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_38"} : i21
    %258 = comb.concat %34, %67 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_39"} : i1, i1
    %259 = comb.icmp bin ne %258, %c0_i2 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_40"} : i2
    %260 = comb.concat %12, %18, %21, %30, %32, %65, %67, %92, %96, %107, %132, %138, %152, %162 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_41"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %261 = comb.icmp bin ne %260, %c0_i14 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_42"} : i14
    %262 = comb.concat %12, %18, %21, %30, %32, %47, %52, %54, %59, %63, %90, %94, %107, %132, %136, %142, %148, %158, %175 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_43"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %263 = comb.icmp bin ne %262, %c0_i19 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_44"} : i19
    %264 = comb.concat %12, %18, %21, %30, %47, %52, %54, %63, %90, %94, %102, %107, %111, %119, %130, %132, %136, %142, %175, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_45"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %265 = comb.icmp bin ne %264, %c0_i21 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_46"} : i21
    %266 = comb.concat %37, %39, %47, %52, %54, %56, %111, %130, %142, %175, %182, %186 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_47"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %267 = comb.icmp bin ne %266, %c0_i12 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_48"} : i12
    %268 = comb.concat %59, %130 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_51"} : i1, i1
    %269 = comb.icmp bin ne %268, %c0_i2 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_52"} : i2
    %270 = comb.concat %12, %18, %21, %27, %30, %32, %47, %52, %54, %63, %67, %85, %90, %94, %98, %107, %111, %117, %130, %132, %136, %142, %175, %182, %188, %194, %204, %220 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_53"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %271 = comb.icmp bin ne %270, %c0_i28 {sv.namehint = "_id_ctrl_decoder_decoded_orMatrixOutputs_T_54"} : i28
    %272 = comb.concat %263, %261 {sv.namehint = "id_ctrl_sel_alu2"} : i1, i1
    %273 = comb.concat %259, %257 {sv.namehint = "id_ctrl_sel_alu1"} : i1, i1
    %274 = comb.concat %255, %253, %251 {sv.namehint = "id_ctrl_sel_imm"} : i1, i1, i1
    %275 = comb.concat %247, %245, %243, %241 {sv.namehint = "id_ctrl_alu_fn"} : i1, i1, i1, i1
    %276 = comb.concat %false, %111, %237, %235, %233 {sv.namehint = "id_ctrl_mem_cmd"} : i1, i1, i1, i1, i1
    %277 = comb.concat %227, %117, %104 {sv.namehint = "id_ctrl_csr"} : i1, i1, i1
    %id_reg_fence = seq.firreg %450 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1001 : ui64} : i1
    %rf = seq.firmem 0, 1, undefined, port_order : <31 x 64>
    seq.firmem.write_port %rf[%790] = %788, clock %clock enable %791 : <31 x 64>
    %278 = seq.firmem.read_port %rf[%282], clock %clock : <31 x 64>
    %279 = seq.firmem.read_port %rf[%285], clock %clock : <31 x 64>
    %280 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs1, %c0_i5 : i5
    %281 = comb.xor bin %280, %true {sv.namehint = "id_bypass_src_0_0"} : i1
    %282 = comb.xor bin %ibuf.io_inst_0_bits_inst_rs1, %c-1_i5 {sv.namehint = "_id_rs_T_3"} : i5
    %283 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs2, %c0_i5 : i5
    %284 = comb.xor bin %283, %true {sv.namehint = "id_bypass_src_1_0"} : i1
    %285 = comb.xor bin %ibuf.io_inst_0_bits_inst_rs2, %c-1_i5 {sv.namehint = "_id_rs_T_8"} : i5
    %csr.io_rw_rdata, %csr.io_decode_0_read_illegal, %csr.io_decode_0_write_illegal, %csr.io_decode_0_write_flush, %csr.io_decode_0_system_illegal, %csr.io_decode_0_virtual_access_illegal, %csr.io_decode_0_virtual_system_illegal, %csr.io_csr_stall, %csr.io_eret, %csr.io_singleStep, %csr.io_status_debug, %csr.io_status_wfi, %csr.io_status_isa, %csr.io_status_dv, %csr.io_status_v, %csr.io_evec, %csr.io_time, %csr.io_interrupt, %csr.io_interrupt_cause, %csr.io_bp_0_control_action, %csr.io_bp_0_control_tmatch, %csr.io_bp_0_control_x, %csr.io_bp_0_control_w, %csr.io_bp_0_control_r, %csr.io_bp_0_address, %csr.io_pmp_0_cfg_l, %csr.io_pmp_0_cfg_a, %csr.io_pmp_0_cfg_x, %csr.io_pmp_0_cfg_w, %csr.io_pmp_0_cfg_r, %csr.io_pmp_0_addr, %csr.io_pmp_0_mask, %csr.io_pmp_1_cfg_l, %csr.io_pmp_1_cfg_a, %csr.io_pmp_1_cfg_x, %csr.io_pmp_1_cfg_w, %csr.io_pmp_1_cfg_r, %csr.io_pmp_1_addr, %csr.io_pmp_1_mask, %csr.io_pmp_2_cfg_l, %csr.io_pmp_2_cfg_a, %csr.io_pmp_2_cfg_x, %csr.io_pmp_2_cfg_w, %csr.io_pmp_2_cfg_r, %csr.io_pmp_2_addr, %csr.io_pmp_2_mask, %csr.io_pmp_3_cfg_l, %csr.io_pmp_3_cfg_a, %csr.io_pmp_3_cfg_x, %csr.io_pmp_3_cfg_w, %csr.io_pmp_3_cfg_r, %csr.io_pmp_3_addr, %csr.io_pmp_3_mask, %csr.io_pmp_4_cfg_l, %csr.io_pmp_4_cfg_a, %csr.io_pmp_4_cfg_x, %csr.io_pmp_4_cfg_w, %csr.io_pmp_4_cfg_r, %csr.io_pmp_4_addr, %csr.io_pmp_4_mask, %csr.io_pmp_5_cfg_l, %csr.io_pmp_5_cfg_a, %csr.io_pmp_5_cfg_x, %csr.io_pmp_5_cfg_w, %csr.io_pmp_5_cfg_r, %csr.io_pmp_5_addr, %csr.io_pmp_5_mask, %csr.io_pmp_6_cfg_l, %csr.io_pmp_6_cfg_a, %csr.io_pmp_6_cfg_x, %csr.io_pmp_6_cfg_w, %csr.io_pmp_6_cfg_r, %csr.io_pmp_6_addr, %csr.io_pmp_6_mask, %csr.io_pmp_7_cfg_l, %csr.io_pmp_7_cfg_a, %csr.io_pmp_7_cfg_x, %csr.io_pmp_7_cfg_w, %csr.io_pmp_7_cfg_r, %csr.io_pmp_7_addr, %csr.io_pmp_7_mask, %csr.io_inhibit_cycle, %csr.io_customCSRs_0_value = hw.instance "csr" @CSRFile(clock: %clock: !seq.clock, reset: %reset: i1, io_ungated_clock: %clock: !seq.clock, io_interrupts_debug: %io_interrupts_debug: i1, io_interrupts_mtip: %io_interrupts_mtip: i1, io_interrupts_msip: %io_interrupts_msip: i1, io_interrupts_meip: %io_interrupts_meip: i1, io_rw_addr: %825: i12, io_rw_cmd: %827: i3, io_rw_wdata: %wb_reg_wdata: i64, io_decode_0_inst: %ibuf.io_inst_0_bits_inst_bits: i32, io_exception: %753: i1, io_retire: %780: i1, io_cause: %761: i64, io_pc: %wb_reg_pc: i34, io_tval: %821: i34, io_gva: %810: i1) -> (io_rw_rdata: i64, io_decode_0_read_illegal: i1, io_decode_0_write_illegal: i1, io_decode_0_write_flush: i1, io_decode_0_system_illegal: i1, io_decode_0_virtual_access_illegal: i1, io_decode_0_virtual_system_illegal: i1, io_csr_stall: i1, io_eret: i1, io_singleStep: i1, io_status_debug: i1, io_status_wfi: i1, io_status_isa: i32, io_status_dv: i1, io_status_v: i1, io_evec: i34, io_time: i64, io_interrupt: i1, io_interrupt_cause: i64, io_bp_0_control_action: i1, io_bp_0_control_tmatch: i2, io_bp_0_control_x: i1, io_bp_0_control_w: i1, io_bp_0_control_r: i1, io_bp_0_address: i33, io_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: i2, io_pmp_0_cfg_x: i1, io_pmp_0_cfg_w: i1, io_pmp_0_cfg_r: i1, io_pmp_0_addr: i30, io_pmp_0_mask: i32, io_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: i2, io_pmp_1_cfg_x: i1, io_pmp_1_cfg_w: i1, io_pmp_1_cfg_r: i1, io_pmp_1_addr: i30, io_pmp_1_mask: i32, io_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: i2, io_pmp_2_cfg_x: i1, io_pmp_2_cfg_w: i1, io_pmp_2_cfg_r: i1, io_pmp_2_addr: i30, io_pmp_2_mask: i32, io_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: i2, io_pmp_3_cfg_x: i1, io_pmp_3_cfg_w: i1, io_pmp_3_cfg_r: i1, io_pmp_3_addr: i30, io_pmp_3_mask: i32, io_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: i2, io_pmp_4_cfg_x: i1, io_pmp_4_cfg_w: i1, io_pmp_4_cfg_r: i1, io_pmp_4_addr: i30, io_pmp_4_mask: i32, io_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: i2, io_pmp_5_cfg_x: i1, io_pmp_5_cfg_w: i1, io_pmp_5_cfg_r: i1, io_pmp_5_addr: i30, io_pmp_5_mask: i32, io_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: i2, io_pmp_6_cfg_x: i1, io_pmp_6_cfg_w: i1, io_pmp_6_cfg_r: i1, io_pmp_6_addr: i30, io_pmp_6_mask: i32, io_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: i2, io_pmp_7_cfg_x: i1, io_pmp_7_cfg_w: i1, io_pmp_7_cfg_r: i1, io_pmp_7_addr: i30, io_pmp_7_mask: i32, io_inhibit_cycle: i1, io_customCSRs_0_value: i64) {sv.namehint = "csr.io_time"}
    %286 = comb.icmp bin eq %277, %c-2_i3 {sv.namehint = "_id_csr_ren_T"} : i3
    %287 = comb.icmp bin eq %277, %c-1_i3 {sv.namehint = "_id_csr_ren_T_1"} : i3
    %288 = comb.icmp bin eq %277, %c-3_i3 {sv.namehint = "_id_csr_en_T_2"} : i3
    %289 = comb.or bin %286, %287, %288 {sv.namehint = "id_csr_en"} : i1
    %290 = comb.icmp bin eq %277, %c-4_i3 {sv.namehint = "id_system_insn"} : i3
    %291 = comb.or bin %286, %287 {sv.namehint = "_id_csr_ren_T_2"} : i1
    %292 = comb.xor bin %280, %true {sv.namehint = "_id_csr_ren_T_3"} : i1
    %293 = comb.and bin %291, %292 {sv.namehint = "id_csr_ren"} : i1
    %294 = comb.and bin %290, %239 {sv.namehint = "_id_csr_T"} : i1
    %295 = comb.mux bin %293, %c2_i3, %277 {sv.namehint = "_id_csr_T_1"} : i3
    %296 = comb.mux bin %294, %c0_i3, %295 {sv.namehint = "id_csr"} : i3
    %297 = comb.xor bin %293, %true {sv.namehint = "_id_virtual_insn_T"} : i1
    %298 = comb.and bin %289, %297, %csr.io_decode_0_write_flush {sv.namehint = "_id_csr_flush_T_2"} : i1
    %299 = comb.xor bin %271, %true {sv.namehint = "_id_illegal_insn_T"} : i1
    %300 = comb.extract %csr.io_status_isa from 12 {sv.namehint = "_id_illegal_insn_T_2"} : (i32) -> i1
    %301 = comb.xor bin %300, %true {sv.namehint = "_id_illegal_insn_T_3"} : i1
    %302 = comb.and bin %231, %301 {sv.namehint = "_id_illegal_insn_T_4"} : i1
    %303 = comb.extract %csr.io_status_isa from 0 {sv.namehint = "_id_illegal_insn_T_6"} : (i32) -> i1
    %304 = comb.xor bin %303, %true {sv.namehint = "_id_illegal_insn_T_7"} : i1
    %305 = comb.and bin %225, %304 {sv.namehint = "_id_illegal_insn_T_8"} : i1
    %306 = comb.extract %csr.io_status_isa from 2 {sv.namehint = "_mem_npc_misaligned_T"} : (i32) -> i1
    %307 = comb.xor bin %306, %true {sv.namehint = "_id_illegal_insn_T_18"} : i1
    %308 = comb.and bin %ibuf.io_inst_0_bits_rvc, %307 {sv.namehint = "_id_illegal_insn_T_19"} : i1
    %309 = comb.and bin %297, %csr.io_decode_0_write_illegal {sv.namehint = "_id_illegal_insn_T_30"} : i1
    %310 = comb.or bin %csr.io_decode_0_read_illegal, %309 {sv.namehint = "_id_illegal_insn_T_31"} : i1
    %311 = comb.and bin %289, %310 {sv.namehint = "_id_illegal_insn_T_32"} : i1
    %312 = comb.xor bin %ibuf.io_inst_0_bits_rvc, %true {sv.namehint = "_id_virtual_insn_T_5"} : i1
    %313 = comb.and bin %312, %290, %csr.io_decode_0_system_illegal {sv.namehint = "_id_illegal_insn_T_36"} : i1
    %314 = comb.or bin %299, %302, %305, %308, %311, %313 {sv.namehint = "id_illegal_insn"} : i1
    %315 = comb.and bin %297, %csr.io_decode_0_write_illegal {sv.namehint = "_id_virtual_insn_T_1"} : i1
    %316 = comb.xor bin %315, %true {sv.namehint = "_id_virtual_insn_T_2"} : i1
    %317 = comb.and bin %289, %316, %csr.io_decode_0_virtual_access_illegal {sv.namehint = "_id_virtual_insn_T_4"} : i1
    %318 = comb.and bin %312, %290, %csr.io_decode_0_virtual_system_illegal {sv.namehint = "_id_virtual_insn_T_7"} : i1
    %319 = comb.or bin %317, %318 {sv.namehint = "_id_virtual_insn_T_8"} : i1
    %320 = comb.and bin %271, %319 {sv.namehint = "id_virtual_insn"} : i1
    %321 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 26 {sv.namehint = "id_amo_aq"} : (i32) -> i1
    %322 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 {sv.namehint = "id_amo_rl"} : (i32) -> i1
    %323 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 20 {sv.namehint = "id_fence_succ"} : (i32) -> i4
    %324 = comb.and bin %225, %321 {sv.namehint = "_id_fence_next_T"} : i1
    %325 = comb.or bin %27, %324 {sv.namehint = "id_fence_next"} : i1
    %326 = comb.xor bin %io_dmem_ordered, %true {sv.namehint = "_id_mem_busy_T"} : i1
    %327 = comb.or bin %326, %924 {sv.namehint = "id_mem_busy"} : i1
    %328 = comb.and %327, %id_reg_fence : i1
    %329 = comb.and bin %wb_reg_valid, %wb_ctrl_rocc {sv.namehint = "_io_rocc_cmd_valid_T"} : i1
    %330 = comb.and bin %225, %322 {sv.namehint = "_id_do_fence_T_1"} : i1
    %331 = comb.and bin %id_reg_fence, %239 {sv.namehint = "_id_do_fence_T_4"} : i1
    %332 = comb.or bin %330, %88, %331 {sv.namehint = "_id_do_fence_T_5"} : i1
    %333 = comb.and bin %327, %332 {sv.namehint = "id_do_fence"} : i1
    %bpu.io_xcpt_if, %bpu.io_xcpt_ld, %bpu.io_xcpt_st, %bpu.io_debug_if, %bpu.io_debug_ld, %bpu.io_debug_st = hw.instance "bpu" @BreakpointUnit(io_status_debug: %csr.io_status_debug: i1, io_bp_0_control_action: %csr.io_bp_0_control_action: i1, io_bp_0_control_tmatch: %csr.io_bp_0_control_tmatch: i2, io_bp_0_control_x: %csr.io_bp_0_control_x: i1, io_bp_0_control_w: %csr.io_bp_0_control_w: i1, io_bp_0_control_r: %csr.io_bp_0_control_r: i1, io_bp_0_address: %csr.io_bp_0_address: i33, io_pc: %334: i33, io_ea: %335: i33) -> (io_xcpt_if: i1, io_xcpt_ld: i1, io_xcpt_st: i1, io_debug_if: i1, io_debug_ld: i1, io_debug_st: i1) {sv.namehint = "bpu.io_xcpt_st"}
    %334 = comb.extract %ibuf.io_pc from 0 {sv.namehint = "bpu.io_pc"} : (i34) -> i33
    %335 = comb.extract %mem_reg_wdata from 0 {sv.namehint = "bpu.io_ea"} : (i64) -> i33
    %336 = comb.or bin %csr.io_interrupt, %bpu.io_debug_if, %bpu.io_xcpt_if, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_gf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst, %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_gf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst, %320, %314 {sv.namehint = "id_xcpt"} : i1
    %337 = comb.mux bin %320, %c-10_i5, %c2_i5 : i5
    %338 = comb.mux bin %ibuf.io_inst_0_bits_xcpt1_ae_inst, %c1_i5, %337 : i5
    %339 = comb.mux bin %ibuf.io_inst_0_bits_xcpt1_gf_inst, %c-12_i5, %338 : i5
    %340 = comb.mux bin %ibuf.io_inst_0_bits_xcpt1_pf_inst, %c12_i5, %339 : i5
    %341 = comb.mux bin %ibuf.io_inst_0_bits_xcpt0_ae_inst, %c1_i5, %340 : i5
    %342 = comb.mux bin %ibuf.io_inst_0_bits_xcpt0_gf_inst, %c-12_i5, %341 : i5
    %343 = comb.mux bin %ibuf.io_inst_0_bits_xcpt0_pf_inst, %c12_i5, %342 : i5
    %344 = comb.mux bin %bpu.io_xcpt_if, %c3_i5, %343 : i5
    %345 = comb.mux bin %bpu.io_debug_if, %c14_i5, %344 : i5
    %346 = comb.concat %c0_i59, %345 : i59, i5
    %347 = comb.mux bin %csr.io_interrupt, %csr.io_interrupt_cause, %346 {sv.namehint = "id_cause"} : i64
    %348 = comb.extract %ex_reg_inst from 7 {sv.namehint = "ex_waddr"} : (i32) -> i5
    %349 = comb.extract %mem_reg_inst from 7 {sv.namehint = "mem_waddr"} : (i32) -> i5
    %350 = comb.extract %wb_reg_inst from 7 {sv.namehint = "wb_waddr"} : (i32) -> i5
    %351 = comb.and bin %ex_reg_valid, %ex_ctrl_wxd : i1
    %352 = comb.and bin %mem_reg_valid, %mem_ctrl_wxd {sv.namehint = "_dcache_kill_mem_T"} : i1
    %353 = comb.xor bin %mem_ctrl_mem, %true : i1
    %354 = comb.and bin %352, %353 : i1
    %355 = comb.icmp bin eq %348, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_fp_data_hazard_ex_T_1"} : i5
    %356 = comb.and bin %351, %355 {sv.namehint = "id_bypass_src_0_1"} : i1
    %357 = comb.icmp bin eq %349, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_fp_data_hazard_mem_T_1"} : i5
    %358 = comb.and bin %354, %357 {sv.namehint = "id_bypass_src_0_2"} : i1
    %359 = comb.and bin %352, %357 {sv.namehint = "id_bypass_src_0_3"} : i1
    %360 = comb.icmp bin eq %348, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_fp_data_hazard_ex_T_3"} : i5
    %361 = comb.and bin %351, %360 {sv.namehint = "id_bypass_src_1_1"} : i1
    %362 = comb.icmp bin eq %349, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_fp_data_hazard_mem_T_3"} : i5
    %363 = comb.and bin %354, %362 {sv.namehint = "id_bypass_src_1_2"} : i1
    %364 = comb.and bin %352, %362 {sv.namehint = "id_bypass_src_1_3"} : i1
    %ex_reg_rs_bypass_0 = seq.firreg %514 clock %clock {firrtl.random_init_start = 1002 : ui64} : i1
    %ex_reg_rs_bypass_1 = seq.firreg %499 clock %clock {firrtl.random_init_start = 1003 : ui64} : i1
    %ex_reg_rs_lsb_0 = seq.firreg %517 clock %clock {firrtl.random_init_start = 1004 : ui64} : i2
    %ex_reg_rs_lsb_1 = seq.firreg %504 clock %clock {firrtl.random_init_start = 1006 : ui64} : i2
    %ex_reg_rs_msb_0 = seq.firreg %521 clock %clock {firrtl.random_init_start = 1008 : ui64} : i62
    %ex_reg_rs_msb_1 = seq.firreg %507 clock %clock {firrtl.random_init_start = 1070 : ui64} : i62
    %365 = hw.array_create %io_dmem_resp_bits_data_word_bypass, %wb_reg_wdata, %mem_reg_wdata, %c0_i64 : i64
    %366 = hw.array_get %365[%ex_reg_rs_lsb_0] {sv.namehint = "_ex_rs_T_5"} : !hw.array<4xi64>, i2
    %367 = comb.concat %ex_reg_rs_msb_0, %ex_reg_rs_lsb_0 {sv.namehint = "_ex_rs_T_6"} : i62, i2
    %368 = comb.mux bin %ex_reg_rs_bypass_0, %366, %367 {sv.namehint = "ex_rs_0"} : i64
    %369 = hw.array_create %io_dmem_resp_bits_data_word_bypass, %wb_reg_wdata, %mem_reg_wdata, %c0_i64 : i64
    %370 = hw.array_get %369[%ex_reg_rs_lsb_1] {sv.namehint = "_ex_rs_T_12"} : !hw.array<4xi64>, i2
    %371 = comb.concat %ex_reg_rs_msb_1, %ex_reg_rs_lsb_1 {sv.namehint = "_ex_rs_T_13"} : i62, i2
    %372 = comb.mux bin %ex_reg_rs_bypass_1, %370, %371 {sv.namehint = "ex_rs_1"} : i64
    %373 = comb.icmp bin eq %ex_ctrl_sel_imm, %c-3_i3 {sv.namehint = "_ex_imm_b0_T_4"} : i3
    %374 = comb.extract %ex_reg_inst from 31 {sv.namehint = "_ex_imm_sign_T_1"} : (i32) -> i1
    %375 = comb.xor %373, %true : i1
    %376 = comb.and %375, %374 {sv.namehint = "ex_imm_sign"} : i1
    %377 = comb.icmp bin eq %ex_ctrl_sel_imm, %c2_i3 {sv.namehint = "_ex_imm_b4_1_T"} : i3
    %378 = comb.extract %ex_reg_inst from 20 {sv.namehint = "_ex_imm_b30_20_T_1"} : (i32) -> i11
    %379 = comb.replicate %376 : (i1) -> i11
    %380 = comb.mux bin %377, %378, %379 {sv.namehint = "ex_imm_b30_20"} : i11
    %381 = comb.icmp bin ne %ex_ctrl_sel_imm, %c2_i3 {sv.namehint = "_ex_imm_b19_12_T"} : i3
    %382 = comb.icmp bin ne %ex_ctrl_sel_imm, %c3_i3 {sv.namehint = "_ex_imm_b19_12_T_1"} : i3
    %383 = comb.and bin %381, %382 {sv.namehint = "_ex_imm_b19_12_T_2"} : i1
    %384 = comb.extract %ex_reg_inst from 12 {sv.namehint = "_ex_imm_b19_12_T_3"} : (i32) -> i8
    %385 = comb.replicate %376 : (i1) -> i8
    %386 = comb.mux bin %383, %385, %384 {sv.namehint = "ex_imm_b19_12"} : i8
    %387 = comb.or bin %377, %373 {sv.namehint = "_ex_imm_b11_T_2"} : i1
    %388 = comb.icmp bin eq %ex_ctrl_sel_imm, %c3_i3 {sv.namehint = "_ex_imm_b11_T_3"} : i3
    %389 = comb.extract %ex_reg_inst from 20 {sv.namehint = "_io_dmem_req_bits_signed_T"} : (i32) -> i1
    %390 = comb.icmp bin eq %ex_ctrl_sel_imm, %c1_i3 {sv.namehint = "_ex_imm_b4_1_T_2"} : i3
    %391 = comb.extract %ex_reg_inst from 7 {sv.namehint = "_ex_imm_b0_T_1"} : (i32) -> i1
    %392 = comb.mux bin %390, %391, %376 {sv.namehint = "_ex_imm_b11_T_9"} : i1
    %393 = comb.mux bin %388, %389, %392 {sv.namehint = "_ex_imm_b11_T_10"} : i1
    %394 = comb.xor %387, %true : i1
    %395 = comb.and %394, %393 {sv.namehint = "ex_imm_b11"} : i1
    %396 = comb.or bin %377, %373 {sv.namehint = "_ex_imm_b10_5_T_2"} : i1
    %397 = comb.extract %ex_reg_inst from 25 {sv.namehint = "_ex_imm_b10_5_T_3"} : (i32) -> i6
    %398 = comb.mux bin %396, %c0_i6, %397 {sv.namehint = "ex_imm_b10_5"} : i6
    %399 = comb.icmp bin eq %ex_ctrl_sel_imm, %c0_i3 {sv.namehint = "_ex_imm_b0_T"} : i3
    %400 = comb.or bin %399, %390 {sv.namehint = "_ex_imm_b4_1_T_3"} : i1
    %401 = comb.extract %ex_reg_inst from 8 {sv.namehint = "_ex_imm_b4_1_T_4"} : (i32) -> i4
    %402 = comb.extract %ex_reg_inst from 16 {sv.namehint = "_ex_imm_b4_1_T_6"} : (i32) -> i4
    %403 = comb.extract %ex_reg_inst from 21 {sv.namehint = "_ex_imm_b4_1_T_7"} : (i32) -> i4
    %404 = comb.mux bin %373, %402, %403 {sv.namehint = "_ex_imm_b4_1_T_8"} : i4
    %405 = comb.mux bin %400, %401, %404 {sv.namehint = "_ex_imm_b4_1_T_9"} : i4
    %406 = comb.mux bin %377, %c0_i4, %405 {sv.namehint = "ex_imm_b4_1"} : i4
    %407 = comb.icmp bin eq %ex_ctrl_sel_imm, %c-4_i3 {sv.namehint = "_ex_imm_b0_T_2"} : i3
    %408 = comb.extract %ex_reg_inst from 15 {sv.namehint = "_ex_imm_b0_T_5"} : (i32) -> i1
    %409 = comb.and %373, %408 {sv.namehint = "_ex_imm_b0_T_6"} : i1
    %410 = comb.mux bin %407, %389, %409 {sv.namehint = "_ex_imm_b0_T_7"} : i1
    %411 = comb.mux bin %399, %391, %410 {sv.namehint = "ex_imm_b0"} : i1
    %412 = comb.icmp bin eq %ex_ctrl_sel_alu1, %c1_i2 {sv.namehint = "_ex_op1_T_2"} : i2
    %413 = comb.mux bin %412, %368, %c0_i64 {sv.namehint = "_ex_op1_T_3"} : i64
    %414 = comb.icmp bin eq %ex_ctrl_sel_alu1, %c-2_i2 {sv.namehint = "_ex_op1_T_4"} : i2
    %415 = comb.extract %ex_reg_pc from 33 : (i34) -> i1
    %416 = comb.replicate %415 : (i1) -> i30
    %417 = comb.concat %416, %ex_reg_pc : i30, i34
    %418 = comb.mux bin %414, %417, %413 {sv.namehint = "ex_op1"} : i64
    %419 = comb.mux bin %ex_reg_rvc, %c2_i4, %c4_i4 {sv.namehint = "_ex_op2_T_1"} : i4
    %420 = comb.replicate %376 : (i1) -> i33
    %421 = comb.concat %420, %380, %386, %395, %398, %406, %411 : i33, i11, i8, i1, i6, i4, i1
    %422 = comb.extract %419 from 3 : (i4) -> i1
    %423 = comb.replicate %422 : (i1) -> i60
    %424 = comb.concat %423, %419 : i60, i4
    %425 = hw.array_create %421, %372, %424, %c0_i64 : i64
    %426 = hw.array_get %425[%ex_ctrl_sel_alu2] {sv.namehint = "ex_op2"} : !hw.array<4xi64>, i2
    %alu.io_out, %alu.io_adder_out, %alu.io_cmp_out = hw.instance "alu" @ALU(io_dw: %ex_ctrl_alu_dw: i1, io_fn: %ex_ctrl_alu_fn: i4, io_in2: %426: i64, io_in1: %418: i64) -> (io_out: i64, io_adder_out: i64, io_cmp_out: i1) {sv.namehint = "alu.io_out"}
    %div.io_req_ready, %div.io_resp_valid, %div.io_resp_bits_data, %div.io_resp_bits_tag = hw.instance "div" @MulDiv(clock: %clock: !seq.clock, reset: %reset: i1, io_req_valid: %427: i1, io_req_bits_fn: %ex_ctrl_alu_fn: i4, io_req_bits_dw: %ex_ctrl_alu_dw: i1, io_req_bits_in1: %368: i64, io_req_bits_in2: %372: i64, io_req_bits_tag: %348: i5, io_kill: %726: i1, io_resp_ready: %775: i1) -> (io_req_ready: i1, io_resp_valid: i1, io_resp_bits_data: i64, io_resp_bits_tag: i5) {sv.namehint = "ll_wdata"}
    %427 = comb.and bin %ex_reg_valid, %ex_ctrl_div {sv.namehint = "div.io_req_valid"} : i1
    %428 = comb.xor bin %910, %true {sv.namehint = "_io_fpu_valid_T"} : i1
    %429 = comb.xor bin %1, %true {sv.namehint = "_mem_reg_xcpt_interrupt_T"} : i1
    %430 = comb.and bin %429, %ibuf.io_inst_0_valid, %ibuf.io_inst_0_bits_replay {sv.namehint = "_ex_reg_replay_T_2"} : i1
    %431 = comb.and bin %428, %336 {sv.namehint = "_ex_reg_xcpt_T_1"} : i1
    %432 = comb.and bin %429, %ibuf.io_inst_0_valid, %csr.io_interrupt {sv.namehint = "_ex_reg_xcpt_interrupt_T_2"} : i1
    %433 = comb.and %910, %ex_ctrl_fp : i1
    %434 = comb.and %910, %ex_ctrl_rocc : i1
    %435 = comb.mux bin %910, %ex_ctrl_branch, %269 : i1
    %436 = comb.mux bin %910, %ex_ctrl_jal, %67 : i1
    %437 = comb.mux bin %910, %ex_ctrl_jalr, %65 : i1
    %438 = comb.mux bin %910, %ex_ctrl_rxs2, %267 : i1
    %439 = comb.mux bin %910, %ex_ctrl_sel_imm, %274 : i3
    %440 = comb.mux bin %910, %ex_ctrl_mem, %239 : i1
    %441 = comb.and %910, %ex_ctrl_mul : i1
    %442 = comb.mux bin %910, %ex_ctrl_div, %231 : i1
    %443 = comb.mux bin %910, %ex_ctrl_wxd, %229 : i1
    %444 = comb.mux bin %910, %ex_ctrl_fence_i, %88 : i1
    %445 = comb.mux bin %910, %ex_ctrl_csr, %296 : i3
    %446 = comb.icmp bin eq %323, %c0_i4 : i4
    %447 = comb.and bin %428, %27, %446 : i1
    %448 = comb.or %447, %id_reg_pause : i1
    %449 = comb.and bin %428, %325 : i1
    %450 = comb.or %449, %328 : i1
    %451 = comb.mux bin %336, %c0_i4, %275 : i4
    %452 = comb.mux bin %910, %ex_ctrl_alu_fn, %451 : i4
    %453 = comb.or %336, %249 : i1
    %454 = comb.mux bin %910, %ex_ctrl_alu_dw, %453 : i1
    %455 = comb.concat %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_gf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst : i1, i1, i1
    %456 = comb.icmp bin ne %455, %c0_i3 : i3
    %457 = comb.concat %false, %456 : i1, i1
    %458 = comb.and bin %336, %456 : i1
    %459 = comb.or %458, %ibuf.io_inst_0_bits_rvc : i1
    %460 = comb.mux bin %910, %ex_reg_rvc, %459 : i1
    %461 = comb.concat %bpu.io_xcpt_if, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_gf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst : i1, i1, i1, i1
    %462 = comb.icmp bin ne %461, %c0_i4 : i4
    %463 = comb.concat %bpu.io_xcpt_if, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_gf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst, %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_gf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst : i1, i1, i1, i1, i1, i1, i1
    %464 = comb.icmp bin ne %463, %c0_i7 : i7
    %465 = comb.mux bin %464, %c-2_i2, %c1_i2 : i2
    %466 = comb.mux bin %336, %465, %273 : i2
    %467 = comb.mux bin %910, %ex_ctrl_sel_alu1, %466 : i2
    %468 = comb.mux bin %462, %c0_i2, %457 : i2
    %469 = comb.mux bin %336, %468, %272 : i2
    %470 = comb.mux bin %910, %ex_ctrl_sel_alu2, %469 : i2
    %471 = comb.or bin %88, %290, %298 {sv.namehint = "_ex_reg_flush_pipe_T"} : i1
    %472 = comb.mux bin %910, %ex_reg_flush_pipe, %471 : i1
    %473 = comb.mux bin %910, %ex_reg_load_use, %886 : i1
    %474 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 {sv.namehint = "_ex_reg_mem_size_T_3"} : (i32) -> i2
    %475 = comb.concat %111, %237, %235, %233 : i1, i1, i1, i1
    %476 = comb.icmp bin eq %475, %c5_i4 : i4
    %477 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs2, %c0_i5 {sv.namehint = "_ex_reg_mem_size_T_4"} : i5
    %478 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs1, %c0_i5 {sv.namehint = "_ex_reg_mem_size_T_5"} : i5
    %479 = comb.concat %477, %478 {sv.namehint = "_ex_reg_mem_size_T_6"} : i1, i1
    %480 = comb.mux bin %476, %479, %474 : i2
    %481 = comb.mux bin %910, %ex_reg_mem_size, %480 : i2
    %482 = comb.mux bin %910, %ex_ctrl_mem_cmd, %276 : i5
    %483 = comb.or bin %281, %356, %358, %359 {sv.namehint = "do_bypass"} : i1
    %484 = comb.xor %358, %true : i1
    %485 = comb.concat %true, %484 {sv.namehint = "_bypass_src_T"} : i1, i1
    %486 = comb.mux bin %356, %c1_i2, %485 {sv.namehint = "_bypass_src_T_1"} : i2
    %487 = comb.mux bin %280, %486, %c0_i2 {sv.namehint = "bypass_src"} : i2
    %488 = comb.xor bin %483, %true : i1
    %489 = comb.and bin %265, %488 : i1
    %490 = comb.extract %794 from 0 {sv.namehint = "_ex_reg_rs_lsb_0_T"} : (i64) -> i2
    %491 = comb.mux bin %489, %490, %487 : i2
    %492 = comb.extract %794 from 2 {sv.namehint = "_ex_reg_rs_msb_0_T"} : (i64) -> i62
    %493 = comb.mux bin %489, %492, %ex_reg_rs_msb_0 : i62
    %494 = comb.or bin %284, %361, %363, %364 {sv.namehint = "do_bypass_1"} : i1
    %495 = comb.xor %363, %true : i1
    %496 = comb.concat %true, %495 {sv.namehint = "_bypass_src_T_2"} : i1, i1
    %497 = comb.mux bin %361, %c1_i2, %496 {sv.namehint = "_bypass_src_T_3"} : i2
    %498 = comb.mux bin %283, %497, %c0_i2 {sv.namehint = "bypass_src_1"} : i2
    %499 = comb.mux bin %910, %ex_reg_rs_bypass_1, %494 : i1
    %500 = comb.xor bin %494, %true : i1
    %501 = comb.and bin %267, %500 : i1
    %502 = comb.extract %797 from 0 {sv.namehint = "_ex_reg_rs_lsb_1_T"} : (i64) -> i2
    %503 = comb.mux bin %501, %502, %498 : i2
    %504 = comb.mux bin %910, %ex_reg_rs_lsb_1, %503 : i2
    %505 = comb.extract %797 from 2 {sv.namehint = "_ex_reg_rs_msb_1_T"} : (i64) -> i62
    %506 = comb.and bin %428, %501 : i1
    %507 = comb.mux bin %506, %505, %ex_reg_rs_msb_1 : i62
    %508 = comb.or bin %314, %320 : i1
    %509 = comb.extract %ibuf.io_inst_0_bits_raw from 0 {sv.namehint = "_inst_T"} : (i32) -> i16
    %510 = comb.concat %c0_i16, %509 : i16, i16
    %511 = comb.mux bin %ibuf.io_inst_0_bits_rvc, %510, %ibuf.io_inst_0_bits_raw {sv.namehint = "inst"} : i32
    %512 = comb.xor %508, %true : i1
    %513 = comb.and %512, %483 : i1
    %514 = comb.mux bin %910, %ex_reg_rs_bypass_0, %513 : i1
    %515 = comb.extract %511 from 0 {sv.namehint = "_ex_reg_rs_lsb_0_T_1"} : (i32) -> i2
    %516 = comb.mux bin %508, %515, %491 : i2
    %517 = comb.mux bin %910, %ex_reg_rs_lsb_0, %516 : i2
    %518 = comb.extract %511 from 2 {sv.namehint = "_ex_reg_rs_msb_0_T_1"} : (i32) -> i30
    %519 = comb.concat %c0_i32, %518 : i32, i30
    %520 = comb.mux bin %508, %519, %493 : i62
    %521 = comb.mux bin %910, %ex_reg_rs_msb_0, %520 : i62
    %522 = comb.or bin %428, %csr.io_interrupt, %ibuf.io_inst_0_bits_replay : i1
    %523 = comb.mux bin %522, %347, %ex_reg_cause : i64
    %524 = comb.mux bin %522, %ibuf.io_inst_0_bits_inst_bits, %ex_reg_inst : i32
    %525 = comb.mux bin %522, %ibuf.io_pc, %ex_reg_pc : i34
    %526 = comb.or bin %ex_reg_valid, %ex_reg_replay, %ex_reg_xcpt_interrupt {sv.namehint = "ex_pc_valid"} : i1
    %527 = comb.xor bin %io_dmem_resp_valid, %true {sv.namehint = "_wb_dcache_miss_T"} : i1
    %528 = comb.and bin %wb_ctrl_mem, %527 {sv.namehint = "wb_dcache_miss"} : i1
    %529 = comb.xor bin %io_dmem_req_ready, %true {sv.namehint = "_dcache_blocked_blocked_T"} : i1
    %530 = comb.and bin %ex_ctrl_mem, %529 {sv.namehint = "_replay_ex_structural_T_1"} : i1
    %531 = comb.xor bin %div.io_req_ready, %true {sv.namehint = "_replay_ex_structural_T_2"} : i1
    %532 = comb.and bin %ex_ctrl_div, %531 {sv.namehint = "_replay_ex_structural_T_3"} : i1
    %533 = comb.and bin %528, %ex_reg_load_use {sv.namehint = "replay_ex_load_use"} : i1
    %534 = comb.or bin %530, %532, %533 {sv.namehint = "_replay_ex_T"} : i1
    %535 = comb.and bin %ex_reg_valid, %534 {sv.namehint = "_replay_ex_T_1"} : i1
    %536 = comb.or bin %ex_reg_replay, %535 {sv.namehint = "replay_ex"} : i1
    %537 = comb.xor bin %ex_reg_valid, %true {sv.namehint = "_ctrl_killx_T_1"} : i1
    %538 = comb.or bin %1, %536, %537 {sv.namehint = "ctrl_killx"} : i1
    %539 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c7_i5 {sv.namehint = "_mem_reg_store_T_3"} : i5
    %540 = comb.extract %ex_reg_mem_size from 1 : (i2) -> i1
    %541 = comb.xor bin %540, %true {sv.namehint = "_ex_slow_bypass_T_1"} : i1
    %542 = comb.or bin %539, %541 {sv.namehint = "ex_slow_bypass"} : i1
    %543 = comb.or bin %ex_reg_xcpt_interrupt, %ex_reg_xcpt {sv.namehint = "ex_xcpt"} : i1
    %544 = comb.or bin %mem_reg_valid, %mem_reg_replay, %mem_reg_xcpt_interrupt {sv.namehint = "mem_pc_valid"} : i1
    %545 = comb.and bin %mem_ctrl_branch, %mem_br_taken {sv.namehint = "_mem_cfi_taken_T"} : i1
    %546 = comb.extract %mem_reg_inst from 31 {sv.namehint = "mem_br_target_hi_hi_hi"} : (i32) -> i1
    %547 = comb.extract %mem_reg_inst from 12 {sv.namehint = "mem_br_target_hi_lo_hi_1"} : (i32) -> i8
    %548 = comb.extract %mem_reg_inst from 20 {sv.namehint = "mem_br_target_hi_lo_lo_1"} : (i32) -> i1
    %549 = comb.extract %mem_reg_inst from 7 {sv.namehint = "mem_br_target_hi_lo_lo"} : (i32) -> i1
    %550 = comb.extract %mem_reg_inst from 25 {sv.namehint = "mem_br_target_b10_5"} : (i32) -> i6
    %551 = comb.extract %mem_reg_inst from 8 {sv.namehint = "mem_br_target_b4_1"} : (i32) -> i4
    %552 = comb.replicate %546 : (i1) -> i20
    %553 = comb.concat %552, %549, %550, %551, %false {sv.namehint = "_mem_br_target_T_2"} : i20, i1, i6, i4, i1
    %554 = comb.extract %mem_reg_inst from 21 {sv.namehint = "mem_br_target_lo_hi_1"} : (i32) -> i10
    %555 = comb.replicate %546 {sv.namehint = "mem_br_target_hi_hi_1"} : (i1) -> i12
    %556 = comb.concat %555, %547, %548, %554, %false {sv.namehint = "_mem_br_target_T_4"} : i12, i8, i1, i10, i1
    %557 = comb.mux bin %mem_reg_rvc, %c2_i4, %c4_i4 {sv.namehint = "_mem_br_target_T_6"} : i4
    %558 = comb.extract %557 from 3 : (i4) -> i1
    %559 = comb.replicate %558 : (i1) -> i28
    %560 = comb.concat %559, %557 : i28, i4
    %561 = comb.mux bin %mem_ctrl_jal, %556, %560 {sv.namehint = "_mem_br_target_T_7"} : i32
    %562 = comb.mux bin %545, %553, %561 {sv.namehint = "_mem_br_target_T_8"} : i32
    %563 = comb.extract %562 from 31 : (i32) -> i1
    %564 = comb.replicate %563 : (i1) -> i2
    %565 = comb.concat %564, %562 : i2, i32
    %566 = comb.add bin %mem_reg_pc, %565 {sv.namehint = "_mem_br_target_T_9"} : i34
    %567 = comb.extract %mem_reg_wdata from 33 {sv.namehint = "_mem_npc_a_T"} : (i64) -> i31
    %568 = comb.icmp bin eq %567, %c0_i31 {sv.namehint = "_mem_npc_msb_T"} : i31
    %569 = comb.icmp bin eq %567, %c-1_i31 {sv.namehint = "_mem_npc_msb_T_1"} : i31
    %570 = comb.or bin %568, %569 {sv.namehint = "_mem_npc_msb_T_2"} : i1
    %571 = comb.extract %mem_reg_wdata from 33 {sv.namehint = "_mem_npc_msb_T_3"} : (i64) -> i1
    %572 = comb.extract %mem_reg_wdata from 32 {sv.namehint = "_mem_npc_msb_T_4"} : (i64) -> i1
    %573 = comb.xor bin %572, %true {sv.namehint = "_mem_npc_msb_T_5"} : i1
    %574 = comb.mux bin %570, %571, %573 {sv.namehint = "mem_npc_msb"} : i1
    %575 = comb.extract %mem_reg_wdata from 0 {sv.namehint = "_mem_npc_T_1"} : (i64) -> i33
    %576 = comb.concat %574, %575 {sv.namehint = "_mem_npc_T_2"} : i1, i33
    %577 = comb.mux bin %mem_ctrl_jalr, %576, %566 {sv.namehint = "_mem_npc_T_4"} : i34
    %578 = comb.and bin %577, %c-2_i34 {sv.namehint = "mem_npc"} : i34
    %579 = comb.icmp bin ne %578, %ex_reg_pc {sv.namehint = "_mem_wrong_npc_T"} : i34
    %580 = comb.or bin %ibuf.io_inst_0_valid, %io_imem_resp_valid {sv.namehint = "_mem_wrong_npc_T_1"} : i1
    %581 = comb.icmp bin ne %578, %ibuf.io_pc {sv.namehint = "_mem_wrong_npc_T_2"} : i34
    %582 = comb.xor %580, %true : i1
    %583 = comb.or %582, %581 {sv.namehint = "_mem_wrong_npc_T_3"} : i1
    %584 = comb.mux bin %526, %579, %583 {sv.namehint = "mem_wrong_npc"} : i1
    %585 = comb.xor bin %306, %true {sv.namehint = "_mem_npc_misaligned_T_1"} : i1
    %586 = comb.extract %577 from 1 {sv.namehint = "_mem_npc_misaligned_T_2"} : (i34) -> i1
    %587 = comb.and bin %585, %586 {sv.namehint = "_mem_npc_misaligned_T_3"} : i1
    %588 = comb.xor bin %mem_reg_xcpt, %true {sv.namehint = "_wb_reg_wdata_T"} : i1
    %589 = comb.xor bin %mem_ctrl_jalr, %587 {sv.namehint = "_mem_int_wdata_T_1"} : i1
    %590 = comb.and bin %588, %589 {sv.namehint = "_mem_int_wdata_T_2"} : i1
    %591 = comb.extract %566 from 33 : (i34) -> i1
    %592 = comb.replicate %591 : (i1) -> i30
    %593 = comb.concat %592, %566 : i30, i34
    %594 = comb.mux bin %590, %593, %mem_reg_wdata {sv.namehint = "_mem_int_wdata_T_4"} : i64
    %595 = comb.or bin %mem_ctrl_branch, %mem_ctrl_jalr, %mem_ctrl_jal {sv.namehint = "mem_cfi"} : i1
    %596 = comb.or bin %545, %mem_ctrl_jalr, %mem_ctrl_jal {sv.namehint = "mem_cfi_taken"} : i1
    %597 = comb.and bin %mem_reg_valid, %588, %596 {sv.namehint = "take_pc_mem"} : i1
    %598 = comb.xor bin %538, %true {sv.namehint = "_mem_reg_xcpt_T"} : i1
    %599 = comb.and bin %429, %536 {sv.namehint = "_mem_reg_replay_T_1"} : i1
    %600 = comb.and bin %598, %543 {sv.namehint = "_mem_reg_xcpt_T_1"} : i1
    %601 = comb.and bin %429, %ex_reg_xcpt_interrupt {sv.namehint = "_mem_reg_xcpt_interrupt_T_1"} : i1
    %602 = comb.and bin %mem_reg_valid, %mem_reg_flush_pipe : i1
    %603 = comb.xor %526, %true : i1
    %604 = comb.or %602, %603 : i1
    %605 = comb.mux bin %604, %mem_ctrl_fp, %ex_ctrl_fp : i1
    %606 = comb.xor %526, %true : i1
    %607 = comb.or %602, %606 : i1
    %608 = comb.mux bin %607, %mem_ctrl_rocc, %ex_ctrl_rocc : i1
    %609 = comb.xor %526, %true : i1
    %610 = comb.or %602, %609 : i1
    %611 = comb.mux bin %610, %mem_ctrl_branch, %ex_ctrl_branch : i1
    %612 = comb.xor %526, %true : i1
    %613 = comb.or %602, %612 : i1
    %614 = comb.mux bin %613, %mem_ctrl_jal, %ex_ctrl_jal : i1
    %615 = comb.xor %526, %true : i1
    %616 = comb.or %602, %615 : i1
    %617 = comb.mux bin %616, %mem_ctrl_jalr, %ex_ctrl_jalr : i1
    %618 = comb.xor %526, %true : i1
    %619 = comb.or %602, %618 : i1
    %620 = comb.mux bin %619, %mem_ctrl_mem, %ex_ctrl_mem : i1
    %621 = comb.xor %526, %true : i1
    %622 = comb.or %602, %621 : i1
    %623 = comb.mux bin %622, %mem_ctrl_mul, %ex_ctrl_mul : i1
    %624 = comb.xor %526, %true : i1
    %625 = comb.or %602, %624 : i1
    %626 = comb.mux bin %625, %mem_ctrl_div, %ex_ctrl_div : i1
    %627 = comb.xor %526, %true : i1
    %628 = comb.or %602, %627 : i1
    %629 = comb.mux bin %628, %mem_ctrl_wxd, %ex_ctrl_wxd : i1
    %630 = comb.xor %526, %true : i1
    %631 = comb.or %602, %630 : i1
    %632 = comb.mux bin %631, %mem_ctrl_csr, %ex_ctrl_csr : i3
    %633 = comb.xor %526, %true : i1
    %634 = comb.or %602, %633 : i1
    %635 = comb.mux bin %634, %mem_reg_rvc, %ex_reg_rvc : i1
    %636 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c0_i5 {sv.namehint = "_mem_reg_load_T"} : i5
    %637 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c-16_i5 {sv.namehint = "_mem_reg_load_T_1"} : i5
    %638 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c6_i5 {sv.namehint = "_mem_reg_load_T_2"} : i5
    %639 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c4_i5 {sv.namehint = "_mem_reg_store_T_5"} : i5
    %640 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c9_i5 {sv.namehint = "_mem_reg_store_T_6"} : i5
    %641 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c10_i5 {sv.namehint = "_mem_reg_store_T_7"} : i5
    %642 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c11_i5 {sv.namehint = "_mem_reg_store_T_8"} : i5
    %643 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c8_i5 {sv.namehint = "_mem_reg_store_T_12"} : i5
    %644 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c12_i5 {sv.namehint = "_mem_reg_store_T_13"} : i5
    %645 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c13_i5 {sv.namehint = "_mem_reg_store_T_14"} : i5
    %646 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c14_i5 {sv.namehint = "_mem_reg_store_T_15"} : i5
    %647 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c15_i5 {sv.namehint = "_mem_reg_store_T_16"} : i5
    %648 = comb.or bin %636, %637, %638, %539, %639, %640, %641, %642, %643, %644, %645, %646, %647 {sv.namehint = "_mem_reg_load_T_24"} : i1
    %649 = comb.and bin %ex_ctrl_mem, %648 {sv.namehint = "_mem_reg_load_T_25"} : i1
    %650 = comb.xor %526, %true : i1
    %651 = comb.or %602, %650 : i1
    %652 = comb.mux bin %651, %mem_reg_load, %649 : i1
    %653 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c1_i5 {sv.namehint = "_mem_reg_store_T"} : i5
    %654 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c-15_i5 {sv.namehint = "_mem_reg_store_T_1"} : i5
    %655 = comb.or bin %653, %654, %539, %639, %640, %641, %642, %643, %644, %645, %646, %647 {sv.namehint = "_mem_reg_store_T_22"} : i1
    %656 = comb.and bin %ex_ctrl_mem, %655 {sv.namehint = "_mem_reg_store_T_23"} : i1
    %657 = comb.xor %526, %true : i1
    %658 = comb.or %602, %657 : i1
    %659 = comb.mux bin %658, %mem_reg_store, %656 : i1
    %660 = comb.xor %526, %true : i1
    %661 = comb.or %602, %660 : i1
    %662 = comb.mux bin %661, %mem_mem_cmd_bh, %542 : i1
    %663 = comb.xor %526, %true : i1
    %664 = comb.or %602, %663 : i1
    %665 = comb.mux bin %664, %mem_reg_cause, %ex_reg_cause : i64
    %666 = comb.xor %526, %true : i1
    %667 = comb.or %602, %666 : i1
    %668 = comb.mux bin %667, %mem_reg_inst, %ex_reg_inst : i32
    %669 = comb.xor %526, %true : i1
    %670 = comb.or %602, %669 : i1
    %671 = comb.mux bin %670, %mem_reg_hls_or_dv, %csr.io_status_dv : i1
    %672 = comb.xor %526, %true : i1
    %673 = comb.or %602, %672 : i1
    %674 = comb.mux bin %673, %mem_reg_pc, %ex_reg_pc : i34
    %675 = comb.xor %526, %true : i1
    %676 = comb.or %602, %675 : i1
    %677 = comb.mux bin %676, %mem_reg_wdata, %alu.io_out : i64
    %678 = comb.xor %526, %true : i1
    %679 = comb.or %602, %678 : i1
    %680 = comb.mux bin %679, %mem_br_taken, %alu.io_cmp_out : i1
    %681 = comb.or bin %ex_ctrl_mem, %ex_ctrl_rocc : i1
    %682 = comb.mux bin %ex_ctrl_rocc, %c-1_i2, %ex_reg_mem_size {sv.namehint = "size"} : i2
    %683 = comb.extract %372 from 0 {sv.namehint = "_mem_reg_rs2_T_1"} : (i64) -> i8
    %684 = comb.replicate %683 {sv.namehint = "_mem_reg_rs2_T_2"} : (i8) -> i16
    %685 = comb.replicate %684 {sv.namehint = "_mem_reg_rs2_T_3"} : (i16) -> i32
    %686 = comb.replicate %685 {sv.namehint = "_mem_reg_rs2_T_4"} : (i32) -> i64
    %687 = comb.extract %372 from 0 {sv.namehint = "_mem_reg_rs2_T_6"} : (i64) -> i16
    %688 = comb.replicate %687 {sv.namehint = "_mem_reg_rs2_T_7"} : (i16) -> i32
    %689 = comb.replicate %688 {sv.namehint = "_mem_reg_rs2_T_8"} : (i32) -> i64
    %690 = comb.extract %372 from 0 {sv.namehint = "_mem_reg_rs2_T_10"} : (i64) -> i32
    %691 = comb.replicate %690 {sv.namehint = "_mem_reg_rs2_T_11"} : (i32) -> i64
    %692 = hw.array_create %372, %691, %689, %686 : i64
    %693 = hw.array_get %692[%682] {sv.namehint = "_mem_reg_rs2_T_14"} : !hw.array<4xi64>, i2
    %694 = comb.and bin %526, %ex_ctrl_rxs2, %681 : i1
    %695 = comb.xor %694, %true : i1
    %696 = comb.or %602, %695 : i1
    %697 = comb.mux bin %696, %mem_reg_rs2, %693 : i64
    %698 = comb.and bin %ex_ctrl_jalr, %csr.io_status_debug : i1
    %699 = comb.or %698, %ex_ctrl_fence_i : i1
    %700 = comb.xor %526, %true : i1
    %701 = comb.or %602, %700 : i1
    %702 = comb.mux bin %701, %mem_ctrl_fence_i, %699 : i1
    %703 = comb.or %698, %ex_reg_flush_pipe : i1
    %704 = comb.xor %526, %true : i1
    %705 = comb.or %602, %704 : i1
    %706 = comb.mux bin %705, %mem_reg_flush_pipe, %703 : i1
    %707 = comb.and bin %mem_reg_load, %bpu.io_xcpt_ld {sv.namehint = "_mem_breakpoint_T"} : i1
    %708 = comb.and bin %mem_reg_store, %bpu.io_xcpt_st {sv.namehint = "_mem_breakpoint_T_1"} : i1
    %709 = comb.and bin %mem_reg_load, %bpu.io_debug_ld {sv.namehint = "_mem_debug_breakpoint_T"} : i1
    %710 = comb.and bin %mem_reg_store, %bpu.io_debug_st {sv.namehint = "_mem_debug_breakpoint_T_1"} : i1
    %711 = comb.or bin %709, %710 {sv.namehint = "mem_debug_breakpoint"} : i1
    %712 = comb.or bin %711, %707, %708 {sv.namehint = "mem_ldst_xcpt"} : i1
    %713 = comb.mux bin %711, %c-2_i4, %c3_i4 {sv.namehint = "mem_ldst_cause"} : i4
    %714 = comb.or bin %mem_reg_xcpt_interrupt, %mem_reg_xcpt : i1
    %715 = comb.and bin %mem_reg_valid, %587 : i1
    %716 = comb.and bin %mem_reg_valid, %712 : i1
    %717 = comb.or bin %714, %715, %716 {sv.namehint = "mem_xcpt"} : i1
    %718 = comb.mux bin %715, %c0_i4, %713 : i4
    %719 = comb.concat %c0_i60, %718 : i60, i4
    %720 = comb.mux bin %714, %mem_reg_cause, %719 {sv.namehint = "mem_cause"} : i64
    %721 = comb.and bin %352, %io_dmem_replay_next {sv.namehint = "dcache_kill_mem"} : i1
    %722 = comb.or bin %721, %mem_reg_replay {sv.namehint = "_replay_mem_T"} : i1
    %723 = comb.xor bin %mem_reg_valid, %true {sv.namehint = "_killm_common_T_2"} : i1
    %724 = comb.or bin %721, %766, %mem_reg_xcpt, %723 {sv.namehint = "killm_common"} : i1
    %725 = comb.and bin %div.io_req_ready, %427 {sv.namehint = "_div_io_kill_T"} : i1
    %div_io_kill_REG = seq.firreg %725 clock %clock {firrtl.random_init_start = 1132 : ui64} : i1
    %726 = comb.and bin %724, %div_io_kill_REG {sv.namehint = "div.io_kill"} : i1
    %727 = comb.or bin %724, %717 {sv.namehint = "_ctrl_killm_T"} : i1
    %728 = comb.xor bin %727, %true {sv.namehint = "_wb_reg_flush_pipe_T"} : i1
    %729 = comb.xor bin %766, %true {sv.namehint = "io_imem_req_bits_speculative"} : i1
    %730 = comb.and bin %722, %729 {sv.namehint = "_wb_reg_replay_T_1"} : i1
    %731 = comb.and bin %717, %729 {sv.namehint = "_wb_reg_xcpt_T_1"} : i1
    %732 = comb.and bin %728, %mem_reg_flush_pipe {sv.namehint = "_wb_reg_flush_pipe_T_1"} : i1
    %733 = comb.mux bin %544, %mem_ctrl_rocc, %wb_ctrl_rocc : i1
    %734 = comb.mux bin %544, %mem_ctrl_mem, %wb_ctrl_mem : i1
    %735 = comb.mux bin %544, %mem_ctrl_div, %wb_ctrl_div : i1
    %736 = comb.mux bin %544, %mem_ctrl_wxd, %wb_ctrl_wxd : i1
    %737 = comb.mux bin %544, %mem_ctrl_csr, %wb_ctrl_csr : i3
    %738 = comb.mux bin %544, %mem_ctrl_fence_i, %wb_ctrl_fence_i : i1
    %739 = comb.and bin %588, %mem_ctrl_fp, %mem_ctrl_wxd {sv.namehint = "_wb_reg_wdata_T_2"} : i1
    %740 = comb.mux bin %739, %c0_i64, %594 {sv.namehint = "_wb_reg_wdata_T_3"} : i64
    %741 = comb.mux bin %544, %740, %wb_reg_wdata : i64
    %742 = comb.mux bin %544, %720, %wb_reg_cause : i64
    %743 = comb.mux bin %544, %mem_reg_inst, %wb_reg_inst : i32
    %744 = comb.mux bin %544, %mem_reg_hls_or_dv, %wb_reg_hls_or_dv : i1
    %745 = comb.mux bin %544, %mem_reg_pc, %wb_reg_pc : i34
    %746 = comb.and bin %wb_reg_valid, %wb_ctrl_mem : i1
    %747 = comb.and bin %746, %io_dmem_s2_xcpt_pf_st : i1
    %748 = comb.and bin %746, %io_dmem_s2_xcpt_pf_ld : i1
    %749 = comb.and bin %746, %io_dmem_s2_xcpt_ae_st : i1
    %750 = comb.and bin %746, %io_dmem_s2_xcpt_ae_ld : i1
    %751 = comb.and bin %746, %io_dmem_s2_xcpt_ma_st : i1
    %752 = comb.and bin %746, %io_dmem_s2_xcpt_ma_ld : i1
    %753 = comb.or bin %wb_reg_xcpt, %747, %748, %749, %750, %751, %752 {sv.namehint = "wb_xcpt"} : i1
    %754 = comb.concat %true, %751, %false : i1, i1, i1
    %755 = comb.mux bin %750, %c-3_i3, %754 : i3
    %756 = comb.mux bin %749, %c-1_i3, %755 : i3
    %757 = comb.concat %c0_i2, %756 : i2, i3
    %758 = comb.mux bin %748, %c13_i5, %757 : i5
    %759 = comb.mux bin %747, %c15_i5, %758 : i5
    %760 = comb.concat %c0_i59, %759 : i59, i5
    %761 = comb.mux bin %wb_reg_xcpt, %wb_reg_cause, %760 {sv.namehint = "wb_cause"} : i64
    %762 = comb.and bin %wb_reg_valid, %wb_ctrl_wxd {sv.namehint = "wb_wxd"} : i1
    %763 = comb.or bin %wb_ctrl_div, %528, %wb_ctrl_rocc {sv.namehint = "wb_set_sboard"} : i1
    %764 = comb.or bin %io_dmem_s2_nack, %wb_reg_replay {sv.namehint = "replay_wb_common"} : i1
    %765 = comb.or bin %764, %329 {sv.namehint = "_replay_wb_T"} : i1
    %766 = comb.or bin %765, %753, %csr.io_eret, %wb_reg_flush_pipe {sv.namehint = "take_pc_wb"} : i1
    %767 = comb.extract %io_dmem_resp_bits_tag from 0 {sv.namehint = "dmem_resp_fpu"} : (i6) -> i1
    %768 = comb.xor bin %767, %true {sv.namehint = "dmem_resp_xpu"} : i1
    %769 = comb.extract %io_dmem_resp_bits_tag from 1 {sv.namehint = "dmem_resp_waddr"} : (i6) -> i5
    %770 = comb.and bin %io_dmem_resp_valid, %io_dmem_resp_bits_has_data {sv.namehint = "dmem_resp_valid"} : i1
    %771 = comb.xor bin %762, %true {sv.namehint = "_ctrl_stalld_T_17"} : i1
    %772 = comb.and bin %775, %div.io_resp_valid {sv.namehint = "_ll_wen_T"} : i1
    %773 = comb.and bin %770, %io_dmem_resp_bits_replay, %768 : i1
    %774 = comb.xor %773, %true : i1
    %775 = comb.and %774, %771 {sv.namehint = "div.io_resp_ready"} : i1
    %776 = comb.mux bin %773, %769, %div.io_resp_bits_tag {sv.namehint = "ll_waddr"} : i5
    %777 = comb.or %773, %772 {sv.namehint = "ll_wen"} : i1
    %778 = comb.xor bin %765, %true {sv.namehint = "_wb_valid_T"} : i1
    %779 = comb.xor bin %753, %true {sv.namehint = "_rocc_blocked_T"} : i1
    %780 = comb.and bin %wb_reg_valid, %778, %779 {sv.namehint = "wb_valid"} : i1
    %781 = comb.and bin %780, %wb_ctrl_wxd {sv.namehint = "wb_wen"} : i1
    %782 = comb.or bin %781, %777 {sv.namehint = "rf_wen"} : i1
    %783 = comb.mux bin %777, %776, %350 {sv.namehint = "rf_waddr"} : i5
    %784 = comb.and bin %770, %768 {sv.namehint = "_rf_wdata_T"} : i1
    %785 = comb.icmp bin ne %wb_ctrl_csr, %c0_i3 {sv.namehint = "_rf_wdata_T_2"} : i3
    %786 = comb.mux bin %785, %csr.io_rw_rdata, %wb_reg_wdata {sv.namehint = "_rf_wdata_T_4"} : i64
    %787 = comb.mux bin %777, %div.io_resp_bits_data, %786 {sv.namehint = "_rf_wdata_T_5"} : i64
    %788 = comb.mux bin %784, %io_dmem_resp_bits_data, %787 {sv.namehint = "rf_wdata"} : i64
    %789 = comb.icmp bin ne %783, %c0_i5 : i5
    %790 = comb.xor bin %783, %c-1_i5 : i5
    %791 = comb.and %782, %789 : i1
    %792 = comb.icmp bin eq %783, %ibuf.io_inst_0_bits_inst_rs1 : i5
    %793 = comb.and bin %782, %789, %792 : i1
    %794 = comb.mux bin %793, %788, %278 {sv.namehint = "id_rs_0"} : i64
    %795 = comb.icmp bin eq %783, %ibuf.io_inst_0_bits_inst_rs2 : i5
    %796 = comb.and bin %782, %789, %795 : i1
    %797 = comb.mux bin %796, %788, %279 {sv.namehint = "id_rs_1"} : i64
    %798 = comb.xor bin %wb_reg_xcpt, %true {sv.namehint = "tval_dmem_addr"} : i1
    %799 = comb.icmp bin eq %wb_reg_cause, %c3_i64 {sv.namehint = "_tval_any_addr_T"} : i64
    %800 = comb.icmp bin eq %wb_reg_cause, %c1_i64 {sv.namehint = "_tval_any_addr_T_1"} : i64
    %801 = comb.icmp bin eq %wb_reg_cause, %c12_i64 {sv.namehint = "_tval_any_addr_T_2"} : i64
    %802 = comb.icmp bin eq %wb_reg_cause, %c20_i64 {sv.namehint = "_csr_io_htval_htval_valid_imem_T"} : i64
    %803 = comb.or bin %798, %799, %800, %801, %802 {sv.namehint = "tval_any_addr"} : i1
    %804 = comb.icmp bin eq %wb_reg_cause, %c2_i64 {sv.namehint = "tval_inst"} : i64
    %805 = comb.or bin %803, %804 {sv.namehint = "_tval_valid_T"} : i1
    %806 = comb.and bin %753, %805 {sv.namehint = "tval_valid"} : i1
    %807 = comb.and bin %803, %csr.io_status_v {sv.namehint = "_csr_io_gva_T"} : i1
    %808 = comb.and bin %798, %wb_reg_hls_or_dv {sv.namehint = "_csr_io_gva_T_1"} : i1
    %809 = comb.or bin %807, %808 {sv.namehint = "_csr_io_gva_T_2"} : i1
    %810 = comb.and bin %753, %809 {sv.namehint = "csr.io_gva"} : i1
    %811 = comb.extract %wb_reg_wdata from 33 {sv.namehint = "_csr_io_tval_a_T"} : (i64) -> i31
    %812 = comb.icmp bin eq %811, %c0_i31 {sv.namehint = "_csr_io_tval_msb_T"} : i31
    %813 = comb.icmp bin eq %811, %c-1_i31 {sv.namehint = "_csr_io_tval_msb_T_1"} : i31
    %814 = comb.or bin %812, %813 {sv.namehint = "_csr_io_tval_msb_T_2"} : i1
    %815 = comb.extract %wb_reg_wdata from 33 {sv.namehint = "_csr_io_tval_msb_T_3"} : (i64) -> i1
    %816 = comb.extract %wb_reg_wdata from 32 {sv.namehint = "_csr_io_tval_msb_T_4"} : (i64) -> i1
    %817 = comb.xor bin %816, %true {sv.namehint = "_csr_io_tval_msb_T_5"} : i1
    %818 = comb.mux bin %814, %815, %817 {sv.namehint = "csr_io_tval_msb"} : i1
    %819 = comb.extract %wb_reg_wdata from 0 {sv.namehint = "_csr_io_tval_T"} : (i64) -> i33
    %820 = comb.concat %818, %819 {sv.namehint = "_csr_io_tval_T_1"} : i1, i33
    %821 = comb.mux bin %806, %820, %c0_i34 {sv.namehint = "csr.io_tval"} : i34
    %822 = comb.and bin %wb_reg_xcpt, %802 {sv.namehint = "csr_io_htval_htval_valid_imem"} : i1
    %823 = comb.xor bin %822, %true {sv.namehint = "_csr_io_htval_T"} : i1
    %824 = comb.xor bin %reset, %true {sv.namehint = "_csr_io_htval_T_3"} : i1
    sv.always posedge %0 {
      sv.if %824 {
        sv.assert %823, immediate label "assert__csr_io_htval_assert"
      }
    }
    %825 = comb.extract %wb_reg_inst from 20 {sv.namehint = "csr.io_rw_addr"} : (i32) -> i12
    %826 = comb.concat %wb_reg_valid, %c-1_i2 {sv.namehint = "_csr_io_rw_cmd_T_1"} : i1, i2
    %827 = comb.and bin %wb_ctrl_csr, %826 {sv.namehint = "csr.io_rw_cmd"} : i3
    %828 = comb.and bin %265, %280 : i1
    %829 = comb.and bin %267, %283 : i1
    %830 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rd, %c0_i5 : i5
    %831 = comb.and bin %229, %830 : i1
    %_r = seq.firreg %867 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 1133 : ui64} : i32
    %832 = comb.extract %_r from 1 {sv.namehint = "_r_T"} : (i32) -> i31
    %833 = comb.concat %832, %false {sv.namehint = "r"} : i31, i1
    %834 = comb.concat %c0_i27, %776 : i27, i5
    %835 = comb.shl bin %c1_i32, %834 : i32
    %836 = comb.mux bin %777, %835, %c0_i32 : i32
    %837 = comb.xor bin %836, %c-1_i32 : i32
    %838 = comb.and bin %833, %837 : i32
    %839 = comb.mux bin %777, %838, %_r : i32
    %840 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rs1 : i27, i5
    %841 = comb.shru bin %833, %840 {sv.namehint = "_id_sboard_hazard_T"} : i32
    %842 = comb.extract %841 from 0 {sv.namehint = "_id_sboard_hazard_T_1"} : (i32) -> i1
    %843 = comb.icmp bin eq %776, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_id_sboard_hazard_T_2"} : i5
    %844 = comb.and bin %777, %843 {sv.namehint = "_id_sboard_hazard_T_3"} : i1
    %845 = comb.xor bin %844, %true {sv.namehint = "_id_sboard_hazard_T_4"} : i1
    %846 = comb.and bin %828, %842, %845 {sv.namehint = "_id_sboard_hazard_T_6"} : i1
    %847 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rs2 : i27, i5
    %848 = comb.shru bin %833, %847 {sv.namehint = "_id_sboard_hazard_T_7"} : i32
    %849 = comb.extract %848 from 0 {sv.namehint = "_id_sboard_hazard_T_8"} : (i32) -> i1
    %850 = comb.icmp bin eq %776, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_id_sboard_hazard_T_9"} : i5
    %851 = comb.and bin %777, %850 {sv.namehint = "_id_sboard_hazard_T_10"} : i1
    %852 = comb.xor bin %851, %true {sv.namehint = "_id_sboard_hazard_T_11"} : i1
    %853 = comb.and bin %829, %849, %852 {sv.namehint = "_id_sboard_hazard_T_13"} : i1
    %854 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rd : i27, i5
    %855 = comb.shru bin %833, %854 {sv.namehint = "_id_sboard_hazard_T_14"} : i32
    %856 = comb.extract %855 from 0 {sv.namehint = "_id_sboard_hazard_T_15"} : (i32) -> i1
    %857 = comb.icmp bin eq %776, %ibuf.io_inst_0_bits_inst_rd {sv.namehint = "_id_sboard_hazard_T_16"} : i5
    %858 = comb.and bin %777, %857 {sv.namehint = "_id_sboard_hazard_T_17"} : i1
    %859 = comb.xor bin %858, %true {sv.namehint = "_id_sboard_hazard_T_18"} : i1
    %860 = comb.and bin %831, %856, %859 {sv.namehint = "_id_sboard_hazard_T_20"} : i1
    %861 = comb.and bin %763, %781 : i1
    %862 = comb.concat %c0_i27, %350 : i27, i5
    %863 = comb.shl bin %c1_i32, %862 : i32
    %864 = comb.mux bin %861, %863, %c0_i32 : i32
    %865 = comb.or bin %838, %864 : i32
    %866 = comb.or bin %777, %861 : i1
    %867 = comb.mux bin %866, %865, %839 : i32
    %868 = comb.icmp bin ne %ex_ctrl_csr, %c0_i3 {sv.namehint = "_ex_cannot_bypass_T"} : i3
    %869 = comb.or bin %868, %ex_ctrl_jalr, %ex_ctrl_mem, %ex_ctrl_mul, %ex_ctrl_div, %ex_ctrl_fp, %ex_ctrl_rocc {sv.namehint = "ex_cannot_bypass"} : i1
    %870 = comb.and bin %828, %355 {sv.namehint = "_data_hazard_ex_T_1"} : i1
    %871 = comb.and bin %829, %360 {sv.namehint = "_data_hazard_ex_T_3"} : i1
    %872 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %348 {sv.namehint = "_fp_data_hazard_ex_T_7"} : i5
    %873 = comb.and bin %831, %872 {sv.namehint = "_data_hazard_ex_T_5"} : i1
    %874 = comb.or bin %870, %871, %873 {sv.namehint = "_data_hazard_ex_T_7"} : i1
    %875 = comb.and bin %ex_reg_valid, %ex_ctrl_wxd, %874, %869 {sv.namehint = "id_ex_hazard"} : i1
    %876 = comb.icmp bin ne %mem_ctrl_csr, %c0_i3 {sv.namehint = "_mem_cannot_bypass_T"} : i3
    %877 = comb.and bin %mem_ctrl_mem, %mem_mem_cmd_bh {sv.namehint = "_mem_cannot_bypass_T_1"} : i1
    %878 = comb.or bin %876, %877, %mem_ctrl_mul, %mem_ctrl_div, %mem_ctrl_fp, %mem_ctrl_rocc {sv.namehint = "mem_cannot_bypass"} : i1
    %879 = comb.and bin %828, %357 {sv.namehint = "_data_hazard_mem_T_1"} : i1
    %880 = comb.and bin %829, %362 {sv.namehint = "_data_hazard_mem_T_3"} : i1
    %881 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %349 {sv.namehint = "_fp_data_hazard_mem_T_7"} : i5
    %882 = comb.and bin %831, %881 {sv.namehint = "_data_hazard_mem_T_5"} : i1
    %883 = comb.or bin %879, %880, %882 {sv.namehint = "_data_hazard_mem_T_7"} : i1
    %884 = comb.and bin %mem_ctrl_wxd, %883 {sv.namehint = "data_hazard_mem"} : i1
    %885 = comb.and bin %mem_reg_valid, %884, %878 {sv.namehint = "id_mem_hazard"} : i1
    %886 = comb.and bin %mem_reg_valid, %884, %mem_ctrl_mem {sv.namehint = "id_load_use"} : i1
    %887 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rs1, %350 {sv.namehint = "_fp_data_hazard_wb_T_1"} : i5
    %888 = comb.and bin %828, %887 {sv.namehint = "_data_hazard_wb_T_1"} : i1
    %889 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rs2, %350 {sv.namehint = "_fp_data_hazard_wb_T_3"} : i5
    %890 = comb.and bin %829, %889 {sv.namehint = "_data_hazard_wb_T_3"} : i1
    %891 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %350 {sv.namehint = "_fp_data_hazard_wb_T_7"} : i5
    %892 = comb.and bin %831, %891 {sv.namehint = "_data_hazard_wb_T_5"} : i1
    %893 = comb.or bin %888, %890, %892 {sv.namehint = "_data_hazard_wb_T_7"} : i1
    %894 = comb.and bin %wb_reg_valid, %wb_ctrl_wxd, %893, %763 {sv.namehint = "id_wb_hazard"} : i1
    %dcache_blocked_blocked = seq.firreg %897 clock %clock {firrtl.random_init_start = 1165 : ui64} : i1
    %895 = comb.xor bin %io_dmem_perf_grant, %true {sv.namehint = "_dcache_blocked_T"} : i1
    %896 = comb.or bin %dcache_blocked_blocked, %924, %io_dmem_s2_nack {sv.namehint = "_dcache_blocked_blocked_T_5"} : i1
    %897 = comb.and bin %529, %895, %896 {sv.namehint = "_dcache_blocked_blocked_T_6"} : i1
    %rocc_blocked = seq.firreg %899 clock %clock {firrtl.random_init_start = 1166 : ui64} : i1
    %898 = comb.or bin %939, %rocc_blocked {sv.namehint = "_rocc_blocked_T_3"} : i1
    %899 = comb.and bin %779, %898 {sv.namehint = "_rocc_blocked_T_4"} : i1
    %900 = comb.or bin %ex_reg_valid, %mem_reg_valid, %wb_reg_valid {sv.namehint = "_ctrl_stalld_T_4"} : i1
    %901 = comb.and bin %csr.io_singleStep, %900 {sv.namehint = "_ctrl_stalld_T_5"} : i1
    %902 = comb.and bin %239, %dcache_blocked_blocked, %895 {sv.namehint = "_ctrl_stalld_T_13"} : i1
    %903 = comb.and bin %div.io_resp_valid, %771 {sv.namehint = "_ctrl_stalld_T_18"} : i1
    %904 = comb.or bin %div.io_req_ready, %903 {sv.namehint = "_ctrl_stalld_T_19"} : i1
    %905 = comb.xor bin %904, %true {sv.namehint = "_ctrl_stalld_T_20"} : i1
    %906 = comb.or bin %905, %427 {sv.namehint = "_ctrl_stalld_T_21"} : i1
    %907 = comb.and bin %231, %906 {sv.namehint = "_ctrl_stalld_T_22"} : i1
    %908 = comb.or bin %875, %885, %894, %846, %853, %860, %901, %902, %907, %333, %csr.io_csr_stall, %id_reg_pause {sv.namehint = "_ctrl_stalld_T_28"} : i1
    %909 = comb.xor bin %ibuf.io_inst_0_valid, %true {sv.namehint = "_ctrl_killd_T"} : i1
    %910 = comb.or bin %909, %ibuf.io_inst_0_bits_replay, %1, %908, %csr.io_interrupt {sv.namehint = "ctrl_killd"} : i1
    %911 = comb.or bin %753, %csr.io_eret {sv.namehint = "_io_imem_req_bits_pc_T"} : i1
    %912 = comb.mux bin %765, %wb_reg_pc, %578 {sv.namehint = "_io_imem_req_bits_pc_T_1"} : i34
    %913 = comb.mux bin %911, %csr.io_evec, %912 {sv.namehint = "io_imem_req_bits_pc"} : i34
    %914 = comb.xor bin %io_dmem_s2_nack, %true {sv.namehint = "_io_imem_flush_icache_T_1"} : i1
    %915 = comb.and bin %wb_reg_valid, %wb_ctrl_fence_i, %914 {sv.namehint = "io_imem_flush_icache"} : i1
    %916 = comb.extract %csr.io_customCSRs_0_value from 1 {sv.namehint = "_io_imem_might_request_imem_might_request_reg_T_1"} : (i64) -> i1
    %917 = comb.or bin %526, %544, %916 {sv.namehint = "_io_imem_might_request_imem_might_request_reg_T_2"} : i1
    %918 = comb.xor bin %764, %true {sv.namehint = "_io_rocc_cmd_valid_T_1"} : i1
    %919 = comb.xor bin %908, %true {sv.namehint = "ibuf.io_inst_0_ready"} : i1
    %920 = comb.xor bin %595, %true {sv.namehint = "_io_imem_btb_update_valid_T_3"} : i1
    %921 = comb.or bin %920, %596 {sv.namehint = "_io_imem_btb_update_valid_T_4"} : i1
    %922 = comb.and bin %mem_reg_valid, %729, %584, %921 {sv.namehint = "io_imem_btb_update_valid"} : i1
    %923 = comb.and bin %mem_reg_valid, %729 {sv.namehint = "io_imem_bht_update_valid"} : i1
    %924 = comb.and bin %ex_reg_valid, %ex_ctrl_mem {sv.namehint = "io_dmem_req_valid"} : i1
    %925 = comb.concat %348, %ex_ctrl_fp {sv.namehint = "ex_dcache_tag"} : i5, i1
    %926 = comb.extract %ex_reg_inst from 14 {sv.namehint = "_io_dmem_req_bits_signed_T_1"} : (i32) -> i1
    %927 = comb.xor bin %926, %true {sv.namehint = "io_dmem_req_bits_signed"} : i1
    %928 = comb.extract %368 from 33 {sv.namehint = "_io_dmem_req_bits_addr_a_T"} : (i64) -> i31
    %929 = comb.icmp bin eq %928, %c0_i31 {sv.namehint = "_io_dmem_req_bits_addr_msb_T"} : i31
    %930 = comb.icmp bin eq %928, %c-1_i31 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_1"} : i31
    %931 = comb.or bin %929, %930 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_2"} : i1
    %932 = comb.extract %alu.io_adder_out from 33 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_3"} : (i64) -> i1
    %933 = comb.extract %alu.io_adder_out from 32 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_4"} : (i64) -> i1
    %934 = comb.xor bin %933, %true {sv.namehint = "_io_dmem_req_bits_addr_msb_T_5"} : i1
    %935 = comb.mux bin %931, %932, %934 {sv.namehint = "io_dmem_req_bits_addr_msb"} : i1
    %936 = comb.extract %alu.io_adder_out from 0 {sv.namehint = "_io_dmem_req_bits_addr_T"} : (i64) -> i33
    %937 = comb.concat %935, %936 {sv.namehint = "io_dmem_req_bits_addr"} : i1, i33
    %938 = comb.or bin %724, %712 {sv.namehint = "io_dmem_s1_kill"} : i1
    %939 = comb.and bin %329, %918 {sv.namehint = "io_rocc_cmd_valid"} : i1
    %940 = comb.extract %csr.io_time from 0 {sv.namehint = "_unpause_T"} : (i64) -> i5
    %941 = comb.icmp bin eq %940, %c0_i5 {sv.namehint = "_unpause_T_1"} : i5
    %942 = comb.or bin %941, %csr.io_inhibit_cycle, %io_dmem_perf_release, %1 {sv.namehint = "unpause"} : i1
    %943 = comb.xor %942, %true : i1
    %944 = comb.and %943, %448 : i1
    hw.instance "PlusArgTimeout" @PlusArgTimeout(clock: %clock: !seq.clock, reset: %reset: i1, io_count: %945: i32) -> ()
    %945 = comb.extract %csr.io_time from 0 {sv.namehint = "PlusArgTimeout.io_count"} : (i64) -> i32
    hw.output %imem_might_request_reg, %1, %913, %729, %ibuf.io_imem_ready, %922, %923, %915, %924, %937, %925, %ex_ctrl_mem_cmd, %ex_reg_mem_size, %927, %938, %mem_reg_rs2, %csr.io_status_debug, %csr.io_pmp_0_cfg_l, %csr.io_pmp_0_cfg_a, %csr.io_pmp_0_cfg_x, %csr.io_pmp_0_cfg_w, %csr.io_pmp_0_cfg_r, %csr.io_pmp_0_addr, %csr.io_pmp_0_mask, %csr.io_pmp_1_cfg_l, %csr.io_pmp_1_cfg_a, %csr.io_pmp_1_cfg_x, %csr.io_pmp_1_cfg_w, %csr.io_pmp_1_cfg_r, %csr.io_pmp_1_addr, %csr.io_pmp_1_mask, %csr.io_pmp_2_cfg_l, %csr.io_pmp_2_cfg_a, %csr.io_pmp_2_cfg_x, %csr.io_pmp_2_cfg_w, %csr.io_pmp_2_cfg_r, %csr.io_pmp_2_addr, %csr.io_pmp_2_mask, %csr.io_pmp_3_cfg_l, %csr.io_pmp_3_cfg_a, %csr.io_pmp_3_cfg_x, %csr.io_pmp_3_cfg_w, %csr.io_pmp_3_cfg_r, %csr.io_pmp_3_addr, %csr.io_pmp_3_mask, %csr.io_pmp_4_cfg_l, %csr.io_pmp_4_cfg_a, %csr.io_pmp_4_cfg_x, %csr.io_pmp_4_cfg_w, %csr.io_pmp_4_cfg_r, %csr.io_pmp_4_addr, %csr.io_pmp_4_mask, %csr.io_pmp_5_cfg_l, %csr.io_pmp_5_cfg_a, %csr.io_pmp_5_cfg_x, %csr.io_pmp_5_cfg_w, %csr.io_pmp_5_cfg_r, %csr.io_pmp_5_addr, %csr.io_pmp_5_mask, %csr.io_pmp_6_cfg_l, %csr.io_pmp_6_cfg_a, %csr.io_pmp_6_cfg_x, %csr.io_pmp_6_cfg_w, %csr.io_pmp_6_cfg_r, %csr.io_pmp_6_addr, %csr.io_pmp_6_mask, %csr.io_pmp_7_cfg_l, %csr.io_pmp_7_cfg_a, %csr.io_pmp_7_cfg_x, %csr.io_pmp_7_cfg_w, %csr.io_pmp_7_cfg_r, %csr.io_pmp_7_addr, %csr.io_pmp_7_mask, %csr.io_customCSRs_0_value, %csr.io_status_wfi : i1, i1, i34, i1, i1, i1, i1, i1, i1, i34, i6, i5, i2, i1, i1, i64, i1, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i64, i1
  }
  hw.module private @RocketTile(in %clock : !seq.clock, in %reset : i1, in %auto_buffer_out_a_ready : i1, out auto_buffer_out_a_valid : i1, out auto_buffer_out_a_bits_opcode : i3, out auto_buffer_out_a_bits_param : i3, out auto_buffer_out_a_bits_size : i4, out auto_buffer_out_a_bits_source : i2, out auto_buffer_out_a_bits_address : i32, out auto_buffer_out_a_bits_mask : i8, out auto_buffer_out_a_bits_data : i64, out auto_buffer_out_b_ready : i1, in %auto_buffer_out_b_valid : i1, in %auto_buffer_out_b_bits_opcode : i3, in %auto_buffer_out_b_bits_param : i2, in %auto_buffer_out_b_bits_size : i4, in %auto_buffer_out_b_bits_source : i2, in %auto_buffer_out_b_bits_address : i32, in %auto_buffer_out_b_bits_mask : i8, in %auto_buffer_out_b_bits_corrupt : i1, in %auto_buffer_out_c_ready : i1, out auto_buffer_out_c_valid : i1, out auto_buffer_out_c_bits_opcode : i3, out auto_buffer_out_c_bits_param : i3, out auto_buffer_out_c_bits_size : i4, out auto_buffer_out_c_bits_source : i2, out auto_buffer_out_c_bits_address : i32, out auto_buffer_out_c_bits_data : i64, out auto_buffer_out_d_ready : i1, in %auto_buffer_out_d_valid : i1, in %auto_buffer_out_d_bits_opcode : i3, in %auto_buffer_out_d_bits_param : i2, in %auto_buffer_out_d_bits_size : i4, in %auto_buffer_out_d_bits_source : i2, in %auto_buffer_out_d_bits_sink : i2, in %auto_buffer_out_d_bits_denied : i1, in %auto_buffer_out_d_bits_data : i64, in %auto_buffer_out_d_bits_corrupt : i1, in %auto_buffer_out_e_ready : i1, out auto_buffer_out_e_valid : i1, out auto_buffer_out_e_bits_sink : i2, out auto_wfi_out_0 : i1, in %auto_int_local_in_2_0 : i1, in %auto_int_local_in_1_0 : i1, in %auto_int_local_in_1_1 : i1, in %auto_int_local_in_0_0 : i1) {
    %false = hw.constant false
    %tlMasterXbar.auto_in_1_a_ready, %tlMasterXbar.auto_in_1_d_valid, %tlMasterXbar.auto_in_1_d_bits_opcode, %tlMasterXbar.auto_in_1_d_bits_size, %tlMasterXbar.auto_in_1_d_bits_data, %tlMasterXbar.auto_in_1_d_bits_corrupt, %tlMasterXbar.auto_in_0_a_ready, %tlMasterXbar.auto_in_0_b_valid, %tlMasterXbar.auto_in_0_b_bits_param, %tlMasterXbar.auto_in_0_b_bits_size, %tlMasterXbar.auto_in_0_b_bits_source, %tlMasterXbar.auto_in_0_b_bits_address, %tlMasterXbar.auto_in_0_c_ready, %tlMasterXbar.auto_in_0_d_valid, %tlMasterXbar.auto_in_0_d_bits_opcode, %tlMasterXbar.auto_in_0_d_bits_param, %tlMasterXbar.auto_in_0_d_bits_size, %tlMasterXbar.auto_in_0_d_bits_source, %tlMasterXbar.auto_in_0_d_bits_sink, %tlMasterXbar.auto_in_0_d_bits_denied, %tlMasterXbar.auto_in_0_d_bits_data, %tlMasterXbar.auto_in_0_e_ready, %tlMasterXbar.auto_out_a_valid, %tlMasterXbar.auto_out_a_bits_opcode, %tlMasterXbar.auto_out_a_bits_param, %tlMasterXbar.auto_out_a_bits_size, %tlMasterXbar.auto_out_a_bits_source, %tlMasterXbar.auto_out_a_bits_address, %tlMasterXbar.auto_out_a_bits_mask, %tlMasterXbar.auto_out_a_bits_data, %tlMasterXbar.auto_out_b_ready, %tlMasterXbar.auto_out_c_valid, %tlMasterXbar.auto_out_c_bits_opcode, %tlMasterXbar.auto_out_c_bits_param, %tlMasterXbar.auto_out_c_bits_size, %tlMasterXbar.auto_out_c_bits_source, %tlMasterXbar.auto_out_c_bits_address, %tlMasterXbar.auto_out_c_bits_data, %tlMasterXbar.auto_out_d_ready, %tlMasterXbar.auto_out_e_valid, %tlMasterXbar.auto_out_e_bits_sink = hw.instance "tlMasterXbar" @TLXbar_8(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_1_a_valid: %widget_1.auto_out_a_valid: i1, auto_in_1_a_bits_address: %widget_1.auto_out_a_bits_address: i32, auto_in_0_a_valid: %widget.auto_out_a_valid: i1, auto_in_0_a_bits_opcode: %widget.auto_out_a_bits_opcode: i3, auto_in_0_a_bits_param: %widget.auto_out_a_bits_param: i3, auto_in_0_a_bits_size: %widget.auto_out_a_bits_size: i4, auto_in_0_a_bits_source: %widget.auto_out_a_bits_source: i1, auto_in_0_a_bits_address: %widget.auto_out_a_bits_address: i32, auto_in_0_a_bits_mask: %widget.auto_out_a_bits_mask: i8, auto_in_0_a_bits_data: %widget.auto_out_a_bits_data: i64, auto_in_0_b_ready: %widget.auto_out_b_ready: i1, auto_in_0_c_valid: %widget.auto_out_c_valid: i1, auto_in_0_c_bits_opcode: %widget.auto_out_c_bits_opcode: i3, auto_in_0_c_bits_param: %widget.auto_out_c_bits_param: i3, auto_in_0_c_bits_size: %widget.auto_out_c_bits_size: i4, auto_in_0_c_bits_source: %widget.auto_out_c_bits_source: i1, auto_in_0_c_bits_address: %widget.auto_out_c_bits_address: i32, auto_in_0_c_bits_data: %widget.auto_out_c_bits_data: i64, auto_in_0_d_ready: %widget.auto_out_d_ready: i1, auto_in_0_e_valid: %widget.auto_out_e_valid: i1, auto_in_0_e_bits_sink: %widget.auto_out_e_bits_sink: i2, auto_out_a_ready: %buffer.auto_in_a_ready: i1, auto_out_b_valid: %buffer.auto_in_b_valid: i1, auto_out_b_bits_opcode: %buffer.auto_in_b_bits_opcode: i3, auto_out_b_bits_param: %buffer.auto_in_b_bits_param: i2, auto_out_b_bits_size: %buffer.auto_in_b_bits_size: i4, auto_out_b_bits_source: %buffer.auto_in_b_bits_source: i2, auto_out_b_bits_address: %buffer.auto_in_b_bits_address: i32, auto_out_b_bits_mask: %buffer.auto_in_b_bits_mask: i8, auto_out_b_bits_corrupt: %buffer.auto_in_b_bits_corrupt: i1, auto_out_c_ready: %buffer.auto_in_c_ready: i1, auto_out_d_valid: %buffer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %buffer.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %buffer.auto_in_d_bits_param: i2, auto_out_d_bits_size: %buffer.auto_in_d_bits_size: i4, auto_out_d_bits_source: %buffer.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %buffer.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %buffer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %buffer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %buffer.auto_in_d_bits_corrupt: i1, auto_out_e_ready: %buffer.auto_in_e_ready: i1) -> (auto_in_1_a_ready: i1, auto_in_1_d_valid: i1, auto_in_1_d_bits_opcode: i3, auto_in_1_d_bits_size: i4, auto_in_1_d_bits_data: i64, auto_in_1_d_bits_corrupt: i1, auto_in_0_a_ready: i1, auto_in_0_b_valid: i1, auto_in_0_b_bits_param: i2, auto_in_0_b_bits_size: i4, auto_in_0_b_bits_source: i1, auto_in_0_b_bits_address: i32, auto_in_0_c_ready: i1, auto_in_0_d_valid: i1, auto_in_0_d_bits_opcode: i3, auto_in_0_d_bits_param: i2, auto_in_0_d_bits_size: i4, auto_in_0_d_bits_source: i1, auto_in_0_d_bits_sink: i2, auto_in_0_d_bits_denied: i1, auto_in_0_d_bits_data: i64, auto_in_0_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "tlOtherMastersNodeIn_e_valid"}
    %intXbar.auto_int_out_0, %intXbar.auto_int_out_1, %intXbar.auto_int_out_2, %intXbar.auto_int_out_3 = hw.instance "intXbar" @IntXbar_1(auto_int_in_2_0: %auto_int_local_in_2_0: i1, auto_int_in_1_0: %auto_int_local_in_1_0: i1, auto_int_in_1_1: %auto_int_local_in_1_1: i1, auto_int_in_0_0: %auto_int_local_in_0_0: i1) -> (auto_int_out_0: i1, auto_int_out_1: i1, auto_int_out_2: i1, auto_int_out_3: i1) {sv.namehint = "intSinkNodeIn_3"}
    %widget.auto_in_a_ready, %widget.auto_in_b_valid, %widget.auto_in_b_bits_param, %widget.auto_in_b_bits_size, %widget.auto_in_b_bits_source, %widget.auto_in_b_bits_address, %widget.auto_in_c_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_e_ready, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_b_ready, %widget.auto_out_c_valid, %widget.auto_out_c_bits_opcode, %widget.auto_out_c_bits_param, %widget.auto_out_c_bits_size, %widget.auto_out_c_bits_source, %widget.auto_out_c_bits_address, %widget.auto_out_c_bits_data, %widget.auto_out_d_ready, %widget.auto_out_e_valid, %widget.auto_out_e_bits_sink = hw.instance "widget" @TLWidthWidget_8(auto_in_a_valid: %dcache.auto_out_a_valid: i1, auto_in_a_bits_opcode: %dcache.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %dcache.auto_out_a_bits_param: i3, auto_in_a_bits_size: %dcache.auto_out_a_bits_size: i4, auto_in_a_bits_source: %dcache.auto_out_a_bits_source: i1, auto_in_a_bits_address: %dcache.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %dcache.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %dcache.auto_out_a_bits_data: i64, auto_in_b_ready: %dcache.auto_out_b_ready: i1, auto_in_c_valid: %dcache.auto_out_c_valid: i1, auto_in_c_bits_opcode: %dcache.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %dcache.auto_out_c_bits_param: i3, auto_in_c_bits_size: %dcache.auto_out_c_bits_size: i4, auto_in_c_bits_source: %dcache.auto_out_c_bits_source: i1, auto_in_c_bits_address: %dcache.auto_out_c_bits_address: i32, auto_in_c_bits_data: %dcache.auto_out_c_bits_data: i64, auto_in_d_ready: %dcache.auto_out_d_ready: i1, auto_in_e_valid: %dcache.auto_out_e_valid: i1, auto_in_e_bits_sink: %dcache.auto_out_e_bits_sink: i2, auto_out_a_ready: %tlMasterXbar.auto_in_0_a_ready: i1, auto_out_b_valid: %tlMasterXbar.auto_in_0_b_valid: i1, auto_out_b_bits_param: %tlMasterXbar.auto_in_0_b_bits_param: i2, auto_out_b_bits_size: %tlMasterXbar.auto_in_0_b_bits_size: i4, auto_out_b_bits_source: %tlMasterXbar.auto_in_0_b_bits_source: i1, auto_out_b_bits_address: %tlMasterXbar.auto_in_0_b_bits_address: i32, auto_out_c_ready: %tlMasterXbar.auto_in_0_c_ready: i1, auto_out_d_valid: %tlMasterXbar.auto_in_0_d_valid: i1, auto_out_d_bits_opcode: %tlMasterXbar.auto_in_0_d_bits_opcode: i3, auto_out_d_bits_param: %tlMasterXbar.auto_in_0_d_bits_param: i2, auto_out_d_bits_size: %tlMasterXbar.auto_in_0_d_bits_size: i4, auto_out_d_bits_source: %tlMasterXbar.auto_in_0_d_bits_source: i1, auto_out_d_bits_sink: %tlMasterXbar.auto_in_0_d_bits_sink: i2, auto_out_d_bits_denied: %tlMasterXbar.auto_in_0_d_bits_denied: i1, auto_out_d_bits_data: %tlMasterXbar.auto_in_0_d_bits_data: i64, auto_out_e_ready: %tlMasterXbar.auto_in_0_e_ready: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_size: i4, auto_in_b_bits_source: i1, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i1, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i1, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i1, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "widget.auto_in_e_ready"}
    %dcache.auto_out_a_valid, %dcache.auto_out_a_bits_opcode, %dcache.auto_out_a_bits_param, %dcache.auto_out_a_bits_size, %dcache.auto_out_a_bits_source, %dcache.auto_out_a_bits_address, %dcache.auto_out_a_bits_mask, %dcache.auto_out_a_bits_data, %dcache.auto_out_b_ready, %dcache.auto_out_c_valid, %dcache.auto_out_c_bits_opcode, %dcache.auto_out_c_bits_param, %dcache.auto_out_c_bits_size, %dcache.auto_out_c_bits_source, %dcache.auto_out_c_bits_address, %dcache.auto_out_c_bits_data, %dcache.auto_out_d_ready, %dcache.auto_out_e_valid, %dcache.auto_out_e_bits_sink, %dcache.io_cpu_req_ready, %dcache.io_cpu_s2_nack, %dcache.io_cpu_resp_valid, %dcache.io_cpu_resp_bits_tag, %dcache.io_cpu_resp_bits_data, %dcache.io_cpu_resp_bits_replay, %dcache.io_cpu_resp_bits_has_data, %dcache.io_cpu_resp_bits_data_word_bypass, %dcache.io_cpu_replay_next, %dcache.io_cpu_s2_xcpt_ma_ld, %dcache.io_cpu_s2_xcpt_ma_st, %dcache.io_cpu_s2_xcpt_pf_ld, %dcache.io_cpu_s2_xcpt_pf_st, %dcache.io_cpu_s2_xcpt_ae_ld, %dcache.io_cpu_s2_xcpt_ae_st, %dcache.io_cpu_ordered, %dcache.io_cpu_perf_release, %dcache.io_cpu_perf_grant = hw.instance "dcache" @DCache(clock: %clock: !seq.clock, reset: %reset: i1, auto_out_a_ready: %widget.auto_in_a_ready: i1, auto_out_b_valid: %widget.auto_in_b_valid: i1, auto_out_b_bits_param: %widget.auto_in_b_bits_param: i2, auto_out_b_bits_size: %widget.auto_in_b_bits_size: i4, auto_out_b_bits_source: %widget.auto_in_b_bits_source: i1, auto_out_b_bits_address: %widget.auto_in_b_bits_address: i32, auto_out_c_ready: %widget.auto_in_c_ready: i1, auto_out_d_valid: %widget.auto_in_d_valid: i1, auto_out_d_bits_opcode: %widget.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %widget.auto_in_d_bits_param: i2, auto_out_d_bits_size: %widget.auto_in_d_bits_size: i4, auto_out_d_bits_source: %widget.auto_in_d_bits_source: i1, auto_out_d_bits_sink: %widget.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %widget.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %widget.auto_in_d_bits_data: i64, auto_out_e_ready: %widget.auto_in_e_ready: i1, io_cpu_req_valid: %dcacheArb.io_mem_req_valid: i1, io_cpu_req_bits_addr: %dcacheArb.io_mem_req_bits_addr: i34, io_cpu_req_bits_tag: %dcacheArb.io_mem_req_bits_tag: i6, io_cpu_req_bits_cmd: %dcacheArb.io_mem_req_bits_cmd: i5, io_cpu_req_bits_size: %dcacheArb.io_mem_req_bits_size: i2, io_cpu_req_bits_signed: %dcacheArb.io_mem_req_bits_signed: i1, io_cpu_s1_kill: %dcacheArb.io_mem_s1_kill: i1, io_cpu_s1_data_data: %dcacheArb.io_mem_s1_data_data: i64, io_ptw_status_debug: %ptw.io_requestor_0_status_debug: i1, io_ptw_pmp_0_cfg_l: %ptw.io_requestor_0_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %ptw.io_requestor_0_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_w: %ptw.io_requestor_0_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: %ptw.io_requestor_0_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: %ptw.io_requestor_0_pmp_0_addr: i30, io_ptw_pmp_0_mask: %ptw.io_requestor_0_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %ptw.io_requestor_0_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %ptw.io_requestor_0_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_w: %ptw.io_requestor_0_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: %ptw.io_requestor_0_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: %ptw.io_requestor_0_pmp_1_addr: i30, io_ptw_pmp_1_mask: %ptw.io_requestor_0_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %ptw.io_requestor_0_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %ptw.io_requestor_0_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_w: %ptw.io_requestor_0_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: %ptw.io_requestor_0_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: %ptw.io_requestor_0_pmp_2_addr: i30, io_ptw_pmp_2_mask: %ptw.io_requestor_0_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %ptw.io_requestor_0_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %ptw.io_requestor_0_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_w: %ptw.io_requestor_0_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: %ptw.io_requestor_0_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: %ptw.io_requestor_0_pmp_3_addr: i30, io_ptw_pmp_3_mask: %ptw.io_requestor_0_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %ptw.io_requestor_0_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %ptw.io_requestor_0_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_w: %ptw.io_requestor_0_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: %ptw.io_requestor_0_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: %ptw.io_requestor_0_pmp_4_addr: i30, io_ptw_pmp_4_mask: %ptw.io_requestor_0_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %ptw.io_requestor_0_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %ptw.io_requestor_0_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_w: %ptw.io_requestor_0_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: %ptw.io_requestor_0_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: %ptw.io_requestor_0_pmp_5_addr: i30, io_ptw_pmp_5_mask: %ptw.io_requestor_0_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %ptw.io_requestor_0_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %ptw.io_requestor_0_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_w: %ptw.io_requestor_0_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: %ptw.io_requestor_0_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: %ptw.io_requestor_0_pmp_6_addr: i30, io_ptw_pmp_6_mask: %ptw.io_requestor_0_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %ptw.io_requestor_0_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %ptw.io_requestor_0_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_w: %ptw.io_requestor_0_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: %ptw.io_requestor_0_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: %ptw.io_requestor_0_pmp_7_addr: i30, io_ptw_pmp_7_mask: %ptw.io_requestor_0_pmp_7_mask: i32) -> (auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i1, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i1, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2, io_cpu_req_ready: i1, io_cpu_s2_nack: i1, io_cpu_resp_valid: i1, io_cpu_resp_bits_tag: i6, io_cpu_resp_bits_data: i64, io_cpu_resp_bits_replay: i1, io_cpu_resp_bits_has_data: i1, io_cpu_resp_bits_data_word_bypass: i64, io_cpu_replay_next: i1, io_cpu_s2_xcpt_ma_ld: i1, io_cpu_s2_xcpt_ma_st: i1, io_cpu_s2_xcpt_pf_ld: i1, io_cpu_s2_xcpt_pf_st: i1, io_cpu_s2_xcpt_ae_ld: i1, io_cpu_s2_xcpt_ae_st: i1, io_cpu_ordered: i1, io_cpu_perf_release: i1, io_cpu_perf_grant: i1) {sv.namehint = "dcache.io_cpu_ordered"}
    %frontend.auto_icache_master_out_a_valid, %frontend.auto_icache_master_out_a_bits_address, %frontend.io_cpu_resp_valid, %frontend.io_cpu_resp_bits_pc, %frontend.io_cpu_resp_bits_data, %frontend.io_cpu_resp_bits_xcpt_pf_inst, %frontend.io_cpu_resp_bits_xcpt_gf_inst, %frontend.io_cpu_resp_bits_xcpt_ae_inst, %frontend.io_cpu_resp_bits_replay = hw.instance "frontend" @Frontend(clock: %clock: !seq.clock, reset: %reset: i1, auto_icache_master_out_a_ready: %widget_1.auto_in_a_ready: i1, auto_icache_master_out_d_valid: %widget_1.auto_in_d_valid: i1, auto_icache_master_out_d_bits_opcode: %widget_1.auto_in_d_bits_opcode: i3, auto_icache_master_out_d_bits_size: %widget_1.auto_in_d_bits_size: i4, auto_icache_master_out_d_bits_data: %widget_1.auto_in_d_bits_data: i64, auto_icache_master_out_d_bits_corrupt: %widget_1.auto_in_d_bits_corrupt: i1, io_cpu_might_request: %core.io_imem_might_request: i1, io_cpu_req_valid: %core.io_imem_req_valid: i1, io_cpu_req_bits_pc: %core.io_imem_req_bits_pc: i34, io_cpu_req_bits_speculative: %core.io_imem_req_bits_speculative: i1, io_cpu_resp_ready: %core.io_imem_resp_ready: i1, io_cpu_btb_update_valid: %core.io_imem_btb_update_valid: i1, io_cpu_bht_update_valid: %core.io_imem_bht_update_valid: i1, io_cpu_flush_icache: %core.io_imem_flush_icache: i1, io_ptw_status_debug: %ptw.io_requestor_1_status_debug: i1, io_ptw_pmp_0_cfg_l: %ptw.io_requestor_1_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %ptw.io_requestor_1_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: %ptw.io_requestor_1_pmp_0_cfg_x: i1, io_ptw_pmp_0_addr: %ptw.io_requestor_1_pmp_0_addr: i30, io_ptw_pmp_0_mask: %ptw.io_requestor_1_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %ptw.io_requestor_1_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %ptw.io_requestor_1_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: %ptw.io_requestor_1_pmp_1_cfg_x: i1, io_ptw_pmp_1_addr: %ptw.io_requestor_1_pmp_1_addr: i30, io_ptw_pmp_1_mask: %ptw.io_requestor_1_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %ptw.io_requestor_1_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %ptw.io_requestor_1_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: %ptw.io_requestor_1_pmp_2_cfg_x: i1, io_ptw_pmp_2_addr: %ptw.io_requestor_1_pmp_2_addr: i30, io_ptw_pmp_2_mask: %ptw.io_requestor_1_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %ptw.io_requestor_1_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %ptw.io_requestor_1_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: %ptw.io_requestor_1_pmp_3_cfg_x: i1, io_ptw_pmp_3_addr: %ptw.io_requestor_1_pmp_3_addr: i30, io_ptw_pmp_3_mask: %ptw.io_requestor_1_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %ptw.io_requestor_1_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %ptw.io_requestor_1_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: %ptw.io_requestor_1_pmp_4_cfg_x: i1, io_ptw_pmp_4_addr: %ptw.io_requestor_1_pmp_4_addr: i30, io_ptw_pmp_4_mask: %ptw.io_requestor_1_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %ptw.io_requestor_1_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %ptw.io_requestor_1_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: %ptw.io_requestor_1_pmp_5_cfg_x: i1, io_ptw_pmp_5_addr: %ptw.io_requestor_1_pmp_5_addr: i30, io_ptw_pmp_5_mask: %ptw.io_requestor_1_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %ptw.io_requestor_1_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %ptw.io_requestor_1_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: %ptw.io_requestor_1_pmp_6_cfg_x: i1, io_ptw_pmp_6_addr: %ptw.io_requestor_1_pmp_6_addr: i30, io_ptw_pmp_6_mask: %ptw.io_requestor_1_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %ptw.io_requestor_1_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %ptw.io_requestor_1_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: %ptw.io_requestor_1_pmp_7_cfg_x: i1, io_ptw_pmp_7_addr: %ptw.io_requestor_1_pmp_7_addr: i30, io_ptw_pmp_7_mask: %ptw.io_requestor_1_pmp_7_mask: i32, io_ptw_customCSRs_csrs_0_value: %ptw.io_requestor_1_customCSRs_csrs_0_value: i64) -> (auto_icache_master_out_a_valid: i1, auto_icache_master_out_a_bits_address: i32, io_cpu_resp_valid: i1, io_cpu_resp_bits_pc: i34, io_cpu_resp_bits_data: i32, io_cpu_resp_bits_xcpt_pf_inst: i1, io_cpu_resp_bits_xcpt_gf_inst: i1, io_cpu_resp_bits_xcpt_ae_inst: i1, io_cpu_resp_bits_replay: i1) {sv.namehint = "core.io_imem_resp_valid"}
    %widget_1.auto_in_a_ready, %widget_1.auto_in_d_valid, %widget_1.auto_in_d_bits_opcode, %widget_1.auto_in_d_bits_size, %widget_1.auto_in_d_bits_data, %widget_1.auto_in_d_bits_corrupt, %widget_1.auto_out_a_valid, %widget_1.auto_out_a_bits_address = hw.instance "widget_1" @TLWidthWidget_9(auto_in_a_valid: %frontend.auto_icache_master_out_a_valid: i1, auto_in_a_bits_address: %frontend.auto_icache_master_out_a_bits_address: i32, auto_out_a_ready: %tlMasterXbar.auto_in_1_a_ready: i1, auto_out_d_valid: %tlMasterXbar.auto_in_1_d_valid: i1, auto_out_d_bits_opcode: %tlMasterXbar.auto_in_1_d_bits_opcode: i3, auto_out_d_bits_size: %tlMasterXbar.auto_in_1_d_bits_size: i4, auto_out_d_bits_data: %tlMasterXbar.auto_in_1_d_bits_data: i64, auto_out_d_bits_corrupt: %tlMasterXbar.auto_in_1_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_address: i32) {sv.namehint = "widget_1.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_b_valid, %buffer.auto_in_b_bits_opcode, %buffer.auto_in_b_bits_param, %buffer.auto_in_b_bits_size, %buffer.auto_in_b_bits_source, %buffer.auto_in_b_bits_address, %buffer.auto_in_b_bits_mask, %buffer.auto_in_b_bits_corrupt, %buffer.auto_in_c_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_in_e_ready, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_b_ready, %buffer.auto_out_c_valid, %buffer.auto_out_c_bits_opcode, %buffer.auto_out_c_bits_param, %buffer.auto_out_c_bits_size, %buffer.auto_out_c_bits_source, %buffer.auto_out_c_bits_address, %buffer.auto_out_c_bits_data, %buffer.auto_out_d_ready, %buffer.auto_out_e_valid, %buffer.auto_out_e_bits_sink = hw.instance "buffer" @TLBuffer_7(auto_in_a_valid: %tlMasterXbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %tlMasterXbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %tlMasterXbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %tlMasterXbar.auto_out_a_bits_size: i4, auto_in_a_bits_source: %tlMasterXbar.auto_out_a_bits_source: i2, auto_in_a_bits_address: %tlMasterXbar.auto_out_a_bits_address: i32, auto_in_a_bits_mask: %tlMasterXbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %tlMasterXbar.auto_out_a_bits_data: i64, auto_in_b_ready: %tlMasterXbar.auto_out_b_ready: i1, auto_in_c_valid: %tlMasterXbar.auto_out_c_valid: i1, auto_in_c_bits_opcode: %tlMasterXbar.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %tlMasterXbar.auto_out_c_bits_param: i3, auto_in_c_bits_size: %tlMasterXbar.auto_out_c_bits_size: i4, auto_in_c_bits_source: %tlMasterXbar.auto_out_c_bits_source: i2, auto_in_c_bits_address: %tlMasterXbar.auto_out_c_bits_address: i32, auto_in_c_bits_data: %tlMasterXbar.auto_out_c_bits_data: i64, auto_in_d_ready: %tlMasterXbar.auto_out_d_ready: i1, auto_in_e_valid: %tlMasterXbar.auto_out_e_valid: i1, auto_in_e_bits_sink: %tlMasterXbar.auto_out_e_bits_sink: i2, auto_out_a_ready: %auto_buffer_out_a_ready: i1, auto_out_b_valid: %auto_buffer_out_b_valid: i1, auto_out_b_bits_opcode: %auto_buffer_out_b_bits_opcode: i3, auto_out_b_bits_param: %auto_buffer_out_b_bits_param: i2, auto_out_b_bits_size: %auto_buffer_out_b_bits_size: i4, auto_out_b_bits_source: %auto_buffer_out_b_bits_source: i2, auto_out_b_bits_address: %auto_buffer_out_b_bits_address: i32, auto_out_b_bits_mask: %auto_buffer_out_b_bits_mask: i8, auto_out_b_bits_corrupt: %auto_buffer_out_b_bits_corrupt: i1, auto_out_c_ready: %auto_buffer_out_c_ready: i1, auto_out_d_valid: %auto_buffer_out_d_valid: i1, auto_out_d_bits_opcode: %auto_buffer_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_buffer_out_d_bits_param: i2, auto_out_d_bits_size: %auto_buffer_out_d_bits_size: i4, auto_out_d_bits_source: %auto_buffer_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_buffer_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_buffer_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_buffer_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_buffer_out_d_bits_corrupt: i1, auto_out_e_ready: %auto_buffer_out_e_ready: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_opcode: i3, auto_in_b_bits_param: i2, auto_in_b_bits_size: i4, auto_in_b_bits_source: i2, auto_in_b_bits_address: i32, auto_in_b_bits_mask: i8, auto_in_b_bits_corrupt: i1, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_in_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "tlOtherMastersNodeIn_e_ready"}
    %dcacheArb.io_requestor_0_req_ready, %dcacheArb.io_requestor_0_s2_nack, %dcacheArb.io_requestor_0_resp_valid, %dcacheArb.io_requestor_0_resp_bits_tag, %dcacheArb.io_requestor_0_resp_bits_data, %dcacheArb.io_requestor_0_resp_bits_replay, %dcacheArb.io_requestor_0_resp_bits_has_data, %dcacheArb.io_requestor_0_resp_bits_data_word_bypass, %dcacheArb.io_requestor_0_replay_next, %dcacheArb.io_requestor_0_s2_xcpt_ma_ld, %dcacheArb.io_requestor_0_s2_xcpt_ma_st, %dcacheArb.io_requestor_0_s2_xcpt_pf_ld, %dcacheArb.io_requestor_0_s2_xcpt_pf_st, %dcacheArb.io_requestor_0_s2_xcpt_ae_ld, %dcacheArb.io_requestor_0_s2_xcpt_ae_st, %dcacheArb.io_requestor_0_ordered, %dcacheArb.io_requestor_0_perf_release, %dcacheArb.io_requestor_0_perf_grant, %dcacheArb.io_mem_req_valid, %dcacheArb.io_mem_req_bits_addr, %dcacheArb.io_mem_req_bits_tag, %dcacheArb.io_mem_req_bits_cmd, %dcacheArb.io_mem_req_bits_size, %dcacheArb.io_mem_req_bits_signed, %dcacheArb.io_mem_s1_kill, %dcacheArb.io_mem_s1_data_data = hw.instance "dcacheArb" @HellaCacheArbiter(io_requestor_0_req_valid: %core.io_dmem_req_valid: i1, io_requestor_0_req_bits_addr: %core.io_dmem_req_bits_addr: i34, io_requestor_0_req_bits_tag: %core.io_dmem_req_bits_tag: i6, io_requestor_0_req_bits_cmd: %core.io_dmem_req_bits_cmd: i5, io_requestor_0_req_bits_size: %core.io_dmem_req_bits_size: i2, io_requestor_0_req_bits_signed: %core.io_dmem_req_bits_signed: i1, io_requestor_0_s1_kill: %core.io_dmem_s1_kill: i1, io_requestor_0_s1_data_data: %core.io_dmem_s1_data_data: i64, io_mem_req_ready: %dcache.io_cpu_req_ready: i1, io_mem_s2_nack: %dcache.io_cpu_s2_nack: i1, io_mem_resp_valid: %dcache.io_cpu_resp_valid: i1, io_mem_resp_bits_tag: %dcache.io_cpu_resp_bits_tag: i6, io_mem_resp_bits_data: %dcache.io_cpu_resp_bits_data: i64, io_mem_resp_bits_replay: %dcache.io_cpu_resp_bits_replay: i1, io_mem_resp_bits_has_data: %dcache.io_cpu_resp_bits_has_data: i1, io_mem_resp_bits_data_word_bypass: %dcache.io_cpu_resp_bits_data_word_bypass: i64, io_mem_replay_next: %dcache.io_cpu_replay_next: i1, io_mem_s2_xcpt_ma_ld: %dcache.io_cpu_s2_xcpt_ma_ld: i1, io_mem_s2_xcpt_ma_st: %dcache.io_cpu_s2_xcpt_ma_st: i1, io_mem_s2_xcpt_pf_ld: %dcache.io_cpu_s2_xcpt_pf_ld: i1, io_mem_s2_xcpt_pf_st: %dcache.io_cpu_s2_xcpt_pf_st: i1, io_mem_s2_xcpt_ae_ld: %dcache.io_cpu_s2_xcpt_ae_ld: i1, io_mem_s2_xcpt_ae_st: %dcache.io_cpu_s2_xcpt_ae_st: i1, io_mem_ordered: %dcache.io_cpu_ordered: i1, io_mem_perf_release: %dcache.io_cpu_perf_release: i1, io_mem_perf_grant: %dcache.io_cpu_perf_grant: i1) -> (io_requestor_0_req_ready: i1, io_requestor_0_s2_nack: i1, io_requestor_0_resp_valid: i1, io_requestor_0_resp_bits_tag: i6, io_requestor_0_resp_bits_data: i64, io_requestor_0_resp_bits_replay: i1, io_requestor_0_resp_bits_has_data: i1, io_requestor_0_resp_bits_data_word_bypass: i64, io_requestor_0_replay_next: i1, io_requestor_0_s2_xcpt_ma_ld: i1, io_requestor_0_s2_xcpt_ma_st: i1, io_requestor_0_s2_xcpt_pf_ld: i1, io_requestor_0_s2_xcpt_pf_st: i1, io_requestor_0_s2_xcpt_ae_ld: i1, io_requestor_0_s2_xcpt_ae_st: i1, io_requestor_0_ordered: i1, io_requestor_0_perf_release: i1, io_requestor_0_perf_grant: i1, io_mem_req_valid: i1, io_mem_req_bits_addr: i34, io_mem_req_bits_tag: i6, io_mem_req_bits_cmd: i5, io_mem_req_bits_size: i2, io_mem_req_bits_signed: i1, io_mem_s1_kill: i1, io_mem_s1_data_data: i64) {sv.namehint = "core.io_dmem_ordered"}
    %ptw.io_requestor_0_status_debug, %ptw.io_requestor_0_pmp_0_cfg_l, %ptw.io_requestor_0_pmp_0_cfg_a, %ptw.io_requestor_0_pmp_0_cfg_w, %ptw.io_requestor_0_pmp_0_cfg_r, %ptw.io_requestor_0_pmp_0_addr, %ptw.io_requestor_0_pmp_0_mask, %ptw.io_requestor_0_pmp_1_cfg_l, %ptw.io_requestor_0_pmp_1_cfg_a, %ptw.io_requestor_0_pmp_1_cfg_w, %ptw.io_requestor_0_pmp_1_cfg_r, %ptw.io_requestor_0_pmp_1_addr, %ptw.io_requestor_0_pmp_1_mask, %ptw.io_requestor_0_pmp_2_cfg_l, %ptw.io_requestor_0_pmp_2_cfg_a, %ptw.io_requestor_0_pmp_2_cfg_w, %ptw.io_requestor_0_pmp_2_cfg_r, %ptw.io_requestor_0_pmp_2_addr, %ptw.io_requestor_0_pmp_2_mask, %ptw.io_requestor_0_pmp_3_cfg_l, %ptw.io_requestor_0_pmp_3_cfg_a, %ptw.io_requestor_0_pmp_3_cfg_w, %ptw.io_requestor_0_pmp_3_cfg_r, %ptw.io_requestor_0_pmp_3_addr, %ptw.io_requestor_0_pmp_3_mask, %ptw.io_requestor_0_pmp_4_cfg_l, %ptw.io_requestor_0_pmp_4_cfg_a, %ptw.io_requestor_0_pmp_4_cfg_w, %ptw.io_requestor_0_pmp_4_cfg_r, %ptw.io_requestor_0_pmp_4_addr, %ptw.io_requestor_0_pmp_4_mask, %ptw.io_requestor_0_pmp_5_cfg_l, %ptw.io_requestor_0_pmp_5_cfg_a, %ptw.io_requestor_0_pmp_5_cfg_w, %ptw.io_requestor_0_pmp_5_cfg_r, %ptw.io_requestor_0_pmp_5_addr, %ptw.io_requestor_0_pmp_5_mask, %ptw.io_requestor_0_pmp_6_cfg_l, %ptw.io_requestor_0_pmp_6_cfg_a, %ptw.io_requestor_0_pmp_6_cfg_w, %ptw.io_requestor_0_pmp_6_cfg_r, %ptw.io_requestor_0_pmp_6_addr, %ptw.io_requestor_0_pmp_6_mask, %ptw.io_requestor_0_pmp_7_cfg_l, %ptw.io_requestor_0_pmp_7_cfg_a, %ptw.io_requestor_0_pmp_7_cfg_w, %ptw.io_requestor_0_pmp_7_cfg_r, %ptw.io_requestor_0_pmp_7_addr, %ptw.io_requestor_0_pmp_7_mask, %ptw.io_requestor_1_status_debug, %ptw.io_requestor_1_pmp_0_cfg_l, %ptw.io_requestor_1_pmp_0_cfg_a, %ptw.io_requestor_1_pmp_0_cfg_x, %ptw.io_requestor_1_pmp_0_addr, %ptw.io_requestor_1_pmp_0_mask, %ptw.io_requestor_1_pmp_1_cfg_l, %ptw.io_requestor_1_pmp_1_cfg_a, %ptw.io_requestor_1_pmp_1_cfg_x, %ptw.io_requestor_1_pmp_1_addr, %ptw.io_requestor_1_pmp_1_mask, %ptw.io_requestor_1_pmp_2_cfg_l, %ptw.io_requestor_1_pmp_2_cfg_a, %ptw.io_requestor_1_pmp_2_cfg_x, %ptw.io_requestor_1_pmp_2_addr, %ptw.io_requestor_1_pmp_2_mask, %ptw.io_requestor_1_pmp_3_cfg_l, %ptw.io_requestor_1_pmp_3_cfg_a, %ptw.io_requestor_1_pmp_3_cfg_x, %ptw.io_requestor_1_pmp_3_addr, %ptw.io_requestor_1_pmp_3_mask, %ptw.io_requestor_1_pmp_4_cfg_l, %ptw.io_requestor_1_pmp_4_cfg_a, %ptw.io_requestor_1_pmp_4_cfg_x, %ptw.io_requestor_1_pmp_4_addr, %ptw.io_requestor_1_pmp_4_mask, %ptw.io_requestor_1_pmp_5_cfg_l, %ptw.io_requestor_1_pmp_5_cfg_a, %ptw.io_requestor_1_pmp_5_cfg_x, %ptw.io_requestor_1_pmp_5_addr, %ptw.io_requestor_1_pmp_5_mask, %ptw.io_requestor_1_pmp_6_cfg_l, %ptw.io_requestor_1_pmp_6_cfg_a, %ptw.io_requestor_1_pmp_6_cfg_x, %ptw.io_requestor_1_pmp_6_addr, %ptw.io_requestor_1_pmp_6_mask, %ptw.io_requestor_1_pmp_7_cfg_l, %ptw.io_requestor_1_pmp_7_cfg_a, %ptw.io_requestor_1_pmp_7_cfg_x, %ptw.io_requestor_1_pmp_7_addr, %ptw.io_requestor_1_pmp_7_mask, %ptw.io_requestor_1_customCSRs_csrs_0_value = hw.instance "ptw" @PTW(io_dpath_status_debug: %core.io_ptw_status_debug: i1, io_dpath_pmp_0_cfg_l: %core.io_ptw_pmp_0_cfg_l: i1, io_dpath_pmp_0_cfg_a: %core.io_ptw_pmp_0_cfg_a: i2, io_dpath_pmp_0_cfg_x: %core.io_ptw_pmp_0_cfg_x: i1, io_dpath_pmp_0_cfg_w: %core.io_ptw_pmp_0_cfg_w: i1, io_dpath_pmp_0_cfg_r: %core.io_ptw_pmp_0_cfg_r: i1, io_dpath_pmp_0_addr: %core.io_ptw_pmp_0_addr: i30, io_dpath_pmp_0_mask: %core.io_ptw_pmp_0_mask: i32, io_dpath_pmp_1_cfg_l: %core.io_ptw_pmp_1_cfg_l: i1, io_dpath_pmp_1_cfg_a: %core.io_ptw_pmp_1_cfg_a: i2, io_dpath_pmp_1_cfg_x: %core.io_ptw_pmp_1_cfg_x: i1, io_dpath_pmp_1_cfg_w: %core.io_ptw_pmp_1_cfg_w: i1, io_dpath_pmp_1_cfg_r: %core.io_ptw_pmp_1_cfg_r: i1, io_dpath_pmp_1_addr: %core.io_ptw_pmp_1_addr: i30, io_dpath_pmp_1_mask: %core.io_ptw_pmp_1_mask: i32, io_dpath_pmp_2_cfg_l: %core.io_ptw_pmp_2_cfg_l: i1, io_dpath_pmp_2_cfg_a: %core.io_ptw_pmp_2_cfg_a: i2, io_dpath_pmp_2_cfg_x: %core.io_ptw_pmp_2_cfg_x: i1, io_dpath_pmp_2_cfg_w: %core.io_ptw_pmp_2_cfg_w: i1, io_dpath_pmp_2_cfg_r: %core.io_ptw_pmp_2_cfg_r: i1, io_dpath_pmp_2_addr: %core.io_ptw_pmp_2_addr: i30, io_dpath_pmp_2_mask: %core.io_ptw_pmp_2_mask: i32, io_dpath_pmp_3_cfg_l: %core.io_ptw_pmp_3_cfg_l: i1, io_dpath_pmp_3_cfg_a: %core.io_ptw_pmp_3_cfg_a: i2, io_dpath_pmp_3_cfg_x: %core.io_ptw_pmp_3_cfg_x: i1, io_dpath_pmp_3_cfg_w: %core.io_ptw_pmp_3_cfg_w: i1, io_dpath_pmp_3_cfg_r: %core.io_ptw_pmp_3_cfg_r: i1, io_dpath_pmp_3_addr: %core.io_ptw_pmp_3_addr: i30, io_dpath_pmp_3_mask: %core.io_ptw_pmp_3_mask: i32, io_dpath_pmp_4_cfg_l: %core.io_ptw_pmp_4_cfg_l: i1, io_dpath_pmp_4_cfg_a: %core.io_ptw_pmp_4_cfg_a: i2, io_dpath_pmp_4_cfg_x: %core.io_ptw_pmp_4_cfg_x: i1, io_dpath_pmp_4_cfg_w: %core.io_ptw_pmp_4_cfg_w: i1, io_dpath_pmp_4_cfg_r: %core.io_ptw_pmp_4_cfg_r: i1, io_dpath_pmp_4_addr: %core.io_ptw_pmp_4_addr: i30, io_dpath_pmp_4_mask: %core.io_ptw_pmp_4_mask: i32, io_dpath_pmp_5_cfg_l: %core.io_ptw_pmp_5_cfg_l: i1, io_dpath_pmp_5_cfg_a: %core.io_ptw_pmp_5_cfg_a: i2, io_dpath_pmp_5_cfg_x: %core.io_ptw_pmp_5_cfg_x: i1, io_dpath_pmp_5_cfg_w: %core.io_ptw_pmp_5_cfg_w: i1, io_dpath_pmp_5_cfg_r: %core.io_ptw_pmp_5_cfg_r: i1, io_dpath_pmp_5_addr: %core.io_ptw_pmp_5_addr: i30, io_dpath_pmp_5_mask: %core.io_ptw_pmp_5_mask: i32, io_dpath_pmp_6_cfg_l: %core.io_ptw_pmp_6_cfg_l: i1, io_dpath_pmp_6_cfg_a: %core.io_ptw_pmp_6_cfg_a: i2, io_dpath_pmp_6_cfg_x: %core.io_ptw_pmp_6_cfg_x: i1, io_dpath_pmp_6_cfg_w: %core.io_ptw_pmp_6_cfg_w: i1, io_dpath_pmp_6_cfg_r: %core.io_ptw_pmp_6_cfg_r: i1, io_dpath_pmp_6_addr: %core.io_ptw_pmp_6_addr: i30, io_dpath_pmp_6_mask: %core.io_ptw_pmp_6_mask: i32, io_dpath_pmp_7_cfg_l: %core.io_ptw_pmp_7_cfg_l: i1, io_dpath_pmp_7_cfg_a: %core.io_ptw_pmp_7_cfg_a: i2, io_dpath_pmp_7_cfg_x: %core.io_ptw_pmp_7_cfg_x: i1, io_dpath_pmp_7_cfg_w: %core.io_ptw_pmp_7_cfg_w: i1, io_dpath_pmp_7_cfg_r: %core.io_ptw_pmp_7_cfg_r: i1, io_dpath_pmp_7_addr: %core.io_ptw_pmp_7_addr: i30, io_dpath_pmp_7_mask: %core.io_ptw_pmp_7_mask: i32, io_dpath_customCSRs_csrs_0_value: %core.io_ptw_customCSRs_csrs_0_value: i64) -> (io_requestor_0_status_debug: i1, io_requestor_0_pmp_0_cfg_l: i1, io_requestor_0_pmp_0_cfg_a: i2, io_requestor_0_pmp_0_cfg_w: i1, io_requestor_0_pmp_0_cfg_r: i1, io_requestor_0_pmp_0_addr: i30, io_requestor_0_pmp_0_mask: i32, io_requestor_0_pmp_1_cfg_l: i1, io_requestor_0_pmp_1_cfg_a: i2, io_requestor_0_pmp_1_cfg_w: i1, io_requestor_0_pmp_1_cfg_r: i1, io_requestor_0_pmp_1_addr: i30, io_requestor_0_pmp_1_mask: i32, io_requestor_0_pmp_2_cfg_l: i1, io_requestor_0_pmp_2_cfg_a: i2, io_requestor_0_pmp_2_cfg_w: i1, io_requestor_0_pmp_2_cfg_r: i1, io_requestor_0_pmp_2_addr: i30, io_requestor_0_pmp_2_mask: i32, io_requestor_0_pmp_3_cfg_l: i1, io_requestor_0_pmp_3_cfg_a: i2, io_requestor_0_pmp_3_cfg_w: i1, io_requestor_0_pmp_3_cfg_r: i1, io_requestor_0_pmp_3_addr: i30, io_requestor_0_pmp_3_mask: i32, io_requestor_0_pmp_4_cfg_l: i1, io_requestor_0_pmp_4_cfg_a: i2, io_requestor_0_pmp_4_cfg_w: i1, io_requestor_0_pmp_4_cfg_r: i1, io_requestor_0_pmp_4_addr: i30, io_requestor_0_pmp_4_mask: i32, io_requestor_0_pmp_5_cfg_l: i1, io_requestor_0_pmp_5_cfg_a: i2, io_requestor_0_pmp_5_cfg_w: i1, io_requestor_0_pmp_5_cfg_r: i1, io_requestor_0_pmp_5_addr: i30, io_requestor_0_pmp_5_mask: i32, io_requestor_0_pmp_6_cfg_l: i1, io_requestor_0_pmp_6_cfg_a: i2, io_requestor_0_pmp_6_cfg_w: i1, io_requestor_0_pmp_6_cfg_r: i1, io_requestor_0_pmp_6_addr: i30, io_requestor_0_pmp_6_mask: i32, io_requestor_0_pmp_7_cfg_l: i1, io_requestor_0_pmp_7_cfg_a: i2, io_requestor_0_pmp_7_cfg_w: i1, io_requestor_0_pmp_7_cfg_r: i1, io_requestor_0_pmp_7_addr: i30, io_requestor_0_pmp_7_mask: i32, io_requestor_1_status_debug: i1, io_requestor_1_pmp_0_cfg_l: i1, io_requestor_1_pmp_0_cfg_a: i2, io_requestor_1_pmp_0_cfg_x: i1, io_requestor_1_pmp_0_addr: i30, io_requestor_1_pmp_0_mask: i32, io_requestor_1_pmp_1_cfg_l: i1, io_requestor_1_pmp_1_cfg_a: i2, io_requestor_1_pmp_1_cfg_x: i1, io_requestor_1_pmp_1_addr: i30, io_requestor_1_pmp_1_mask: i32, io_requestor_1_pmp_2_cfg_l: i1, io_requestor_1_pmp_2_cfg_a: i2, io_requestor_1_pmp_2_cfg_x: i1, io_requestor_1_pmp_2_addr: i30, io_requestor_1_pmp_2_mask: i32, io_requestor_1_pmp_3_cfg_l: i1, io_requestor_1_pmp_3_cfg_a: i2, io_requestor_1_pmp_3_cfg_x: i1, io_requestor_1_pmp_3_addr: i30, io_requestor_1_pmp_3_mask: i32, io_requestor_1_pmp_4_cfg_l: i1, io_requestor_1_pmp_4_cfg_a: i2, io_requestor_1_pmp_4_cfg_x: i1, io_requestor_1_pmp_4_addr: i30, io_requestor_1_pmp_4_mask: i32, io_requestor_1_pmp_5_cfg_l: i1, io_requestor_1_pmp_5_cfg_a: i2, io_requestor_1_pmp_5_cfg_x: i1, io_requestor_1_pmp_5_addr: i30, io_requestor_1_pmp_5_mask: i32, io_requestor_1_pmp_6_cfg_l: i1, io_requestor_1_pmp_6_cfg_a: i2, io_requestor_1_pmp_6_cfg_x: i1, io_requestor_1_pmp_6_addr: i30, io_requestor_1_pmp_6_mask: i32, io_requestor_1_pmp_7_cfg_l: i1, io_requestor_1_pmp_7_cfg_a: i2, io_requestor_1_pmp_7_cfg_x: i1, io_requestor_1_pmp_7_addr: i30, io_requestor_1_pmp_7_mask: i32, io_requestor_1_customCSRs_csrs_0_value: i64) {sv.namehint = "ptw.io_requestor_1_status_debug"}
    %core.io_imem_might_request, %core.io_imem_req_valid, %core.io_imem_req_bits_pc, %core.io_imem_req_bits_speculative, %core.io_imem_resp_ready, %core.io_imem_btb_update_valid, %core.io_imem_bht_update_valid, %core.io_imem_flush_icache, %core.io_dmem_req_valid, %core.io_dmem_req_bits_addr, %core.io_dmem_req_bits_tag, %core.io_dmem_req_bits_cmd, %core.io_dmem_req_bits_size, %core.io_dmem_req_bits_signed, %core.io_dmem_s1_kill, %core.io_dmem_s1_data_data, %core.io_ptw_status_debug, %core.io_ptw_pmp_0_cfg_l, %core.io_ptw_pmp_0_cfg_a, %core.io_ptw_pmp_0_cfg_x, %core.io_ptw_pmp_0_cfg_w, %core.io_ptw_pmp_0_cfg_r, %core.io_ptw_pmp_0_addr, %core.io_ptw_pmp_0_mask, %core.io_ptw_pmp_1_cfg_l, %core.io_ptw_pmp_1_cfg_a, %core.io_ptw_pmp_1_cfg_x, %core.io_ptw_pmp_1_cfg_w, %core.io_ptw_pmp_1_cfg_r, %core.io_ptw_pmp_1_addr, %core.io_ptw_pmp_1_mask, %core.io_ptw_pmp_2_cfg_l, %core.io_ptw_pmp_2_cfg_a, %core.io_ptw_pmp_2_cfg_x, %core.io_ptw_pmp_2_cfg_w, %core.io_ptw_pmp_2_cfg_r, %core.io_ptw_pmp_2_addr, %core.io_ptw_pmp_2_mask, %core.io_ptw_pmp_3_cfg_l, %core.io_ptw_pmp_3_cfg_a, %core.io_ptw_pmp_3_cfg_x, %core.io_ptw_pmp_3_cfg_w, %core.io_ptw_pmp_3_cfg_r, %core.io_ptw_pmp_3_addr, %core.io_ptw_pmp_3_mask, %core.io_ptw_pmp_4_cfg_l, %core.io_ptw_pmp_4_cfg_a, %core.io_ptw_pmp_4_cfg_x, %core.io_ptw_pmp_4_cfg_w, %core.io_ptw_pmp_4_cfg_r, %core.io_ptw_pmp_4_addr, %core.io_ptw_pmp_4_mask, %core.io_ptw_pmp_5_cfg_l, %core.io_ptw_pmp_5_cfg_a, %core.io_ptw_pmp_5_cfg_x, %core.io_ptw_pmp_5_cfg_w, %core.io_ptw_pmp_5_cfg_r, %core.io_ptw_pmp_5_addr, %core.io_ptw_pmp_5_mask, %core.io_ptw_pmp_6_cfg_l, %core.io_ptw_pmp_6_cfg_a, %core.io_ptw_pmp_6_cfg_x, %core.io_ptw_pmp_6_cfg_w, %core.io_ptw_pmp_6_cfg_r, %core.io_ptw_pmp_6_addr, %core.io_ptw_pmp_6_mask, %core.io_ptw_pmp_7_cfg_l, %core.io_ptw_pmp_7_cfg_a, %core.io_ptw_pmp_7_cfg_x, %core.io_ptw_pmp_7_cfg_w, %core.io_ptw_pmp_7_cfg_r, %core.io_ptw_pmp_7_addr, %core.io_ptw_pmp_7_mask, %core.io_ptw_customCSRs_csrs_0_value, %core.io_wfi = hw.instance "core" @Rocket(clock: %clock: !seq.clock, reset: %reset: i1, io_interrupts_debug: %intXbar.auto_int_out_0: i1, io_interrupts_mtip: %intXbar.auto_int_out_2: i1, io_interrupts_msip: %intXbar.auto_int_out_1: i1, io_interrupts_meip: %intXbar.auto_int_out_3: i1, io_imem_resp_valid: %frontend.io_cpu_resp_valid: i1, io_imem_resp_bits_pc: %frontend.io_cpu_resp_bits_pc: i34, io_imem_resp_bits_data: %frontend.io_cpu_resp_bits_data: i32, io_imem_resp_bits_xcpt_pf_inst: %frontend.io_cpu_resp_bits_xcpt_pf_inst: i1, io_imem_resp_bits_xcpt_gf_inst: %frontend.io_cpu_resp_bits_xcpt_gf_inst: i1, io_imem_resp_bits_xcpt_ae_inst: %frontend.io_cpu_resp_bits_xcpt_ae_inst: i1, io_imem_resp_bits_replay: %frontend.io_cpu_resp_bits_replay: i1, io_dmem_req_ready: %dcacheArb.io_requestor_0_req_ready: i1, io_dmem_s2_nack: %dcacheArb.io_requestor_0_s2_nack: i1, io_dmem_resp_valid: %dcacheArb.io_requestor_0_resp_valid: i1, io_dmem_resp_bits_tag: %dcacheArb.io_requestor_0_resp_bits_tag: i6, io_dmem_resp_bits_data: %dcacheArb.io_requestor_0_resp_bits_data: i64, io_dmem_resp_bits_replay: %dcacheArb.io_requestor_0_resp_bits_replay: i1, io_dmem_resp_bits_has_data: %dcacheArb.io_requestor_0_resp_bits_has_data: i1, io_dmem_resp_bits_data_word_bypass: %dcacheArb.io_requestor_0_resp_bits_data_word_bypass: i64, io_dmem_replay_next: %dcacheArb.io_requestor_0_replay_next: i1, io_dmem_s2_xcpt_ma_ld: %dcacheArb.io_requestor_0_s2_xcpt_ma_ld: i1, io_dmem_s2_xcpt_ma_st: %dcacheArb.io_requestor_0_s2_xcpt_ma_st: i1, io_dmem_s2_xcpt_pf_ld: %dcacheArb.io_requestor_0_s2_xcpt_pf_ld: i1, io_dmem_s2_xcpt_pf_st: %dcacheArb.io_requestor_0_s2_xcpt_pf_st: i1, io_dmem_s2_xcpt_ae_ld: %dcacheArb.io_requestor_0_s2_xcpt_ae_ld: i1, io_dmem_s2_xcpt_ae_st: %dcacheArb.io_requestor_0_s2_xcpt_ae_st: i1, io_dmem_ordered: %dcacheArb.io_requestor_0_ordered: i1, io_dmem_perf_release: %dcacheArb.io_requestor_0_perf_release: i1, io_dmem_perf_grant: %dcacheArb.io_requestor_0_perf_grant: i1) -> (io_imem_might_request: i1, io_imem_req_valid: i1, io_imem_req_bits_pc: i34, io_imem_req_bits_speculative: i1, io_imem_resp_ready: i1, io_imem_btb_update_valid: i1, io_imem_bht_update_valid: i1, io_imem_flush_icache: i1, io_dmem_req_valid: i1, io_dmem_req_bits_addr: i34, io_dmem_req_bits_tag: i6, io_dmem_req_bits_cmd: i5, io_dmem_req_bits_size: i2, io_dmem_req_bits_signed: i1, io_dmem_s1_kill: i1, io_dmem_s1_data_data: i64, io_ptw_status_debug: i1, io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: i1, io_ptw_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: i1, io_ptw_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: i1, io_ptw_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: i1, io_ptw_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: i1, io_ptw_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: i1, io_ptw_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: i1, io_ptw_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: i1, io_ptw_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: i32, io_ptw_customCSRs_csrs_0_value: i64, io_wfi: i1) {sv.namehint = "core.io_wfi"}
    %wfiNodeOut_0_REG = seq.firreg %core.io_wfi clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wfiNodeOut_0"} : i1
    hw.output %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_b_ready, %buffer.auto_out_c_valid, %buffer.auto_out_c_bits_opcode, %buffer.auto_out_c_bits_param, %buffer.auto_out_c_bits_size, %buffer.auto_out_c_bits_source, %buffer.auto_out_c_bits_address, %buffer.auto_out_c_bits_data, %buffer.auto_out_d_ready, %buffer.auto_out_e_valid, %buffer.auto_out_e_bits_sink, %wfiNodeOut_0_REG : i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i2, i1
  }
  hw.module private @TileResetDomain(in %auto_tile_buffer_out_a_ready : i1, out auto_tile_buffer_out_a_valid : i1, out auto_tile_buffer_out_a_bits_opcode : i3, out auto_tile_buffer_out_a_bits_param : i3, out auto_tile_buffer_out_a_bits_size : i4, out auto_tile_buffer_out_a_bits_source : i2, out auto_tile_buffer_out_a_bits_address : i32, out auto_tile_buffer_out_a_bits_mask : i8, out auto_tile_buffer_out_a_bits_data : i64, out auto_tile_buffer_out_b_ready : i1, in %auto_tile_buffer_out_b_valid : i1, in %auto_tile_buffer_out_b_bits_opcode : i3, in %auto_tile_buffer_out_b_bits_param : i2, in %auto_tile_buffer_out_b_bits_size : i4, in %auto_tile_buffer_out_b_bits_source : i2, in %auto_tile_buffer_out_b_bits_address : i32, in %auto_tile_buffer_out_b_bits_mask : i8, in %auto_tile_buffer_out_b_bits_corrupt : i1, in %auto_tile_buffer_out_c_ready : i1, out auto_tile_buffer_out_c_valid : i1, out auto_tile_buffer_out_c_bits_opcode : i3, out auto_tile_buffer_out_c_bits_param : i3, out auto_tile_buffer_out_c_bits_size : i4, out auto_tile_buffer_out_c_bits_source : i2, out auto_tile_buffer_out_c_bits_address : i32, out auto_tile_buffer_out_c_bits_data : i64, out auto_tile_buffer_out_d_ready : i1, in %auto_tile_buffer_out_d_valid : i1, in %auto_tile_buffer_out_d_bits_opcode : i3, in %auto_tile_buffer_out_d_bits_param : i2, in %auto_tile_buffer_out_d_bits_size : i4, in %auto_tile_buffer_out_d_bits_source : i2, in %auto_tile_buffer_out_d_bits_sink : i2, in %auto_tile_buffer_out_d_bits_denied : i1, in %auto_tile_buffer_out_d_bits_data : i64, in %auto_tile_buffer_out_d_bits_corrupt : i1, in %auto_tile_buffer_out_e_ready : i1, out auto_tile_buffer_out_e_valid : i1, out auto_tile_buffer_out_e_bits_sink : i2, out auto_tile_wfi_out_0 : i1, in %auto_tile_int_local_in_2_0 : i1, in %auto_tile_int_local_in_1_0 : i1, in %auto_tile_int_local_in_1_1 : i1, in %auto_tile_int_local_in_0_0 : i1, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %tile.auto_buffer_out_a_valid, %tile.auto_buffer_out_a_bits_opcode, %tile.auto_buffer_out_a_bits_param, %tile.auto_buffer_out_a_bits_size, %tile.auto_buffer_out_a_bits_source, %tile.auto_buffer_out_a_bits_address, %tile.auto_buffer_out_a_bits_mask, %tile.auto_buffer_out_a_bits_data, %tile.auto_buffer_out_b_ready, %tile.auto_buffer_out_c_valid, %tile.auto_buffer_out_c_bits_opcode, %tile.auto_buffer_out_c_bits_param, %tile.auto_buffer_out_c_bits_size, %tile.auto_buffer_out_c_bits_source, %tile.auto_buffer_out_c_bits_address, %tile.auto_buffer_out_c_bits_data, %tile.auto_buffer_out_d_ready, %tile.auto_buffer_out_e_valid, %tile.auto_buffer_out_e_bits_sink, %tile.auto_wfi_out_0 = hw.instance "tile" @RocketTile(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_buffer_out_a_ready: %auto_tile_buffer_out_a_ready: i1, auto_buffer_out_b_valid: %auto_tile_buffer_out_b_valid: i1, auto_buffer_out_b_bits_opcode: %auto_tile_buffer_out_b_bits_opcode: i3, auto_buffer_out_b_bits_param: %auto_tile_buffer_out_b_bits_param: i2, auto_buffer_out_b_bits_size: %auto_tile_buffer_out_b_bits_size: i4, auto_buffer_out_b_bits_source: %auto_tile_buffer_out_b_bits_source: i2, auto_buffer_out_b_bits_address: %auto_tile_buffer_out_b_bits_address: i32, auto_buffer_out_b_bits_mask: %auto_tile_buffer_out_b_bits_mask: i8, auto_buffer_out_b_bits_corrupt: %auto_tile_buffer_out_b_bits_corrupt: i1, auto_buffer_out_c_ready: %auto_tile_buffer_out_c_ready: i1, auto_buffer_out_d_valid: %auto_tile_buffer_out_d_valid: i1, auto_buffer_out_d_bits_opcode: %auto_tile_buffer_out_d_bits_opcode: i3, auto_buffer_out_d_bits_param: %auto_tile_buffer_out_d_bits_param: i2, auto_buffer_out_d_bits_size: %auto_tile_buffer_out_d_bits_size: i4, auto_buffer_out_d_bits_source: %auto_tile_buffer_out_d_bits_source: i2, auto_buffer_out_d_bits_sink: %auto_tile_buffer_out_d_bits_sink: i2, auto_buffer_out_d_bits_denied: %auto_tile_buffer_out_d_bits_denied: i1, auto_buffer_out_d_bits_data: %auto_tile_buffer_out_d_bits_data: i64, auto_buffer_out_d_bits_corrupt: %auto_tile_buffer_out_d_bits_corrupt: i1, auto_buffer_out_e_ready: %auto_tile_buffer_out_e_ready: i1, auto_int_local_in_2_0: %auto_tile_int_local_in_2_0: i1, auto_int_local_in_1_0: %auto_tile_int_local_in_1_0: i1, auto_int_local_in_1_1: %auto_tile_int_local_in_1_1: i1, auto_int_local_in_0_0: %auto_tile_int_local_in_0_0: i1) -> (auto_buffer_out_a_valid: i1, auto_buffer_out_a_bits_opcode: i3, auto_buffer_out_a_bits_param: i3, auto_buffer_out_a_bits_size: i4, auto_buffer_out_a_bits_source: i2, auto_buffer_out_a_bits_address: i32, auto_buffer_out_a_bits_mask: i8, auto_buffer_out_a_bits_data: i64, auto_buffer_out_b_ready: i1, auto_buffer_out_c_valid: i1, auto_buffer_out_c_bits_opcode: i3, auto_buffer_out_c_bits_param: i3, auto_buffer_out_c_bits_size: i4, auto_buffer_out_c_bits_source: i2, auto_buffer_out_c_bits_address: i32, auto_buffer_out_c_bits_data: i64, auto_buffer_out_d_ready: i1, auto_buffer_out_e_valid: i1, auto_buffer_out_e_bits_sink: i2, auto_wfi_out_0: i1) {sv.namehint = "tile.auto_wfi_out_0"}
    hw.output %tile.auto_buffer_out_a_valid, %tile.auto_buffer_out_a_bits_opcode, %tile.auto_buffer_out_a_bits_param, %tile.auto_buffer_out_a_bits_size, %tile.auto_buffer_out_a_bits_source, %tile.auto_buffer_out_a_bits_address, %tile.auto_buffer_out_a_bits_mask, %tile.auto_buffer_out_a_bits_data, %tile.auto_buffer_out_b_ready, %tile.auto_buffer_out_c_valid, %tile.auto_buffer_out_c_bits_opcode, %tile.auto_buffer_out_c_bits_param, %tile.auto_buffer_out_c_bits_size, %tile.auto_buffer_out_c_bits_source, %tile.auto_buffer_out_c_bits_address, %tile.auto_buffer_out_c_bits_data, %tile.auto_buffer_out_d_ready, %tile.auto_buffer_out_e_valid, %tile.auto_buffer_out_e_bits_sink, %tile.auto_wfi_out_0 : i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i2, i1
  }
  hw.module private @Queue2_TLBundleA_2(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i32, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 117>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 117>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 117>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_address, %io_enq_bits_mask, %io_enq_bits_data, %false : i3, i3, i4, i2, i32, i8, i64, i1
    %2 = comb.extract %0 from 114 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i117) -> i3
    %3 = comb.extract %0 from 111 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i117) -> i3
    %4 = comb.extract %0 from 107 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i117) -> i4
    %5 = comb.extract %0 from 105 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i117) -> i2
    %6 = comb.extract %0 from 73 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i117) -> i32
    %7 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i117) -> i8
    %8 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i117) -> i64
    %9 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i117) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i3, i4, i2, i32, i8, i64, i1
  }
  hw.module private @Queue2_TLBundleD_2(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i2, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_sink : i2, in %io_enq_bits_denied : i1, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_sink : i2, out io_deq_bits_denied : i1, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 79>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 79>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 79>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_sink, %io_enq_bits_denied, %io_enq_bits_data, %io_enq_bits_corrupt : i3, i2, i4, i2, i2, i1, i64, i1
    %2 = comb.extract %0 from 76 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i79) -> i3
    %3 = comb.extract %0 from 74 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i79) -> i2
    %4 = comb.extract %0 from 70 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i79) -> i4
    %5 = comb.extract %0 from 68 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i79) -> i2
    %6 = comb.extract %0 from 66 {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : (i79) -> i2
    %7 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_denied"} : (i79) -> i1
    %8 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i79) -> i64
    %9 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i79) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i2, i4, i2, i2, i1, i64, i1
  }
  hw.module private @Queue2_TLBundleB(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_param : i2, in %io_enq_bits_address : i32, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %c-2_i9 = hw.constant -2 : i9
    %c24_i6 = hw.constant 24 : i6
    %true = hw.constant true
    %false = hw.constant false
    %c-2_i3 = hw.constant -2 : i3
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 52>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %13 : <2 x 52>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 52>
    %1 = comb.concat %c-2_i3, %io_enq_bits_param, %c24_i6, %io_enq_bits_address, %c-2_i9 : i3, i2, i6, i32, i9
    %2 = comb.extract %0 from 49 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i52) -> i3
    %3 = comb.extract %0 from 47 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i52) -> i2
    %4 = comb.extract %0 from 43 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i52) -> i4
    %5 = comb.extract %0 from 41 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i52) -> i2
    %6 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i52) -> i32
    %7 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i52) -> i8
    %8 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i52) -> i1
    %wrap = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %9 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %10 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %11 = comb.and bin %9, %10 {sv.namehint = "empty"} : i1
    %12 = comb.and bin %9, %maybe_full {sv.namehint = "full"} : i1
    %13 = comb.and bin %22, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %21 {sv.namehint = "do_deq"} : i1
    %15 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %16 = comb.mux bin %13, %15, %wrap : i1
    %17 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %18 = comb.mux bin %14, %17, %wrap_1 : i1
    %19 = comb.icmp bin eq %13, %14 : i1
    %20 = comb.mux bin %19, %maybe_full, %13 : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_deq_valid"} : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %22, %21, %2, %3, %4, %5, %6, %7, %8 : i1, i1, i3, i2, i4, i2, i32, i8, i1
  }
  hw.module private @Queue2_TLBundleC(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i32, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firmem 0, 1, undefined, port_order : <2 x 109>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %13 : <2 x 109>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 109>
    %1 = comb.concat %io_enq_bits_opcode, %io_enq_bits_param, %io_enq_bits_size, %io_enq_bits_source, %io_enq_bits_address, %io_enq_bits_data, %false : i3, i3, i4, i2, i32, i64, i1
    %2 = comb.extract %0 from 106 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i109) -> i3
    %3 = comb.extract %0 from 103 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i109) -> i3
    %4 = comb.extract %0 from 99 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i109) -> i4
    %5 = comb.extract %0 from 97 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i109) -> i2
    %6 = comb.extract %0 from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i109) -> i32
    %7 = comb.extract %0 from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i109) -> i64
    %8 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i109) -> i1
    %wrap = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %9 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %10 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %11 = comb.and bin %9, %10 {sv.namehint = "empty"} : i1
    %12 = comb.and bin %9, %maybe_full {sv.namehint = "full"} : i1
    %13 = comb.and bin %22, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %21 {sv.namehint = "do_deq"} : i1
    %15 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %16 = comb.mux bin %13, %15, %wrap : i1
    %17 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %18 = comb.mux bin %14, %17, %wrap_1 : i1
    %19 = comb.icmp bin eq %13, %14 : i1
    %20 = comb.mux bin %19, %maybe_full, %13 : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_deq_valid"} : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %22, %21, %2, %3, %4, %5, %6, %7, %8 : i1, i1, i3, i3, i4, i2, i32, i64, i1
  }
  hw.module private @Queue2_TLBundleE(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_sink : i2, out io_deq_valid : i1, out io_deq_bits_sink : i2) {
    %false = hw.constant false
    %true = hw.constant true
    %ram_sink = seq.firmem 0, 1, undefined, port_order : <2 x 2>
    seq.firmem.write_port %ram_sink[%wrap] = %io_enq_bits_sink, clock %clock enable %5 : <2 x 2>
    %0 = seq.firmem.read_port %ram_sink[%wrap_1], clock %clock {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : <2 x 2>
    %wrap = seq.firreg %7 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %9 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %11 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %1 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %2 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %3 = comb.and bin %1, %2 {sv.namehint = "empty"} : i1
    %4 = comb.and bin %1, %maybe_full {sv.namehint = "full"} : i1
    %5 = comb.and bin %13, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %6 = comb.add bin %wrap, %true {sv.namehint = "_value_T"} : i1
    %7 = comb.mux bin %5, %6, %wrap : i1
    %8 = comb.add bin %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %9 = comb.mux bin %3, %wrap_1, %8 : i1
    %10 = comb.icmp bin eq %5, %12 : i1
    %11 = comb.mux bin %10, %maybe_full, %5 : i1
    %12 = comb.xor bin %3, %true {sv.namehint = "do_deq"} : i1
    %13 = comb.xor bin %4, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %13, %12, %0 : i1, i1, i2
  }
  hw.module private @TLBuffer_9(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_opcode : i3, out auto_in_b_bits_param : i2, out auto_in_b_bits_size : i4, out auto_in_b_bits_source : i2, out auto_in_b_bits_address : i32, out auto_in_b_bits_mask : i8, out auto_in_b_bits_corrupt : i1, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, out auto_in_e_ready : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %false = hw.constant false
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %nodeOut_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %false: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %nodeIn_b_q.io_deq_valid: i1, io_in_b_bits_opcode: %nodeIn_b_q.io_deq_bits_opcode: i3, io_in_b_bits_param: %nodeIn_b_q.io_deq_bits_param: i2, io_in_b_bits_size: %nodeIn_b_q.io_deq_bits_size: i4, io_in_b_bits_source: %nodeIn_b_q.io_deq_bits_source: i2, io_in_b_bits_address: %nodeIn_b_q.io_deq_bits_address: i32, io_in_b_bits_mask: %nodeIn_b_q.io_deq_bits_mask: i8, io_in_b_bits_corrupt: %nodeIn_b_q.io_deq_bits_corrupt: i1, io_in_c_ready: %nodeOut_c_q.io_enq_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %false: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %nodeIn_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %nodeIn_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %nodeIn_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %nodeIn_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %nodeIn_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %nodeIn_d_q.io_deq_bits_sink: i2, io_in_d_bits_denied: %nodeIn_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %nodeIn_d_q.io_deq_bits_corrupt: i1, io_in_e_ready: %nodeOut_e_q.io_enq_ready: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %nodeOut_a_q.io_enq_ready, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt = hw.instance "nodeOut_a_q" @Queue2_TLBundleA_2(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i32, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeOut_a_q.io_deq_valid"}
    %nodeIn_d_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt = hw.instance "nodeIn_d_q" @Queue2_TLBundleD_2(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %auto_out_d_bits_param: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %auto_out_d_bits_sink: i2, io_enq_bits_denied: %auto_out_d_bits_denied: i1, io_enq_bits_data: %auto_out_d_bits_data: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i2, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeIn_d_q.io_deq_valid"}
    %nodeIn_b_q.io_enq_ready, %nodeIn_b_q.io_deq_valid, %nodeIn_b_q.io_deq_bits_opcode, %nodeIn_b_q.io_deq_bits_param, %nodeIn_b_q.io_deq_bits_size, %nodeIn_b_q.io_deq_bits_source, %nodeIn_b_q.io_deq_bits_address, %nodeIn_b_q.io_deq_bits_mask, %nodeIn_b_q.io_deq_bits_corrupt = hw.instance "nodeIn_b_q" @Queue2_TLBundleB(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_b_valid: i1, io_enq_bits_param: %auto_out_b_bits_param: i2, io_enq_bits_address: %auto_out_b_bits_address: i32, io_deq_ready: %auto_in_b_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "nodeIn_b_q.io_deq_valid"}
    %nodeOut_c_q.io_enq_ready, %nodeOut_c_q.io_deq_valid, %nodeOut_c_q.io_deq_bits_opcode, %nodeOut_c_q.io_deq_bits_param, %nodeOut_c_q.io_deq_bits_size, %nodeOut_c_q.io_deq_bits_source, %nodeOut_c_q.io_deq_bits_address, %nodeOut_c_q.io_deq_bits_data, %nodeOut_c_q.io_deq_bits_corrupt = hw.instance "nodeOut_c_q" @Queue2_TLBundleC(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_c_valid: i1, io_enq_bits_opcode: %auto_in_c_bits_opcode: i3, io_enq_bits_param: %auto_in_c_bits_param: i3, io_enq_bits_size: %auto_in_c_bits_size: i4, io_enq_bits_source: %auto_in_c_bits_source: i2, io_enq_bits_address: %auto_in_c_bits_address: i32, io_enq_bits_data: %auto_in_c_bits_data: i64, io_deq_ready: %auto_out_c_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "nodeOut_c_q.io_deq_valid"}
    %nodeOut_e_q.io_enq_ready, %nodeOut_e_q.io_deq_valid, %nodeOut_e_q.io_deq_bits_sink = hw.instance "nodeOut_e_q" @Queue2_TLBundleE(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_e_valid: i1, io_enq_bits_sink: %auto_in_e_bits_sink: i2) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_sink: i2) {sv.namehint = "nodeOut_e_q.io_deq_valid"}
    hw.output %nodeOut_a_q.io_enq_ready, %nodeIn_b_q.io_deq_valid, %nodeIn_b_q.io_deq_bits_opcode, %nodeIn_b_q.io_deq_bits_param, %nodeIn_b_q.io_deq_bits_size, %nodeIn_b_q.io_deq_bits_source, %nodeIn_b_q.io_deq_bits_address, %nodeIn_b_q.io_deq_bits_mask, %nodeIn_b_q.io_deq_bits_corrupt, %nodeOut_c_q.io_enq_ready, %nodeIn_d_q.io_deq_valid, %nodeIn_d_q.io_deq_bits_opcode, %nodeIn_d_q.io_deq_bits_param, %nodeIn_d_q.io_deq_bits_size, %nodeIn_d_q.io_deq_bits_source, %nodeIn_d_q.io_deq_bits_sink, %nodeIn_d_q.io_deq_bits_denied, %nodeIn_d_q.io_deq_bits_data, %nodeIn_d_q.io_deq_bits_corrupt, %nodeOut_e_q.io_enq_ready, %nodeOut_a_q.io_deq_valid, %nodeOut_a_q.io_deq_bits_opcode, %nodeOut_a_q.io_deq_bits_param, %nodeOut_a_q.io_deq_bits_size, %nodeOut_a_q.io_deq_bits_source, %nodeOut_a_q.io_deq_bits_address, %nodeOut_a_q.io_deq_bits_mask, %nodeOut_a_q.io_deq_bits_data, %nodeOut_a_q.io_deq_bits_corrupt, %nodeIn_b_q.io_enq_ready, %nodeOut_c_q.io_deq_valid, %nodeOut_c_q.io_deq_bits_opcode, %nodeOut_c_q.io_deq_bits_param, %nodeOut_c_q.io_deq_bits_size, %nodeOut_c_q.io_deq_bits_source, %nodeOut_c_q.io_deq_bits_address, %nodeOut_c_q.io_deq_bits_data, %nodeOut_c_q.io_deq_bits_corrupt, %nodeIn_d_q.io_enq_ready, %nodeOut_e_q.io_deq_valid, %nodeOut_e_q.io_deq_bits_sink : i1, i1, i3, i2, i4, i2, i32, i8, i1, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @NonSyncResetSynchronizerPrimitiveShiftReg_d3(in %clock : !seq.clock, in %io_d : i1, out io_q : i1) {
    %sync_0 = seq.firreg %sync_1 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i1
    %sync_1 = seq.firreg %sync_2 clock %clock {firrtl.random_init_start = 1 : ui64} : i1
    %sync_2 = seq.firreg %io_d clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    hw.output %sync_0 : i1
  }
  hw.module private @SynchronizerShiftReg_w1_d3(in %clock : !seq.clock, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @NonSyncResetSynchronizerPrimitiveShiftReg_d3(clock: %clock: !seq.clock, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @IntSyncAsyncCrossingSink(in %clock : !seq.clock, in %auto_in_sync_0 : i1, out auto_out_0 : i1) {
    %chain.io_q = hw.instance "chain" @SynchronizerShiftReg_w1_d3(clock: %clock: !seq.clock, io_d: %auto_in_sync_0: i1) -> (io_q: i1) {sv.namehint = "nodeOut_0"}
    hw.output %chain.io_q : i1
  }
  hw.module private @IntSyncSyncCrossingSink(in %auto_in_sync_0 : i1, in %auto_in_sync_1 : i1, out auto_out_0 : i1, out auto_out_1 : i1) {
    hw.output %auto_in_sync_0, %auto_in_sync_1 : i1, i1
  }
  hw.module private @IntSyncSyncCrossingSink_1(in %auto_in_sync_0 : i1, out auto_out_0 : i1) {
    hw.output %auto_in_sync_0 : i1
  }
  hw.module private @AsyncResetRegVec_w1_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %false = hw.constant false
    %reg = seq.firreg %io_d clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "reg"} : i1
    hw.output %reg : i1
  }
  hw.module private @IntSyncCrossingSource_1(in %clock : !seq.clock, in %reset : i1, in %auto_in_0 : i1, out auto_out_sync_0 : i1) {
    %reg.io_q = hw.instance "reg" @AsyncResetRegVec_w1_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %auto_in_0: i1) -> (io_q: i1) {sv.namehint = "reg.io_q"}
    hw.output %reg.io_q : i1
  }
  hw.module private @TilePRCIDomain(in %auto_intsink_in_sync_0 : i1, in %auto_int_in_clock_xing_in_1_sync_0 : i1, in %auto_int_in_clock_xing_in_0_sync_0 : i1, in %auto_int_in_clock_xing_in_0_sync_1 : i1, in %auto_tl_master_clock_xing_out_a_ready : i1, out auto_tl_master_clock_xing_out_a_valid : i1, out auto_tl_master_clock_xing_out_a_bits_opcode : i3, out auto_tl_master_clock_xing_out_a_bits_param : i3, out auto_tl_master_clock_xing_out_a_bits_size : i4, out auto_tl_master_clock_xing_out_a_bits_source : i2, out auto_tl_master_clock_xing_out_a_bits_address : i32, out auto_tl_master_clock_xing_out_a_bits_mask : i8, out auto_tl_master_clock_xing_out_a_bits_data : i64, out auto_tl_master_clock_xing_out_a_bits_corrupt : i1, out auto_tl_master_clock_xing_out_b_ready : i1, in %auto_tl_master_clock_xing_out_b_valid : i1, in %auto_tl_master_clock_xing_out_b_bits_param : i2, in %auto_tl_master_clock_xing_out_b_bits_address : i32, in %auto_tl_master_clock_xing_out_c_ready : i1, out auto_tl_master_clock_xing_out_c_valid : i1, out auto_tl_master_clock_xing_out_c_bits_opcode : i3, out auto_tl_master_clock_xing_out_c_bits_param : i3, out auto_tl_master_clock_xing_out_c_bits_size : i4, out auto_tl_master_clock_xing_out_c_bits_source : i2, out auto_tl_master_clock_xing_out_c_bits_address : i32, out auto_tl_master_clock_xing_out_c_bits_data : i64, out auto_tl_master_clock_xing_out_c_bits_corrupt : i1, out auto_tl_master_clock_xing_out_d_ready : i1, in %auto_tl_master_clock_xing_out_d_valid : i1, in %auto_tl_master_clock_xing_out_d_bits_opcode : i3, in %auto_tl_master_clock_xing_out_d_bits_param : i2, in %auto_tl_master_clock_xing_out_d_bits_size : i4, in %auto_tl_master_clock_xing_out_d_bits_source : i2, in %auto_tl_master_clock_xing_out_d_bits_sink : i2, in %auto_tl_master_clock_xing_out_d_bits_denied : i1, in %auto_tl_master_clock_xing_out_d_bits_data : i64, in %auto_tl_master_clock_xing_out_d_bits_corrupt : i1, out auto_tl_master_clock_xing_out_e_valid : i1, out auto_tl_master_clock_xing_out_e_bits_sink : i2, in %auto_tap_clock_in_clock : !seq.clock, in %auto_tap_clock_in_reset : i1) {
    %false = hw.constant false
    %tile_reset_domain.auto_tile_buffer_out_a_valid, %tile_reset_domain.auto_tile_buffer_out_a_bits_opcode, %tile_reset_domain.auto_tile_buffer_out_a_bits_param, %tile_reset_domain.auto_tile_buffer_out_a_bits_size, %tile_reset_domain.auto_tile_buffer_out_a_bits_source, %tile_reset_domain.auto_tile_buffer_out_a_bits_address, %tile_reset_domain.auto_tile_buffer_out_a_bits_mask, %tile_reset_domain.auto_tile_buffer_out_a_bits_data, %tile_reset_domain.auto_tile_buffer_out_b_ready, %tile_reset_domain.auto_tile_buffer_out_c_valid, %tile_reset_domain.auto_tile_buffer_out_c_bits_opcode, %tile_reset_domain.auto_tile_buffer_out_c_bits_param, %tile_reset_domain.auto_tile_buffer_out_c_bits_size, %tile_reset_domain.auto_tile_buffer_out_c_bits_source, %tile_reset_domain.auto_tile_buffer_out_c_bits_address, %tile_reset_domain.auto_tile_buffer_out_c_bits_data, %tile_reset_domain.auto_tile_buffer_out_d_ready, %tile_reset_domain.auto_tile_buffer_out_e_valid, %tile_reset_domain.auto_tile_buffer_out_e_bits_sink, %tile_reset_domain.auto_tile_wfi_out_0 = hw.instance "tile_reset_domain" @TileResetDomain(auto_tile_buffer_out_a_ready: %buffer.auto_in_a_ready: i1, auto_tile_buffer_out_b_valid: %buffer.auto_in_b_valid: i1, auto_tile_buffer_out_b_bits_opcode: %buffer.auto_in_b_bits_opcode: i3, auto_tile_buffer_out_b_bits_param: %buffer.auto_in_b_bits_param: i2, auto_tile_buffer_out_b_bits_size: %buffer.auto_in_b_bits_size: i4, auto_tile_buffer_out_b_bits_source: %buffer.auto_in_b_bits_source: i2, auto_tile_buffer_out_b_bits_address: %buffer.auto_in_b_bits_address: i32, auto_tile_buffer_out_b_bits_mask: %buffer.auto_in_b_bits_mask: i8, auto_tile_buffer_out_b_bits_corrupt: %buffer.auto_in_b_bits_corrupt: i1, auto_tile_buffer_out_c_ready: %buffer.auto_in_c_ready: i1, auto_tile_buffer_out_d_valid: %buffer.auto_in_d_valid: i1, auto_tile_buffer_out_d_bits_opcode: %buffer.auto_in_d_bits_opcode: i3, auto_tile_buffer_out_d_bits_param: %buffer.auto_in_d_bits_param: i2, auto_tile_buffer_out_d_bits_size: %buffer.auto_in_d_bits_size: i4, auto_tile_buffer_out_d_bits_source: %buffer.auto_in_d_bits_source: i2, auto_tile_buffer_out_d_bits_sink: %buffer.auto_in_d_bits_sink: i2, auto_tile_buffer_out_d_bits_denied: %buffer.auto_in_d_bits_denied: i1, auto_tile_buffer_out_d_bits_data: %buffer.auto_in_d_bits_data: i64, auto_tile_buffer_out_d_bits_corrupt: %buffer.auto_in_d_bits_corrupt: i1, auto_tile_buffer_out_e_ready: %buffer.auto_in_e_ready: i1, auto_tile_int_local_in_2_0: %intsink_2.auto_out_0: i1, auto_tile_int_local_in_1_0: %intsink_1.auto_out_0: i1, auto_tile_int_local_in_1_1: %intsink_1.auto_out_1: i1, auto_tile_int_local_in_0_0: %intsink.auto_out_0: i1, auto_clock_in_clock: %clockNode.auto_out_clock: !seq.clock, auto_clock_in_reset: %clockNode.auto_out_reset: i1) -> (auto_tile_buffer_out_a_valid: i1, auto_tile_buffer_out_a_bits_opcode: i3, auto_tile_buffer_out_a_bits_param: i3, auto_tile_buffer_out_a_bits_size: i4, auto_tile_buffer_out_a_bits_source: i2, auto_tile_buffer_out_a_bits_address: i32, auto_tile_buffer_out_a_bits_mask: i8, auto_tile_buffer_out_a_bits_data: i64, auto_tile_buffer_out_b_ready: i1, auto_tile_buffer_out_c_valid: i1, auto_tile_buffer_out_c_bits_opcode: i3, auto_tile_buffer_out_c_bits_param: i3, auto_tile_buffer_out_c_bits_size: i4, auto_tile_buffer_out_c_bits_source: i2, auto_tile_buffer_out_c_bits_address: i32, auto_tile_buffer_out_c_bits_data: i64, auto_tile_buffer_out_d_ready: i1, auto_tile_buffer_out_e_valid: i1, auto_tile_buffer_out_e_bits_sink: i2, auto_tile_wfi_out_0: i1) {sv.namehint = "intsource_2.auto_in_0"}
    %clockNode.auto_out_clock, %clockNode.auto_out_reset = hw.instance "clockNode" @FixedClockBroadcast_1(auto_in_clock: %auto_tap_clock_in_clock: !seq.clock, auto_in_reset: %auto_tap_clock_in_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockNode.auto_out_reset"}
    %buffer.auto_in_a_ready, %buffer.auto_in_b_valid, %buffer.auto_in_b_bits_opcode, %buffer.auto_in_b_bits_param, %buffer.auto_in_b_bits_size, %buffer.auto_in_b_bits_source, %buffer.auto_in_b_bits_address, %buffer.auto_in_b_bits_mask, %buffer.auto_in_b_bits_corrupt, %buffer.auto_in_c_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_in_e_ready, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_b_ready, %buffer.auto_out_c_valid, %buffer.auto_out_c_bits_opcode, %buffer.auto_out_c_bits_param, %buffer.auto_out_c_bits_size, %buffer.auto_out_c_bits_source, %buffer.auto_out_c_bits_address, %buffer.auto_out_c_bits_data, %buffer.auto_out_c_bits_corrupt, %buffer.auto_out_d_ready, %buffer.auto_out_e_valid, %buffer.auto_out_e_bits_sink = hw.instance "buffer" @TLBuffer_9(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_a_valid: %tile_reset_domain.auto_tile_buffer_out_a_valid: i1, auto_in_a_bits_opcode: %tile_reset_domain.auto_tile_buffer_out_a_bits_opcode: i3, auto_in_a_bits_param: %tile_reset_domain.auto_tile_buffer_out_a_bits_param: i3, auto_in_a_bits_size: %tile_reset_domain.auto_tile_buffer_out_a_bits_size: i4, auto_in_a_bits_source: %tile_reset_domain.auto_tile_buffer_out_a_bits_source: i2, auto_in_a_bits_address: %tile_reset_domain.auto_tile_buffer_out_a_bits_address: i32, auto_in_a_bits_mask: %tile_reset_domain.auto_tile_buffer_out_a_bits_mask: i8, auto_in_a_bits_data: %tile_reset_domain.auto_tile_buffer_out_a_bits_data: i64, auto_in_b_ready: %tile_reset_domain.auto_tile_buffer_out_b_ready: i1, auto_in_c_valid: %tile_reset_domain.auto_tile_buffer_out_c_valid: i1, auto_in_c_bits_opcode: %tile_reset_domain.auto_tile_buffer_out_c_bits_opcode: i3, auto_in_c_bits_param: %tile_reset_domain.auto_tile_buffer_out_c_bits_param: i3, auto_in_c_bits_size: %tile_reset_domain.auto_tile_buffer_out_c_bits_size: i4, auto_in_c_bits_source: %tile_reset_domain.auto_tile_buffer_out_c_bits_source: i2, auto_in_c_bits_address: %tile_reset_domain.auto_tile_buffer_out_c_bits_address: i32, auto_in_c_bits_data: %tile_reset_domain.auto_tile_buffer_out_c_bits_data: i64, auto_in_d_ready: %tile_reset_domain.auto_tile_buffer_out_d_ready: i1, auto_in_e_valid: %tile_reset_domain.auto_tile_buffer_out_e_valid: i1, auto_in_e_bits_sink: %tile_reset_domain.auto_tile_buffer_out_e_bits_sink: i2, auto_out_a_ready: %auto_tl_master_clock_xing_out_a_ready: i1, auto_out_b_valid: %auto_tl_master_clock_xing_out_b_valid: i1, auto_out_b_bits_param: %auto_tl_master_clock_xing_out_b_bits_param: i2, auto_out_b_bits_address: %auto_tl_master_clock_xing_out_b_bits_address: i32, auto_out_c_ready: %auto_tl_master_clock_xing_out_c_ready: i1, auto_out_d_valid: %auto_tl_master_clock_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_tl_master_clock_xing_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_tl_master_clock_xing_out_d_bits_param: i2, auto_out_d_bits_size: %auto_tl_master_clock_xing_out_d_bits_size: i4, auto_out_d_bits_source: %auto_tl_master_clock_xing_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_tl_master_clock_xing_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_tl_master_clock_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_tl_master_clock_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_tl_master_clock_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_opcode: i3, auto_in_b_bits_param: i2, auto_in_b_bits_size: i4, auto_in_b_bits_source: i2, auto_in_b_bits_address: i32, auto_in_b_bits_mask: i8, auto_in_b_bits_corrupt: i1, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_in_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "tlMasterClockXingIn_e_valid"}
    %intsink.auto_out_0 = hw.instance "intsink" @IntSyncAsyncCrossingSink(clock: %auto_tap_clock_in_clock: !seq.clock, auto_in_sync_0: %auto_intsink_in_sync_0: i1) -> (auto_out_0: i1) {sv.namehint = "intsink.auto_out_0"}
    %intsink_1.auto_out_0, %intsink_1.auto_out_1 = hw.instance "intsink_1" @IntSyncSyncCrossingSink(auto_in_sync_0: %auto_int_in_clock_xing_in_0_sync_0: i1, auto_in_sync_1: %auto_int_in_clock_xing_in_0_sync_1: i1) -> (auto_out_0: i1, auto_out_1: i1) {sv.namehint = "intsink_1.auto_out_1"}
    %intsink_2.auto_out_0 = hw.instance "intsink_2" @IntSyncSyncCrossingSink_1(auto_in_sync_0: %auto_int_in_clock_xing_in_1_sync_0: i1) -> (auto_out_0: i1) {sv.namehint = "intsink_2.auto_out_0"}
    %intsource_1.auto_out_sync_0 = hw.instance "intsource_1" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1)
    %intsource_2.auto_out_sync_0 = hw.instance "intsource_2" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %tile_reset_domain.auto_tile_wfi_out_0: i1) -> (auto_out_sync_0: i1)
    %intsource_3.auto_out_sync_0 = hw.instance "intsource_3" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1)
    hw.output %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_b_ready, %buffer.auto_out_c_valid, %buffer.auto_out_c_bits_opcode, %buffer.auto_out_c_bits_param, %buffer.auto_out_c_bits_size, %buffer.auto_out_c_bits_source, %buffer.auto_out_c_bits_address, %buffer.auto_out_c_bits_data, %buffer.auto_out_c_bits_corrupt, %buffer.auto_out_d_ready, %buffer.auto_out_e_valid, %buffer.auto_out_e_bits_sink : i1, i3, i3, i4, i2, i32, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLMonitor_21(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c1_i4 = hw.constant 1 : i4
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.concat %c0_i2, %io_in_a_bits_size : i2, i2
    %13 = comb.shl bin %c1_i4, %12 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %14 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %15 = comb.extract %13 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.extract %13 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_acc_6"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_acc_7"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_acc_8"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_acc_9"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_acc_10"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_acc_11"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_acc_12"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_acc_13"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.xor bin %reset, %true : i1
    %58 = comb.and bin %io_in_a_valid, %56, %57 : i1
    %59 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %60 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %61 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %62 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %63 = comb.and bin %io_in_a_valid, %62, %57 : i1
    %64 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %65 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %66 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %67 = comb.icmp bin ne %66, %c-1_i2 : i2
    %68 = comb.and bin %io_in_a_valid, %65, %57 : i1
    %69 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %70 = comb.icmp eq %69, %c-1_i2 : i2
    %71 = comb.xor bin %64, %true : i1
    %72 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %74 = comb.and bin %67, %70 : i1
    %75 = comb.and bin %io_in_a_valid, %73, %57 : i1
    %76 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %77 = comb.and bin %io_in_a_valid, %76, %57 : i1
    %78 = comb.xor bin %55, %c-1_i8 : i8
    %79 = comb.and bin %io_in_a_bits_mask, %78 : i8
    %80 = comb.icmp bin eq %79, %c0_i8 : i8
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %57 : i1
    %83 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %84 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %85 = comb.and bin %io_in_a_valid, %84, %57 : i1
    %86 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %87 = comb.xor bin %86, %true : i1
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %57 : i1
    %90 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %91 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %92 = comb.and bin %io_in_d_valid, %57 : i1
    %93 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %94 = comb.icmp bin ne %93, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %95, %57 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %98 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %99 = comb.and bin %io_in_d_valid, %98, %57 : i1
    %100 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %101 = comb.and bin %io_in_d_valid, %100, %57 : i1
    %102 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %103 = comb.and bin %io_in_d_valid, %102, %57 : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %57 : i1
    %106 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %107 = comb.and bin %io_in_d_valid, %106, %57 : i1
    %108 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %113 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %109 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %110 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %111 = comb.xor %108, %true : i1
    %112 = comb.or %111, %109 : i1
    %113 = comb.and %112, %a_first_counter : i1
    %opcode = seq.firreg %121 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %122 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %123 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %124 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %125 clock %clock {firrtl.random_init_start = 15 : ui64} : i28
    %114 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %115 = comb.and bin %io_in_a_valid, %a_first_counter, %57 : i1
    %116 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %117 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %118 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %119 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %120 = comb.and bin %108, %110 : i1
    %121 = comb.mux bin %120, %io_in_a_bits_opcode, %opcode : i3
    %122 = comb.mux bin %120, %io_in_a_bits_param, %param : i3
    %123 = comb.mux bin %120, %io_in_a_bits_size, %size : i2
    %124 = comb.mux bin %120, %io_in_a_bits_source, %source : i6
    %125 = comb.mux bin %120, %io_in_a_bits_address, %address : i28
    %126 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %131 clock %clock reset sync %reset, %false {firrtl.random_init_start = 43 : ui64} : i1
    %127 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %128 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %129 = comb.xor %126, %true : i1
    %130 = comb.or %129, %127 : i1
    %131 = comb.and %130, %d_first_counter : i1
    %opcode_1 = seq.firreg %137 clock %clock {firrtl.random_init_start = 44 : ui64} : i3
    %size_1 = seq.firreg %138 clock %clock {firrtl.random_init_start = 49 : ui64} : i2
    %source_1 = seq.firreg %139 clock %clock {firrtl.random_init_start = 51 : ui64} : i6
    %132 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %133 = comb.and bin %io_in_d_valid, %d_first_counter, %57 : i1
    %134 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %135 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %136 = comb.and bin %126, %128 : i1
    %137 = comb.mux bin %136, %io_in_d_bits_opcode, %opcode_1 : i3
    %138 = comb.mux bin %136, %io_in_d_bits_size, %size_1 : i2
    %139 = comb.mux bin %136, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %235 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 59 : ui64} : i48
    %inflight_opcodes = seq.firreg %238 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 107 : ui64} : i192
    %inflight_sizes = seq.firreg %241 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 299 : ui64} : i192
    %a_first_counter_1 = seq.firreg %144 clock %clock reset sync %reset, %false {firrtl.random_init_start = 491 : ui64} : i1
    %140 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %141 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %142 = comb.xor %108, %true : i1
    %143 = comb.or %142, %140 : i1
    %144 = comb.and %143, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %149 clock %clock reset sync %reset, %false {firrtl.random_init_start = 492 : ui64} : i1
    %145 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %146 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %147 = comb.xor %126, %true : i1
    %148 = comb.or %147, %145 : i1
    %149 = comb.and %148, %d_first_counter_1 : i1
    %150 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %151 = comb.shru bin %inflight_opcodes, %150 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %152 = comb.extract %151 from 1 : (i192) -> i3
    %153 = comb.shru bin %inflight_sizes, %150 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %154 = comb.extract %153 from 1 : (i192) -> i3
    %155 = comb.concat %false, %154 {sv.namehint = "a_size_lookup"} : i1, i3
    %156 = comb.and bin %io_in_a_valid, %141 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %157 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %158 = comb.shl bin %c1_i64, %157 {sv.namehint = "_a_set_wo_ready_T"} : i64
    %159 = comb.extract %158 from 0 : (i64) -> i48
    %160 = comb.mux bin %156, %159, %c0_i48 {sv.namehint = "a_set_wo_ready"} : i48
    %161 = comb.and bin %108, %141 : i1
    %162 = comb.shl bin %c1_i64, %157 {sv.namehint = "_a_set_T"} : i64
    %163 = comb.extract %162 from 0 : (i64) -> i48
    %164 = comb.mux bin %161, %163, %c0_i48 {sv.namehint = "a_set"} : i48
    %165 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %166 = comb.mux bin %161, %165, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %167 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %168 = comb.mux bin %161, %167, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %169 = comb.concat %c0_i511, %166 : i511, i4
    %170 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %171 = comb.shl bin %169, %170 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %172 = comb.extract %171 from 0 : (i515) -> i192
    %173 = comb.mux bin %161, %172, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %174 = comb.concat %c0_i511, %168 : i511, i3
    %175 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %176 = comb.shl bin %174, %175 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %177 = comb.extract %176 from 0 : (i514) -> i192
    %178 = comb.mux bin %161, %177, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %179 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %180 = comb.shru bin %inflight, %179 : i48
    %181 = comb.extract %180 from 0 : (i48) -> i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %161, %57 : i1
    %184 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %185 = comb.and bin %io_in_d_valid, %146 : i1
    %186 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %187 = comb.and bin %185, %186 : i1
    %188 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %189 = comb.shl bin %c1_i64, %188 {sv.namehint = "_d_clr_wo_ready_T"} : i64
    %190 = comb.extract %189 from 0 : (i64) -> i48
    %191 = comb.mux bin %187, %190, %c0_i48 {sv.namehint = "d_clr_wo_ready"} : i48
    %192 = comb.and bin %126, %146, %186 : i1
    %193 = comb.shl bin %c1_i64, %188 {sv.namehint = "_d_clr_T"} : i64
    %194 = comb.extract %193 from 0 : (i64) -> i48
    %195 = comb.mux bin %192, %194, %c0_i48 {sv.namehint = "d_clr"} : i48
    %196 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %197 = comb.shl bin %c15_i527, %196 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %198 = comb.extract %197 from 0 : (i527) -> i192
    %199 = comb.mux bin %192, %198, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %200 = comb.shl bin %c15_i527, %196 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %201 = comb.extract %200 from 0 : (i527) -> i192
    %202 = comb.mux bin %192, %201, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %203 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %204 = comb.and bin %156, %203 {sv.namehint = "same_cycle_resp"} : i1
    %205 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %206 = comb.shru bin %inflight, %205 : i48
    %207 = comb.extract %206 from 0 : (i48) -> i1
    %208 = comb.or bin %207, %204 : i1
    %209 = comb.and bin %187, %57 : i1
    %210 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %211 = comb.icmp bin eq %io_in_d_bits_opcode, %210 : i3
    %212 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %213 = comb.icmp bin eq %io_in_d_bits_opcode, %212 : i3
    %214 = comb.or bin %211, %213 : i1
    %215 = comb.and bin %187, %204, %57 : i1
    %216 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %217 = comb.xor bin %204, %true : i1
    %218 = hw.array_get %1[%152] : !hw.array<8xi3>, i3
    %219 = comb.icmp bin eq %io_in_d_bits_opcode, %218 : i3
    %220 = hw.array_get %0[%152] : !hw.array<8xi3>, i3
    %221 = comb.icmp bin eq %io_in_d_bits_opcode, %220 : i3
    %222 = comb.or bin %219, %221 : i1
    %223 = comb.and bin %187, %217, %57 : i1
    %224 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %225 = comb.icmp bin eq %224, %155 : i4
    %226 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %227 = comb.xor bin %io_in_d_ready, %true : i1
    %228 = comb.or bin %227, %io_in_a_ready : i1
    %229 = comb.and bin %185, %141, %io_in_a_valid, %226, %186, %57 : i1
    %230 = comb.icmp bin ne %160, %191 : i48
    %231 = comb.icmp bin eq %160, %c0_i48 : i48
    %232 = comb.or bin %230, %231 : i1
    %233 = comb.or bin %inflight, %164 {sv.namehint = "_inflight_T"} : i48
    %234 = comb.xor bin %195, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %235 = comb.and bin %233, %234 {sv.namehint = "_inflight_T_2"} : i48
    %236 = comb.or bin %inflight_opcodes, %173 {sv.namehint = "_inflight_opcodes_T"} : i192
    %237 = comb.xor bin %199, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %238 = comb.and bin %236, %237 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %239 = comb.or bin %inflight_sizes, %178 {sv.namehint = "_inflight_sizes_T"} : i192
    %240 = comb.xor bin %202, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %241 = comb.and bin %239, %240 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %248 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 493 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %242 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %243 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %244 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %245 = comb.or bin %242, %243, %244 : i1
    %246 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %247 = comb.or bin %108, %126 : i1
    %248 = comb.mux bin %247, %c0_i32, %246 : i32
    %inflight_1 = seq.firreg %269 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 525 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %271 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 765 : ui64} : i192
    %d_first_counter_2 = seq.firreg %253 clock %clock reset sync %reset, %false {firrtl.random_init_start = 958 : ui64} : i1
    %249 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %250 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %251 = comb.xor %126, %true : i1
    %252 = comb.or %251, %249 : i1
    %253 = comb.and %252, %d_first_counter_2 : i1
    %254 = comb.shru bin %inflight_sizes_1, %150 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %255 = comb.extract %254 from 1 : (i192) -> i3
    %256 = comb.concat %false, %255 {sv.namehint = "c_size_lookup"} : i1, i3
    %257 = comb.and bin %126, %250, %184 : i1
    %258 = comb.shl bin %c1_i64, %188 {sv.namehint = "_d_clr_T_1"} : i64
    %259 = comb.extract %258 from 0 : (i64) -> i48
    %260 = comb.mux bin %257, %259, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %261 = comb.shl bin %c15_i527, %196 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %262 = comb.extract %261 from 0 : (i527) -> i192
    %263 = comb.mux bin %257, %262, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %264 = comb.shru bin %inflight_1, %205 : i48
    %265 = comb.extract %264 from 0 : (i48) -> i1
    %266 = comb.and bin %io_in_d_valid, %250, %184, %57 : i1
    %267 = comb.icmp bin eq %224, %256 : i4
    %268 = comb.xor bin %260, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %269 = comb.and bin %inflight_1, %268 {sv.namehint = "_inflight_T_5"} : i48
    %270 = comb.xor bin %263, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %271 = comb.and bin %inflight_sizes_1, %270 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %277 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 959 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %272 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %273 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %274 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %275 = comb.or bin %272, %273, %274 : i1
    sv.always posedge %2 {
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %58 {
        sv.assert %4, immediate label "assert__assert_4"
      }
      sv.if %58 {
        sv.assert %14, immediate label "assert__assert_5"
      }
      sv.if %58 {
        sv.assert %11, immediate label "assert__assert_6"
      }
      sv.if %58 {
        sv.assert %59, immediate label "assert__assert_7"
      }
      sv.if %58 {
        sv.assert %60, immediate label "assert__assert_8"
      }
      sv.if %58 {
        sv.assert %61, immediate label "assert__assert_9"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %63 {
        sv.assert %4, immediate label "assert__assert_12"
      }
      sv.if %63 {
        sv.assert %14, immediate label "assert__assert_13"
      }
      sv.if %63 {
        sv.assert %11, immediate label "assert__assert_14"
      }
      sv.if %63 {
        sv.assert %59, immediate label "assert__assert_15"
      }
      sv.if %63 {
        sv.assert %64, immediate label "assert__assert_16"
      }
      sv.if %63 {
        sv.assert %60, immediate label "assert__assert_17"
      }
      sv.if %63 {
        sv.assert %61, immediate label "assert__assert_18"
      }
      sv.if %68 {
        sv.assert %67, immediate label "assert__assert_19"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_20"
      }
      sv.if %68 {
        sv.assert %4, immediate label "assert__assert_21"
      }
      sv.if %68 {
        sv.assert %11, immediate label "assert__assert_22"
      }
      sv.if %68 {
        sv.assert %71, immediate label "assert__assert_23"
      }
      sv.if %68 {
        sv.assert %72, immediate label "assert__assert_24"
      }
      sv.if %68 {
        sv.assert %61, immediate label "assert__assert_25"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_26"
      }
      sv.if %75 {
        sv.assert %4, immediate label "assert__assert_27"
      }
      sv.if %75 {
        sv.assert %11, immediate label "assert__assert_28"
      }
      sv.if %75 {
        sv.assert %71, immediate label "assert__assert_29"
      }
      sv.if %75 {
        sv.assert %72, immediate label "assert__assert_30"
      }
      sv.if %77 {
        sv.assert %74, immediate label "assert__assert_31"
      }
      sv.if %77 {
        sv.assert %4, immediate label "assert__assert_32"
      }
      sv.if %77 {
        sv.assert %11, immediate label "assert__assert_33"
      }
      sv.if %77 {
        sv.assert %71, immediate label "assert__assert_34"
      }
      sv.if %77 {
        sv.assert %80, immediate label "assert__assert_35"
      }
      sv.if %82 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %82 {
        sv.assert %4, immediate label "assert__assert_37"
      }
      sv.if %82 {
        sv.assert %11, immediate label "assert__assert_38"
      }
      sv.if %82 {
        sv.assert %83, immediate label "assert__assert_39"
      }
      sv.if %82 {
        sv.assert %72, immediate label "assert__assert_40"
      }
      sv.if %85 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %85 {
        sv.assert %4, immediate label "assert__assert_42"
      }
      sv.if %85 {
        sv.assert %11, immediate label "assert__assert_43"
      }
      sv.if %85 {
        sv.assert %87, immediate label "assert__assert_44"
      }
      sv.if %85 {
        sv.assert %72, immediate label "assert__assert_45"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %89 {
        sv.assert %4, immediate label "assert__assert_47"
      }
      sv.if %89 {
        sv.assert %11, immediate label "assert__assert_48"
      }
      sv.if %89 {
        sv.assert %90, immediate label "assert__assert_49"
      }
      sv.if %89 {
        sv.assert %72, immediate label "assert__assert_50"
      }
      sv.if %89 {
        sv.assert %61, immediate label "assert__assert_51"
      }
      sv.if %92 {
        sv.assert %91, immediate label "assert__assert_52"
      }
      sv.if %96 {
        sv.assert %94, immediate label "assert__assert_53"
      }
      sv.if %96 {
        sv.assert %97, immediate label "assert__assert_54"
      }
      sv.if %99 {
        sv.assert %94, immediate label "assert__assert_58"
      }
      sv.if %99 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %99 {
        sv.assert %97, immediate label "assert__assert_60"
      }
      sv.if %101 {
        sv.assert %94, immediate label "assert__assert_65"
      }
      sv.if %101 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %101 {
        sv.assert %97, immediate label "assert__assert_67"
      }
      sv.if %103 {
        sv.assert %94, immediate label "assert__assert_72"
      }
      sv.if %105 {
        sv.assert %94, immediate label "assert__assert_76"
      }
      sv.if %107 {
        sv.assert %94, immediate label "assert__assert_80"
      }
      sv.if %115 {
        sv.assert %114, immediate label "assert__assert_87"
      }
      sv.if %115 {
        sv.assert %116, immediate label "assert__assert_88"
      }
      sv.if %115 {
        sv.assert %117, immediate label "assert__assert_89"
      }
      sv.if %115 {
        sv.assert %118, immediate label "assert__assert_90"
      }
      sv.if %115 {
        sv.assert %119, immediate label "assert__assert_91"
      }
      sv.if %133 {
        sv.assert %132, immediate label "assert__assert_92"
      }
      sv.if %133 {
        sv.assert %134, immediate label "assert__assert_94"
      }
      sv.if %133 {
        sv.assert %135, immediate label "assert__assert_95"
      }
      sv.if %183 {
        sv.assert %182, immediate label "assert__assert_98"
      }
      sv.if %209 {
        sv.assert %208, immediate label "assert__assert_99"
      }
      sv.if %215 {
        sv.assert %214, immediate label "assert__assert_100"
      }
      sv.if %215 {
        sv.assert %216, immediate label "assert__assert_101"
      }
      sv.if %223 {
        sv.assert %222, immediate label "assert__assert_102"
      }
      sv.if %223 {
        sv.assert %225, immediate label "assert__assert_103"
      }
      sv.if %229 {
        sv.assert %228, immediate label "assert__assert_104"
      }
      sv.if %57 {
        sv.assert %232, immediate label "assert__assert_105"
      }
      sv.if %57 {
        sv.assert %245, immediate label "assert__assert_106"
      }
      sv.if %266 {
        sv.assert %265, immediate label "assert__assert_108"
      }
      sv.if %266 {
        sv.assert %267, immediate label "assert__assert_110"
      }
      sv.if %57 {
        sv.assert %275, immediate label "assert__assert_113"
      }
    }
    %276 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %277 = comb.mux bin %126, %c0_i32, %276 : i32
    hw.output
  }
  hw.module private @Queue1_RegMapperInput(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_read : i1, in %io_enq_bits_index : i23, in %io_enq_bits_data : i64, in %io_enq_bits_mask : i8, in %io_enq_bits_extra_tlrr_extra_source : i6, in %io_enq_bits_extra_tlrr_extra_size : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_read : i1, out io_deq_bits_index : i23, out io_deq_bits_mask : i8, out io_deq_bits_extra_tlrr_extra_source : i6, out io_deq_bits_extra_tlrr_extra_size : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %0 = comb.concat %io_enq_bits_read, %io_enq_bits_index, %io_enq_bits_data, %io_enq_bits_mask, %io_enq_bits_extra_tlrr_extra_source, %io_enq_bits_extra_tlrr_extra_size : i1, i23, i64, i8, i6, i2
    %1 = comb.extract %ram from 103 {sv.namehint = "ram_io_deq_bits_MPORT_data_read"} : (i104) -> i1
    %2 = comb.extract %ram from 80 {sv.namehint = "ram_io_deq_bits_MPORT_data_index"} : (i104) -> i23
    %3 = comb.extract %ram from 8 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i104) -> i8
    %4 = comb.extract %ram from 2 {sv.namehint = "ram_io_deq_bits_MPORT_data_extra_tlrr_extra_source"} : (i104) -> i6
    %5 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_extra_tlrr_extra_size"} : (i104) -> i2
    %full = seq.firreg %9 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %6 = comb.and bin %10, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %7 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %8 = comb.icmp bin eq %6, %7 : i1
    %9 = comb.mux bin %8, %full, %6 : i1
    %10 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %ram = seq.firreg %11 clock %clock {sv.namehint = "ram"} : i104
    %11 = comb.mux bin %6, %0, %ram : i104
    hw.output %10, %full, %1, %2, %3, %4, %5 : i1, i1, i1, i23, i8, i6, i2
  }
  hw.module private @TLPLIC(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6) {
    %c-2_i2 = hw.constant -2 : i2
    %c0_i21 = hw.constant 0 : i21
    %true = hw.constant true
    %c-4_i3 = hw.constant -4 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_21(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %out_back_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %out_back_q.io_deq_valid: i1, io_in_d_bits_opcode: %27: i3, io_in_d_bits_size: %out_back_q.io_deq_bits_extra_tlrr_extra_size: i2, io_in_d_bits_source: %out_back_q.io_deq_bits_extra_tlrr_extra_source: i6) -> ()
    %1 = comb.add %22, %true : i1
    %2 = comb.and bin %22, %1 : i1
    %3 = comb.xor bin %2, %true : i1
    %4 = comb.xor bin %reset, %true : i1
    sv.always posedge %0 {
      sv.if %4 {
        sv.assert %3, immediate label "assert__assert"
      }
    }
    %5 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %6 = comb.extract %auto_in_a_bits_address from 3 {sv.namehint = "in_bits_index"} : (i28) -> i23
    %out_back_q.io_enq_ready, %out_back_q.io_deq_valid, %out_back_q.io_deq_bits_read, %out_back_q.io_deq_bits_index, %out_back_q.io_deq_bits_mask, %out_back_q.io_deq_bits_extra_tlrr_extra_source, %out_back_q.io_deq_bits_extra_tlrr_extra_size = hw.instance "out_back_q" @Queue1_RegMapperInput(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_read: %5: i1, io_enq_bits_index: %6: i23, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_extra_tlrr_extra_source: %auto_in_a_bits_source: i6, io_enq_bits_extra_tlrr_extra_size: %auto_in_a_bits_size: i2, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_read: i1, io_deq_bits_index: i23, io_deq_bits_mask: i8, io_deq_bits_extra_tlrr_extra_source: i6, io_deq_bits_extra_tlrr_extra_size: i2) {sv.namehint = "nodeIn_d_bits_d_size"}
    %7 = comb.extract %out_back_q.io_deq_bits_index from 19 : (i23) -> i4
    %8 = comb.extract %out_back_q.io_deq_bits_index from 11 : (i23) -> i7
    %9 = comb.extract %out_back_q.io_deq_bits_index from 0 : (i23) -> i10
    %10 = comb.concat %7, %8, %9 : i4, i7, i10
    %11 = comb.icmp bin eq %10, %c0_i21 {sv.namehint = "_out_T_5"} : i21
    %12 = comb.extract %out_back_q.io_deq_bits_mask from 4 {sv.namehint = "_out_backMask_T_16"} : (i8) -> i1
    %13 = comb.extract %out_back_q.io_deq_bits_mask from 5 {sv.namehint = "_out_backMask_T_18"} : (i8) -> i1
    %14 = comb.extract %out_back_q.io_deq_bits_mask from 6 {sv.namehint = "_out_backMask_T_20"} : (i8) -> i1
    %15 = comb.extract %out_back_q.io_deq_bits_mask from 7 {sv.namehint = "_out_backMask_T_22"} : (i8) -> i1
    %16 = comb.replicate %12 {sv.namehint = "_out_backMask_T_17"} : (i1) -> i8
    %17 = comb.replicate %13 {sv.namehint = "_out_backMask_T_19"} : (i1) -> i8
    %18 = comb.replicate %14 {sv.namehint = "_out_backMask_T_21"} : (i1) -> i8
    %19 = comb.replicate %15 {sv.namehint = "_out_backMask_T_23"} : (i1) -> i8
    %20 = comb.concat %19, %18, %17, %16 {sv.namehint = "_out_womask_T_4"} : i8, i8, i8, i8
    %21 = comb.icmp bin ne %20, %c0_i32 {sv.namehint = "out_romask_4"} : i32
    %22 = comb.and bin %out_back_q.io_deq_valid, %auto_in_d_ready, %out_back_q.io_deq_bits_read, %26, %11, %21 {sv.namehint = "claimer_0"} : i1
    %23 = comb.extract %out_back_q.io_deq_bits_index from 10 {sv.namehint = "_out_oindex_T_10"} : (i23) -> i1
    %24 = comb.extract %out_back_q.io_deq_bits_index from 18 {sv.namehint = "_out_oindex_T_18"} : (i23) -> i1
    %25 = comb.concat %24, %23 : i1, i1
    %26 = comb.icmp eq %25, %c-2_i2 {sv.namehint = "out_backSel_2"} : i2
    %27 = comb.concat %c0_i2, %out_back_q.io_deq_bits_read {sv.namehint = "nodeIn_d_bits_opcode"} : i2, i1
    hw.output %out_back_q.io_enq_ready, %out_back_q.io_deq_valid, %27, %out_back_q.io_deq_bits_extra_tlrr_extra_size, %out_back_q.io_deq_bits_extra_tlrr_extra_source : i1, i1, i3, i2, i6
  }
  hw.module private @ClockSinkDomain(out auto_plic_in_a_ready : i1, in %auto_plic_in_a_valid : i1, in %auto_plic_in_a_bits_opcode : i3, in %auto_plic_in_a_bits_param : i3, in %auto_plic_in_a_bits_size : i2, in %auto_plic_in_a_bits_source : i6, in %auto_plic_in_a_bits_address : i28, in %auto_plic_in_a_bits_mask : i8, in %auto_plic_in_a_bits_data : i64, in %auto_plic_in_a_bits_corrupt : i1, in %auto_plic_in_d_ready : i1, out auto_plic_in_d_valid : i1, out auto_plic_in_d_bits_opcode : i3, out auto_plic_in_d_bits_size : i2, out auto_plic_in_d_bits_source : i6, out auto_plic_in_d_bits_data : i64, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %c0_i64 = hw.constant 0 : i64
    %plic.auto_in_a_ready, %plic.auto_in_d_valid, %plic.auto_in_d_bits_opcode, %plic.auto_in_d_bits_size, %plic.auto_in_d_bits_source = hw.instance "plic" @TLPLIC(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_in_a_valid: %auto_plic_in_a_valid: i1, auto_in_a_bits_opcode: %auto_plic_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_plic_in_a_bits_param: i3, auto_in_a_bits_size: %auto_plic_in_a_bits_size: i2, auto_in_a_bits_source: %auto_plic_in_a_bits_source: i6, auto_in_a_bits_address: %auto_plic_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_plic_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_plic_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_plic_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_plic_in_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6) {sv.namehint = "plic.auto_in_d_valid"}
    hw.output %plic.auto_in_a_ready, %plic.auto_in_d_valid, %plic.auto_in_d_bits_opcode, %plic.auto_in_d_bits_size, %plic.auto_in_d_bits_source, %c0_i64 : i1, i1, i3, i2, i6, i64
  }
  hw.module private @TLMonitor_22(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i26, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c1_i4 = hw.constant 1 : i4
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i26) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.concat %c0_i2, %io_in_a_bits_size : i2, i2
    %13 = comb.shl bin %c1_i4, %12 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %14 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %15 = comb.extract %13 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i26) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.extract %13 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i26) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i26) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_acc_6"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_acc_7"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_acc_8"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_acc_9"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_acc_10"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_acc_11"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_acc_12"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_acc_13"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.xor bin %reset, %true : i1
    %58 = comb.and bin %io_in_a_valid, %56, %57 : i1
    %59 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %60 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %61 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %62 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %63 = comb.and bin %io_in_a_valid, %62, %57 : i1
    %64 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %65 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %66 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %67 = comb.icmp bin ne %66, %c-1_i2 : i2
    %68 = comb.and bin %io_in_a_valid, %65, %57 : i1
    %69 = comb.extract %io_in_a_bits_address from 16 : (i26) -> i10
    %70 = comb.icmp eq %69, %c-512_i10 : i10
    %71 = comb.xor bin %64, %true : i1
    %72 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %74 = comb.and bin %67, %70 : i1
    %75 = comb.and bin %io_in_a_valid, %73, %57 : i1
    %76 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %77 = comb.and bin %io_in_a_valid, %76, %57 : i1
    %78 = comb.xor bin %55, %c-1_i8 : i8
    %79 = comb.and bin %io_in_a_bits_mask, %78 : i8
    %80 = comb.icmp bin eq %79, %c0_i8 : i8
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %57 : i1
    %83 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %84 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %85 = comb.and bin %io_in_a_valid, %84, %57 : i1
    %86 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %87 = comb.xor bin %86, %true : i1
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88, %57 : i1
    %90 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %91 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %92 = comb.and bin %io_in_d_valid, %57 : i1
    %93 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %94 = comb.icmp bin ne %93, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %95, %57 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %98 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %99 = comb.and bin %io_in_d_valid, %98, %57 : i1
    %100 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %101 = comb.and bin %io_in_d_valid, %100, %57 : i1
    %102 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %103 = comb.and bin %io_in_d_valid, %102, %57 : i1
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %105 = comb.and bin %io_in_d_valid, %104, %57 : i1
    %106 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %107 = comb.and bin %io_in_d_valid, %106, %57 : i1
    %108 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %113 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %109 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %110 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %111 = comb.xor %108, %true : i1
    %112 = comb.or %111, %109 : i1
    %113 = comb.and %112, %a_first_counter : i1
    %opcode = seq.firreg %121 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %122 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %123 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %124 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %125 clock %clock {firrtl.random_init_start = 15 : ui64} : i26
    %114 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %115 = comb.and bin %io_in_a_valid, %a_first_counter, %57 : i1
    %116 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %117 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %118 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %119 = comb.icmp bin eq %io_in_a_bits_address, %address : i26
    %120 = comb.and bin %108, %110 : i1
    %121 = comb.mux bin %120, %io_in_a_bits_opcode, %opcode : i3
    %122 = comb.mux bin %120, %io_in_a_bits_param, %param : i3
    %123 = comb.mux bin %120, %io_in_a_bits_size, %size : i2
    %124 = comb.mux bin %120, %io_in_a_bits_source, %source : i6
    %125 = comb.mux bin %120, %io_in_a_bits_address, %address : i26
    %126 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %131 clock %clock reset sync %reset, %false {firrtl.random_init_start = 41 : ui64} : i1
    %127 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %128 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %129 = comb.xor %126, %true : i1
    %130 = comb.or %129, %127 : i1
    %131 = comb.and %130, %d_first_counter : i1
    %opcode_1 = seq.firreg %137 clock %clock {firrtl.random_init_start = 42 : ui64} : i3
    %size_1 = seq.firreg %138 clock %clock {firrtl.random_init_start = 47 : ui64} : i2
    %source_1 = seq.firreg %139 clock %clock {firrtl.random_init_start = 49 : ui64} : i6
    %132 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %133 = comb.and bin %io_in_d_valid, %d_first_counter, %57 : i1
    %134 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %135 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %136 = comb.and bin %126, %128 : i1
    %137 = comb.mux bin %136, %io_in_d_bits_opcode, %opcode_1 : i3
    %138 = comb.mux bin %136, %io_in_d_bits_size, %size_1 : i2
    %139 = comb.mux bin %136, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %225 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 57 : ui64} : i48
    %inflight_opcodes = seq.firreg %228 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 105 : ui64} : i192
    %inflight_sizes = seq.firreg %231 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 297 : ui64} : i192
    %a_first_counter_1 = seq.firreg %144 clock %clock reset sync %reset, %false {firrtl.random_init_start = 489 : ui64} : i1
    %140 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %141 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %142 = comb.xor %108, %true : i1
    %143 = comb.or %142, %140 : i1
    %144 = comb.and %143, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %149 clock %clock reset sync %reset, %false {firrtl.random_init_start = 490 : ui64} : i1
    %145 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %146 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %147 = comb.xor %126, %true : i1
    %148 = comb.or %147, %145 : i1
    %149 = comb.and %148, %d_first_counter_1 : i1
    %150 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %151 = comb.shru bin %inflight_opcodes, %150 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %152 = comb.extract %151 from 1 : (i192) -> i3
    %153 = comb.shru bin %inflight_sizes, %150 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %154 = comb.extract %153 from 1 : (i192) -> i3
    %155 = comb.concat %false, %154 {sv.namehint = "a_size_lookup"} : i1, i3
    %156 = comb.and bin %108, %141 : i1
    %157 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %158 = comb.shl bin %c1_i64, %157 {sv.namehint = "_a_set_T"} : i64
    %159 = comb.extract %158 from 0 : (i64) -> i48
    %160 = comb.mux bin %156, %159, %c0_i48 {sv.namehint = "a_set"} : i48
    %161 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %162 = comb.mux bin %156, %161, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %163 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %164 = comb.mux bin %156, %163, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %165 = comb.concat %c0_i511, %162 : i511, i4
    %166 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %167 = comb.shl bin %165, %166 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %168 = comb.extract %167 from 0 : (i515) -> i192
    %169 = comb.mux bin %156, %168, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %170 = comb.concat %c0_i511, %164 : i511, i3
    %171 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %172 = comb.shl bin %170, %171 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %173 = comb.extract %172 from 0 : (i514) -> i192
    %174 = comb.mux bin %156, %173, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %175 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %176 = comb.shru bin %inflight, %175 : i48
    %177 = comb.extract %176 from 0 : (i48) -> i1
    %178 = comb.xor bin %177, %true : i1
    %179 = comb.and bin %156, %57 : i1
    %180 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %181 = comb.and bin %io_in_d_valid, %146 : i1
    %182 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %183 = comb.and bin %126, %146, %182 : i1
    %184 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %185 = comb.shl bin %c1_i64, %184 {sv.namehint = "_d_clr_T"} : i64
    %186 = comb.extract %185 from 0 : (i64) -> i48
    %187 = comb.mux bin %183, %186, %c0_i48 {sv.namehint = "d_clr"} : i48
    %188 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %189 = comb.shl bin %c15_i527, %188 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %190 = comb.extract %189 from 0 : (i527) -> i192
    %191 = comb.mux bin %183, %190, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %192 = comb.shl bin %c15_i527, %188 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %193 = comb.extract %192 from 0 : (i527) -> i192
    %194 = comb.mux bin %183, %193, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %195 = comb.and bin %181, %182 : i1
    %196 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %197 = comb.and bin %io_in_a_valid, %141, %196 {sv.namehint = "same_cycle_resp"} : i1
    %198 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %199 = comb.shru bin %inflight, %198 : i48
    %200 = comb.extract %199 from 0 : (i48) -> i1
    %201 = comb.or bin %200, %197 : i1
    %202 = comb.and bin %195, %57 : i1
    %203 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %204 = comb.icmp bin eq %io_in_d_bits_opcode, %203 : i3
    %205 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %206 = comb.icmp bin eq %io_in_d_bits_opcode, %205 : i3
    %207 = comb.or bin %204, %206 : i1
    %208 = comb.and bin %195, %197, %57 : i1
    %209 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %210 = comb.xor bin %197, %true : i1
    %211 = hw.array_get %1[%152] : !hw.array<8xi3>, i3
    %212 = comb.icmp bin eq %io_in_d_bits_opcode, %211 : i3
    %213 = hw.array_get %0[%152] : !hw.array<8xi3>, i3
    %214 = comb.icmp bin eq %io_in_d_bits_opcode, %213 : i3
    %215 = comb.or bin %212, %214 : i1
    %216 = comb.and bin %195, %210, %57 : i1
    %217 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %218 = comb.icmp bin eq %217, %155 : i4
    %219 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %220 = comb.xor bin %io_in_d_ready, %true : i1
    %221 = comb.or bin %220, %io_in_a_ready : i1
    %222 = comb.and bin %181, %141, %io_in_a_valid, %219, %182, %57 : i1
    %223 = comb.or bin %inflight, %160 {sv.namehint = "_inflight_T"} : i48
    %224 = comb.xor bin %187, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %225 = comb.and bin %223, %224 {sv.namehint = "_inflight_T_2"} : i48
    %226 = comb.or bin %inflight_opcodes, %169 {sv.namehint = "_inflight_opcodes_T"} : i192
    %227 = comb.xor bin %191, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %228 = comb.and bin %226, %227 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %229 = comb.or bin %inflight_sizes, %174 {sv.namehint = "_inflight_sizes_T"} : i192
    %230 = comb.xor bin %194, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %231 = comb.and bin %229, %230 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %238 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 491 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %232 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %233 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %234 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %235 = comb.or bin %232, %233, %234 : i1
    %236 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %237 = comb.or bin %108, %126 : i1
    %238 = comb.mux bin %237, %c0_i32, %236 : i32
    %inflight_1 = seq.firreg %259 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 523 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %261 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 763 : ui64} : i192
    %d_first_counter_2 = seq.firreg %243 clock %clock reset sync %reset, %false {firrtl.random_init_start = 956 : ui64} : i1
    %239 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %240 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %241 = comb.xor %126, %true : i1
    %242 = comb.or %241, %239 : i1
    %243 = comb.and %242, %d_first_counter_2 : i1
    %244 = comb.shru bin %inflight_sizes_1, %150 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %245 = comb.extract %244 from 1 : (i192) -> i3
    %246 = comb.concat %false, %245 {sv.namehint = "c_size_lookup"} : i1, i3
    %247 = comb.and bin %126, %240, %180 : i1
    %248 = comb.shl bin %c1_i64, %184 {sv.namehint = "_d_clr_T_1"} : i64
    %249 = comb.extract %248 from 0 : (i64) -> i48
    %250 = comb.mux bin %247, %249, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %251 = comb.shl bin %c15_i527, %188 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %252 = comb.extract %251 from 0 : (i527) -> i192
    %253 = comb.mux bin %247, %252, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %254 = comb.shru bin %inflight_1, %198 : i48
    %255 = comb.extract %254 from 0 : (i48) -> i1
    %256 = comb.and bin %io_in_d_valid, %240, %180, %57 : i1
    %257 = comb.icmp bin eq %217, %246 : i4
    %258 = comb.xor bin %250, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %259 = comb.and bin %inflight_1, %258 {sv.namehint = "_inflight_T_5"} : i48
    %260 = comb.xor bin %253, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %261 = comb.and bin %inflight_sizes_1, %260 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %267 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 957 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %262 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %263 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %264 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %265 = comb.or bin %262, %263, %264 : i1
    sv.always posedge %2 {
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %58 {
        sv.assert %4, immediate label "assert__assert_4"
      }
      sv.if %58 {
        sv.assert %14, immediate label "assert__assert_5"
      }
      sv.if %58 {
        sv.assert %11, immediate label "assert__assert_6"
      }
      sv.if %58 {
        sv.assert %59, immediate label "assert__assert_7"
      }
      sv.if %58 {
        sv.assert %60, immediate label "assert__assert_8"
      }
      sv.if %58 {
        sv.assert %61, immediate label "assert__assert_9"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %63 {
        sv.assert %4, immediate label "assert__assert_12"
      }
      sv.if %63 {
        sv.assert %14, immediate label "assert__assert_13"
      }
      sv.if %63 {
        sv.assert %11, immediate label "assert__assert_14"
      }
      sv.if %63 {
        sv.assert %59, immediate label "assert__assert_15"
      }
      sv.if %63 {
        sv.assert %64, immediate label "assert__assert_16"
      }
      sv.if %63 {
        sv.assert %60, immediate label "assert__assert_17"
      }
      sv.if %63 {
        sv.assert %61, immediate label "assert__assert_18"
      }
      sv.if %68 {
        sv.assert %67, immediate label "assert__assert_19"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_20"
      }
      sv.if %68 {
        sv.assert %4, immediate label "assert__assert_21"
      }
      sv.if %68 {
        sv.assert %11, immediate label "assert__assert_22"
      }
      sv.if %68 {
        sv.assert %71, immediate label "assert__assert_23"
      }
      sv.if %68 {
        sv.assert %72, immediate label "assert__assert_24"
      }
      sv.if %68 {
        sv.assert %61, immediate label "assert__assert_25"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_26"
      }
      sv.if %75 {
        sv.assert %4, immediate label "assert__assert_27"
      }
      sv.if %75 {
        sv.assert %11, immediate label "assert__assert_28"
      }
      sv.if %75 {
        sv.assert %71, immediate label "assert__assert_29"
      }
      sv.if %75 {
        sv.assert %72, immediate label "assert__assert_30"
      }
      sv.if %77 {
        sv.assert %74, immediate label "assert__assert_31"
      }
      sv.if %77 {
        sv.assert %4, immediate label "assert__assert_32"
      }
      sv.if %77 {
        sv.assert %11, immediate label "assert__assert_33"
      }
      sv.if %77 {
        sv.assert %71, immediate label "assert__assert_34"
      }
      sv.if %77 {
        sv.assert %80, immediate label "assert__assert_35"
      }
      sv.if %82 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %82 {
        sv.assert %4, immediate label "assert__assert_37"
      }
      sv.if %82 {
        sv.assert %11, immediate label "assert__assert_38"
      }
      sv.if %82 {
        sv.assert %83, immediate label "assert__assert_39"
      }
      sv.if %82 {
        sv.assert %72, immediate label "assert__assert_40"
      }
      sv.if %85 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %85 {
        sv.assert %4, immediate label "assert__assert_42"
      }
      sv.if %85 {
        sv.assert %11, immediate label "assert__assert_43"
      }
      sv.if %85 {
        sv.assert %87, immediate label "assert__assert_44"
      }
      sv.if %85 {
        sv.assert %72, immediate label "assert__assert_45"
      }
      sv.if %89 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %89 {
        sv.assert %4, immediate label "assert__assert_47"
      }
      sv.if %89 {
        sv.assert %11, immediate label "assert__assert_48"
      }
      sv.if %89 {
        sv.assert %90, immediate label "assert__assert_49"
      }
      sv.if %89 {
        sv.assert %72, immediate label "assert__assert_50"
      }
      sv.if %89 {
        sv.assert %61, immediate label "assert__assert_51"
      }
      sv.if %92 {
        sv.assert %91, immediate label "assert__assert_52"
      }
      sv.if %96 {
        sv.assert %94, immediate label "assert__assert_53"
      }
      sv.if %96 {
        sv.assert %97, immediate label "assert__assert_54"
      }
      sv.if %99 {
        sv.assert %94, immediate label "assert__assert_58"
      }
      sv.if %99 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %99 {
        sv.assert %97, immediate label "assert__assert_60"
      }
      sv.if %101 {
        sv.assert %94, immediate label "assert__assert_65"
      }
      sv.if %101 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %101 {
        sv.assert %97, immediate label "assert__assert_67"
      }
      sv.if %103 {
        sv.assert %94, immediate label "assert__assert_72"
      }
      sv.if %105 {
        sv.assert %94, immediate label "assert__assert_76"
      }
      sv.if %107 {
        sv.assert %94, immediate label "assert__assert_80"
      }
      sv.if %115 {
        sv.assert %114, immediate label "assert__assert_87"
      }
      sv.if %115 {
        sv.assert %116, immediate label "assert__assert_88"
      }
      sv.if %115 {
        sv.assert %117, immediate label "assert__assert_89"
      }
      sv.if %115 {
        sv.assert %118, immediate label "assert__assert_90"
      }
      sv.if %115 {
        sv.assert %119, immediate label "assert__assert_91"
      }
      sv.if %133 {
        sv.assert %132, immediate label "assert__assert_92"
      }
      sv.if %133 {
        sv.assert %134, immediate label "assert__assert_94"
      }
      sv.if %133 {
        sv.assert %135, immediate label "assert__assert_95"
      }
      sv.if %179 {
        sv.assert %178, immediate label "assert__assert_98"
      }
      sv.if %202 {
        sv.assert %201, immediate label "assert__assert_99"
      }
      sv.if %208 {
        sv.assert %207, immediate label "assert__assert_100"
      }
      sv.if %208 {
        sv.assert %209, immediate label "assert__assert_101"
      }
      sv.if %216 {
        sv.assert %215, immediate label "assert__assert_102"
      }
      sv.if %216 {
        sv.assert %218, immediate label "assert__assert_103"
      }
      sv.if %222 {
        sv.assert %221, immediate label "assert__assert_104"
      }
      sv.if %57 {
        sv.assert %235, immediate label "assert__assert_105"
      }
      sv.if %256 {
        sv.assert %255, immediate label "assert__assert_107"
      }
      sv.if %256 {
        sv.assert %257, immediate label "assert__assert_109"
      }
      sv.if %57 {
        sv.assert %265, immediate label "assert__assert_111"
      }
    }
    %266 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %267 = comb.mux bin %126, %c0_i32, %266 : i32
    hw.output
  }
  hw.module private @CLINT(in %clock : !seq.clock, in %reset : i1, out auto_int_out_0 : i1, out auto_int_out_1 : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i26, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6, out auto_in_d_bits_data : i64) {
    %c0_i63 = hw.constant 0 : i63
    %c-1_i11 = hw.constant -1 : i11
    %c0_i11 = hw.constant 0 : i11
    %c1_i4 = hw.constant 1 : i4
    %c0_i2 = hw.constant 0 : i2
    %c-4_i3 = hw.constant -4 : i3
    %true = hw.constant true
    %c0_i64 = hw.constant 0 : i64
    %false = hw.constant false
    hw.instance "monitor" @TLMonitor_22(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_in_d_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i26, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_in_a_valid: i1, io_in_d_bits_opcode: %94: i3, io_in_d_bits_size: %auto_in_a_bits_size: i2, io_in_d_bits_source: %auto_in_a_bits_source: i6) -> ()
    %time = seq.firreg %22 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 0 : ui64, sv.namehint = "time"} : i64
    %pad = seq.firreg %11 clock %clock {firrtl.random_init_start = 64 : ui64, sv.namehint = "pad"} : i64
    %ipi_0 = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 128 : ui64, sv.namehint = "ipi_0"} : i1
    %0 = comb.icmp bin uge %time, %pad {sv.namehint = "intnodeOut_1"} : i64
    %1 = comb.extract %pad from 0 {sv.namehint = "oldBytes_0"} : (i64) -> i8
    %2 = comb.extract %pad from 8 {sv.namehint = "oldBytes_1"} : (i64) -> i8
    %3 = comb.extract %pad from 16 {sv.namehint = "oldBytes_2"} : (i64) -> i8
    %4 = comb.extract %pad from 24 {sv.namehint = "oldBytes_3"} : (i64) -> i8
    %5 = comb.extract %pad from 32 {sv.namehint = "oldBytes_4"} : (i64) -> i8
    %6 = comb.extract %pad from 40 {sv.namehint = "oldBytes_5"} : (i64) -> i8
    %7 = comb.extract %pad from 48 {sv.namehint = "oldBytes_6"} : (i64) -> i8
    %8 = comb.extract %pad from 56 {sv.namehint = "oldBytes_7"} : (i64) -> i8
    %9 = comb.or bin %62, %64, %66, %68, %70, %72, %74, %76 : i1
    %10 = comb.concat %77, %75, %73, %71, %69, %67, %65, %63 {sv.namehint = "_timecmp_0_T"} : i8, i8, i8, i8, i8, i8, i8, i8
    %11 = comb.mux bin %9, %10, %pad : i64
    %12 = comb.extract %time from 0 {sv.namehint = "oldBytes_1_0"} : (i64) -> i8
    %13 = comb.extract %time from 8 {sv.namehint = "oldBytes_1_1"} : (i64) -> i8
    %14 = comb.extract %time from 16 {sv.namehint = "oldBytes_1_2"} : (i64) -> i8
    %15 = comb.extract %time from 24 {sv.namehint = "oldBytes_1_3"} : (i64) -> i8
    %16 = comb.extract %time from 32 {sv.namehint = "oldBytes_1_4"} : (i64) -> i8
    %17 = comb.extract %time from 40 {sv.namehint = "oldBytes_1_5"} : (i64) -> i8
    %18 = comb.extract %time from 48 {sv.namehint = "oldBytes_1_6"} : (i64) -> i8
    %19 = comb.extract %time from 56 {sv.namehint = "oldBytes_1_7"} : (i64) -> i8
    %20 = comb.or bin %38, %41, %44, %47, %50, %53, %56, %59 : i1
    %21 = comb.concat %61, %58, %55, %52, %49, %46, %43, %40 {sv.namehint = "_time_T_2"} : i8, i8, i8, i8, i8, i8, i8, i8
    %22 = comb.mux bin %20, %21, %time : i64
    %23 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %24 = comb.extract %auto_in_a_bits_address from 3 : (i26) -> i11
    %25 = comb.icmp bin eq %24, %c0_i11 {sv.namehint = "_out_T_5"} : i11
    %26 = comb.icmp bin eq %24, %c-1_i11 {sv.namehint = "_out_T_3"} : i11
    %27 = comb.extract %auto_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_8"} : (i8) -> i1
    %28 = comb.extract %auto_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_10"} : (i8) -> i1
    %29 = comb.extract %auto_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_12"} : (i8) -> i1
    %30 = comb.extract %auto_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_14"} : (i8) -> i1
    %31 = comb.extract %auto_in_a_bits_mask from 4 {sv.namehint = "_out_backMask_T_16"} : (i8) -> i1
    %32 = comb.extract %auto_in_a_bits_mask from 5 {sv.namehint = "_out_backMask_T_18"} : (i8) -> i1
    %33 = comb.extract %auto_in_a_bits_mask from 6 {sv.namehint = "_out_backMask_T_20"} : (i8) -> i1
    %34 = comb.extract %auto_in_a_bits_mask from 7 {sv.namehint = "_out_backMask_T_22"} : (i8) -> i1
    %35 = comb.and bin %85, %81, %25, %27 {sv.namehint = "out_f_woready"} : i1
    %36 = comb.extract %auto_in_a_bits_data from 0 {sv.namehint = "_out_T_6"} : (i64) -> i1
    %37 = comb.mux bin %35, %36, %ipi_0 : i1
    %38 = comb.and bin %87, %27 {sv.namehint = "valids_1_0"} : i1
    %39 = comb.extract %auto_in_a_bits_data from 0 {sv.namehint = "_out_T_114"} : (i64) -> i8
    %40 = comb.mux bin %38, %39, %12 {sv.namehint = "newBytes_1_0"} : i8
    %41 = comb.and bin %87, %28 {sv.namehint = "valids_1_1"} : i1
    %42 = comb.extract %auto_in_a_bits_data from 8 {sv.namehint = "_out_T_125"} : (i64) -> i8
    %43 = comb.mux bin %41, %42, %13 {sv.namehint = "newBytes_1_1"} : i8
    %44 = comb.and bin %87, %29 {sv.namehint = "valids_1_2"} : i1
    %45 = comb.extract %auto_in_a_bits_data from 16 {sv.namehint = "_out_T_136"} : (i64) -> i8
    %46 = comb.mux bin %44, %45, %14 {sv.namehint = "newBytes_1_2"} : i8
    %47 = comb.and bin %87, %30 {sv.namehint = "valids_1_3"} : i1
    %48 = comb.extract %auto_in_a_bits_data from 24 {sv.namehint = "_out_T_147"} : (i64) -> i8
    %49 = comb.mux bin %47, %48, %15 {sv.namehint = "newBytes_1_3"} : i8
    %50 = comb.and bin %87, %31 {sv.namehint = "valids_1_4"} : i1
    %51 = comb.extract %auto_in_a_bits_data from 32 {sv.namehint = "_out_T_158"} : (i64) -> i8
    %52 = comb.mux bin %50, %51, %16 {sv.namehint = "newBytes_1_4"} : i8
    %53 = comb.and bin %87, %32 {sv.namehint = "valids_1_5"} : i1
    %54 = comb.extract %auto_in_a_bits_data from 40 {sv.namehint = "_out_T_169"} : (i64) -> i8
    %55 = comb.mux bin %53, %54, %17 {sv.namehint = "newBytes_1_5"} : i8
    %56 = comb.and bin %87, %33 {sv.namehint = "valids_1_6"} : i1
    %57 = comb.extract %auto_in_a_bits_data from 48 {sv.namehint = "_out_T_180"} : (i64) -> i8
    %58 = comb.mux bin %56, %57, %18 {sv.namehint = "newBytes_1_6"} : i8
    %59 = comb.and bin %87, %34 {sv.namehint = "valids_1_7"} : i1
    %60 = comb.extract %auto_in_a_bits_data from 56 {sv.namehint = "_out_T_191"} : (i64) -> i8
    %61 = comb.mux bin %59, %60, %19 {sv.namehint = "newBytes_1_7"} : i8
    %62 = comb.and bin %86, %27 {sv.namehint = "valids_0"} : i1
    %63 = comb.mux bin %62, %39, %1 {sv.namehint = "newBytes_0"} : i8
    %64 = comb.and bin %86, %28 {sv.namehint = "valids_1"} : i1
    %65 = comb.mux bin %64, %42, %2 {sv.namehint = "newBytes_1"} : i8
    %66 = comb.and bin %86, %29 {sv.namehint = "valids_2"} : i1
    %67 = comb.mux bin %66, %45, %3 {sv.namehint = "newBytes_2"} : i8
    %68 = comb.and bin %86, %30 {sv.namehint = "valids_3"} : i1
    %69 = comb.mux bin %68, %48, %4 {sv.namehint = "newBytes_3"} : i8
    %70 = comb.and bin %86, %31 {sv.namehint = "valids_4"} : i1
    %71 = comb.mux bin %70, %51, %5 {sv.namehint = "newBytes_4"} : i8
    %72 = comb.and bin %86, %32 {sv.namehint = "valids_5"} : i1
    %73 = comb.mux bin %72, %54, %6 {sv.namehint = "newBytes_5"} : i8
    %74 = comb.and bin %86, %33 {sv.namehint = "valids_6"} : i1
    %75 = comb.mux bin %74, %57, %7 {sv.namehint = "newBytes_6"} : i8
    %76 = comb.and bin %86, %34 {sv.namehint = "valids_7"} : i1
    %77 = comb.mux bin %76, %60, %8 {sv.namehint = "newBytes_7"} : i8
    %78 = comb.extract %auto_in_a_bits_address from 14 {sv.namehint = "out_oindex"} : (i26) -> i2
    %79 = comb.concat %c0_i2, %78 : i2, i2
    %80 = comb.shl bin %c1_i4, %79 {sv.namehint = "_out_backSel_T"} : i4
    %81 = comb.extract %80 from 0 {sv.namehint = "out_backSel_0"} : (i4) -> i1
    %82 = comb.extract %80 from 1 {sv.namehint = "out_backSel_1"} : (i4) -> i1
    %83 = comb.extract %80 from 2 {sv.namehint = "out_backSel_2"} : (i4) -> i1
    %84 = comb.xor bin %23, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %85 = comb.and bin %auto_in_a_valid, %auto_in_d_ready, %84 {sv.namehint = "_out_wofireMux_T_2"} : i1
    %86 = comb.and bin %85, %82, %25 {sv.namehint = "out_woready_17"} : i1
    %87 = comb.and bin %85, %83, %26 {sv.namehint = "out_woready_9"} : i1
    %88 = hw.array_create %true, %26, %25, %25 : i1
    %89 = hw.array_get %88[%78] : !hw.array<4xi1>, i2
    %90 = comb.concat %c0_i63, %ipi_0 {sv.namehint = "_out_out_bits_data_WIRE_1_0"} : i63, i1
    %91 = hw.array_create %c0_i64, %time, %pad, %90 : i64
    %92 = hw.array_get %91[%78] : !hw.array<4xi64>, i2
    %93 = comb.mux bin %89, %92, %c0_i64 {sv.namehint = "out_bits_data"} : i64
    %94 = comb.concat %c0_i2, %23 {sv.namehint = "nodeIn_d_bits_opcode"} : i2, i1
    hw.output %ipi_0, %0, %auto_in_d_ready, %auto_in_a_valid, %94, %auto_in_a_bits_size, %auto_in_a_bits_source, %93 : i1, i1, i1, i1, i3, i2, i6, i64
  }
  hw.module private @TLMonitor_23(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i2 = hw.constant -1 : i2
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i3 = hw.constant -1 : i3
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.xor bin %reset, %true : i1
    %7 = comb.and bin %io_in_a_valid, %5, %6 : i1
    %8 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %9 = comb.and bin %io_in_a_valid, %8, %6 : i1
    %10 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %11 = comb.and bin %io_in_a_valid, %10, %6 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12, %6 : i1
    %14 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %15 = comb.and bin %io_in_a_valid, %14, %6 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16, %6 : i1
    %18 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %19 = comb.and bin %io_in_a_valid, %18, %6 : i1
    %20 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %21 = comb.and bin %io_in_a_valid, %20, %6 : i1
    %22 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %23 = comb.and bin %io_in_d_valid, %6 : i1
    %24 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %25 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %26 = comb.and bin %io_in_d_valid, %24, %6 : i1
    %27 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %28 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %29 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %30 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %31 = comb.and bin %io_in_d_valid, %30, %6 : i1
    %32 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %33 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %34 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %35 = comb.and bin %io_in_d_valid, %34, %6 : i1
    %36 = comb.or bin %29, %io_in_d_bits_corrupt : i1
    %37 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %38 = comb.and bin %io_in_d_valid, %37, %6 : i1
    %39 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %40 = comb.and bin %io_in_d_valid, %39, %6 : i1
    %41 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %42 = comb.and bin %io_in_d_valid, %41, %6 : i1
    %43 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %48 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %44 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %45 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %46 = comb.xor %43, %true : i1
    %47 = comb.or %46, %44 : i1
    %48 = comb.and %47, %a_first_counter : i1
    %opcode = seq.firreg %53 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %54 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %49 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %50 = comb.and bin %io_in_a_valid, %a_first_counter, %6 : i1
    %51 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %52 = comb.and bin %43, %45 : i1
    %53 = comb.mux bin %52, %io_in_a_bits_opcode, %opcode : i3
    %54 = comb.mux bin %52, %io_in_a_bits_address, %address : i9
    %55 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %60 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %56 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %57 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %58 = comb.xor %55, %true : i1
    %59 = comb.or %58, %56 : i1
    %60 = comb.and %59, %d_first_counter : i1
    %opcode_1 = seq.firreg %68 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %69 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %70 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %sink = seq.firreg %71 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %72 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %61 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %62 = comb.and bin %io_in_d_valid, %d_first_counter, %6 : i1
    %63 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %64 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %65 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %66 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %67 = comb.and bin %55, %57 : i1
    %68 = comb.mux bin %67, %io_in_d_bits_opcode, %opcode_1 : i3
    %69 = comb.mux bin %67, %io_in_d_bits_param, %param_1 : i2
    %70 = comb.mux bin %67, %io_in_d_bits_size, %size_1 : i2
    %71 = comb.mux bin %67, %io_in_d_bits_sink, %sink : i1
    %72 = comb.mux bin %67, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %124 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %127 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %130 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %77 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %73 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %74 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %75 = comb.xor %43, %true : i1
    %76 = comb.or %75, %73 : i1
    %77 = comb.and %76, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %82 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %78 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %79 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %80 = comb.xor %55, %true : i1
    %81 = comb.or %80, %78 : i1
    %82 = comb.and %81, %d_first_counter_1 : i1
    %83 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %84 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %85 = comb.concat %false, %84 {sv.namehint = "a_size_lookup"} : i1, i3
    %86 = comb.and bin %io_in_a_valid, %74 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %87 = comb.and bin %43, %74 {sv.namehint = "a_set"} : i1
    %88 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %89 = comb.mux bin %87, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %90 = comb.mux bin %87, %88, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %91 = comb.concat %false, %89 : i1, i3
    %92 = comb.mux bin %87, %91, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %93 = comb.xor bin %inflight, %true : i1
    %94 = comb.and bin %87, %6 : i1
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %96 = comb.and bin %io_in_d_valid, %79 : i1
    %97 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %98 = comb.and bin %55, %79, %97 {sv.namehint = "d_clr"} : i1
    %99 = comb.replicate %98 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %100 = comb.and bin %96, %97 : i1
    %101 = comb.or bin %inflight, %86 : i1
    %102 = comb.and bin %100, %6 : i1
    %103 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %104 = comb.icmp bin eq %io_in_d_bits_opcode, %103 : i3
    %105 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %106 = comb.icmp bin eq %io_in_d_bits_opcode, %105 : i3
    %107 = comb.or bin %104, %106 : i1
    %108 = comb.and bin %100, %86, %6 : i1
    %109 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %110 = comb.xor bin %86, %true : i1
    %111 = hw.array_get %1[%83] : !hw.array<8xi3>, i3
    %112 = comb.icmp bin eq %io_in_d_bits_opcode, %111 : i3
    %113 = hw.array_get %0[%83] : !hw.array<8xi3>, i3
    %114 = comb.icmp bin eq %io_in_d_bits_opcode, %113 : i3
    %115 = comb.or bin %112, %114 : i1
    %116 = comb.and bin %100, %110, %6 : i1
    %117 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %118 = comb.icmp bin eq %117, %85 : i4
    %119 = comb.xor bin %io_in_d_ready, %true : i1
    %120 = comb.or bin %119, %io_in_a_ready : i1
    %121 = comb.and bin %96, %74, %io_in_a_valid, %97, %6 : i1
    %122 = comb.or bin %inflight, %87 {sv.namehint = "_inflight_T"} : i1
    %123 = comb.xor bin %98, %true {sv.namehint = "_inflight_T_1"} : i1
    %124 = comb.and bin %122, %123 {sv.namehint = "_inflight_T_2"} : i1
    %125 = comb.or bin %inflight_opcodes, %90 {sv.namehint = "_inflight_opcodes_T"} : i4
    %126 = comb.xor bin %99, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %127 = comb.and bin %125, %126 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %128 = comb.or bin %inflight_sizes, %92 {sv.namehint = "_inflight_sizes_T"} : i4
    %129 = comb.xor bin %99, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %130 = comb.and bin %128, %129 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %136 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %131 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %132 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %133 = comb.or bin %93, %131, %132 : i1
    %134 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %135 = comb.or bin %43, %55 : i1
    %136 = comb.mux bin %135, %c0_i32, %134 : i32
    %inflight_1 = seq.firreg %149 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %151 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %141 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %137 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %138 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %139 = comb.xor %55, %true : i1
    %140 = comb.or %139, %137 : i1
    %141 = comb.and %140, %d_first_counter_2 : i1
    %142 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %143 = comb.concat %false, %142 {sv.namehint = "c_size_lookup"} : i1, i3
    %144 = comb.and bin %55, %138, %95 {sv.namehint = "d_clr_1"} : i1
    %145 = comb.replicate %144 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %146 = comb.and bin %io_in_d_valid, %138, %95, %6 : i1
    %147 = comb.icmp bin eq %117, %143 : i4
    %148 = comb.xor bin %144, %true {sv.namehint = "_inflight_T_4"} : i1
    %149 = comb.and bin %inflight_1, %148 {sv.namehint = "_inflight_T_5"} : i1
    %150 = comb.xor bin %145, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %151 = comb.and bin %inflight_sizes_1, %150 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %157 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %152 = comb.xor bin %inflight_1, %true : i1
    %153 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %154 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %155 = comb.or bin %152, %153, %154 : i1
    sv.always posedge %2 {
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %7 {
        sv.assert %4, immediate label "assert__assert_6"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %9 {
        sv.assert %4, immediate label "assert__assert_14"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_16"
      }
      sv.if %11 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %13 {
        sv.assert %4, immediate label "assert__assert_28"
      }
      sv.if %15 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %15 {
        sv.assert %4, immediate label "assert__assert_33"
      }
      sv.if %17 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %17 {
        sv.assert %4, immediate label "assert__assert_38"
      }
      sv.if %19 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %19 {
        sv.assert %4, immediate label "assert__assert_43"
      }
      sv.if %21 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %21 {
        sv.assert %4, immediate label "assert__assert_48"
      }
      sv.if %23 {
        sv.assert %22, immediate label "assert__assert_52"
      }
      sv.if %26 {
        sv.assert %25, immediate label "assert__assert_54"
      }
      sv.if %26 {
        sv.assert %27, immediate label "assert__assert_55"
      }
      sv.if %26 {
        sv.assert %28, immediate label "assert__assert_56"
      }
      sv.if %26 {
        sv.assert %29, immediate label "assert__assert_57"
      }
      sv.if %31 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %31 {
        sv.assert %25, immediate label "assert__assert_60"
      }
      sv.if %31 {
        sv.assert %32, immediate label "assert__assert_61"
      }
      sv.if %31 {
        sv.assert %33, immediate label "assert__assert_62"
      }
      sv.if %31 {
        sv.assert %28, immediate label "assert__assert_63"
      }
      sv.if %35 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %35 {
        sv.assert %25, immediate label "assert__assert_67"
      }
      sv.if %35 {
        sv.assert %32, immediate label "assert__assert_68"
      }
      sv.if %35 {
        sv.assert %33, immediate label "assert__assert_69"
      }
      sv.if %35 {
        sv.assert %36, immediate label "assert__assert_70"
      }
      sv.if %38 {
        sv.assert %27, immediate label "assert__assert_73"
      }
      sv.if %38 {
        sv.assert %28, immediate label "assert__assert_74"
      }
      sv.if %40 {
        sv.assert %27, immediate label "assert__assert_77"
      }
      sv.if %40 {
        sv.assert %36, immediate label "assert__assert_78"
      }
      sv.if %42 {
        sv.assert %27, immediate label "assert__assert_81"
      }
      sv.if %42 {
        sv.assert %28, immediate label "assert__assert_82"
      }
      sv.if %50 {
        sv.assert %49, immediate label "assert__assert_87"
      }
      sv.if %50 {
        sv.assert %51, immediate label "assert__assert_91"
      }
      sv.if %62 {
        sv.assert %61, immediate label "assert__assert_92"
      }
      sv.if %62 {
        sv.assert %63, immediate label "assert__assert_93"
      }
      sv.if %62 {
        sv.assert %64, immediate label "assert__assert_94"
      }
      sv.if %62 {
        sv.assert %65, immediate label "assert__assert_96"
      }
      sv.if %62 {
        sv.assert %66, immediate label "assert__assert_97"
      }
      sv.if %94 {
        sv.assert %93, immediate label "assert__assert_98"
      }
      sv.if %102 {
        sv.assert %101, immediate label "assert__assert_99"
      }
      sv.if %108 {
        sv.assert %107, immediate label "assert__assert_100"
      }
      sv.if %108 {
        sv.assert %109, immediate label "assert__assert_101"
      }
      sv.if %116 {
        sv.assert %115, immediate label "assert__assert_102"
      }
      sv.if %116 {
        sv.assert %118, immediate label "assert__assert_103"
      }
      sv.if %121 {
        sv.assert %120, immediate label "assert__assert_104"
      }
      sv.if %6 {
        sv.assert %133, immediate label "assert__assert_105"
      }
      sv.if %146 {
        sv.assert %inflight_1, immediate label "assert__assert_107"
      }
      sv.if %146 {
        sv.assert %147, immediate label "assert__assert_109"
      }
      sv.if %6 {
        sv.assert %155, immediate label "assert__assert_111"
      }
    }
    %156 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %157 = comb.mux bin %55, %c0_i32, %156 : i32
    hw.output
  }
  hw.module private @TLXbar_10(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_address : i7, out auto_out_1_a_bits_data : i32, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_data : i32, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_address : i9, out auto_out_0_a_bits_data : i32, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i32, in %auto_out_0_d_bits_corrupt : i1) {
    %c-15_i5 = hw.constant -15 : i5
    %c-6_i4 = hw.constant -6 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c0_i6 = hw.constant 0 : i6
    %c0_i3 = hw.constant 0 : i3
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_23(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %40: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %88: i1, io_in_d_bits_opcode: %101: i3, io_in_d_bits_param: %98: i2, io_in_d_bits_size: %97: i2, io_in_d_bits_sink: %94: i1, io_in_d_bits_denied: %93: i1, io_in_d_bits_corrupt: %89: i1) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "x1_nodeOut_a_bits_address"} : (i9) -> i7
    %2 = comb.extract %auto_in_a_bits_address from 6 : (i9) -> i3
    %3 = comb.icmp bin eq %2, %c0_i3 {sv.namehint = "_requestAIO_T_4"} : i3
    %4 = comb.extract %auto_in_a_bits_address from 7 : (i9) -> i2
    %5 = comb.extract %auto_in_a_bits_address from 2 : (i9) -> i5
    %6 = comb.xor bin %5, %c-15_i5 : i5
    %7 = comb.extract %6 from 2 : (i5) -> i3
    %8 = comb.extract %6 from 0 : (i5) -> i1
    %9 = comb.concat %4, %7, %8 : i2, i3, i1
    %10 = comb.icmp bin eq %9, %c0_i6 {sv.namehint = "_requestAIO_T_9"} : i6
    %11 = comb.extract %auto_in_a_bits_address from 3 : (i9) -> i4
    %12 = comb.xor bin %11, %c-5_i4 : i4
    %13 = comb.concat %4, %12 : i2, i4
    %14 = comb.icmp bin eq %13, %c0_i6 {sv.namehint = "_requestAIO_T_14"} : i6
    %15 = comb.extract %auto_in_a_bits_address from 5 : (i9) -> i2
    %16 = comb.xor bin %15, %c-1_i2 : i2
    %17 = comb.concat %4, %16 : i2, i2
    %18 = comb.icmp bin eq %17, %c0_i4 {sv.namehint = "_requestAIO_T_19"} : i4
    %19 = comb.extract %auto_in_a_bits_address from 8 : (i9) -> i1
    %20 = comb.extract %auto_in_a_bits_address from 7 : (i9) -> i1
    %21 = comb.xor bin %20, %true : i1
    %22 = comb.concat %19, %21 : i1, i1
    %23 = comb.icmp bin eq %22, %c0_i2 {sv.namehint = "_requestAIO_T_24"} : i2
    %24 = comb.extract %auto_in_a_bits_address from 8 : (i9) -> i1
    %25 = comb.or bin %3, %10, %14, %18, %23, %24 {sv.namehint = "requestAIO_0_0"} : i1
    %26 = comb.extract %auto_in_a_bits_address from 4 : (i9) -> i3
    %27 = comb.xor bin %26, %c-4_i3 : i3
    %28 = comb.extract %auto_in_a_bits_address from 2 : (i9) -> i1
    %29 = comb.concat %4, %27, %28 : i2, i3, i1
    %30 = comb.icmp bin eq %29, %c0_i6 {sv.namehint = "_requestAIO_T_39"} : i6
    %31 = comb.extract %auto_in_a_bits_address from 3 : (i9) -> i4
    %32 = comb.xor bin %31, %c-6_i4 : i4
    %33 = comb.concat %4, %32 : i2, i4
    %34 = comb.icmp bin eq %33, %c0_i6 {sv.namehint = "_requestAIO_T_44"} : i6
    %35 = comb.or bin %30, %34 {sv.namehint = "requestAIO_0_1"} : i1
    %36 = comb.and bin %auto_in_a_valid, %25 {sv.namehint = "portsAOI_filtered_0_valid"} : i1
    %37 = comb.and bin %auto_in_a_valid, %35 {sv.namehint = "portsAOI_filtered_1_valid"} : i1
    %38 = comb.and %25, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %39 = comb.and %35, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %40 = comb.or bin %38, %39 {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %beatsLeft = seq.firreg %78 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %41 = comb.xor bin %beatsLeft, %true {sv.namehint = "idle"} : i1
    %42 = comb.and bin %41, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %43 = comb.concat %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_valid"} : i1, i1
    %readys_mask = seq.firreg %63 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 1 : ui64} : i2
    %44 = comb.xor bin %readys_mask, %c-1_i2 {sv.namehint = "_readys_filter_T"} : i2
    %45 = comb.and bin %43, %44 {sv.namehint = "_readys_filter_T_1"} : i2
    %46 = comb.extract %45 from 1 : (i2) -> i1
    %47 = comb.extract %45 from 0 : (i2) -> i1
    %48 = comb.concat %47, %auto_out_1_d_valid : i1, i1
    %49 = comb.or bin %48, %45 : i2
    %50 = comb.concat %readys_mask, %c0_i2 {sv.namehint = "_readys_unready_T_4"} : i2, i2
    %51 = comb.concat %false, %46, %49 : i1, i1, i2
    %52 = comb.or bin %51, %50 {sv.namehint = "readys_unready"} : i4
    %53 = comb.extract %52 from 2 {sv.namehint = "_readys_readys_T"} : (i4) -> i2
    %54 = comb.extract %52 from 0 {sv.namehint = "_readys_readys_T_1"} : (i4) -> i2
    %55 = comb.and bin %53, %54 {sv.namehint = "_readys_readys_T_2"} : i2
    %56 = comb.xor bin %55, %c-1_i2 {sv.namehint = "readys_readys"} : i2
    %57 = comb.icmp bin ne %43, %c0_i2 {sv.namehint = "_readys_T_5"} : i2
    %58 = comb.and bin %42, %57 {sv.namehint = "_readys_T_6"} : i1
    %59 = comb.and bin %56, %43 {sv.namehint = "_readys_mask_T"} : i2
    %60 = comb.extract %59 from 0 : (i2) -> i1
    %61 = comb.concat %60, %false {sv.namehint = "_readys_mask_T_2"} : i1, i1
    %62 = comb.or bin %59, %61 {sv.namehint = "_readys_mask_T_4"} : i2
    %63 = comb.mux bin %58, %62, %readys_mask : i2
    %64 = comb.extract %56 from 0 {sv.namehint = "readys_0"} : (i2) -> i1
    %65 = comb.extract %56 from 1 {sv.namehint = "readys_1"} : (i2) -> i1
    %66 = comb.and bin %64, %auto_out_0_d_valid {sv.namehint = "winner_0"} : i1
    %67 = comb.and bin %65, %auto_out_1_d_valid {sv.namehint = "winner_1"} : i1
    %68 = comb.xor bin %66, %true : i1
    %69 = comb.xor bin %67, %true : i1
    %70 = comb.or bin %68, %69 : i1
    %71 = comb.xor bin %reset, %true : i1
    %72 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T"} : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.or bin %73, %66, %67 : i1
    sv.always posedge %0 {
      sv.if %71 {
        sv.assert %70, immediate label "assert__assert"
      }
      sv.if %71 {
        sv.assert %74, immediate label "assert__assert_1"
      }
    }
    %75 = comb.and bin %auto_in_d_ready, %88 {sv.namehint = "_beatsLeft_T"} : i1
    %76 = comb.sub bin %beatsLeft, %75 {sv.namehint = "_beatsLeft_T_1"} : i1
    %77 = comb.xor %42, %true : i1
    %78 = comb.and %77, %76 {sv.namehint = "_beatsLeft_T_3"} : i1
    %state_0 = seq.firreg %79 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %state_1 = seq.firreg %80 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %79 = comb.mux bin %beatsLeft, %state_0, %66 {sv.namehint = "muxState_0"} : i1
    %80 = comb.mux bin %beatsLeft, %state_1, %67 {sv.namehint = "muxState_1"} : i1
    %81 = comb.mux bin %beatsLeft, %state_0, %64 {sv.namehint = "allowed_0"} : i1
    %82 = comb.mux bin %beatsLeft, %state_1, %65 {sv.namehint = "allowed_1"} : i1
    %83 = comb.and bin %auto_in_d_ready, %81 {sv.namehint = "portsDIO_filtered_0_ready"} : i1
    %84 = comb.and bin %auto_in_d_ready, %82 {sv.namehint = "portsDIO_filtered_1_0_ready"} : i1
    %85 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_in_0_d_valid_T_1"} : i1
    %86 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_in_0_d_valid_T_2"} : i1
    %87 = comb.or bin %85, %86 {sv.namehint = "_in_0_d_valid_T_3"} : i1
    %88 = comb.mux bin %beatsLeft, %87, %72 {sv.namehint = "in_0_d_valid"} : i1
    %89 = comb.and %79, %auto_out_0_d_bits_corrupt {sv.namehint = "_in_0_d_bits_T"} : i1
    %90 = comb.mux bin %79, %auto_out_0_d_bits_data, %c0_i32 {sv.namehint = "_in_0_d_bits_T_3"} : i32
    %91 = comb.mux bin %80, %auto_out_1_d_bits_data, %c0_i32 {sv.namehint = "_in_0_d_bits_T_4"} : i32
    %92 = comb.or bin %90, %91 {sv.namehint = "_in_0_d_bits_T_5"} : i32
    %93 = comb.and %79, %auto_out_0_d_bits_denied {sv.namehint = "_in_0_d_bits_T_6"} : i1
    %94 = comb.and %79, %auto_out_0_d_bits_sink {sv.namehint = "_in_0_d_bits_T_9"} : i1
    %95 = comb.mux bin %79, %auto_out_0_d_bits_size, %c0_i2 {sv.namehint = "_in_0_d_bits_T_15"} : i2
    %96 = comb.concat %80, %false {sv.namehint = "_in_0_d_bits_T_16"} : i1, i1
    %97 = comb.or bin %95, %96 {sv.namehint = "_in_0_d_bits_T_17"} : i2
    %98 = comb.mux bin %79, %auto_out_0_d_bits_param, %c0_i2 {sv.namehint = "_in_0_d_bits_T_18"} : i2
    %99 = comb.mux bin %79, %auto_out_0_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_21"} : i3
    %100 = comb.mux bin %80, %auto_out_1_d_bits_opcode, %c0_i3 {sv.namehint = "_in_0_d_bits_T_22"} : i3
    %101 = comb.or bin %99, %100 {sv.namehint = "_in_0_d_bits_T_23"} : i3
    hw.output %40, %88, %93, %92, %89, %37, %auto_in_a_bits_opcode, %1, %auto_in_a_bits_data, %84, %36, %auto_in_a_bits_opcode, %auto_in_a_bits_address, %auto_in_a_bits_data, %83 : i1, i1, i1, i32, i1, i1, i3, i7, i32, i1, i1, i3, i9, i32, i1
  }
  hw.module private @DMIToTL(in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_address : i9, out auto_out_a_bits_data : i32, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i32, in %auto_out_d_bits_corrupt : i1, out io_dmi_req_ready : i1, in %io_dmi_req_valid : i1, in %io_dmi_req_bits_addr : i7, in %io_dmi_req_bits_data : i32, in %io_dmi_req_bits_op : i2, in %io_dmi_resp_ready : i1, out io_dmi_resp_valid : i1, out io_dmi_resp_bits_data : i32, out io_dmi_resp_bits_resp : i2) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %c72_i9 = hw.constant 72 : i9
    %c-2_i2 = hw.constant -2 : i2
    %c0_i32 = hw.constant 0 : i32
    %c0_i3 = hw.constant 0 : i3
    %0 = comb.concat %io_dmi_req_bits_addr, %c0_i2 {sv.namehint = "addr"} : i7, i2
    %1 = comb.icmp bin eq %io_dmi_req_bits_op, %c-2_i2 : i2
    %2 = comb.icmp bin eq %io_dmi_req_bits_op, %c1_i2 : i2
    %3 = comb.concat %2, %c0_i2 : i1, i2
    %4 = comb.mux bin %1, %c0_i3, %3 {sv.namehint = "nodeOut_a_bits_opcode"} : i3
    %5 = comb.or %1, %2 : i1
    %6 = comb.mux bin %5, %0, %c72_i9 {sv.namehint = "nodeOut_a_bits_address"} : i9
    %7 = comb.mux bin %1, %io_dmi_req_bits_data, %c0_i32 {sv.namehint = "nodeOut_a_bits_data"} : i32
    %8 = comb.or bin %auto_out_d_bits_corrupt, %auto_out_d_bits_denied {sv.namehint = "_io_dmi_resp_bits_resp_T_1"} : i1
    %9 = comb.concat %false, %8 {sv.namehint = "io_dmi_resp_bits_resp"} : i1, i1
    hw.output %io_dmi_req_valid, %4, %6, %7, %io_dmi_resp_ready, %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_data, %9 : i1, i3, i9, i32, i1, i1, i1, i32, i2
  }
  hw.module private @TLMonitor_24(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i7, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-6_i4 = hw.constant -6 : i4
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i3 = hw.constant -1 : i3
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i7) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.xor bin %reset, %true : i1
    %7 = comb.and bin %io_in_a_valid, %5, %6 : i1
    %8 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %9 = comb.and bin %io_in_a_valid, %8, %6 : i1
    %10 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %11 = comb.extract %io_in_a_bits_address from 4 : (i7) -> i3
    %12 = comb.xor bin %11, %c-4_i3 : i3
    %13 = comb.extract %io_in_a_bits_address from 2 : (i7) -> i1
    %14 = comb.concat %12, %13 : i3, i1
    %15 = comb.icmp bin eq %14, %c0_i4 : i4
    %16 = comb.extract %io_in_a_bits_address from 3 : (i7) -> i4
    %17 = comb.icmp eq %16, %c-6_i4 : i4
    %18 = comb.or bin %15, %17 : i1
    %19 = comb.and bin %io_in_a_valid, %10, %6 : i1
    %20 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %21 = comb.and bin %io_in_a_valid, %20, %6 : i1
    %22 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %23 = comb.and bin %io_in_a_valid, %22, %6 : i1
    %24 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %25 = comb.and bin %io_in_a_valid, %24, %6 : i1
    %26 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %27 = comb.and bin %io_in_a_valid, %26, %6 : i1
    %28 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %29 = comb.and bin %io_in_a_valid, %28, %6 : i1
    %30 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %31 = comb.and bin %io_in_d_valid, %6 : i1
    %32 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %33 = comb.and bin %io_in_d_valid, %32, %6 : i1
    %34 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %35 = comb.and bin %io_in_d_valid, %34, %6 : i1
    %36 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %41 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %37 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %38 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %39 = comb.xor %36, %true : i1
    %40 = comb.or %39, %37 : i1
    %41 = comb.and %40, %a_first_counter : i1
    %opcode = seq.firreg %46 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %47 clock %clock {firrtl.random_init_start = 10 : ui64} : i7
    %42 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %43 = comb.and bin %io_in_a_valid, %a_first_counter, %6 : i1
    %44 = comb.icmp bin eq %io_in_a_bits_address, %address : i7
    %45 = comb.and bin %36, %38 : i1
    %46 = comb.mux bin %45, %io_in_a_bits_opcode, %opcode : i3
    %47 = comb.mux bin %45, %io_in_a_bits_address, %address : i7
    %48 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %53 clock %clock reset sync %reset, %false {firrtl.random_init_start = 17 : ui64} : i1
    %49 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %50 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %51 = comb.xor %48, %true : i1
    %52 = comb.or %51, %49 : i1
    %53 = comb.and %52, %d_first_counter : i1
    %opcode_1 = seq.firreg %57 clock %clock {firrtl.random_init_start = 18 : ui64} : i3
    %54 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %55 = comb.and bin %io_in_d_valid, %d_first_counter, %6 : i1
    %56 = comb.and bin %48, %50 : i1
    %57 = comb.mux bin %56, %io_in_d_bits_opcode, %opcode_1 : i3
    %inflight = seq.firreg %106 clock %clock reset sync %reset, %false {firrtl.random_init_start = 28 : ui64} : i1
    %inflight_opcodes = seq.firreg %109 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 29 : ui64} : i4
    %inflight_sizes = seq.firreg %112 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 33 : ui64} : i4
    %a_first_counter_1 = seq.firreg %62 clock %clock reset sync %reset, %false {firrtl.random_init_start = 37 : ui64} : i1
    %58 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %59 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %60 = comb.xor %36, %true : i1
    %61 = comb.or %60, %58 : i1
    %62 = comb.and %61, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %67 clock %clock reset sync %reset, %false {firrtl.random_init_start = 38 : ui64} : i1
    %63 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %64 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %65 = comb.xor %48, %true : i1
    %66 = comb.or %65, %63 : i1
    %67 = comb.and %66, %d_first_counter_1 : i1
    %68 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %69 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %70 = comb.and bin %io_in_a_valid, %59 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %71 = comb.and bin %36, %59 {sv.namehint = "a_set"} : i1
    %72 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %73 = comb.mux bin %71, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %74 = comb.mux bin %71, %72, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %75 = comb.concat %false, %73 : i1, i3
    %76 = comb.mux bin %71, %75, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %77 = comb.xor bin %inflight, %true : i1
    %78 = comb.and bin %71, %6 : i1
    %79 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %80 = comb.and bin %io_in_d_valid, %64 : i1
    %81 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %82 = comb.and bin %48, %64, %81 {sv.namehint = "d_clr"} : i1
    %83 = comb.replicate %82 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %84 = comb.and bin %80, %81 : i1
    %85 = comb.or bin %inflight, %70 : i1
    %86 = comb.and bin %84, %6 : i1
    %87 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %88 = comb.icmp bin eq %io_in_d_bits_opcode, %87 : i3
    %89 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %90 = comb.icmp bin eq %io_in_d_bits_opcode, %89 : i3
    %91 = comb.or bin %88, %90 : i1
    %92 = comb.and bin %84, %70, %6 : i1
    %93 = comb.xor bin %70, %true : i1
    %94 = hw.array_get %1[%68] : !hw.array<8xi3>, i3
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %94 : i3
    %96 = hw.array_get %0[%68] : !hw.array<8xi3>, i3
    %97 = comb.icmp bin eq %io_in_d_bits_opcode, %96 : i3
    %98 = comb.or bin %95, %97 : i1
    %99 = comb.and bin %84, %93, %6 : i1
    %100 = comb.icmp bin eq %69, %c2_i3 : i3
    %101 = comb.xor bin %io_in_d_ready, %true : i1
    %102 = comb.or bin %101, %io_in_a_ready : i1
    %103 = comb.and bin %80, %59, %io_in_a_valid, %81, %6 : i1
    %104 = comb.or bin %inflight, %71 {sv.namehint = "_inflight_T"} : i1
    %105 = comb.xor bin %82, %true {sv.namehint = "_inflight_T_1"} : i1
    %106 = comb.and bin %104, %105 {sv.namehint = "_inflight_T_2"} : i1
    %107 = comb.or bin %inflight_opcodes, %74 {sv.namehint = "_inflight_opcodes_T"} : i4
    %108 = comb.xor bin %83, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %109 = comb.and bin %107, %108 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %110 = comb.or bin %inflight_sizes, %76 {sv.namehint = "_inflight_sizes_T"} : i4
    %111 = comb.xor bin %83, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %112 = comb.and bin %110, %111 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %118 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 39 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %113 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %114 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %115 = comb.or bin %77, %113, %114 : i1
    %116 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %117 = comb.or bin %36, %48 : i1
    %118 = comb.mux bin %117, %c0_i32, %116 : i32
    %inflight_1 = seq.firreg %130 clock %clock reset sync %reset, %false {firrtl.random_init_start = 71 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %132 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 76 : ui64} : i4
    %d_first_counter_2 = seq.firreg %123 clock %clock reset sync %reset, %false {firrtl.random_init_start = 81 : ui64} : i1
    %119 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %120 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %121 = comb.xor %48, %true : i1
    %122 = comb.or %121, %119 : i1
    %123 = comb.and %122, %d_first_counter_2 : i1
    %124 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %125 = comb.and bin %48, %120, %79 {sv.namehint = "d_clr_1"} : i1
    %126 = comb.replicate %125 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %127 = comb.and bin %io_in_d_valid, %120, %79, %6 : i1
    %128 = comb.icmp bin eq %124, %c2_i3 : i3
    %129 = comb.xor bin %125, %true {sv.namehint = "_inflight_T_4"} : i1
    %130 = comb.and bin %inflight_1, %129 {sv.namehint = "_inflight_T_5"} : i1
    %131 = comb.xor bin %126, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %132 = comb.and bin %inflight_sizes_1, %131 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %138 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 82 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %133 = comb.xor bin %inflight_1, %true : i1
    %134 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %135 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %136 = comb.or bin %133, %134, %135 : i1
    sv.always posedge %2 {
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %7 {
        sv.assert %4, immediate label "assert__assert_6"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %9 {
        sv.assert %4, immediate label "assert__assert_14"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_16"
      }
      sv.if %19 {
        sv.assert %18, immediate label "assert__assert_20"
      }
      sv.if %19 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %21 {
        sv.assert %18, immediate label "assert__assert_26"
      }
      sv.if %21 {
        sv.assert %4, immediate label "assert__assert_28"
      }
      sv.if %23 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %23 {
        sv.assert %4, immediate label "assert__assert_33"
      }
      sv.if %25 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %25 {
        sv.assert %4, immediate label "assert__assert_38"
      }
      sv.if %27 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %27 {
        sv.assert %4, immediate label "assert__assert_43"
      }
      sv.if %29 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %29 {
        sv.assert %4, immediate label "assert__assert_48"
      }
      sv.if %31 {
        sv.assert %30, immediate label "assert__assert_52"
      }
      sv.if %33 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %35 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %43 {
        sv.assert %42, immediate label "assert__assert_87"
      }
      sv.if %43 {
        sv.assert %44, immediate label "assert__assert_91"
      }
      sv.if %55 {
        sv.assert %54, immediate label "assert__assert_92"
      }
      sv.if %78 {
        sv.assert %77, immediate label "assert__assert_98"
      }
      sv.if %86 {
        sv.assert %85, immediate label "assert__assert_99"
      }
      sv.if %92 {
        sv.assert %91, immediate label "assert__assert_100"
      }
      sv.if %99 {
        sv.assert %98, immediate label "assert__assert_102"
      }
      sv.if %99 {
        sv.assert %100, immediate label "assert__assert_103"
      }
      sv.if %103 {
        sv.assert %102, immediate label "assert__assert_104"
      }
      sv.if %6 {
        sv.assert %115, immediate label "assert__assert_105"
      }
      sv.if %127 {
        sv.assert %inflight_1, immediate label "assert__assert_107"
      }
      sv.if %127 {
        sv.assert %128, immediate label "assert__assert_109"
      }
      sv.if %6 {
        sv.assert %136, immediate label "assert__assert_111"
      }
    }
    %137 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %138 = comb.mux bin %48, %c0_i32, %137 : i32
    hw.output
  }
  hw.module private @TLDebugModuleOuter(in %clock : !seq.clock, in %reset : i1, out auto_dmi_in_a_ready : i1, in %auto_dmi_in_a_valid : i1, in %auto_dmi_in_a_bits_opcode : i3, in %auto_dmi_in_a_bits_address : i7, in %auto_dmi_in_a_bits_data : i32, in %auto_dmi_in_d_ready : i1, out auto_dmi_in_d_valid : i1, out auto_dmi_in_d_bits_opcode : i3, out auto_dmi_in_d_bits_data : i32, out auto_int_out_0 : i1, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, in %io_innerCtrl_ready : i1, out io_innerCtrl_valid : i1, out io_innerCtrl_bits_resumereq : i1, out io_innerCtrl_bits_hartsel : i10, out io_innerCtrl_bits_ackhavereset : i1, out io_innerCtrl_bits_hrmask_0 : i1, in %io_hgDebugInt_0 : i1) {
    %c0_i29 = hw.constant 0 : i29
    %c-4_i3 = hw.constant -4 : i3
    %c0_i10 = hw.constant 0 : i10
    %c1123200_i32 = hw.constant 1123200 : i32
    %c0_i32 = hw.constant 0 : i32
    %c0_i2 = hw.constant 0 : i2
    %true = hw.constant true
    %false = hw.constant false
    hw.instance "monitor" @TLMonitor_24(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_dmi_in_d_ready: i1, io_in_a_valid: %auto_dmi_in_a_valid: i1, io_in_a_bits_opcode: %auto_dmi_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_dmi_in_a_bits_address: i7, io_in_d_ready: %auto_dmi_in_d_ready: i1, io_in_d_valid: %auto_dmi_in_a_valid: i1, io_in_d_bits_opcode: %34: i3) -> ()
    %DMCONTROLReg_haltreq = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %DMCONTROLReg_hartsello = seq.firreg %3 clock %clock reset async %reset, %c0_i10 {firrtl.random_init_start = 6 : ui64, sv.namehint = "DMCONTROLReg_hartsello"} : i10
    %DMCONTROLReg_ndmreset = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 30 : ui64, sv.namehint = "DMCONTROLReg_ndmreset"} : i1
    %DMCONTROLReg_dmactive = seq.firreg %6 clock %clock reset async %reset, %false {firrtl.random_init_start = 31 : ui64, sv.namehint = "DMCONTROLReg_dmactive"} : i1
    %0 = comb.xor bin %DMCONTROLReg_dmactive, %true : i1
    %1 = comb.mux bin %31, %21, %DMCONTROLReg_ndmreset : i1
    %2 = comb.and %DMCONTROLReg_dmactive, %1 {sv.namehint = "DMCONTROLNxt_ndmreset"} : i1
    %3 = comb.mux bin %DMCONTROLReg_dmactive, %DMCONTROLReg_hartsello, %c0_i10 {sv.namehint = "DMCONTROLNxt_hartsello"} : i10
    %4 = comb.mux bin %31, %26, %DMCONTROLReg_haltreq : i1
    %5 = comb.and %DMCONTROLReg_dmactive, %4 {sv.namehint = "DMCONTROLNxt_haltreq"} : i1
    %6 = comb.mux bin %31, %20, %DMCONTROLReg_dmactive {sv.namehint = "DMCONTROLNxt_dmactive"} : i1
    %hrmaskReg_0 = seq.firreg %13 clock %clock reset async %reset, %false {firrtl.random_init_start = 64 : ui64} : i1
    %7 = comb.icmp bin eq %DMCONTROLReg_hartsello, %c0_i10 : i10
    %8 = comb.and bin %31, %22, %7 : i1
    %9 = comb.and bin %31, %23, %7 : i1
    %10 = comb.or %9, %hrmaskReg_0 : i1
    %11 = comb.or bin %0, %8 : i1
    %12 = comb.xor %11, %true : i1
    %13 = comb.and %12, %10 {sv.namehint = "hrmaskNxt_0"} : i1
    %14 = comb.and bin %DMCONTROLReg_dmactive, %io_ctrl_dmactiveAck {sv.namehint = "_out_prepend_T"} : i1
    %15 = comb.icmp bin eq %auto_dmi_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %16 = comb.extract %auto_dmi_in_a_bits_address from 4 : (i7) -> i1
    %17 = comb.extract %auto_dmi_in_a_bits_address from 2 : (i7) -> i1
    %18 = comb.concat %16, %17 : i1, i1
    %19 = comb.icmp bin eq %18, %c0_i2 {sv.namehint = "_out_T_3"} : i2
    %20 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "DMCONTROLWrData_dmactive"} : (i32) -> i1
    %21 = comb.extract %auto_dmi_in_a_bits_data from 1 {sv.namehint = "DMCONTROLWrData_ndmreset"} : (i32) -> i1
    %22 = comb.extract %auto_dmi_in_a_bits_data from 2 {sv.namehint = "DMCONTROLWrData_clrresethaltreq"} : (i32) -> i1
    %23 = comb.extract %auto_dmi_in_a_bits_data from 3 {sv.namehint = "DMCONTROLWrData_setresethaltreq"} : (i32) -> i1
    %24 = comb.extract %auto_dmi_in_a_bits_data from 28 {sv.namehint = "DMCONTROLWrData_ackhavereset"} : (i32) -> i1
    %25 = comb.extract %auto_dmi_in_a_bits_data from 30 {sv.namehint = "DMCONTROLWrData_resumereq"} : (i32) -> i1
    %26 = comb.extract %auto_dmi_in_a_bits_data from 31 {sv.namehint = "DMCONTROLWrData_haltreq"} : (i32) -> i1
    %27 = comb.concat %DMCONTROLReg_haltreq, %c0_i29, %DMCONTROLReg_ndmreset, %14 {sv.namehint = "out_prepend_11"} : i1, i29, i1, i1
    %28 = comb.extract %auto_dmi_in_a_bits_address from 3 {sv.namehint = "out_iindex"} : (i7) -> i1
    %29 = comb.xor %28, %true {sv.namehint = "out_backSel_0"} : i1
    %30 = comb.xor bin %15, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %31 = comb.and bin %auto_dmi_in_a_valid, %auto_dmi_in_d_ready, %30, %29, %19 {sv.namehint = "out_woready_9"} : i1
    %32 = comb.mux bin %28, %c1123200_i32, %27 {sv.namehint = "_out_out_bits_data_T_3"} : i32
    %33 = comb.mux bin %19, %32, %c0_i32 {sv.namehint = "out_bits_data"} : i32
    %34 = comb.concat %c0_i2, %15 {sv.namehint = "dmiNodeIn_d_bits_opcode"} : i2, i1
    %debugIntRegs_0 = seq.firreg %37 clock %clock reset async %reset, %false {firrtl.random_init_start = 65 : ui64} : i1
    %35 = comb.or bin %debugIntRegs_0, %io_hgDebugInt_0 {sv.namehint = "intnodeOut_0"} : i1
    %36 = comb.mux bin %31, %26, %debugIntRegs_0 : i1
    %37 = comb.and %DMCONTROLReg_dmactive, %36 {sv.namehint = "debugIntNxt_0"} : i1
    %innerCtrlValidReg = seq.firreg %39 clock %clock reset async %reset, %false {firrtl.random_init_start = 66 : ui64} : i1
    %innerCtrlResumeReqReg = seq.firreg %40 clock %clock reset async %reset, %false {firrtl.random_init_start = 67 : ui64} : i1
    %innerCtrlAckHaveResetReg = seq.firreg %41 clock %clock reset async %reset, %false {firrtl.random_init_start = 68 : ui64} : i1
    %38 = comb.xor bin %io_innerCtrl_ready, %true {sv.namehint = "_innerCtrlAckHaveResetReg_T"} : i1
    %39 = comb.and bin %42, %38 {sv.namehint = "_innerCtrlValidReg_T_1"} : i1
    %40 = comb.and bin %44, %38 {sv.namehint = "_innerCtrlResumeReqReg_T_1"} : i1
    %41 = comb.and bin %46, %38 {sv.namehint = "_innerCtrlAckHaveResetReg_T_1"} : i1
    %42 = comb.or bin %31, %innerCtrlValidReg {sv.namehint = "io_innerCtrl_valid"} : i1
    %43 = comb.and bin %31, %25 {sv.namehint = "_io_innerCtrl_bits_resumereq_T"} : i1
    %44 = comb.or bin %43, %innerCtrlResumeReqReg {sv.namehint = "io_innerCtrl_bits_resumereq"} : i1
    %45 = comb.and bin %31, %24 {sv.namehint = "_io_innerCtrl_bits_ackhavereset_T"} : i1
    %46 = comb.or bin %45, %innerCtrlAckHaveResetReg {sv.namehint = "io_innerCtrl_bits_ackhavereset"} : i1
    hw.output %auto_dmi_in_d_ready, %auto_dmi_in_a_valid, %34, %33, %35, %DMCONTROLReg_ndmreset, %DMCONTROLReg_dmactive, %42, %44, %DMCONTROLReg_hartsello, %46, %13 : i1, i1, i3, i32, i1, i1, i1, i1, i1, i10, i1, i1
  }
  hw.module private @IntSyncCrossingSource_4(in %auto_in_0 : i1, out auto_out_sync_0 : i1) {
    hw.output %auto_in_0 : i1
  }
  hw.module private @TLMonitor_25(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i2 = hw.constant -1 : i2
    %c-5_i4 = hw.constant -5 : i4
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %true = hw.constant true
    %c0_i32 = hw.constant 0 : i32
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i3 = hw.constant -1 : i3
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.xor bin %reset, %true : i1
    %7 = comb.and bin %io_in_a_valid, %5, %6 : i1
    %8 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %9 = comb.and bin %io_in_a_valid, %8, %6 : i1
    %10 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %11 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %12 = comb.icmp bin eq %11, %c0_i3 : i3
    %13 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %14 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %15 = comb.xor bin %14, %c-15_i5 : i5
    %16 = comb.extract %15 from 2 : (i5) -> i3
    %17 = comb.extract %15 from 0 : (i5) -> i1
    %18 = comb.concat %13, %16, %17 : i2, i3, i1
    %19 = comb.icmp bin eq %18, %c0_i6 : i6
    %20 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %21 = comb.xor bin %20, %c-5_i4 : i4
    %22 = comb.concat %13, %21 : i2, i4
    %23 = comb.icmp bin eq %22, %c0_i6 : i6
    %24 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %25 = comb.xor bin %24, %c-1_i2 : i2
    %26 = comb.concat %13, %25 : i2, i2
    %27 = comb.icmp bin eq %26, %c0_i4 : i4
    %28 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %29 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.concat %28, %30 : i1, i1
    %32 = comb.icmp bin eq %31, %c0_i2 : i2
    %33 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %34 = comb.or bin %12, %19, %23, %27, %32, %33 : i1
    %35 = comb.and bin %io_in_a_valid, %10, %6 : i1
    %36 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %37 = comb.and bin %io_in_a_valid, %36, %6 : i1
    %38 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %39 = comb.and bin %io_in_a_valid, %38, %6 : i1
    %40 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %41 = comb.and bin %io_in_a_valid, %40, %6 : i1
    %42 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %43 = comb.and bin %io_in_a_valid, %42, %6 : i1
    %44 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %45 = comb.and bin %io_in_a_valid, %44, %6 : i1
    %46 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %47 = comb.and bin %io_in_d_valid, %6 : i1
    %48 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %49 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %50 = comb.and bin %io_in_d_valid, %49, %6 : i1
    %51 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %52 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %53 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %54 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %55 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %56 = comb.and bin %io_in_d_valid, %55, %6 : i1
    %57 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %58 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %59 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %60 = comb.and bin %io_in_d_valid, %59, %6 : i1
    %61 = comb.or bin %54, %io_in_d_bits_corrupt : i1
    %62 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %63 = comb.and bin %io_in_d_valid, %62, %6 : i1
    %64 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %65 = comb.and bin %io_in_d_valid, %64, %6 : i1
    %66 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %67 = comb.and bin %io_in_d_valid, %66, %6 : i1
    %68 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %73 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %69 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %70 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %71 = comb.xor %68, %true : i1
    %72 = comb.or %71, %69 : i1
    %73 = comb.and %72, %a_first_counter : i1
    %opcode = seq.firreg %78 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %79 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %74 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %75 = comb.and bin %io_in_a_valid, %a_first_counter, %6 : i1
    %76 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %77 = comb.and bin %68, %70 : i1
    %78 = comb.mux bin %77, %io_in_a_bits_opcode, %opcode : i3
    %79 = comb.mux bin %77, %io_in_a_bits_address, %address : i9
    %80 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %85 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %81 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %82 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %83 = comb.xor %80, %true : i1
    %84 = comb.or %83, %81 : i1
    %85 = comb.and %84, %d_first_counter : i1
    %opcode_1 = seq.firreg %94 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %95 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %96 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %97 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %sink = seq.firreg %98 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %99 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %86 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %87 = comb.and bin %io_in_d_valid, %d_first_counter, %6 : i1
    %88 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %89 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %90 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %91 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %92 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %93 = comb.and bin %80, %82 : i1
    %94 = comb.mux bin %93, %io_in_d_bits_opcode, %opcode_1 : i3
    %95 = comb.mux bin %93, %io_in_d_bits_param, %param_1 : i2
    %96 = comb.mux bin %93, %io_in_d_bits_size, %size_1 : i2
    %97 = comb.mux bin %93, %io_in_d_bits_source, %source_1 : i1
    %98 = comb.mux bin %93, %io_in_d_bits_sink, %sink : i1
    %99 = comb.mux bin %93, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %165 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %168 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %171 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %104 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %100 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %101 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %102 = comb.xor %68, %true : i1
    %103 = comb.or %102, %100 : i1
    %104 = comb.and %103, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %109 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %105 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %106 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %107 = comb.xor %80, %true : i1
    %108 = comb.or %107, %105 : i1
    %109 = comb.and %108, %d_first_counter_1 : i1
    %110 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %111 = comb.shru bin %inflight_opcodes, %110 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %112 = comb.extract %111 from 1 : (i4) -> i3
    %113 = comb.shru bin %inflight_sizes, %110 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %114 = comb.extract %113 from 1 : (i4) -> i3
    %115 = comb.concat %false, %114 {sv.namehint = "a_size_lookup"} : i1, i3
    %116 = comb.and bin %68, %101 {sv.namehint = "a_set"} : i1
    %117 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %118 = comb.mux bin %116, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %119 = comb.mux bin %116, %117, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %120 = comb.concat %false, %118 : i1, i3
    %121 = comb.mux bin %116, %120, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %122 = comb.xor bin %inflight, %true : i1
    %123 = comb.and bin %116, %6 : i1
    %124 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %125 = comb.and bin %io_in_d_valid, %106 : i1
    %126 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %127 = comb.and bin %80, %106, %126 : i1
    %128 = comb.xor %io_in_d_bits_source, %true : i1
    %129 = comb.and %127, %128 {sv.namehint = "d_clr"} : i1
    %130 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %131 = comb.shl bin %c15_i31, %130 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %132 = comb.extract %131 from 0 : (i31) -> i4
    %133 = comb.mux bin %127, %132, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %134 = comb.shl bin %c15_i31, %130 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %135 = comb.extract %134 from 0 : (i31) -> i4
    %136 = comb.mux bin %127, %135, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %137 = comb.and bin %125, %126 : i1
    %138 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %139 = comb.and bin %io_in_a_valid, %101, %138 {sv.namehint = "same_cycle_resp"} : i1
    %140 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %141 = comb.or bin %140, %139 : i1
    %142 = comb.and bin %137, %6 : i1
    %143 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %144 = comb.icmp bin eq %io_in_d_bits_opcode, %143 : i3
    %145 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %146 = comb.icmp bin eq %io_in_d_bits_opcode, %145 : i3
    %147 = comb.or bin %144, %146 : i1
    %148 = comb.and bin %137, %139, %6 : i1
    %149 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %150 = comb.xor bin %139, %true : i1
    %151 = hw.array_get %1[%112] : !hw.array<8xi3>, i3
    %152 = comb.icmp bin eq %io_in_d_bits_opcode, %151 : i3
    %153 = hw.array_get %0[%112] : !hw.array<8xi3>, i3
    %154 = comb.icmp bin eq %io_in_d_bits_opcode, %153 : i3
    %155 = comb.or bin %152, %154 : i1
    %156 = comb.and bin %137, %150, %6 : i1
    %157 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %158 = comb.icmp bin eq %157, %115 : i4
    %159 = comb.xor bin %io_in_d_bits_source, %true : i1
    %160 = comb.xor bin %io_in_d_ready, %true : i1
    %161 = comb.or bin %160, %io_in_a_ready : i1
    %162 = comb.and bin %125, %101, %io_in_a_valid, %159, %126, %6 : i1
    %163 = comb.or bin %inflight, %116 {sv.namehint = "_inflight_T"} : i1
    %164 = comb.xor bin %129, %true {sv.namehint = "_inflight_T_1"} : i1
    %165 = comb.and bin %163, %164 {sv.namehint = "_inflight_T_2"} : i1
    %166 = comb.or bin %inflight_opcodes, %119 {sv.namehint = "_inflight_opcodes_T"} : i4
    %167 = comb.xor bin %133, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %168 = comb.and bin %166, %167 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %169 = comb.or bin %inflight_sizes, %121 {sv.namehint = "_inflight_sizes_T"} : i4
    %170 = comb.xor bin %136, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %171 = comb.and bin %169, %170 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %177 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %172 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %173 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %174 = comb.or bin %122, %172, %173 : i1
    %175 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %176 = comb.or bin %68, %80 : i1
    %177 = comb.mux bin %176, %c0_i32, %175 : i32
    %inflight_1 = seq.firreg %196 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %198 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %182 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %178 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %179 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %180 = comb.xor %80, %true : i1
    %181 = comb.or %180, %178 : i1
    %182 = comb.and %181, %d_first_counter_2 : i1
    %183 = comb.shru bin %inflight_sizes_1, %110 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %184 = comb.extract %183 from 1 : (i4) -> i3
    %185 = comb.concat %false, %184 {sv.namehint = "c_size_lookup"} : i1, i3
    %186 = comb.and bin %80, %179, %124 : i1
    %187 = comb.xor %io_in_d_bits_source, %true : i1
    %188 = comb.and %186, %187 {sv.namehint = "d_clr_1"} : i1
    %189 = comb.shl bin %c15_i31, %130 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %190 = comb.extract %189 from 0 : (i31) -> i4
    %191 = comb.mux bin %186, %190, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %192 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %193 = comb.and bin %io_in_d_valid, %179, %124, %6 : i1
    %194 = comb.icmp bin eq %157, %185 : i4
    %195 = comb.xor bin %188, %true {sv.namehint = "_inflight_T_4"} : i1
    %196 = comb.and bin %inflight_1, %195 {sv.namehint = "_inflight_T_5"} : i1
    %197 = comb.xor bin %191, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %198 = comb.and bin %inflight_sizes_1, %197 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %204 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %199 = comb.xor bin %inflight_1, %true : i1
    %200 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %201 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %202 = comb.or bin %199, %200, %201 : i1
    sv.always posedge %2 {
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %7 {
        sv.assert %4, immediate label "assert__assert_6"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %9 {
        sv.assert %4, immediate label "assert__assert_14"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_16"
      }
      sv.if %35 {
        sv.assert %34, immediate label "assert__assert_20"
      }
      sv.if %35 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %37 {
        sv.assert %34, immediate label "assert__assert_26"
      }
      sv.if %37 {
        sv.assert %4, immediate label "assert__assert_28"
      }
      sv.if %39 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %39 {
        sv.assert %4, immediate label "assert__assert_33"
      }
      sv.if %41 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %41 {
        sv.assert %4, immediate label "assert__assert_38"
      }
      sv.if %43 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %43 {
        sv.assert %4, immediate label "assert__assert_43"
      }
      sv.if %45 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %45 {
        sv.assert %4, immediate label "assert__assert_48"
      }
      sv.if %47 {
        sv.assert %46, immediate label "assert__assert_52"
      }
      sv.if %50 {
        sv.assert %48, immediate label "assert__assert_53"
      }
      sv.if %50 {
        sv.assert %51, immediate label "assert__assert_54"
      }
      sv.if %50 {
        sv.assert %52, immediate label "assert__assert_55"
      }
      sv.if %50 {
        sv.assert %53, immediate label "assert__assert_56"
      }
      sv.if %50 {
        sv.assert %54, immediate label "assert__assert_57"
      }
      sv.if %56 {
        sv.assert %48, immediate label "assert__assert_58"
      }
      sv.if %56 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %56 {
        sv.assert %51, immediate label "assert__assert_60"
      }
      sv.if %56 {
        sv.assert %57, immediate label "assert__assert_61"
      }
      sv.if %56 {
        sv.assert %58, immediate label "assert__assert_62"
      }
      sv.if %56 {
        sv.assert %53, immediate label "assert__assert_63"
      }
      sv.if %60 {
        sv.assert %48, immediate label "assert__assert_65"
      }
      sv.if %60 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %60 {
        sv.assert %51, immediate label "assert__assert_67"
      }
      sv.if %60 {
        sv.assert %57, immediate label "assert__assert_68"
      }
      sv.if %60 {
        sv.assert %58, immediate label "assert__assert_69"
      }
      sv.if %60 {
        sv.assert %61, immediate label "assert__assert_70"
      }
      sv.if %63 {
        sv.assert %48, immediate label "assert__assert_72"
      }
      sv.if %63 {
        sv.assert %52, immediate label "assert__assert_73"
      }
      sv.if %63 {
        sv.assert %53, immediate label "assert__assert_74"
      }
      sv.if %65 {
        sv.assert %48, immediate label "assert__assert_76"
      }
      sv.if %65 {
        sv.assert %52, immediate label "assert__assert_77"
      }
      sv.if %65 {
        sv.assert %61, immediate label "assert__assert_78"
      }
      sv.if %67 {
        sv.assert %48, immediate label "assert__assert_80"
      }
      sv.if %67 {
        sv.assert %52, immediate label "assert__assert_81"
      }
      sv.if %67 {
        sv.assert %53, immediate label "assert__assert_82"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_87"
      }
      sv.if %75 {
        sv.assert %76, immediate label "assert__assert_91"
      }
      sv.if %87 {
        sv.assert %86, immediate label "assert__assert_92"
      }
      sv.if %87 {
        sv.assert %88, immediate label "assert__assert_93"
      }
      sv.if %87 {
        sv.assert %89, immediate label "assert__assert_94"
      }
      sv.if %87 {
        sv.assert %90, immediate label "assert__assert_95"
      }
      sv.if %87 {
        sv.assert %91, immediate label "assert__assert_96"
      }
      sv.if %87 {
        sv.assert %92, immediate label "assert__assert_97"
      }
      sv.if %123 {
        sv.assert %122, immediate label "assert__assert_98"
      }
      sv.if %142 {
        sv.assert %141, immediate label "assert__assert_99"
      }
      sv.if %148 {
        sv.assert %147, immediate label "assert__assert_100"
      }
      sv.if %148 {
        sv.assert %149, immediate label "assert__assert_101"
      }
      sv.if %156 {
        sv.assert %155, immediate label "assert__assert_102"
      }
      sv.if %156 {
        sv.assert %158, immediate label "assert__assert_103"
      }
      sv.if %162 {
        sv.assert %161, immediate label "assert__assert_104"
      }
      sv.if %6 {
        sv.assert %174, immediate label "assert__assert_105"
      }
      sv.if %193 {
        sv.assert %192, immediate label "assert__assert_107"
      }
      sv.if %193 {
        sv.assert %194, immediate label "assert__assert_109"
      }
      sv.if %6 {
        sv.assert %202, immediate label "assert__assert_111"
      }
    }
    %203 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %204 = comb.mux bin %80, %c0_i32, %203 : i32
    hw.output
  }
  hw.module private @TLBusBypassBar(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_address : i9, out auto_out_1_a_bits_data : i32, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_param : i2, in %auto_out_1_d_bits_size : i2, in %auto_out_1_d_bits_source : i1, in %auto_out_1_d_bits_sink : i1, in %auto_out_1_d_bits_denied : i1, in %auto_out_1_d_bits_data : i32, in %auto_out_1_d_bits_corrupt : i1, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_address : i128, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_size : i2, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_corrupt : i1, in %io_bypass : i1) {
    %c0_i119 = hw.constant 0 : i119
    %true = hw.constant true
    %c0_i32 = hw.constant 0 : i32
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false {sv.namehint = "_next_flight_T_7"}
    hw.instance "monitor" @TLMonitor_25(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %38: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %43: i3, io_in_d_bits_param: %44: i2, io_in_d_bits_size: %45: i2, io_in_d_bits_source: %47: i1, io_in_d_bits_sink: %49: i1, io_in_d_bits_denied: %50: i1, io_in_d_bits_corrupt: %52: i1) -> ()
    %in_reset = seq.firreg %false clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %bypass_reg = seq.firreg %25 clock %clock {firrtl.random_init_start = 1 : ui64} : i1
    %0 = comb.mux bin %in_reset, %io_bypass, %bypass_reg {sv.namehint = "bypass"} : i1
    %flight = seq.firreg %22 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 2 : ui64} : i2
    %1 = comb.and bin %38, %auto_in_a_valid {sv.namehint = "done"} : i1
    %counter = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %2 = comb.add %counter, %true {sv.namehint = "_counter1_T"} : i1
    %3 = comb.xor bin %counter, %true {sv.namehint = "a_first"} : i1
    %4 = comb.xor %1, %true : i1
    %5 = comb.or %4, %2 : i1
    %6 = comb.and %5, %counter : i1
    %7 = comb.and bin %auto_in_d_ready, %42 {sv.namehint = "d_dec"} : i1
    %counter_3 = seq.firreg %12 clock %clock reset sync %reset, %false {firrtl.random_init_start = 7 : ui64} : i1
    %8 = comb.add %counter_3, %true {sv.namehint = "_counter1_T_3"} : i1
    %9 = comb.xor bin %counter_3, %true {sv.namehint = "d_first"} : i1
    %10 = comb.xor %7, %true : i1
    %11 = comb.or %10, %8 : i1
    %12 = comb.and %11, %counter_3 : i1
    %13 = comb.extract %43 from 2 : (i3) -> i1
    %14 = comb.extract %43 from 1 : (i3) -> i1
    %15 = comb.xor bin %14, %true : i1
    %16 = comb.and bin %1, %3 {sv.namehint = "a_inc"} : i1
    %17 = comb.and bin %7, %9, %13, %15 {sv.namehint = "d_inc"} : i1
    %18 = comb.concat %false, %17 : i1, i1
    %19 = comb.concat %false, %16 : i1, i1
    %20 = comb.add bin %flight, %18, %19 {sv.namehint = "_next_flight_T_4"} : i2
    %21 = comb.concat %false, %7 : i1, i1
    %22 = comb.sub bin %20, %21 {sv.namehint = "_next_flight_T_10"} : i2
    %23 = comb.icmp bin eq %22, %c0_i2 : i2
    %24 = comb.or bin %in_reset, %23 : i1
    %25 = comb.mux bin %24, %io_bypass, %bypass_reg : i1
    %26 = comb.icmp bin ne %0, %io_bypass {sv.namehint = "_stall_T"} : i1
    %stall_counter = seq.firreg %31 clock %clock reset sync %reset, %false {firrtl.random_init_start = 9 : ui64} : i1
    %27 = comb.add %stall_counter, %true {sv.namehint = "_stall_counter1_T"} : i1
    %28 = comb.xor bin %stall_counter, %true {sv.namehint = "stall_first"} : i1
    %29 = comb.xor %1, %true : i1
    %30 = comb.or %29, %27 : i1
    %31 = comb.and %30, %stall_counter : i1
    %32 = comb.and bin %26, %28 {sv.namehint = "stall"} : i1
    %33 = comb.xor bin %32, %true {sv.namehint = "_nodeIn_a_ready_T"} : i1
    %34 = comb.and bin %33, %auto_in_a_valid, %0 {sv.namehint = "nodeOut_a_valid"} : i1
    %35 = comb.xor bin %0, %true {sv.namehint = "_nodeOut_d_ready_T_1"} : i1
    %36 = comb.and bin %33, %auto_in_a_valid, %35 {sv.namehint = "x1_nodeOut_a_valid"} : i1
    %37 = comb.mux bin %0, %auto_out_0_a_ready, %auto_out_1_a_ready {sv.namehint = "_nodeIn_a_ready_T_1"} : i1
    %38 = comb.and bin %33, %37 {sv.namehint = "nodeIn_a_ready"} : i1
    %39 = comb.concat %c0_i119, %auto_in_a_bits_address {sv.namehint = "nodeOut_a_bits_address"} : i119, i9
    %40 = comb.and bin %auto_in_d_ready, %0 {sv.namehint = "nodeOut_d_ready"} : i1
    %41 = comb.and bin %auto_in_d_ready, %35 {sv.namehint = "x1_nodeOut_d_ready"} : i1
    %42 = comb.mux bin %0, %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "nodeIn_d_valid"} : i1
    %43 = comb.mux bin %0, %auto_out_0_d_bits_opcode, %auto_out_1_d_bits_opcode {sv.namehint = "nodeIn_d_bits_opcode"} : i3
    %44 = comb.mux bin %0, %c0_i2, %auto_out_1_d_bits_param {sv.namehint = "nodeIn_d_bits_param"} : i2
    %45 = comb.mux bin %0, %auto_out_0_d_bits_size, %auto_out_1_d_bits_size {sv.namehint = "nodeIn_d_bits_size"} : i2
    %46 = comb.xor %0, %true : i1
    %47 = comb.and %46, %auto_out_1_d_bits_source {sv.namehint = "nodeIn_d_bits_source"} : i1
    %48 = comb.xor %0, %true : i1
    %49 = comb.and %48, %auto_out_1_d_bits_sink {sv.namehint = "nodeIn_d_bits_sink"} : i1
    %50 = comb.mux bin %0, %auto_out_0_d_bits_denied, %auto_out_1_d_bits_denied {sv.namehint = "nodeIn_d_bits_denied"} : i1
    %51 = comb.mux bin %0, %c0_i32, %auto_out_1_d_bits_data {sv.namehint = "nodeIn_d_bits_data"} : i32
    %52 = comb.mux bin %0, %auto_out_0_d_bits_corrupt, %auto_out_1_d_bits_corrupt {sv.namehint = "nodeIn_d_bits_corrupt"} : i1
    hw.output %38, %42, %43, %44, %45, %49, %50, %51, %52, %36, %auto_in_a_bits_opcode, %auto_in_a_bits_address, %auto_in_a_bits_data, %41, %34, %auto_in_a_bits_opcode, %39, %40 : i1, i1, i3, i2, i2, i1, i1, i32, i1, i1, i3, i9, i32, i1, i1, i3, i128, i1
  }
  hw.module private @TLMonitor_26(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i128, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i3 = hw.constant -1 : i3
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i128) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.xor bin %reset, %true : i1
    %7 = comb.and bin %io_in_a_valid, %5, %6 : i1
    %8 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %9 = comb.and bin %io_in_a_valid, %8, %6 : i1
    %10 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %11 = comb.and bin %io_in_a_valid, %10, %6 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12, %6 : i1
    %14 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %15 = comb.and bin %io_in_a_valid, %14, %6 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16, %6 : i1
    %18 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %19 = comb.and bin %io_in_a_valid, %18, %6 : i1
    %20 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %21 = comb.and bin %io_in_a_valid, %20, %6 : i1
    %22 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %23 = comb.and bin %io_in_d_valid, %6 : i1
    %24 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %25 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %26 = comb.and bin %io_in_d_valid, %24, %6 : i1
    %27 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %28 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %29 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %30 = comb.and bin %io_in_d_valid, %29, %6 : i1
    %31 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %32 = comb.and bin %io_in_d_valid, %31, %6 : i1
    %33 = comb.or bin %28, %io_in_d_bits_corrupt : i1
    %34 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %35 = comb.and bin %io_in_d_valid, %34, %6 : i1
    %36 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %37 = comb.and bin %io_in_d_valid, %36, %6 : i1
    %38 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %39 = comb.and bin %io_in_d_valid, %38, %6 : i1
    %40 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %45 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %41 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %42 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %43 = comb.xor %40, %true : i1
    %44 = comb.or %43, %41 : i1
    %45 = comb.and %44, %a_first_counter : i1
    %opcode = seq.firreg %50 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %51 clock %clock {firrtl.random_init_start = 10 : ui64} : i128
    %46 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %47 = comb.and bin %io_in_a_valid, %a_first_counter, %6 : i1
    %48 = comb.icmp bin eq %io_in_a_bits_address, %address : i128
    %49 = comb.and bin %40, %42 : i1
    %50 = comb.mux bin %49, %io_in_a_bits_opcode, %opcode : i3
    %51 = comb.mux bin %49, %io_in_a_bits_address, %address : i128
    %52 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %57 clock %clock reset sync %reset, %false {firrtl.random_init_start = 138 : ui64} : i1
    %53 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %54 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %55 = comb.xor %52, %true : i1
    %56 = comb.or %55, %53 : i1
    %57 = comb.and %56, %d_first_counter : i1
    %opcode_1 = seq.firreg %63 clock %clock {firrtl.random_init_start = 139 : ui64} : i3
    %size_1 = seq.firreg %64 clock %clock {firrtl.random_init_start = 144 : ui64} : i2
    %denied = seq.firreg %65 clock %clock {firrtl.random_init_start = 148 : ui64} : i1
    %58 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %59 = comb.and bin %io_in_d_valid, %d_first_counter, %6 : i1
    %60 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %61 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %62 = comb.and bin %52, %54 : i1
    %63 = comb.mux bin %62, %io_in_d_bits_opcode, %opcode_1 : i3
    %64 = comb.mux bin %62, %io_in_d_bits_size, %size_1 : i2
    %65 = comb.mux bin %62, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %117 clock %clock reset sync %reset, %false {firrtl.random_init_start = 149 : ui64} : i1
    %inflight_opcodes = seq.firreg %120 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 150 : ui64} : i4
    %inflight_sizes = seq.firreg %123 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 154 : ui64} : i4
    %a_first_counter_1 = seq.firreg %70 clock %clock reset sync %reset, %false {firrtl.random_init_start = 158 : ui64} : i1
    %66 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %67 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %68 = comb.xor %40, %true : i1
    %69 = comb.or %68, %66 : i1
    %70 = comb.and %69, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %75 clock %clock reset sync %reset, %false {firrtl.random_init_start = 159 : ui64} : i1
    %71 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %72 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %73 = comb.xor %52, %true : i1
    %74 = comb.or %73, %71 : i1
    %75 = comb.and %74, %d_first_counter_1 : i1
    %76 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %77 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %78 = comb.concat %false, %77 {sv.namehint = "a_size_lookup"} : i1, i3
    %79 = comb.and bin %io_in_a_valid, %67 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %80 = comb.and bin %40, %67 {sv.namehint = "a_set"} : i1
    %81 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %82 = comb.mux bin %80, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %83 = comb.mux bin %80, %81, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %84 = comb.concat %false, %82 : i1, i3
    %85 = comb.mux bin %80, %84, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %86 = comb.xor bin %inflight, %true : i1
    %87 = comb.and bin %80, %6 : i1
    %88 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %89 = comb.and bin %io_in_d_valid, %72 : i1
    %90 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %91 = comb.and bin %52, %72, %90 {sv.namehint = "d_clr"} : i1
    %92 = comb.replicate %91 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %93 = comb.and bin %89, %90 : i1
    %94 = comb.or bin %inflight, %79 : i1
    %95 = comb.and bin %93, %6 : i1
    %96 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %97 = comb.icmp bin eq %io_in_d_bits_opcode, %96 : i3
    %98 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %99 = comb.icmp bin eq %io_in_d_bits_opcode, %98 : i3
    %100 = comb.or bin %97, %99 : i1
    %101 = comb.and bin %93, %79, %6 : i1
    %102 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %103 = comb.xor bin %79, %true : i1
    %104 = hw.array_get %1[%76] : !hw.array<8xi3>, i3
    %105 = comb.icmp bin eq %io_in_d_bits_opcode, %104 : i3
    %106 = hw.array_get %0[%76] : !hw.array<8xi3>, i3
    %107 = comb.icmp bin eq %io_in_d_bits_opcode, %106 : i3
    %108 = comb.or bin %105, %107 : i1
    %109 = comb.and bin %93, %103, %6 : i1
    %110 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %111 = comb.icmp bin eq %110, %78 : i4
    %112 = comb.xor bin %io_in_d_ready, %true : i1
    %113 = comb.or bin %112, %io_in_a_ready : i1
    %114 = comb.and bin %89, %67, %io_in_a_valid, %90, %6 : i1
    %115 = comb.or bin %inflight, %80 {sv.namehint = "_inflight_T"} : i1
    %116 = comb.xor bin %91, %true {sv.namehint = "_inflight_T_1"} : i1
    %117 = comb.and bin %115, %116 {sv.namehint = "_inflight_T_2"} : i1
    %118 = comb.or bin %inflight_opcodes, %83 {sv.namehint = "_inflight_opcodes_T"} : i4
    %119 = comb.xor bin %92, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %120 = comb.and bin %118, %119 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %121 = comb.or bin %inflight_sizes, %85 {sv.namehint = "_inflight_sizes_T"} : i4
    %122 = comb.xor bin %92, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %123 = comb.and bin %121, %122 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %129 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 160 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %124 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %125 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %126 = comb.or bin %86, %124, %125 : i1
    %127 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %128 = comb.or bin %40, %52 : i1
    %129 = comb.mux bin %128, %c0_i32, %127 : i32
    %inflight_1 = seq.firreg %142 clock %clock reset sync %reset, %false {firrtl.random_init_start = 192 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %144 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 197 : ui64} : i4
    %d_first_counter_2 = seq.firreg %134 clock %clock reset sync %reset, %false {firrtl.random_init_start = 202 : ui64} : i1
    %130 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %131 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %132 = comb.xor %52, %true : i1
    %133 = comb.or %132, %130 : i1
    %134 = comb.and %133, %d_first_counter_2 : i1
    %135 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %136 = comb.concat %false, %135 {sv.namehint = "c_size_lookup"} : i1, i3
    %137 = comb.and bin %52, %131, %88 {sv.namehint = "d_clr_1"} : i1
    %138 = comb.replicate %137 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %139 = comb.and bin %io_in_d_valid, %131, %88, %6 : i1
    %140 = comb.icmp bin eq %110, %136 : i4
    %141 = comb.xor bin %137, %true {sv.namehint = "_inflight_T_4"} : i1
    %142 = comb.and bin %inflight_1, %141 {sv.namehint = "_inflight_T_5"} : i1
    %143 = comb.xor bin %138, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %144 = comb.and bin %inflight_sizes_1, %143 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %150 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 203 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %145 = comb.xor bin %inflight_1, %true : i1
    %146 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %147 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %148 = comb.or bin %145, %146, %147 : i1
    sv.always posedge %2 {
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %7 {
        sv.assert %4, immediate label "assert__assert_6"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %9 {
        sv.assert %4, immediate label "assert__assert_14"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_16"
      }
      sv.if %11 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %13 {
        sv.assert %4, immediate label "assert__assert_28"
      }
      sv.if %15 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %15 {
        sv.assert %4, immediate label "assert__assert_33"
      }
      sv.if %17 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %17 {
        sv.assert %4, immediate label "assert__assert_38"
      }
      sv.if %19 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %19 {
        sv.assert %4, immediate label "assert__assert_43"
      }
      sv.if %21 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %21 {
        sv.assert %4, immediate label "assert__assert_48"
      }
      sv.if %23 {
        sv.assert %22, immediate label "assert__assert_52"
      }
      sv.if %26 {
        sv.assert %25, immediate label "assert__assert_54"
      }
      sv.if %26 {
        sv.assert %27, immediate label "assert__assert_56"
      }
      sv.if %26 {
        sv.assert %28, immediate label "assert__assert_57"
      }
      sv.if %30 {
        sv.assert %25, immediate label "assert__assert_60"
      }
      sv.if %30 {
        sv.assert %27, immediate label "assert__assert_63"
      }
      sv.if %32 {
        sv.assert %25, immediate label "assert__assert_67"
      }
      sv.if %32 {
        sv.assert %33, immediate label "assert__assert_70"
      }
      sv.if %35 {
        sv.assert %27, immediate label "assert__assert_74"
      }
      sv.if %37 {
        sv.assert %33, immediate label "assert__assert_78"
      }
      sv.if %39 {
        sv.assert %27, immediate label "assert__assert_82"
      }
      sv.if %47 {
        sv.assert %46, immediate label "assert__assert_87"
      }
      sv.if %47 {
        sv.assert %48, immediate label "assert__assert_91"
      }
      sv.if %59 {
        sv.assert %58, immediate label "assert__assert_92"
      }
      sv.if %59 {
        sv.assert %60, immediate label "assert__assert_94"
      }
      sv.if %59 {
        sv.assert %61, immediate label "assert__assert_97"
      }
      sv.if %87 {
        sv.assert %86, immediate label "assert__assert_98"
      }
      sv.if %95 {
        sv.assert %94, immediate label "assert__assert_99"
      }
      sv.if %101 {
        sv.assert %100, immediate label "assert__assert_100"
      }
      sv.if %101 {
        sv.assert %102, immediate label "assert__assert_101"
      }
      sv.if %109 {
        sv.assert %108, immediate label "assert__assert_102"
      }
      sv.if %109 {
        sv.assert %111, immediate label "assert__assert_103"
      }
      sv.if %114 {
        sv.assert %113, immediate label "assert__assert_104"
      }
      sv.if %6 {
        sv.assert %126, immediate label "assert__assert_105"
      }
      sv.if %139 {
        sv.assert %inflight_1, immediate label "assert__assert_107"
      }
      sv.if %139 {
        sv.assert %140, immediate label "assert__assert_109"
      }
      sv.if %6 {
        sv.assert %148, immediate label "assert__assert_111"
      }
    }
    %149 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %150 = comb.mux bin %52, %c0_i32, %149 : i32
    hw.output
  }
  hw.module private @TLError_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i128, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_corrupt : i1) {
    %0 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i3 = hw.constant 0 : i3
    %false = hw.constant false
    %true = hw.constant true
    %c-4_i3 = hw.constant -4 : i3
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_26(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %11: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i128, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %29: i1, io_in_d_bits_opcode: %32: i3, io_in_d_bits_size: %31: i2, io_in_d_bits_denied: %24: i1, io_in_d_bits_corrupt: %30: i1) -> ()
    %idle = seq.firreg %17 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %2 = comb.and bin %26, %12 {sv.namehint = "done"} : i1
    %3 = comb.extract %13 from 0 {sv.namehint = "opdata_1"} : (i3) -> i1
    %counter = seq.firreg %8 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %4 = comb.add %counter, %true {sv.namehint = "_counter1_T"} : i1
    %5 = comb.xor bin %counter, %true {sv.namehint = "da_first"} : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.or %6, %4 : i1
    %8 = comb.and %7, %counter : i1
    %9 = comb.or bin %idle, %5 : i1
    %10 = comb.xor bin %reset, %true : i1
    %11 = comb.and bin %26, %idle {sv.namehint = "nodeIn_a_ready"} : i1
    %12 = comb.and bin %auto_in_a_valid, %idle {sv.namehint = "winner_1"} : i1
    %13 = hw.array_get %0[%auto_in_a_bits_opcode] {sv.namehint = "da_bits_opcode"} : !hw.array<8xi3>, i3
    %14 = comb.icmp bin eq %13, %c-4_i3 : i3
    %15 = comb.and bin %2, %14 : i1
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %idle : i1
    %beatsLeft = seq.firreg %23 clock %clock reset sync %reset, %false {firrtl.random_init_start = 5 : ui64} : i1
    %18 = comb.xor bin %beatsLeft, %true {sv.namehint = "idle_1"} : i1
    %19 = comb.and bin %18, %auto_in_d_ready {sv.namehint = "latch"} : i1
    sv.always posedge %1 {
      sv.if %10 {
        sv.assert %9, immediate label "assert__assert"
      }
    }
    %20 = comb.and bin %auto_in_d_ready, %29 {sv.namehint = "_beatsLeft_T"} : i1
    %21 = comb.sub bin %beatsLeft, %20 {sv.namehint = "_beatsLeft_T_1"} : i1
    %22 = comb.xor %19, %true : i1
    %23 = comb.and %22, %21 {sv.namehint = "_beatsLeft_T_3"} : i1
    %state_1 = seq.firreg %24 clock %clock reset sync %reset, %false {firrtl.random_init_start = 7 : ui64} : i1
    %24 = comb.mux bin %beatsLeft, %state_1, %12 {sv.namehint = "muxState_1"} : i1
    %25 = comb.or %18, %state_1 {sv.namehint = "allowed_1"} : i1
    %26 = comb.and bin %auto_in_d_ready, %25 {sv.namehint = "da_ready"} : i1
    %27 = comb.xor %beatsLeft, %true : i1
    %28 = comb.or %27, %state_1 : i1
    %29 = comb.and %28, %12 {sv.namehint = "nodeIn_d_valid"} : i1
    %30 = comb.and %24, %3 {sv.namehint = "_nodeIn_d_bits_T_2"} : i1
    %31 = comb.concat %24, %false {sv.namehint = "_nodeIn_d_bits_T_17"} : i1, i1
    %32 = comb.mux bin %24, %13, %c0_i3 {sv.namehint = "_nodeIn_d_bits_T_22"} : i3
    hw.output %11, %29, %32, %31, %24, %30 : i1, i1, i3, i2, i1, i1
  }
  hw.module private @TLBusBypass(in %clock : !seq.clock, in %reset : i1, in %auto_node_out_out_a_ready : i1, out auto_node_out_out_a_valid : i1, out auto_node_out_out_a_bits_opcode : i3, out auto_node_out_out_a_bits_address : i9, out auto_node_out_out_a_bits_data : i32, out auto_node_out_out_d_ready : i1, in %auto_node_out_out_d_valid : i1, in %auto_node_out_out_d_bits_opcode : i3, in %auto_node_out_out_d_bits_param : i2, in %auto_node_out_out_d_bits_size : i2, in %auto_node_out_out_d_bits_source : i1, in %auto_node_out_out_d_bits_sink : i1, in %auto_node_out_out_d_bits_denied : i1, in %auto_node_out_out_d_bits_data : i32, in %auto_node_out_out_d_bits_corrupt : i1, out auto_node_in_in_a_ready : i1, in %auto_node_in_in_a_valid : i1, in %auto_node_in_in_a_bits_opcode : i3, in %auto_node_in_in_a_bits_address : i9, in %auto_node_in_in_a_bits_data : i32, in %auto_node_in_in_d_ready : i1, out auto_node_in_in_d_valid : i1, out auto_node_in_in_d_bits_opcode : i3, out auto_node_in_in_d_bits_param : i2, out auto_node_in_in_d_bits_size : i2, out auto_node_in_in_d_bits_sink : i1, out auto_node_in_in_d_bits_denied : i1, out auto_node_in_in_d_bits_data : i32, out auto_node_in_in_d_bits_corrupt : i1, in %io_bypass : i1) {
    %bar.auto_in_a_ready, %bar.auto_in_d_valid, %bar.auto_in_d_bits_opcode, %bar.auto_in_d_bits_param, %bar.auto_in_d_bits_size, %bar.auto_in_d_bits_sink, %bar.auto_in_d_bits_denied, %bar.auto_in_d_bits_data, %bar.auto_in_d_bits_corrupt, %bar.auto_out_1_a_valid, %bar.auto_out_1_a_bits_opcode, %bar.auto_out_1_a_bits_address, %bar.auto_out_1_a_bits_data, %bar.auto_out_1_d_ready, %bar.auto_out_0_a_valid, %bar.auto_out_0_a_bits_opcode, %bar.auto_out_0_a_bits_address, %bar.auto_out_0_d_ready = hw.instance "bar" @TLBusBypassBar(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_node_in_in_a_valid: i1, auto_in_a_bits_opcode: %auto_node_in_in_a_bits_opcode: i3, auto_in_a_bits_address: %auto_node_in_in_a_bits_address: i9, auto_in_a_bits_data: %auto_node_in_in_a_bits_data: i32, auto_in_d_ready: %auto_node_in_in_d_ready: i1, auto_out_1_a_ready: %auto_node_out_out_a_ready: i1, auto_out_1_d_valid: %auto_node_out_out_d_valid: i1, auto_out_1_d_bits_opcode: %auto_node_out_out_d_bits_opcode: i3, auto_out_1_d_bits_param: %auto_node_out_out_d_bits_param: i2, auto_out_1_d_bits_size: %auto_node_out_out_d_bits_size: i2, auto_out_1_d_bits_source: %auto_node_out_out_d_bits_source: i1, auto_out_1_d_bits_sink: %auto_node_out_out_d_bits_sink: i1, auto_out_1_d_bits_denied: %auto_node_out_out_d_bits_denied: i1, auto_out_1_d_bits_data: %auto_node_out_out_d_bits_data: i32, auto_out_1_d_bits_corrupt: %auto_node_out_out_d_bits_corrupt: i1, auto_out_0_a_ready: %error.auto_in_a_ready: i1, auto_out_0_d_valid: %error.auto_in_d_valid: i1, auto_out_0_d_bits_opcode: %error.auto_in_d_bits_opcode: i3, auto_out_0_d_bits_size: %error.auto_in_d_bits_size: i2, auto_out_0_d_bits_denied: %error.auto_in_d_bits_denied: i1, auto_out_0_d_bits_corrupt: %error.auto_in_d_bits_corrupt: i1, io_bypass: %io_bypass: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_address: i9, auto_out_1_a_bits_data: i32, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_address: i128, auto_out_0_d_ready: i1) {sv.namehint = "nodeInIn_d_valid"}
    %error.auto_in_a_ready, %error.auto_in_d_valid, %error.auto_in_d_bits_opcode, %error.auto_in_d_bits_size, %error.auto_in_d_bits_denied, %error.auto_in_d_bits_corrupt = hw.instance "error" @TLError_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %bar.auto_out_0_a_valid: i1, auto_in_a_bits_opcode: %bar.auto_out_0_a_bits_opcode: i3, auto_in_a_bits_address: %bar.auto_out_0_a_bits_address: i128, auto_in_d_ready: %bar.auto_out_0_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_corrupt: i1) {sv.namehint = "error.auto_in_d_valid"}
    hw.output %bar.auto_out_1_a_valid, %bar.auto_out_1_a_bits_opcode, %bar.auto_out_1_a_bits_address, %bar.auto_out_1_a_bits_data, %bar.auto_out_1_d_ready, %bar.auto_in_a_ready, %bar.auto_in_d_valid, %bar.auto_in_d_bits_opcode, %bar.auto_in_d_bits_param, %bar.auto_in_d_bits_size, %bar.auto_in_d_bits_sink, %bar.auto_in_d_bits_denied, %bar.auto_in_d_bits_data, %bar.auto_in_d_bits_corrupt : i1, i3, i9, i32, i1, i1, i1, i3, i2, i2, i1, i1, i32, i1
  }
  hw.module private @TLMonitor_27(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i2 = hw.constant -1 : i2
    %c-5_i4 = hw.constant -5 : i4
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %true = hw.constant true
    %c0_i32 = hw.constant 0 : i32
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i3 = hw.constant -1 : i3
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.xor bin %reset, %true : i1
    %7 = comb.and bin %io_in_a_valid, %5, %6 : i1
    %8 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %9 = comb.and bin %io_in_a_valid, %8, %6 : i1
    %10 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %11 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %12 = comb.icmp bin eq %11, %c0_i3 : i3
    %13 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %14 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %15 = comb.xor bin %14, %c-15_i5 : i5
    %16 = comb.extract %15 from 2 : (i5) -> i3
    %17 = comb.extract %15 from 0 : (i5) -> i1
    %18 = comb.concat %13, %16, %17 : i2, i3, i1
    %19 = comb.icmp bin eq %18, %c0_i6 : i6
    %20 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %21 = comb.xor bin %20, %c-5_i4 : i4
    %22 = comb.concat %13, %21 : i2, i4
    %23 = comb.icmp bin eq %22, %c0_i6 : i6
    %24 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %25 = comb.xor bin %24, %c-1_i2 : i2
    %26 = comb.concat %13, %25 : i2, i2
    %27 = comb.icmp bin eq %26, %c0_i4 : i4
    %28 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %29 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.concat %28, %30 : i1, i1
    %32 = comb.icmp bin eq %31, %c0_i2 : i2
    %33 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %34 = comb.or bin %12, %19, %23, %27, %32, %33 : i1
    %35 = comb.and bin %io_in_a_valid, %10, %6 : i1
    %36 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %37 = comb.and bin %io_in_a_valid, %36, %6 : i1
    %38 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %39 = comb.and bin %io_in_a_valid, %38, %6 : i1
    %40 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %41 = comb.and bin %io_in_a_valid, %40, %6 : i1
    %42 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %43 = comb.and bin %io_in_a_valid, %42, %6 : i1
    %44 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %45 = comb.and bin %io_in_a_valid, %44, %6 : i1
    %46 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %47 = comb.and bin %io_in_d_valid, %6 : i1
    %48 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %49 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %50 = comb.and bin %io_in_d_valid, %49, %6 : i1
    %51 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %52 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %53 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %54 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %55 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %56 = comb.and bin %io_in_d_valid, %55, %6 : i1
    %57 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %58 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %59 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %60 = comb.and bin %io_in_d_valid, %59, %6 : i1
    %61 = comb.or bin %54, %io_in_d_bits_corrupt : i1
    %62 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %63 = comb.and bin %io_in_d_valid, %62, %6 : i1
    %64 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %65 = comb.and bin %io_in_d_valid, %64, %6 : i1
    %66 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %67 = comb.and bin %io_in_d_valid, %66, %6 : i1
    %68 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %73 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %69 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %70 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %71 = comb.xor %68, %true : i1
    %72 = comb.or %71, %69 : i1
    %73 = comb.and %72, %a_first_counter : i1
    %opcode = seq.firreg %78 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %79 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %74 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %75 = comb.and bin %io_in_a_valid, %a_first_counter, %6 : i1
    %76 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %77 = comb.and bin %68, %70 : i1
    %78 = comb.mux bin %77, %io_in_a_bits_opcode, %opcode : i3
    %79 = comb.mux bin %77, %io_in_a_bits_address, %address : i9
    %80 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %85 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %81 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %82 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %83 = comb.xor %80, %true : i1
    %84 = comb.or %83, %81 : i1
    %85 = comb.and %84, %d_first_counter : i1
    %opcode_1 = seq.firreg %94 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %95 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %96 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %97 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %sink = seq.firreg %98 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %99 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %86 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %87 = comb.and bin %io_in_d_valid, %d_first_counter, %6 : i1
    %88 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %89 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %90 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %91 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %92 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %93 = comb.and bin %80, %82 : i1
    %94 = comb.mux bin %93, %io_in_d_bits_opcode, %opcode_1 : i3
    %95 = comb.mux bin %93, %io_in_d_bits_param, %param_1 : i2
    %96 = comb.mux bin %93, %io_in_d_bits_size, %size_1 : i2
    %97 = comb.mux bin %93, %io_in_d_bits_source, %source_1 : i1
    %98 = comb.mux bin %93, %io_in_d_bits_sink, %sink : i1
    %99 = comb.mux bin %93, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %171 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %174 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %177 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %104 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %100 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %101 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %102 = comb.xor %68, %true : i1
    %103 = comb.or %102, %100 : i1
    %104 = comb.and %103, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %109 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %105 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %106 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %107 = comb.xor %80, %true : i1
    %108 = comb.or %107, %105 : i1
    %109 = comb.and %108, %d_first_counter_1 : i1
    %110 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %111 = comb.shru bin %inflight_opcodes, %110 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %112 = comb.extract %111 from 1 : (i4) -> i3
    %113 = comb.shru bin %inflight_sizes, %110 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %114 = comb.extract %113 from 1 : (i4) -> i3
    %115 = comb.concat %false, %114 {sv.namehint = "a_size_lookup"} : i1, i3
    %116 = comb.and bin %io_in_a_valid, %101 {sv.namehint = "a_set_wo_ready"} : i1
    %117 = comb.and bin %68, %101 {sv.namehint = "a_set"} : i1
    %118 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %119 = comb.mux bin %117, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %120 = comb.mux bin %117, %118, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %121 = comb.concat %false, %119 : i1, i3
    %122 = comb.mux bin %117, %121, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %123 = comb.xor bin %inflight, %true : i1
    %124 = comb.and bin %117, %6 : i1
    %125 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %126 = comb.and bin %io_in_d_valid, %106 : i1
    %127 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %128 = comb.and bin %126, %127 : i1
    %129 = comb.xor %io_in_d_bits_source, %true : i1
    %130 = comb.and %128, %129 {sv.namehint = "d_clr_wo_ready"} : i1
    %131 = comb.and bin %80, %106, %127 : i1
    %132 = comb.xor %io_in_d_bits_source, %true : i1
    %133 = comb.and %131, %132 {sv.namehint = "d_clr"} : i1
    %134 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %135 = comb.shl bin %c15_i31, %134 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %136 = comb.extract %135 from 0 : (i31) -> i4
    %137 = comb.mux bin %131, %136, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %138 = comb.shl bin %c15_i31, %134 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %139 = comb.extract %138 from 0 : (i31) -> i4
    %140 = comb.mux bin %131, %139, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %141 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %142 = comb.and bin %116, %141 {sv.namehint = "same_cycle_resp"} : i1
    %143 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %144 = comb.or bin %143, %142 : i1
    %145 = comb.and bin %128, %6 : i1
    %146 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %147 = comb.icmp bin eq %io_in_d_bits_opcode, %146 : i3
    %148 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %148 : i3
    %150 = comb.or bin %147, %149 : i1
    %151 = comb.and bin %128, %142, %6 : i1
    %152 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %153 = comb.xor bin %142, %true : i1
    %154 = hw.array_get %1[%112] : !hw.array<8xi3>, i3
    %155 = comb.icmp bin eq %io_in_d_bits_opcode, %154 : i3
    %156 = hw.array_get %0[%112] : !hw.array<8xi3>, i3
    %157 = comb.icmp bin eq %io_in_d_bits_opcode, %156 : i3
    %158 = comb.or bin %155, %157 : i1
    %159 = comb.and bin %128, %153, %6 : i1
    %160 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %161 = comb.icmp bin eq %160, %115 : i4
    %162 = comb.xor bin %io_in_d_bits_source, %true : i1
    %163 = comb.xor bin %io_in_d_ready, %true : i1
    %164 = comb.or bin %163, %io_in_a_ready : i1
    %165 = comb.and bin %126, %101, %io_in_a_valid, %162, %127, %6 : i1
    %166 = comb.icmp bin ne %116, %130 : i1
    %167 = comb.xor bin %116, %true : i1
    %168 = comb.or bin %166, %167 : i1
    %169 = comb.or bin %inflight, %117 {sv.namehint = "_inflight_T"} : i1
    %170 = comb.xor bin %133, %true {sv.namehint = "_inflight_T_1"} : i1
    %171 = comb.and bin %169, %170 {sv.namehint = "_inflight_T_2"} : i1
    %172 = comb.or bin %inflight_opcodes, %120 {sv.namehint = "_inflight_opcodes_T"} : i4
    %173 = comb.xor bin %137, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %174 = comb.and bin %172, %173 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %175 = comb.or bin %inflight_sizes, %122 {sv.namehint = "_inflight_sizes_T"} : i4
    %176 = comb.xor bin %140, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %177 = comb.and bin %175, %176 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %183 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %178 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %179 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %180 = comb.or bin %123, %178, %179 : i1
    %181 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %182 = comb.or bin %68, %80 : i1
    %183 = comb.mux bin %182, %c0_i32, %181 : i32
    %inflight_1 = seq.firreg %202 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %204 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %188 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %184 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %185 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %186 = comb.xor %80, %true : i1
    %187 = comb.or %186, %184 : i1
    %188 = comb.and %187, %d_first_counter_2 : i1
    %189 = comb.shru bin %inflight_sizes_1, %110 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %190 = comb.extract %189 from 1 : (i4) -> i3
    %191 = comb.concat %false, %190 {sv.namehint = "c_size_lookup"} : i1, i3
    %192 = comb.and bin %80, %185, %125 : i1
    %193 = comb.xor %io_in_d_bits_source, %true : i1
    %194 = comb.and %192, %193 {sv.namehint = "d_clr_1"} : i1
    %195 = comb.shl bin %c15_i31, %134 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %196 = comb.extract %195 from 0 : (i31) -> i4
    %197 = comb.mux bin %192, %196, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %198 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %199 = comb.and bin %io_in_d_valid, %185, %125, %6 : i1
    %200 = comb.icmp bin eq %160, %191 : i4
    %201 = comb.xor bin %194, %true {sv.namehint = "_inflight_T_4"} : i1
    %202 = comb.and bin %inflight_1, %201 {sv.namehint = "_inflight_T_5"} : i1
    %203 = comb.xor bin %197, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %204 = comb.and bin %inflight_sizes_1, %203 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %210 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %205 = comb.xor bin %inflight_1, %true : i1
    %206 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %207 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %208 = comb.or bin %205, %206, %207 : i1
    sv.always posedge %2 {
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %7 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %7 {
        sv.assert %4, immediate label "assert__assert_6"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %9 {
        sv.assert %4, immediate label "assert__assert_14"
      }
      sv.if %9 {
        sv.assert %false, immediate label "assert__assert_16"
      }
      sv.if %35 {
        sv.assert %34, immediate label "assert__assert_20"
      }
      sv.if %35 {
        sv.assert %4, immediate label "assert__assert_22"
      }
      sv.if %37 {
        sv.assert %34, immediate label "assert__assert_26"
      }
      sv.if %37 {
        sv.assert %4, immediate label "assert__assert_28"
      }
      sv.if %39 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %39 {
        sv.assert %4, immediate label "assert__assert_33"
      }
      sv.if %41 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %41 {
        sv.assert %4, immediate label "assert__assert_38"
      }
      sv.if %43 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %43 {
        sv.assert %4, immediate label "assert__assert_43"
      }
      sv.if %45 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %45 {
        sv.assert %4, immediate label "assert__assert_48"
      }
      sv.if %47 {
        sv.assert %46, immediate label "assert__assert_52"
      }
      sv.if %50 {
        sv.assert %48, immediate label "assert__assert_53"
      }
      sv.if %50 {
        sv.assert %51, immediate label "assert__assert_54"
      }
      sv.if %50 {
        sv.assert %52, immediate label "assert__assert_55"
      }
      sv.if %50 {
        sv.assert %53, immediate label "assert__assert_56"
      }
      sv.if %50 {
        sv.assert %54, immediate label "assert__assert_57"
      }
      sv.if %56 {
        sv.assert %48, immediate label "assert__assert_58"
      }
      sv.if %56 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %56 {
        sv.assert %51, immediate label "assert__assert_60"
      }
      sv.if %56 {
        sv.assert %57, immediate label "assert__assert_61"
      }
      sv.if %56 {
        sv.assert %58, immediate label "assert__assert_62"
      }
      sv.if %56 {
        sv.assert %53, immediate label "assert__assert_63"
      }
      sv.if %56 {
        sv.assert %54, immediate label "assert__assert_64"
      }
      sv.if %60 {
        sv.assert %48, immediate label "assert__assert_65"
      }
      sv.if %60 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %60 {
        sv.assert %51, immediate label "assert__assert_67"
      }
      sv.if %60 {
        sv.assert %57, immediate label "assert__assert_68"
      }
      sv.if %60 {
        sv.assert %58, immediate label "assert__assert_69"
      }
      sv.if %60 {
        sv.assert %61, immediate label "assert__assert_70"
      }
      sv.if %60 {
        sv.assert %54, immediate label "assert__assert_71"
      }
      sv.if %63 {
        sv.assert %48, immediate label "assert__assert_72"
      }
      sv.if %63 {
        sv.assert %52, immediate label "assert__assert_73"
      }
      sv.if %63 {
        sv.assert %53, immediate label "assert__assert_74"
      }
      sv.if %63 {
        sv.assert %54, immediate label "assert__assert_75"
      }
      sv.if %65 {
        sv.assert %48, immediate label "assert__assert_76"
      }
      sv.if %65 {
        sv.assert %52, immediate label "assert__assert_77"
      }
      sv.if %65 {
        sv.assert %61, immediate label "assert__assert_78"
      }
      sv.if %65 {
        sv.assert %54, immediate label "assert__assert_79"
      }
      sv.if %67 {
        sv.assert %48, immediate label "assert__assert_80"
      }
      sv.if %67 {
        sv.assert %52, immediate label "assert__assert_81"
      }
      sv.if %67 {
        sv.assert %53, immediate label "assert__assert_82"
      }
      sv.if %67 {
        sv.assert %54, immediate label "assert__assert_83"
      }
      sv.if %75 {
        sv.assert %74, immediate label "assert__assert_87"
      }
      sv.if %75 {
        sv.assert %76, immediate label "assert__assert_91"
      }
      sv.if %87 {
        sv.assert %86, immediate label "assert__assert_92"
      }
      sv.if %87 {
        sv.assert %88, immediate label "assert__assert_93"
      }
      sv.if %87 {
        sv.assert %89, immediate label "assert__assert_94"
      }
      sv.if %87 {
        sv.assert %90, immediate label "assert__assert_95"
      }
      sv.if %87 {
        sv.assert %91, immediate label "assert__assert_96"
      }
      sv.if %87 {
        sv.assert %92, immediate label "assert__assert_97"
      }
      sv.if %124 {
        sv.assert %123, immediate label "assert__assert_98"
      }
      sv.if %145 {
        sv.assert %144, immediate label "assert__assert_99"
      }
      sv.if %151 {
        sv.assert %150, immediate label "assert__assert_100"
      }
      sv.if %151 {
        sv.assert %152, immediate label "assert__assert_101"
      }
      sv.if %159 {
        sv.assert %158, immediate label "assert__assert_102"
      }
      sv.if %159 {
        sv.assert %161, immediate label "assert__assert_103"
      }
      sv.if %165 {
        sv.assert %164, immediate label "assert__assert_104"
      }
      sv.if %6 {
        sv.assert %168, immediate label "assert__assert_105"
      }
      sv.if %6 {
        sv.assert %180, immediate label "assert__assert_106"
      }
      sv.if %199 {
        sv.assert %198, immediate label "assert__assert_108"
      }
      sv.if %199 {
        sv.assert %200, immediate label "assert__assert_110"
      }
      sv.if %6 {
        sv.assert %208, immediate label "assert__assert_113"
      }
    }
    %209 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %210 = comb.mux bin %80, %c0_i32, %209 : i32
    hw.output
  }
  hw.module private @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %false = hw.constant false
    %sync_0 = seq.firreg %sync_1 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i1
    %sync_1 = seq.firreg %sync_2 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %sync_2 = seq.firreg %io_d clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    hw.output %sync_0 : i1
  }
  hw.module private @AsyncResetSynchronizerShiftReg_w1_d3_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @AsyncResetSynchronizerShiftReg_w1_d3_i0_1(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @AsyncValidSync(in %io_in : i1, out io_out : i1, in %clock : !seq.clock, in %reset : i1) {
    %io_out_source_valid_0.io_q = hw.instance "io_out_source_valid_0" @AsyncResetSynchronizerShiftReg_w1_d3_i0_1(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_in: i1) -> (io_q: i1) {sv.namehint = "io_out_source_valid_0.io_q"}
    hw.output %io_out_source_valid_0.io_q : i1
  }
  hw.module private @AsyncQueueSource(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_address : i9, in %io_enq_bits_data : i32, out io_async_mem_0_opcode : i3, out io_async_mem_0_address : i9, out io_async_mem_0_data : i32, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_opcode = seq.firreg %6 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_opcode"} : i3
    %mem_0_address = seq.firreg %7 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "mem_0_address"} : i9
    %mem_0_data = seq.firreg %8 clock %clock {firrtl.random_init_start = 22 : ui64, sv.namehint = "mem_0_data"} : i32
    %0 = comb.and bin %9, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 55 : ui64} : i1
    %1 = comb.add bin %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_opcode, %mem_0_opcode : i3
    %7 = comb.mux bin %0, %io_enq_bits_address, %mem_0_address : i9
    %8 = comb.mux bin %0, %io_enq_bits_data, %mem_0_data : i32
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 56 : ui64} : i1
    %9 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 57 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %11: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %10 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %11 = comb.or bin %reset, %10 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %12 = comb.or bin %reset, %10 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %13 = comb.or bin %reset, %10 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %14 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %9, %mem_0_opcode, %mem_0_address, %mem_0_data, %widx_gray, %source_valid_1.io_out, %14 : i1, i3, i9, i32, i1, i1, i1
  }
  hw.module private @ClockCrossingReg_w43(in %clock : !seq.clock, in %io_d : i43, out io_q : i43, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i43
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i43
    hw.output %cdc_reg : i43
  }
  hw.module private @AsyncQueueSink(in %clock : !seq.clock, in %reset : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i2, out io_deq_bits_source : i1, out io_deq_bits_sink : i1, out io_deq_bits_denied : i1, out io_deq_bits_data : i32, out io_deq_bits_corrupt : i1, in %io_async_mem_0_opcode : i3, in %io_async_mem_0_size : i2, in %io_async_mem_0_source : i1, in %io_async_mem_0_data : i32, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %0 = comb.and bin %io_deq_ready, %14 {sv.namehint = "_ridx_T_1"} : i1
    %ridx_ridx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %1 = comb.add bin %ridx_ridx_bin, %0 {sv.namehint = "_ridx_incremented_T"} : i1
    %2 = comb.and %source_valid.io_out, %1 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %3 = comb.icmp bin ne %2, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %4 = comb.and bin %source_valid.io_out, %3 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w43(clock: %clock: !seq.clock, io_d: %5: i43, io_en: %4: i1) -> (io_q: i43) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %5 = comb.concat %io_async_mem_0_opcode, %c0_i2, %io_async_mem_0_size, %io_async_mem_0_source, %c0_i2, %io_async_mem_0_data, %false {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i3, i2, i2, i1, i2, i32, i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i43) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 1 {sv.namehint = "_io_deq_bits_T_1"} : (i43) -> i32
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 33 {sv.namehint = "_io_deq_bits_T_2"} : (i43) -> i1
    %9 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 34 {sv.namehint = "_io_deq_bits_T_3"} : (i43) -> i1
    %10 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 35 {sv.namehint = "_io_deq_bits_T_4"} : (i43) -> i1
    %11 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 36 {sv.namehint = "_io_deq_bits_T_5"} : (i43) -> i2
    %12 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 38 {sv.namehint = "_io_deq_bits_T_6"} : (i43) -> i2
    %13 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 40 {sv.namehint = "_io_deq_bits_T_7"} : (i43) -> i3
    %valid_reg = seq.firreg %4 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %14 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %16: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %17: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %18: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %15 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %16 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %17 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %18 = comb.or bin %reset, %15 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %19 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %14, %13, %12, %11, %10, %9, %8, %7, %6, %ridx_gray, %sink_valid_1.io_out, %19 : i1, i3, i2, i2, i1, i1, i1, i32, i1, i1, i1, i1
  }
  hw.module private @TLAsyncCrossingSource(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i1, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, out auto_out_a_mem_0_opcode : i3, out auto_out_a_mem_0_address : i9, out auto_out_a_mem_0_data : i32, in %auto_out_a_ridx : i1, out auto_out_a_widx : i1, in %auto_out_a_safe_ridx_valid : i1, out auto_out_a_safe_widx_valid : i1, out auto_out_a_safe_source_reset_n : i1, in %auto_out_a_safe_sink_reset_n : i1, in %auto_out_d_mem_0_opcode : i3, in %auto_out_d_mem_0_size : i2, in %auto_out_d_mem_0_source : i1, in %auto_out_d_mem_0_data : i32, out auto_out_d_ridx : i1, in %auto_out_d_widx : i1, out auto_out_d_safe_ridx_valid : i1, in %auto_out_d_safe_widx_valid : i1, in %auto_out_d_safe_source_reset_n : i1, out auto_out_d_safe_sink_reset_n : i1) {
    hw.instance "monitor" @TLMonitor_27(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %nodeOut_a_source.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %nodeIn_d_sink.io_deq_valid: i1, io_in_d_bits_opcode: %nodeIn_d_sink.io_deq_bits_opcode: i3, io_in_d_bits_param: %nodeIn_d_sink.io_deq_bits_param: i2, io_in_d_bits_size: %nodeIn_d_sink.io_deq_bits_size: i2, io_in_d_bits_source: %nodeIn_d_sink.io_deq_bits_source: i1, io_in_d_bits_sink: %nodeIn_d_sink.io_deq_bits_sink: i1, io_in_d_bits_denied: %nodeIn_d_sink.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %nodeIn_d_sink.io_deq_bits_corrupt: i1) -> ()
    %nodeOut_a_source.io_enq_ready, %nodeOut_a_source.io_async_mem_0_opcode, %nodeOut_a_source.io_async_mem_0_address, %nodeOut_a_source.io_async_mem_0_data, %nodeOut_a_source.io_async_widx, %nodeOut_a_source.io_async_safe_widx_valid, %nodeOut_a_source.io_async_safe_source_reset_n = hw.instance "nodeOut_a_source" @AsyncQueueSource(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_address: %auto_in_a_bits_address: i9, io_enq_bits_data: %auto_in_a_bits_data: i32, io_async_ridx: %auto_out_a_ridx: i1, io_async_safe_ridx_valid: %auto_out_a_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %auto_out_a_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_opcode: i3, io_async_mem_0_address: i9, io_async_mem_0_data: i32, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "nodeOut_a_source.io_enq_ready"}
    %nodeIn_d_sink.io_deq_valid, %nodeIn_d_sink.io_deq_bits_opcode, %nodeIn_d_sink.io_deq_bits_param, %nodeIn_d_sink.io_deq_bits_size, %nodeIn_d_sink.io_deq_bits_source, %nodeIn_d_sink.io_deq_bits_sink, %nodeIn_d_sink.io_deq_bits_denied, %nodeIn_d_sink.io_deq_bits_data, %nodeIn_d_sink.io_deq_bits_corrupt, %nodeIn_d_sink.io_async_ridx, %nodeIn_d_sink.io_async_safe_ridx_valid, %nodeIn_d_sink.io_async_safe_sink_reset_n = hw.instance "nodeIn_d_sink" @AsyncQueueSink(clock: %clock: !seq.clock, reset: %reset: i1, io_deq_ready: %auto_in_d_ready: i1, io_async_mem_0_opcode: %auto_out_d_mem_0_opcode: i3, io_async_mem_0_size: %auto_out_d_mem_0_size: i2, io_async_mem_0_source: %auto_out_d_mem_0_source: i1, io_async_mem_0_data: %auto_out_d_mem_0_data: i32, io_async_widx: %auto_out_d_widx: i1, io_async_safe_widx_valid: %auto_out_d_safe_widx_valid: i1, io_async_safe_source_reset_n: %auto_out_d_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i2, io_deq_bits_source: i1, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i32, io_deq_bits_corrupt: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "nodeIn_d_sink.io_deq_valid"}
    hw.output %nodeOut_a_source.io_enq_ready, %nodeIn_d_sink.io_deq_valid, %nodeIn_d_sink.io_deq_bits_opcode, %nodeIn_d_sink.io_deq_bits_param, %nodeIn_d_sink.io_deq_bits_size, %nodeIn_d_sink.io_deq_bits_source, %nodeIn_d_sink.io_deq_bits_sink, %nodeIn_d_sink.io_deq_bits_denied, %nodeIn_d_sink.io_deq_bits_data, %nodeIn_d_sink.io_deq_bits_corrupt, %nodeOut_a_source.io_async_mem_0_opcode, %nodeOut_a_source.io_async_mem_0_address, %nodeOut_a_source.io_async_mem_0_data, %nodeOut_a_source.io_async_widx, %nodeOut_a_source.io_async_safe_widx_valid, %nodeOut_a_source.io_async_safe_source_reset_n, %nodeIn_d_sink.io_async_ridx, %nodeIn_d_sink.io_async_safe_ridx_valid, %nodeIn_d_sink.io_async_safe_sink_reset_n : i1, i1, i3, i2, i2, i1, i1, i1, i32, i1, i3, i9, i32, i1, i1, i1, i1, i1, i1
  }
  hw.module private @AsyncQueueSource_1(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_resumereq : i1, in %io_enq_bits_hartsel : i10, in %io_enq_bits_ackhavereset : i1, in %io_enq_bits_hrmask_0 : i1, out io_async_mem_0_resumereq : i1, out io_async_mem_0_hartsel : i10, out io_async_mem_0_ackhavereset : i1, out io_async_mem_0_hrmask_0 : i1, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_resumereq = seq.firreg %6 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_resumereq"} : i1
    %mem_0_hartsel = seq.firreg %7 clock %clock {firrtl.random_init_start = 1 : ui64, sv.namehint = "mem_0_hartsel"} : i10
    %mem_0_ackhavereset = seq.firreg %8 clock %clock {firrtl.random_init_start = 11 : ui64, sv.namehint = "mem_0_ackhavereset"} : i1
    %mem_0_hrmask_0 = seq.firreg %9 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "mem_0_hrmask_0"} : i1
    %0 = comb.and bin %10, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 15 : ui64} : i1
    %1 = comb.add bin %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_resumereq, %mem_0_resumereq : i1
    %7 = comb.mux bin %0, %io_enq_bits_hartsel, %mem_0_hartsel : i10
    %8 = comb.mux bin %0, %io_enq_bits_ackhavereset, %mem_0_ackhavereset : i1
    %9 = comb.mux bin %0, %io_enq_bits_hrmask_0, %mem_0_hrmask_0 : i1
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 16 : ui64} : i1
    %10 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 17 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %14: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %11 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %12 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %13 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %14 = comb.or bin %reset, %11 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %15 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %10, %mem_0_resumereq, %mem_0_hartsel, %mem_0_ackhavereset, %mem_0_hrmask_0, %widx_gray, %source_valid_1.io_out, %15 : i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLDebugModuleOuterAsync(out auto_asource_out_a_mem_0_opcode : i3, out auto_asource_out_a_mem_0_address : i9, out auto_asource_out_a_mem_0_data : i32, in %auto_asource_out_a_ridx : i1, out auto_asource_out_a_widx : i1, in %auto_asource_out_a_safe_ridx_valid : i1, out auto_asource_out_a_safe_widx_valid : i1, out auto_asource_out_a_safe_source_reset_n : i1, in %auto_asource_out_a_safe_sink_reset_n : i1, in %auto_asource_out_d_mem_0_opcode : i3, in %auto_asource_out_d_mem_0_size : i2, in %auto_asource_out_d_mem_0_source : i1, in %auto_asource_out_d_mem_0_data : i32, out auto_asource_out_d_ridx : i1, in %auto_asource_out_d_widx : i1, out auto_asource_out_d_safe_ridx_valid : i1, in %auto_asource_out_d_safe_widx_valid : i1, in %auto_asource_out_d_safe_source_reset_n : i1, out auto_asource_out_d_safe_sink_reset_n : i1, out auto_intsource_out_sync_0 : i1, in %io_dmi_clock : !seq.clock, in %io_dmi_reset : i1, out io_dmi_req_ready : i1, in %io_dmi_req_valid : i1, in %io_dmi_req_bits_addr : i7, in %io_dmi_req_bits_data : i32, in %io_dmi_req_bits_op : i2, in %io_dmi_resp_ready : i1, out io_dmi_resp_valid : i1, out io_dmi_resp_bits_data : i32, out io_dmi_resp_bits_resp : i2, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, out io_innerCtrl_mem_0_resumereq : i1, out io_innerCtrl_mem_0_hartsel : i10, out io_innerCtrl_mem_0_ackhavereset : i1, out io_innerCtrl_mem_0_hrmask_0 : i1, in %io_innerCtrl_ridx : i1, out io_innerCtrl_widx : i1, in %io_innerCtrl_safe_ridx_valid : i1, out io_innerCtrl_safe_widx_valid : i1, out io_innerCtrl_safe_source_reset_n : i1, in %io_innerCtrl_safe_sink_reset_n : i1, in %io_hgDebugInt_0 : i1) {
    %true = hw.constant true
    %dmiXbar.auto_in_a_ready, %dmiXbar.auto_in_d_valid, %dmiXbar.auto_in_d_bits_denied, %dmiXbar.auto_in_d_bits_data, %dmiXbar.auto_in_d_bits_corrupt, %dmiXbar.auto_out_1_a_valid, %dmiXbar.auto_out_1_a_bits_opcode, %dmiXbar.auto_out_1_a_bits_address, %dmiXbar.auto_out_1_a_bits_data, %dmiXbar.auto_out_1_d_ready, %dmiXbar.auto_out_0_a_valid, %dmiXbar.auto_out_0_a_bits_opcode, %dmiXbar.auto_out_0_a_bits_address, %dmiXbar.auto_out_0_a_bits_data, %dmiXbar.auto_out_0_d_ready = hw.instance "dmiXbar" @TLXbar_10(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_in_a_valid: %dmi2tl.auto_out_a_valid: i1, auto_in_a_bits_opcode: %dmi2tl.auto_out_a_bits_opcode: i3, auto_in_a_bits_address: %dmi2tl.auto_out_a_bits_address: i9, auto_in_a_bits_data: %dmi2tl.auto_out_a_bits_data: i32, auto_in_d_ready: %dmi2tl.auto_out_d_ready: i1, auto_out_1_a_ready: %dmOuter.auto_dmi_in_a_ready: i1, auto_out_1_d_valid: %dmOuter.auto_dmi_in_d_valid: i1, auto_out_1_d_bits_opcode: %dmOuter.auto_dmi_in_d_bits_opcode: i3, auto_out_1_d_bits_data: %dmOuter.auto_dmi_in_d_bits_data: i32, auto_out_0_a_ready: %dmiBypass.auto_node_in_in_a_ready: i1, auto_out_0_d_valid: %dmiBypass.auto_node_in_in_d_valid: i1, auto_out_0_d_bits_opcode: %dmiBypass.auto_node_in_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %dmiBypass.auto_node_in_in_d_bits_param: i2, auto_out_0_d_bits_size: %dmiBypass.auto_node_in_in_d_bits_size: i2, auto_out_0_d_bits_sink: %dmiBypass.auto_node_in_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %dmiBypass.auto_node_in_in_d_bits_denied: i1, auto_out_0_d_bits_data: %dmiBypass.auto_node_in_in_d_bits_data: i32, auto_out_0_d_bits_corrupt: %dmiBypass.auto_node_in_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_address: i7, auto_out_1_a_bits_data: i32, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_address: i9, auto_out_0_a_bits_data: i32, auto_out_0_d_ready: i1) {sv.namehint = "dmi2tl.auto_out_d_valid"}
    %dmi2tl.auto_out_a_valid, %dmi2tl.auto_out_a_bits_opcode, %dmi2tl.auto_out_a_bits_address, %dmi2tl.auto_out_a_bits_data, %dmi2tl.auto_out_d_ready, %dmi2tl.io_dmi_req_ready, %dmi2tl.io_dmi_resp_valid, %dmi2tl.io_dmi_resp_bits_data, %dmi2tl.io_dmi_resp_bits_resp = hw.instance "dmi2tl" @DMIToTL(auto_out_a_ready: %dmiXbar.auto_in_a_ready: i1, auto_out_d_valid: %dmiXbar.auto_in_d_valid: i1, auto_out_d_bits_denied: %dmiXbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %dmiXbar.auto_in_d_bits_data: i32, auto_out_d_bits_corrupt: %dmiXbar.auto_in_d_bits_corrupt: i1, io_dmi_req_valid: %io_dmi_req_valid: i1, io_dmi_req_bits_addr: %io_dmi_req_bits_addr: i7, io_dmi_req_bits_data: %io_dmi_req_bits_data: i32, io_dmi_req_bits_op: %io_dmi_req_bits_op: i2, io_dmi_resp_ready: %io_dmi_resp_ready: i1) -> (auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_address: i9, auto_out_a_bits_data: i32, auto_out_d_ready: i1, io_dmi_req_ready: i1, io_dmi_resp_valid: i1, io_dmi_resp_bits_data: i32, io_dmi_resp_bits_resp: i2) {sv.namehint = "dmi2tl.io_dmi_req_ready"}
    %dmOuter.auto_dmi_in_a_ready, %dmOuter.auto_dmi_in_d_valid, %dmOuter.auto_dmi_in_d_bits_opcode, %dmOuter.auto_dmi_in_d_bits_data, %dmOuter.auto_int_out_0, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_innerCtrl_valid, %dmOuter.io_innerCtrl_bits_resumereq, %dmOuter.io_innerCtrl_bits_hartsel, %dmOuter.io_innerCtrl_bits_ackhavereset, %dmOuter.io_innerCtrl_bits_hrmask_0 = hw.instance "dmOuter" @TLDebugModuleOuter(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_dmi_in_a_valid: %dmiXbar.auto_out_1_a_valid: i1, auto_dmi_in_a_bits_opcode: %dmiXbar.auto_out_1_a_bits_opcode: i3, auto_dmi_in_a_bits_address: %dmiXbar.auto_out_1_a_bits_address: i7, auto_dmi_in_a_bits_data: %dmiXbar.auto_out_1_a_bits_data: i32, auto_dmi_in_d_ready: %dmiXbar.auto_out_1_d_ready: i1, io_ctrl_dmactiveAck: %dmactiveAck_dmactiveAckSync.io_q: i1, io_innerCtrl_ready: %io_innerCtrl_source.io_enq_ready: i1, io_hgDebugInt_0: %io_hgDebugInt_0: i1) -> (auto_dmi_in_a_ready: i1, auto_dmi_in_d_valid: i1, auto_dmi_in_d_bits_opcode: i3, auto_dmi_in_d_bits_data: i32, auto_int_out_0: i1, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_innerCtrl_valid: i1, io_innerCtrl_bits_resumereq: i1, io_innerCtrl_bits_hartsel: i10, io_innerCtrl_bits_ackhavereset: i1, io_innerCtrl_bits_hrmask_0: i1) {sv.namehint = "intsource.auto_in_0"}
    %intsource.auto_out_sync_0 = hw.instance "intsource" @IntSyncCrossingSource_4(auto_in_0: %dmOuter.auto_int_out_0: i1) -> (auto_out_sync_0: i1) {sv.namehint = "intsource.auto_out_sync_0"}
    %dmiBypass.auto_node_out_out_a_valid, %dmiBypass.auto_node_out_out_a_bits_opcode, %dmiBypass.auto_node_out_out_a_bits_address, %dmiBypass.auto_node_out_out_a_bits_data, %dmiBypass.auto_node_out_out_d_ready, %dmiBypass.auto_node_in_in_a_ready, %dmiBypass.auto_node_in_in_d_valid, %dmiBypass.auto_node_in_in_d_bits_opcode, %dmiBypass.auto_node_in_in_d_bits_param, %dmiBypass.auto_node_in_in_d_bits_size, %dmiBypass.auto_node_in_in_d_bits_sink, %dmiBypass.auto_node_in_in_d_bits_denied, %dmiBypass.auto_node_in_in_d_bits_data, %dmiBypass.auto_node_in_in_d_bits_corrupt = hw.instance "dmiBypass" @TLBusBypass(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_node_out_out_a_ready: %asource.auto_in_a_ready: i1, auto_node_out_out_d_valid: %asource.auto_in_d_valid: i1, auto_node_out_out_d_bits_opcode: %asource.auto_in_d_bits_opcode: i3, auto_node_out_out_d_bits_param: %asource.auto_in_d_bits_param: i2, auto_node_out_out_d_bits_size: %asource.auto_in_d_bits_size: i2, auto_node_out_out_d_bits_source: %asource.auto_in_d_bits_source: i1, auto_node_out_out_d_bits_sink: %asource.auto_in_d_bits_sink: i1, auto_node_out_out_d_bits_denied: %asource.auto_in_d_bits_denied: i1, auto_node_out_out_d_bits_data: %asource.auto_in_d_bits_data: i32, auto_node_out_out_d_bits_corrupt: %asource.auto_in_d_bits_corrupt: i1, auto_node_in_in_a_valid: %dmiXbar.auto_out_0_a_valid: i1, auto_node_in_in_a_bits_opcode: %dmiXbar.auto_out_0_a_bits_opcode: i3, auto_node_in_in_a_bits_address: %dmiXbar.auto_out_0_a_bits_address: i9, auto_node_in_in_a_bits_data: %dmiXbar.auto_out_0_a_bits_data: i32, auto_node_in_in_d_ready: %dmiXbar.auto_out_0_d_ready: i1, io_bypass: %2: i1) -> (auto_node_out_out_a_valid: i1, auto_node_out_out_a_bits_opcode: i3, auto_node_out_out_a_bits_address: i9, auto_node_out_out_a_bits_data: i32, auto_node_out_out_d_ready: i1, auto_node_in_in_a_ready: i1, auto_node_in_in_d_valid: i1, auto_node_in_in_d_bits_opcode: i3, auto_node_in_in_d_bits_param: i2, auto_node_in_in_d_bits_size: i2, auto_node_in_in_d_bits_sink: i1, auto_node_in_in_d_bits_denied: i1, auto_node_in_in_d_bits_data: i32, auto_node_in_in_d_bits_corrupt: i1) {sv.namehint = "asource.auto_in_d_ready"}
    %asource.auto_in_a_ready, %asource.auto_in_d_valid, %asource.auto_in_d_bits_opcode, %asource.auto_in_d_bits_param, %asource.auto_in_d_bits_size, %asource.auto_in_d_bits_source, %asource.auto_in_d_bits_sink, %asource.auto_in_d_bits_denied, %asource.auto_in_d_bits_data, %asource.auto_in_d_bits_corrupt, %asource.auto_out_a_mem_0_opcode, %asource.auto_out_a_mem_0_address, %asource.auto_out_a_mem_0_data, %asource.auto_out_a_widx, %asource.auto_out_a_safe_widx_valid, %asource.auto_out_a_safe_source_reset_n, %asource.auto_out_d_ridx, %asource.auto_out_d_safe_ridx_valid, %asource.auto_out_d_safe_sink_reset_n = hw.instance "asource" @TLAsyncCrossingSource(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_in_a_valid: %dmiBypass.auto_node_out_out_a_valid: i1, auto_in_a_bits_opcode: %dmiBypass.auto_node_out_out_a_bits_opcode: i3, auto_in_a_bits_address: %dmiBypass.auto_node_out_out_a_bits_address: i9, auto_in_a_bits_data: %dmiBypass.auto_node_out_out_a_bits_data: i32, auto_in_d_ready: %dmiBypass.auto_node_out_out_d_ready: i1, auto_out_a_ridx: %auto_asource_out_a_ridx: i1, auto_out_a_safe_ridx_valid: %auto_asource_out_a_safe_ridx_valid: i1, auto_out_a_safe_sink_reset_n: %auto_asource_out_a_safe_sink_reset_n: i1, auto_out_d_mem_0_opcode: %auto_asource_out_d_mem_0_opcode: i3, auto_out_d_mem_0_size: %auto_asource_out_d_mem_0_size: i2, auto_out_d_mem_0_source: %auto_asource_out_d_mem_0_source: i1, auto_out_d_mem_0_data: %auto_asource_out_d_mem_0_data: i32, auto_out_d_widx: %auto_asource_out_d_widx: i1, auto_out_d_safe_widx_valid: %auto_asource_out_d_safe_widx_valid: i1, auto_out_d_safe_source_reset_n: %auto_asource_out_d_safe_source_reset_n: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i2, auto_in_d_bits_source: i1, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_a_mem_0_opcode: i3, auto_out_a_mem_0_address: i9, auto_out_a_mem_0_data: i32, auto_out_a_widx: i1, auto_out_a_safe_widx_valid: i1, auto_out_a_safe_source_reset_n: i1, auto_out_d_ridx: i1, auto_out_d_safe_ridx_valid: i1, auto_out_d_safe_sink_reset_n: i1) {sv.namehint = "asource.auto_out_d_ridx"}
    %dmactiveAck_dmactiveAckSync.io_q = hw.instance "dmactiveAck_dmactiveAckSync" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, io_d: %io_ctrl_dmactiveAck: i1) -> (io_q: i1) {sv.namehint = "dmactiveAck"}
    %0 = comb.xor bin %dmOuter.io_ctrl_dmactive, %true {sv.namehint = "_dmiBypass_io_bypass_T"} : i1
    %1 = comb.xor bin %dmactiveAck_dmactiveAckSync.io_q, %true {sv.namehint = "_dmiBypass_io_bypass_T_1"} : i1
    %2 = comb.or bin %0, %1 {sv.namehint = "dmiBypass.io_bypass"} : i1
    %io_innerCtrl_source.io_enq_ready, %io_innerCtrl_source.io_async_mem_0_resumereq, %io_innerCtrl_source.io_async_mem_0_hartsel, %io_innerCtrl_source.io_async_mem_0_ackhavereset, %io_innerCtrl_source.io_async_mem_0_hrmask_0, %io_innerCtrl_source.io_async_widx, %io_innerCtrl_source.io_async_safe_widx_valid, %io_innerCtrl_source.io_async_safe_source_reset_n = hw.instance "io_innerCtrl_source" @AsyncQueueSource_1(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, io_enq_valid: %dmOuter.io_innerCtrl_valid: i1, io_enq_bits_resumereq: %dmOuter.io_innerCtrl_bits_resumereq: i1, io_enq_bits_hartsel: %dmOuter.io_innerCtrl_bits_hartsel: i10, io_enq_bits_ackhavereset: %dmOuter.io_innerCtrl_bits_ackhavereset: i1, io_enq_bits_hrmask_0: %dmOuter.io_innerCtrl_bits_hrmask_0: i1, io_async_ridx: %io_innerCtrl_ridx: i1, io_async_safe_ridx_valid: %io_innerCtrl_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %io_innerCtrl_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_resumereq: i1, io_async_mem_0_hartsel: i10, io_async_mem_0_ackhavereset: i1, io_async_mem_0_hrmask_0: i1, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "io_innerCtrl_source.io_enq_ready"}
    hw.output %asource.auto_out_a_mem_0_opcode, %asource.auto_out_a_mem_0_address, %asource.auto_out_a_mem_0_data, %asource.auto_out_a_widx, %asource.auto_out_a_safe_widx_valid, %asource.auto_out_a_safe_source_reset_n, %asource.auto_out_d_ridx, %asource.auto_out_d_safe_ridx_valid, %asource.auto_out_d_safe_sink_reset_n, %intsource.auto_out_sync_0, %dmi2tl.io_dmi_req_ready, %dmi2tl.io_dmi_resp_valid, %dmi2tl.io_dmi_resp_bits_data, %dmi2tl.io_dmi_resp_bits_resp, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %io_innerCtrl_source.io_async_mem_0_resumereq, %io_innerCtrl_source.io_async_mem_0_hartsel, %io_innerCtrl_source.io_async_mem_0_ackhavereset, %io_innerCtrl_source.io_async_mem_0_hrmask_0, %io_innerCtrl_source.io_async_widx, %io_innerCtrl_source.io_async_safe_widx_valid, %io_innerCtrl_source.io_async_safe_source_reset_n : i3, i9, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i32, i2, i1, i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLMonitor_28(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i1, in %io_in_a_bits_address : i9, in %io_in_a_bits_mask : i4, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1) {
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c0_i16 = hw.constant 0 : i16
    %c-5_i4 = hw.constant -5 : i4
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i5 = hw.constant 3 : i5
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_1"}
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i15 = hw.constant 0 : i15
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i4 = hw.constant -1 : i4
    %2 = seq.from_clock %clock
    %3 = comb.xor bin %io_in_a_bits_source, %true {sv.namehint = "_source_ok_T"} : i1
    %4 = comb.concat %c0_i3, %io_in_a_bits_size : i3, i2
    %5 = comb.shl bin %c3_i5, %4 {sv.namehint = "_is_aligned_mask_T_1"} : i5
    %6 = comb.extract %5 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i5) -> i2
    %7 = comb.xor bin %6, %c-1_i2 {sv.namehint = "is_aligned_mask"} : i2
    %8 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %9 = comb.and bin %8, %7 : i2
    %10 = comb.icmp bin eq %9, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %11 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i2) -> i1
    %12 = comb.extract %io_in_a_bits_size from 1 {sv.namehint = "_mask_T"} : (i2) -> i1
    %13 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit"} : (i9) -> i1
    %14 = comb.xor bin %13, %true {sv.namehint = "mask_eq"} : i1
    %15 = comb.and bin %11, %14 {sv.namehint = "_mask_acc_T"} : i1
    %16 = comb.or bin %12, %15 {sv.namehint = "mask_acc"} : i1
    %17 = comb.and bin %11, %13 {sv.namehint = "_mask_acc_T_1"} : i1
    %18 = comb.or bin %12, %17 {sv.namehint = "mask_acc_1"} : i1
    %19 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_1"} : (i9) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_nbit_1"} : i1
    %21 = comb.and bin %14, %20 {sv.namehint = "mask_eq_2"} : i1
    %22 = comb.or bin %16, %21 {sv.namehint = "mask_acc_2"} : i1
    %23 = comb.and bin %14, %19 {sv.namehint = "mask_eq_3"} : i1
    %24 = comb.or bin %16, %23 {sv.namehint = "mask_acc_3"} : i1
    %25 = comb.and bin %13, %20 {sv.namehint = "mask_eq_4"} : i1
    %26 = comb.or bin %18, %25 {sv.namehint = "mask_acc_4"} : i1
    %27 = comb.and bin %13, %19 {sv.namehint = "mask_eq_5"} : i1
    %28 = comb.or bin %18, %27 {sv.namehint = "mask_acc_5"} : i1
    %29 = comb.concat %28, %26, %24, %22 {sv.namehint = "mask"} : i1, i1, i1, i1
    %30 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %31 = comb.xor bin %reset, %true : i1
    %32 = comb.and bin %io_in_a_valid, %30, %31 : i1
    %33 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %34 = comb.icmp eq %io_in_a_bits_mask, %c-1_i4 : i4
    %35 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %36 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %37 = comb.and bin %io_in_a_valid, %36, %31 : i1
    %38 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %39 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %40 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i2 : i2
    %41 = comb.and bin %40, %3 : i1
    %42 = comb.and bin %io_in_a_valid, %39, %31 : i1
    %43 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i2 : i2
    %44 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %45 = comb.icmp bin eq %44, %c0_i3 : i3
    %46 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %47 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %48 = comb.xor bin %47, %c-15_i5 : i5
    %49 = comb.extract %48 from 2 : (i5) -> i3
    %50 = comb.extract %48 from 0 : (i5) -> i1
    %51 = comb.concat %46, %49, %50 : i2, i3, i1
    %52 = comb.icmp bin eq %51, %c0_i6 : i6
    %53 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %54 = comb.xor bin %53, %c-5_i4 : i4
    %55 = comb.concat %46, %54 : i2, i4
    %56 = comb.icmp bin eq %55, %c0_i6 : i6
    %57 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %58 = comb.xor bin %57, %c-1_i2 : i2
    %59 = comb.concat %46, %58 : i2, i2
    %60 = comb.icmp bin eq %59, %c0_i4 : i4
    %61 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %62 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %63 = comb.xor bin %62, %true : i1
    %64 = comb.concat %61, %63 : i1, i1
    %65 = comb.icmp bin eq %64, %c0_i2 : i2
    %66 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %67 = comb.or bin %45, %52, %56, %60, %65, %66 : i1
    %68 = comb.and bin %43, %67 : i1
    %69 = comb.xor bin %38, %true : i1
    %70 = comb.icmp bin eq %io_in_a_bits_mask, %29 : i4
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %72 = comb.and bin %41, %68 : i1
    %73 = comb.and bin %io_in_a_valid, %71, %31 : i1
    %74 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %75 = comb.and bin %io_in_a_valid, %74, %31 : i1
    %76 = comb.xor bin %29, %c-1_i4 : i4
    %77 = comb.and bin %io_in_a_bits_mask, %76 : i4
    %78 = comb.icmp bin eq %77, %c0_i4 : i4
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79, %31 : i1
    %81 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %82 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %83 = comb.and bin %io_in_a_valid, %82, %31 : i1
    %84 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %87 = comb.and bin %io_in_a_valid, %86, %31 : i1
    %88 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %89 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %90 = comb.and bin %io_in_d_valid, %31 : i1
    %91 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %92 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %93 = comb.and bin %io_in_d_valid, %92, %31 : i1
    %94 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %95, %31 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %98 = comb.and bin %io_in_d_valid, %97, %31 : i1
    %99 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %100 = comb.and bin %io_in_d_valid, %99, %31 : i1
    %101 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %102 = comb.and bin %io_in_d_valid, %101, %31 : i1
    %103 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %104 = comb.and bin %io_in_d_valid, %103, %31 : i1
    %105 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %110 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %106 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %107 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %108 = comb.xor %105, %true : i1
    %109 = comb.or %108, %106 : i1
    %110 = comb.and %109, %a_first_counter : i1
    %opcode = seq.firreg %118 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %119 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %120 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %121 clock %clock {firrtl.random_init_start = 9 : ui64} : i1
    %address = seq.firreg %122 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %111 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %112 = comb.and bin %io_in_a_valid, %a_first_counter, %31 : i1
    %113 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %114 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %115 = comb.icmp bin eq %io_in_a_bits_source, %source : i1
    %116 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %117 = comb.and bin %105, %107 : i1
    %118 = comb.mux bin %117, %io_in_a_bits_opcode, %opcode : i3
    %119 = comb.mux bin %117, %io_in_a_bits_param, %param : i3
    %120 = comb.mux bin %117, %io_in_a_bits_size, %size : i2
    %121 = comb.mux bin %117, %io_in_a_bits_source, %source : i1
    %122 = comb.mux bin %117, %io_in_a_bits_address, %address : i9
    %123 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %128 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %124 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %125 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %126 = comb.xor %123, %true : i1
    %127 = comb.or %126, %124 : i1
    %128 = comb.and %127, %d_first_counter : i1
    %opcode_1 = seq.firreg %134 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %size_1 = seq.firreg %135 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %136 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %129 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %130 = comb.and bin %io_in_d_valid, %d_first_counter, %31 : i1
    %131 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %132 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %133 = comb.and bin %123, %125 : i1
    %134 = comb.mux bin %133, %io_in_d_bits_opcode, %opcode_1 : i3
    %135 = comb.mux bin %133, %io_in_d_bits_size, %size_1 : i2
    %136 = comb.mux bin %133, %io_in_d_bits_source, %source_1 : i1
    %inflight = seq.firreg %214 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %217 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %220 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %141 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %137 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %138 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %139 = comb.xor %105, %true : i1
    %140 = comb.or %139, %137 : i1
    %141 = comb.and %140, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %146 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %142 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %143 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %144 = comb.xor %123, %true : i1
    %145 = comb.or %144, %142 : i1
    %146 = comb.and %145, %d_first_counter_1 : i1
    %147 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %148 = comb.shru bin %inflight_opcodes, %147 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %149 = comb.extract %148 from 1 : (i4) -> i3
    %150 = comb.shru bin %inflight_sizes, %147 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %151 = comb.extract %150 from 1 : (i4) -> i3
    %152 = comb.concat %false, %151 {sv.namehint = "a_size_lookup"} : i1, i3
    %153 = comb.and bin %105, %138 : i1
    %154 = comb.xor %io_in_a_bits_source, %true : i1
    %155 = comb.and %153, %154 {sv.namehint = "a_set"} : i1
    %156 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %157 = comb.mux bin %153, %156, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %158 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %159 = comb.mux bin %153, %158, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %160 = comb.concat %c0_i15, %157 : i15, i4
    %161 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i2 : i16, i1, i2
    %162 = comb.shl bin %160, %161 {sv.namehint = "_a_opcodes_set_T_1"} : i19
    %163 = comb.extract %162 from 0 : (i19) -> i4
    %164 = comb.mux bin %153, %163, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %165 = comb.concat %c0_i15, %159 : i15, i3
    %166 = comb.concat %c0_i15, %io_in_a_bits_source, %c0_i2 : i15, i1, i2
    %167 = comb.shl bin %165, %166 {sv.namehint = "_a_sizes_set_T_1"} : i18
    %168 = comb.extract %167 from 0 : (i18) -> i4
    %169 = comb.mux bin %153, %168, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %170 = comb.shru bin %inflight, %io_in_a_bits_source : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %153, %31 : i1
    %173 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %174 = comb.and bin %io_in_d_valid, %143 : i1
    %175 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %176 = comb.and bin %123, %143, %175 : i1
    %177 = comb.xor %io_in_d_bits_source, %true : i1
    %178 = comb.and %176, %177 {sv.namehint = "d_clr"} : i1
    %179 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %180 = comb.shl bin %c15_i31, %179 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %181 = comb.extract %180 from 0 : (i31) -> i4
    %182 = comb.mux bin %176, %181, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %183 = comb.shl bin %c15_i31, %179 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %184 = comb.extract %183 from 0 : (i31) -> i4
    %185 = comb.mux bin %176, %184, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %186 = comb.and bin %174, %175 : i1
    %187 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %188 = comb.and bin %io_in_a_valid, %138, %187 {sv.namehint = "same_cycle_resp"} : i1
    %189 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %190 = comb.or bin %189, %188 : i1
    %191 = comb.and bin %186, %31 : i1
    %192 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %193 = comb.icmp bin eq %io_in_d_bits_opcode, %192 : i3
    %194 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %195 = comb.icmp bin eq %io_in_d_bits_opcode, %194 : i3
    %196 = comb.or bin %193, %195 : i1
    %197 = comb.and bin %186, %188, %31 : i1
    %198 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %199 = comb.xor bin %188, %true : i1
    %200 = hw.array_get %1[%149] : !hw.array<8xi3>, i3
    %201 = comb.icmp bin eq %io_in_d_bits_opcode, %200 : i3
    %202 = hw.array_get %0[%149] : !hw.array<8xi3>, i3
    %203 = comb.icmp bin eq %io_in_d_bits_opcode, %202 : i3
    %204 = comb.or bin %201, %203 : i1
    %205 = comb.and bin %186, %199, %31 : i1
    %206 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %207 = comb.icmp bin eq %206, %152 : i4
    %208 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i1
    %209 = comb.xor bin %io_in_d_ready, %true : i1
    %210 = comb.or bin %209, %io_in_a_ready : i1
    %211 = comb.and bin %174, %138, %io_in_a_valid, %208, %175, %31 : i1
    %212 = comb.or bin %inflight, %155 {sv.namehint = "_inflight_T"} : i1
    %213 = comb.xor bin %178, %true {sv.namehint = "_inflight_T_1"} : i1
    %214 = comb.and bin %212, %213 {sv.namehint = "_inflight_T_2"} : i1
    %215 = comb.or bin %inflight_opcodes, %164 {sv.namehint = "_inflight_opcodes_T"} : i4
    %216 = comb.xor bin %182, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %217 = comb.and bin %215, %216 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %218 = comb.or bin %inflight_sizes, %169 {sv.namehint = "_inflight_sizes_T"} : i4
    %219 = comb.xor bin %185, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %220 = comb.and bin %218, %219 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %227 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %221 = comb.xor bin %inflight, %true : i1
    %222 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %223 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %224 = comb.or bin %221, %222, %223 : i1
    %225 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %226 = comb.or bin %105, %123 : i1
    %227 = comb.mux bin %226, %c0_i32, %225 : i32
    %inflight_1 = seq.firreg %246 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %248 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %232 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %228 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %229 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %230 = comb.xor %123, %true : i1
    %231 = comb.or %230, %228 : i1
    %232 = comb.and %231, %d_first_counter_2 : i1
    %233 = comb.shru bin %inflight_sizes_1, %147 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %234 = comb.extract %233 from 1 : (i4) -> i3
    %235 = comb.concat %false, %234 {sv.namehint = "c_size_lookup"} : i1, i3
    %236 = comb.and bin %123, %229, %173 : i1
    %237 = comb.xor %io_in_d_bits_source, %true : i1
    %238 = comb.and %236, %237 {sv.namehint = "d_clr_1"} : i1
    %239 = comb.shl bin %c15_i31, %179 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %240 = comb.extract %239 from 0 : (i31) -> i4
    %241 = comb.mux bin %236, %240, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %242 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %243 = comb.and bin %io_in_d_valid, %229, %173, %31 : i1
    %244 = comb.icmp bin eq %206, %235 : i4
    %245 = comb.xor bin %238, %true {sv.namehint = "_inflight_T_4"} : i1
    %246 = comb.and bin %inflight_1, %245 {sv.namehint = "_inflight_T_5"} : i1
    %247 = comb.xor bin %241, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %248 = comb.and bin %inflight_sizes_1, %247 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %254 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %249 = comb.xor bin %inflight_1, %true : i1
    %250 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %251 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %252 = comb.or bin %249, %250, %251 : i1
    sv.always posedge %2 {
      sv.if %32 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %32 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %32 {
        sv.assert %3, immediate label "assert__assert_4"
      }
      sv.if %32 {
        sv.assert %12, immediate label "assert__assert_5"
      }
      sv.if %32 {
        sv.assert %10, immediate label "assert__assert_6"
      }
      sv.if %32 {
        sv.assert %33, immediate label "assert__assert_7"
      }
      sv.if %32 {
        sv.assert %34, immediate label "assert__assert_8"
      }
      sv.if %32 {
        sv.assert %35, immediate label "assert__assert_9"
      }
      sv.if %37 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %37 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %37 {
        sv.assert %3, immediate label "assert__assert_12"
      }
      sv.if %37 {
        sv.assert %12, immediate label "assert__assert_13"
      }
      sv.if %37 {
        sv.assert %10, immediate label "assert__assert_14"
      }
      sv.if %37 {
        sv.assert %33, immediate label "assert__assert_15"
      }
      sv.if %37 {
        sv.assert %38, immediate label "assert__assert_16"
      }
      sv.if %37 {
        sv.assert %34, immediate label "assert__assert_17"
      }
      sv.if %37 {
        sv.assert %35, immediate label "assert__assert_18"
      }
      sv.if %42 {
        sv.assert %41, immediate label "assert__assert_19"
      }
      sv.if %42 {
        sv.assert %68, immediate label "assert__assert_20"
      }
      sv.if %42 {
        sv.assert %3, immediate label "assert__assert_21"
      }
      sv.if %42 {
        sv.assert %10, immediate label "assert__assert_22"
      }
      sv.if %42 {
        sv.assert %69, immediate label "assert__assert_23"
      }
      sv.if %42 {
        sv.assert %70, immediate label "assert__assert_24"
      }
      sv.if %42 {
        sv.assert %35, immediate label "assert__assert_25"
      }
      sv.if %73 {
        sv.assert %72, immediate label "assert__assert_26"
      }
      sv.if %73 {
        sv.assert %3, immediate label "assert__assert_27"
      }
      sv.if %73 {
        sv.assert %10, immediate label "assert__assert_28"
      }
      sv.if %73 {
        sv.assert %69, immediate label "assert__assert_29"
      }
      sv.if %73 {
        sv.assert %70, immediate label "assert__assert_30"
      }
      sv.if %75 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %75 {
        sv.assert %3, immediate label "assert__assert_32"
      }
      sv.if %75 {
        sv.assert %10, immediate label "assert__assert_33"
      }
      sv.if %75 {
        sv.assert %69, immediate label "assert__assert_34"
      }
      sv.if %75 {
        sv.assert %78, immediate label "assert__assert_35"
      }
      sv.if %80 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %80 {
        sv.assert %3, immediate label "assert__assert_37"
      }
      sv.if %80 {
        sv.assert %10, immediate label "assert__assert_38"
      }
      sv.if %80 {
        sv.assert %81, immediate label "assert__assert_39"
      }
      sv.if %80 {
        sv.assert %70, immediate label "assert__assert_40"
      }
      sv.if %83 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %83 {
        sv.assert %3, immediate label "assert__assert_42"
      }
      sv.if %83 {
        sv.assert %10, immediate label "assert__assert_43"
      }
      sv.if %83 {
        sv.assert %85, immediate label "assert__assert_44"
      }
      sv.if %83 {
        sv.assert %70, immediate label "assert__assert_45"
      }
      sv.if %87 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %87 {
        sv.assert %3, immediate label "assert__assert_47"
      }
      sv.if %87 {
        sv.assert %10, immediate label "assert__assert_48"
      }
      sv.if %87 {
        sv.assert %88, immediate label "assert__assert_49"
      }
      sv.if %87 {
        sv.assert %70, immediate label "assert__assert_50"
      }
      sv.if %87 {
        sv.assert %35, immediate label "assert__assert_51"
      }
      sv.if %90 {
        sv.assert %89, immediate label "assert__assert_52"
      }
      sv.if %93 {
        sv.assert %91, immediate label "assert__assert_53"
      }
      sv.if %93 {
        sv.assert %94, immediate label "assert__assert_54"
      }
      sv.if %96 {
        sv.assert %91, immediate label "assert__assert_58"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %96 {
        sv.assert %94, immediate label "assert__assert_60"
      }
      sv.if %98 {
        sv.assert %91, immediate label "assert__assert_65"
      }
      sv.if %98 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %98 {
        sv.assert %94, immediate label "assert__assert_67"
      }
      sv.if %100 {
        sv.assert %91, immediate label "assert__assert_72"
      }
      sv.if %102 {
        sv.assert %91, immediate label "assert__assert_76"
      }
      sv.if %104 {
        sv.assert %91, immediate label "assert__assert_80"
      }
      sv.if %112 {
        sv.assert %111, immediate label "assert__assert_87"
      }
      sv.if %112 {
        sv.assert %113, immediate label "assert__assert_88"
      }
      sv.if %112 {
        sv.assert %114, immediate label "assert__assert_89"
      }
      sv.if %112 {
        sv.assert %115, immediate label "assert__assert_90"
      }
      sv.if %112 {
        sv.assert %116, immediate label "assert__assert_91"
      }
      sv.if %130 {
        sv.assert %129, immediate label "assert__assert_92"
      }
      sv.if %130 {
        sv.assert %131, immediate label "assert__assert_94"
      }
      sv.if %130 {
        sv.assert %132, immediate label "assert__assert_95"
      }
      sv.if %172 {
        sv.assert %171, immediate label "assert__assert_98"
      }
      sv.if %191 {
        sv.assert %190, immediate label "assert__assert_99"
      }
      sv.if %197 {
        sv.assert %196, immediate label "assert__assert_100"
      }
      sv.if %197 {
        sv.assert %198, immediate label "assert__assert_101"
      }
      sv.if %205 {
        sv.assert %204, immediate label "assert__assert_102"
      }
      sv.if %205 {
        sv.assert %207, immediate label "assert__assert_103"
      }
      sv.if %211 {
        sv.assert %210, immediate label "assert__assert_104"
      }
      sv.if %31 {
        sv.assert %224, immediate label "assert__assert_105"
      }
      sv.if %243 {
        sv.assert %242, immediate label "assert__assert_107"
      }
      sv.if %243 {
        sv.assert %244, immediate label "assert__assert_109"
      }
      sv.if %31 {
        sv.assert %252, immediate label "assert__assert_111"
      }
    }
    %253 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %254 = comb.mux bin %123, %c0_i32, %253 : i32
    hw.output
  }
  hw.module private @TLMonitor_29(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i12, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c1_i4 = hw.constant 1 : i4
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i12) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.concat %c0_i2, %io_in_a_bits_size : i2, i2
    %13 = comb.shl bin %c1_i4, %12 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %14 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %15 = comb.extract %13 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i12) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.extract %13 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i12) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i12) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_acc_6"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_acc_7"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_acc_8"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_acc_9"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_acc_10"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_acc_11"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_acc_12"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_acc_13"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.xor bin %reset, %true : i1
    %58 = comb.and bin %io_in_a_valid, %56, %57 : i1
    %59 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %60 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %61 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %62 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %63 = comb.and bin %io_in_a_valid, %62, %57 : i1
    %64 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %65 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %66 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %67 = comb.icmp bin ne %66, %c-1_i2 : i2
    %68 = comb.and bin %io_in_a_valid, %65, %57 : i1
    %69 = comb.xor bin %64, %true : i1
    %70 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %72 = comb.and bin %io_in_a_valid, %71, %57 : i1
    %73 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %74 = comb.and bin %io_in_a_valid, %73, %57 : i1
    %75 = comb.xor bin %55, %c-1_i8 : i8
    %76 = comb.and bin %io_in_a_bits_mask, %75 : i8
    %77 = comb.icmp bin eq %76, %c0_i8 : i8
    %78 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %79 = comb.and bin %io_in_a_valid, %78, %57 : i1
    %80 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %81 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %82 = comb.and bin %io_in_a_valid, %81, %57 : i1
    %83 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %86 = comb.and bin %io_in_a_valid, %85, %57 : i1
    %87 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %88 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %89 = comb.and bin %io_in_d_valid, %57 : i1
    %90 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %91 = comb.icmp bin ne %90, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %92 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %93 = comb.and bin %io_in_d_valid, %92, %57 : i1
    %94 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %95 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %96 = comb.and bin %io_in_d_valid, %95, %57 : i1
    %97 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %98 = comb.and bin %io_in_d_valid, %97, %57 : i1
    %99 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %100 = comb.and bin %io_in_d_valid, %99, %57 : i1
    %101 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %102 = comb.and bin %io_in_d_valid, %101, %57 : i1
    %103 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %104 = comb.and bin %io_in_d_valid, %103, %57 : i1
    %105 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %110 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %106 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %107 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %108 = comb.xor %105, %true : i1
    %109 = comb.or %108, %106 : i1
    %110 = comb.and %109, %a_first_counter : i1
    %opcode = seq.firreg %118 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %119 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %120 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %121 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %122 clock %clock {firrtl.random_init_start = 15 : ui64} : i12
    %111 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %112 = comb.and bin %io_in_a_valid, %a_first_counter, %57 : i1
    %113 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %114 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %115 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %116 = comb.icmp bin eq %io_in_a_bits_address, %address : i12
    %117 = comb.and bin %105, %107 : i1
    %118 = comb.mux bin %117, %io_in_a_bits_opcode, %opcode : i3
    %119 = comb.mux bin %117, %io_in_a_bits_param, %param : i3
    %120 = comb.mux bin %117, %io_in_a_bits_size, %size : i2
    %121 = comb.mux bin %117, %io_in_a_bits_source, %source : i6
    %122 = comb.mux bin %117, %io_in_a_bits_address, %address : i12
    %123 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %128 clock %clock reset sync %reset, %false {firrtl.random_init_start = 27 : ui64} : i1
    %124 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %125 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %126 = comb.xor %123, %true : i1
    %127 = comb.or %126, %124 : i1
    %128 = comb.and %127, %d_first_counter : i1
    %opcode_1 = seq.firreg %134 clock %clock {firrtl.random_init_start = 28 : ui64} : i3
    %size_1 = seq.firreg %135 clock %clock {firrtl.random_init_start = 33 : ui64} : i2
    %source_1 = seq.firreg %136 clock %clock {firrtl.random_init_start = 35 : ui64} : i6
    %129 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %130 = comb.and bin %io_in_d_valid, %d_first_counter, %57 : i1
    %131 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %132 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %133 = comb.and bin %123, %125 : i1
    %134 = comb.mux bin %133, %io_in_d_bits_opcode, %opcode_1 : i3
    %135 = comb.mux bin %133, %io_in_d_bits_size, %size_1 : i2
    %136 = comb.mux bin %133, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %222 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 43 : ui64} : i48
    %inflight_opcodes = seq.firreg %225 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 91 : ui64} : i192
    %inflight_sizes = seq.firreg %228 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 283 : ui64} : i192
    %a_first_counter_1 = seq.firreg %141 clock %clock reset sync %reset, %false {firrtl.random_init_start = 475 : ui64} : i1
    %137 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %138 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %139 = comb.xor %105, %true : i1
    %140 = comb.or %139, %137 : i1
    %141 = comb.and %140, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %146 clock %clock reset sync %reset, %false {firrtl.random_init_start = 476 : ui64} : i1
    %142 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %143 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %144 = comb.xor %123, %true : i1
    %145 = comb.or %144, %142 : i1
    %146 = comb.and %145, %d_first_counter_1 : i1
    %147 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %148 = comb.shru bin %inflight_opcodes, %147 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %149 = comb.extract %148 from 1 : (i192) -> i3
    %150 = comb.shru bin %inflight_sizes, %147 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %151 = comb.extract %150 from 1 : (i192) -> i3
    %152 = comb.concat %false, %151 {sv.namehint = "a_size_lookup"} : i1, i3
    %153 = comb.and bin %105, %138 : i1
    %154 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %155 = comb.shl bin %c1_i64, %154 {sv.namehint = "_a_set_T"} : i64
    %156 = comb.extract %155 from 0 : (i64) -> i48
    %157 = comb.mux bin %153, %156, %c0_i48 {sv.namehint = "a_set"} : i48
    %158 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %159 = comb.mux bin %153, %158, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %160 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %161 = comb.mux bin %153, %160, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %162 = comb.concat %c0_i511, %159 : i511, i4
    %163 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %164 = comb.shl bin %162, %163 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %165 = comb.extract %164 from 0 : (i515) -> i192
    %166 = comb.mux bin %153, %165, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %167 = comb.concat %c0_i511, %161 : i511, i3
    %168 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %169 = comb.shl bin %167, %168 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %170 = comb.extract %169 from 0 : (i514) -> i192
    %171 = comb.mux bin %153, %170, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %172 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %173 = comb.shru bin %inflight, %172 : i48
    %174 = comb.extract %173 from 0 : (i48) -> i1
    %175 = comb.xor bin %174, %true : i1
    %176 = comb.and bin %153, %57 : i1
    %177 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %178 = comb.and bin %io_in_d_valid, %143 : i1
    %179 = comb.icmp bin ne %io_in_d_bits_opcode, %c-2_i3 : i3
    %180 = comb.and bin %123, %143, %179 : i1
    %181 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %182 = comb.shl bin %c1_i64, %181 {sv.namehint = "_d_clr_T"} : i64
    %183 = comb.extract %182 from 0 : (i64) -> i48
    %184 = comb.mux bin %180, %183, %c0_i48 {sv.namehint = "d_clr"} : i48
    %185 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %186 = comb.shl bin %c15_i527, %185 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %187 = comb.extract %186 from 0 : (i527) -> i192
    %188 = comb.mux bin %180, %187, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %189 = comb.shl bin %c15_i527, %185 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %190 = comb.extract %189 from 0 : (i527) -> i192
    %191 = comb.mux bin %180, %190, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %192 = comb.and bin %178, %179 : i1
    %193 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %194 = comb.and bin %io_in_a_valid, %138, %193 {sv.namehint = "same_cycle_resp"} : i1
    %195 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %196 = comb.shru bin %inflight, %195 : i48
    %197 = comb.extract %196 from 0 : (i48) -> i1
    %198 = comb.or bin %197, %194 : i1
    %199 = comb.and bin %192, %57 : i1
    %200 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %201 = comb.icmp bin eq %io_in_d_bits_opcode, %200 : i3
    %202 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %203 = comb.icmp bin eq %io_in_d_bits_opcode, %202 : i3
    %204 = comb.or bin %201, %203 : i1
    %205 = comb.and bin %192, %194, %57 : i1
    %206 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %207 = comb.xor bin %194, %true : i1
    %208 = hw.array_get %1[%149] : !hw.array<8xi3>, i3
    %209 = comb.icmp bin eq %io_in_d_bits_opcode, %208 : i3
    %210 = hw.array_get %0[%149] : !hw.array<8xi3>, i3
    %211 = comb.icmp bin eq %io_in_d_bits_opcode, %210 : i3
    %212 = comb.or bin %209, %211 : i1
    %213 = comb.and bin %192, %207, %57 : i1
    %214 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %215 = comb.icmp bin eq %214, %152 : i4
    %216 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %217 = comb.xor bin %io_in_d_ready, %true : i1
    %218 = comb.or bin %217, %io_in_a_ready : i1
    %219 = comb.and bin %178, %138, %io_in_a_valid, %216, %179, %57 : i1
    %220 = comb.or bin %inflight, %157 {sv.namehint = "_inflight_T"} : i48
    %221 = comb.xor bin %184, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %222 = comb.and bin %220, %221 {sv.namehint = "_inflight_T_2"} : i48
    %223 = comb.or bin %inflight_opcodes, %166 {sv.namehint = "_inflight_opcodes_T"} : i192
    %224 = comb.xor bin %188, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %225 = comb.and bin %223, %224 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %226 = comb.or bin %inflight_sizes, %171 {sv.namehint = "_inflight_sizes_T"} : i192
    %227 = comb.xor bin %191, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %228 = comb.and bin %226, %227 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %235 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 477 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %229 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %230 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %231 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %232 = comb.or bin %229, %230, %231 : i1
    %233 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %234 = comb.or bin %105, %123 : i1
    %235 = comb.mux bin %234, %c0_i32, %233 : i32
    %inflight_1 = seq.firreg %256 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 509 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %258 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 749 : ui64} : i192
    %d_first_counter_2 = seq.firreg %240 clock %clock reset sync %reset, %false {firrtl.random_init_start = 942 : ui64} : i1
    %236 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %237 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %238 = comb.xor %123, %true : i1
    %239 = comb.or %238, %236 : i1
    %240 = comb.and %239, %d_first_counter_2 : i1
    %241 = comb.shru bin %inflight_sizes_1, %147 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %242 = comb.extract %241 from 1 : (i192) -> i3
    %243 = comb.concat %false, %242 {sv.namehint = "c_size_lookup"} : i1, i3
    %244 = comb.and bin %123, %237, %177 : i1
    %245 = comb.shl bin %c1_i64, %181 {sv.namehint = "_d_clr_T_1"} : i64
    %246 = comb.extract %245 from 0 : (i64) -> i48
    %247 = comb.mux bin %244, %246, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %248 = comb.shl bin %c15_i527, %185 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %249 = comb.extract %248 from 0 : (i527) -> i192
    %250 = comb.mux bin %244, %249, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %251 = comb.shru bin %inflight_1, %195 : i48
    %252 = comb.extract %251 from 0 : (i48) -> i1
    %253 = comb.and bin %io_in_d_valid, %237, %177, %57 : i1
    %254 = comb.icmp bin eq %214, %243 : i4
    %255 = comb.xor bin %247, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %256 = comb.and bin %inflight_1, %255 {sv.namehint = "_inflight_T_5"} : i48
    %257 = comb.xor bin %250, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %258 = comb.and bin %inflight_sizes_1, %257 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %264 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 943 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %259 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %260 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %261 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %262 = comb.or bin %259, %260, %261 : i1
    sv.always posedge %2 {
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %58 {
        sv.assert %4, immediate label "assert__assert_4"
      }
      sv.if %58 {
        sv.assert %14, immediate label "assert__assert_5"
      }
      sv.if %58 {
        sv.assert %11, immediate label "assert__assert_6"
      }
      sv.if %58 {
        sv.assert %59, immediate label "assert__assert_7"
      }
      sv.if %58 {
        sv.assert %60, immediate label "assert__assert_8"
      }
      sv.if %58 {
        sv.assert %61, immediate label "assert__assert_9"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %63 {
        sv.assert %4, immediate label "assert__assert_12"
      }
      sv.if %63 {
        sv.assert %14, immediate label "assert__assert_13"
      }
      sv.if %63 {
        sv.assert %11, immediate label "assert__assert_14"
      }
      sv.if %63 {
        sv.assert %59, immediate label "assert__assert_15"
      }
      sv.if %63 {
        sv.assert %64, immediate label "assert__assert_16"
      }
      sv.if %63 {
        sv.assert %60, immediate label "assert__assert_17"
      }
      sv.if %63 {
        sv.assert %61, immediate label "assert__assert_18"
      }
      sv.if %68 {
        sv.assert %67, immediate label "assert__assert_19"
      }
      sv.if %68 {
        sv.assert %4, immediate label "assert__assert_21"
      }
      sv.if %68 {
        sv.assert %11, immediate label "assert__assert_22"
      }
      sv.if %68 {
        sv.assert %69, immediate label "assert__assert_23"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_24"
      }
      sv.if %68 {
        sv.assert %61, immediate label "assert__assert_25"
      }
      sv.if %72 {
        sv.assert %67, immediate label "assert__assert_26"
      }
      sv.if %72 {
        sv.assert %4, immediate label "assert__assert_27"
      }
      sv.if %72 {
        sv.assert %11, immediate label "assert__assert_28"
      }
      sv.if %72 {
        sv.assert %69, immediate label "assert__assert_29"
      }
      sv.if %72 {
        sv.assert %70, immediate label "assert__assert_30"
      }
      sv.if %74 {
        sv.assert %67, immediate label "assert__assert_31"
      }
      sv.if %74 {
        sv.assert %4, immediate label "assert__assert_32"
      }
      sv.if %74 {
        sv.assert %11, immediate label "assert__assert_33"
      }
      sv.if %74 {
        sv.assert %69, immediate label "assert__assert_34"
      }
      sv.if %74 {
        sv.assert %77, immediate label "assert__assert_35"
      }
      sv.if %79 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %79 {
        sv.assert %4, immediate label "assert__assert_37"
      }
      sv.if %79 {
        sv.assert %11, immediate label "assert__assert_38"
      }
      sv.if %79 {
        sv.assert %80, immediate label "assert__assert_39"
      }
      sv.if %79 {
        sv.assert %70, immediate label "assert__assert_40"
      }
      sv.if %82 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %82 {
        sv.assert %4, immediate label "assert__assert_42"
      }
      sv.if %82 {
        sv.assert %11, immediate label "assert__assert_43"
      }
      sv.if %82 {
        sv.assert %84, immediate label "assert__assert_44"
      }
      sv.if %82 {
        sv.assert %70, immediate label "assert__assert_45"
      }
      sv.if %86 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %86 {
        sv.assert %4, immediate label "assert__assert_47"
      }
      sv.if %86 {
        sv.assert %11, immediate label "assert__assert_48"
      }
      sv.if %86 {
        sv.assert %87, immediate label "assert__assert_49"
      }
      sv.if %86 {
        sv.assert %70, immediate label "assert__assert_50"
      }
      sv.if %86 {
        sv.assert %61, immediate label "assert__assert_51"
      }
      sv.if %89 {
        sv.assert %88, immediate label "assert__assert_52"
      }
      sv.if %93 {
        sv.assert %91, immediate label "assert__assert_53"
      }
      sv.if %93 {
        sv.assert %94, immediate label "assert__assert_54"
      }
      sv.if %96 {
        sv.assert %91, immediate label "assert__assert_58"
      }
      sv.if %96 {
        sv.assert %false, immediate label "assert__assert_59"
      }
      sv.if %96 {
        sv.assert %94, immediate label "assert__assert_60"
      }
      sv.if %98 {
        sv.assert %91, immediate label "assert__assert_65"
      }
      sv.if %98 {
        sv.assert %false, immediate label "assert__assert_66"
      }
      sv.if %98 {
        sv.assert %94, immediate label "assert__assert_67"
      }
      sv.if %100 {
        sv.assert %91, immediate label "assert__assert_72"
      }
      sv.if %102 {
        sv.assert %91, immediate label "assert__assert_76"
      }
      sv.if %104 {
        sv.assert %91, immediate label "assert__assert_80"
      }
      sv.if %112 {
        sv.assert %111, immediate label "assert__assert_87"
      }
      sv.if %112 {
        sv.assert %113, immediate label "assert__assert_88"
      }
      sv.if %112 {
        sv.assert %114, immediate label "assert__assert_89"
      }
      sv.if %112 {
        sv.assert %115, immediate label "assert__assert_90"
      }
      sv.if %112 {
        sv.assert %116, immediate label "assert__assert_91"
      }
      sv.if %130 {
        sv.assert %129, immediate label "assert__assert_92"
      }
      sv.if %130 {
        sv.assert %131, immediate label "assert__assert_94"
      }
      sv.if %130 {
        sv.assert %132, immediate label "assert__assert_95"
      }
      sv.if %176 {
        sv.assert %175, immediate label "assert__assert_98"
      }
      sv.if %199 {
        sv.assert %198, immediate label "assert__assert_99"
      }
      sv.if %205 {
        sv.assert %204, immediate label "assert__assert_100"
      }
      sv.if %205 {
        sv.assert %206, immediate label "assert__assert_101"
      }
      sv.if %213 {
        sv.assert %212, immediate label "assert__assert_102"
      }
      sv.if %213 {
        sv.assert %215, immediate label "assert__assert_103"
      }
      sv.if %219 {
        sv.assert %218, immediate label "assert__assert_104"
      }
      sv.if %57 {
        sv.assert %232, immediate label "assert__assert_105"
      }
      sv.if %253 {
        sv.assert %252, immediate label "assert__assert_107"
      }
      sv.if %253 {
        sv.assert %254, immediate label "assert__assert_109"
      }
      sv.if %57 {
        sv.assert %262, immediate label "assert__assert_111"
      }
    }
    %263 = comb.add bin %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %264 = comb.mux bin %123, %c0_i32, %263 : i32
    hw.output
  }
  hw.module private @TLDebugModuleInner(in %clock : !seq.clock, in %reset : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i2, in %auto_tl_in_a_bits_source : i6, in %auto_tl_in_a_bits_address : i12, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i2, out auto_tl_in_d_bits_source : i6, out auto_tl_in_d_bits_data : i64, out auto_dmi_in_a_ready : i1, in %auto_dmi_in_a_valid : i1, in %auto_dmi_in_a_bits_opcode : i3, in %auto_dmi_in_a_bits_param : i3, in %auto_dmi_in_a_bits_size : i2, in %auto_dmi_in_a_bits_source : i1, in %auto_dmi_in_a_bits_address : i9, in %auto_dmi_in_a_bits_mask : i4, in %auto_dmi_in_a_bits_data : i32, in %auto_dmi_in_a_bits_corrupt : i1, in %auto_dmi_in_d_ready : i1, out auto_dmi_in_d_valid : i1, out auto_dmi_in_d_bits_opcode : i3, out auto_dmi_in_d_bits_size : i2, out auto_dmi_in_d_bits_source : i1, out auto_dmi_in_d_bits_data : i32, in %io_dmactive : i1, in %io_innerCtrl_valid : i1, in %io_innerCtrl_bits_resumereq : i1, in %io_innerCtrl_bits_hartsel : i10, in %io_innerCtrl_bits_ackhavereset : i1, in %io_innerCtrl_bits_hrmask_0 : i1, out io_hgDebugInt_0 : i1, in %io_hartIsInReset_0 : i1) {
    %c4128_i16 = hw.constant 4128 : i16
    %c35_i12 = hw.constant 35 : i12
    %c32768_i19 = hw.constant 32768 : i19
    %c0_i4 = hw.constant 0 : i4
    %c0_i14 = hw.constant 0 : i14
    %c1_i256 = hw.constant 1 : i256
    %c1_i32 = hw.constant 1 : i32
    %false = hw.constant false {sv.namehint = "DMSTATUSRdData_anynonexistent"}
    %true = hw.constant true {sv.namehint = "hamaskFull_0"}
    %c2_i8 = hw.constant 2 : i8
    %c0_i3 = hw.constant 0 : i3
    %c1048691_i32 = hw.constant 1048691 : i32
    %c19_i32 = hw.constant 19 : i32
    %c28672_i17 = hw.constant 28672 : i17
    %c-94_i8 = hw.constant -94 : i8
    %c3_i3 = hw.constant 3 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i6 = hw.constant 0 : i6
    %c0_i12 = hw.constant 0 : i12
    %c0_i64 = hw.constant 0 : i64
    %c0_i8 = hw.constant 0 : i8
    %c58720367_i64 = hw.constant 58720367 : i64
    %c1048691_i64 = hw.constant 1048691 : i64
    %c1152963438438252659_i64 = hw.constant 1152963438438252659 : i64
    %c8872131342536549411_i64 = hw.constant 8872131342536549411 : i64
    %c-1062809434914291609_i64 = hw.constant -1062809434914291609 : i64
    %c1152959040391750771_i64 = hw.constant 1152959040391750771 : i64
    %c1135121202967571_i64 = hw.constant 1135121202967571 : i64
    %c-142979517114977261_i64 = hw.constant -142979517114977261 : i64
    %c4612886698286653475_i64 = hw.constant 4612886698286653475 : i64
    %c-1062809433653637005_i64 = hw.constant -1062809433653637005 : i64
    %c1148417969475289199_i64 = hw.constant 1148417969475289199 : i64
    %c252202055886700655_i64 = hw.constant 252202055886700655 : i64
    %c28_i7 = hw.constant 28 : i7
    %c0_i5 = hw.constant 0 : i5
    %c3_i7 = hw.constant 3 : i7
    %c0_i32 = hw.constant 0 : i32
    %c0_i24 = hw.constant 0 : i24
    %c0_i16 = hw.constant 0 : i16
    %c1_i2 = hw.constant 1 : i2
    %c2_i3 = hw.constant 2 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-1_i2 = hw.constant -1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i16 = hw.constant -1 : i16
    %c-1_i32 = hw.constant -1 : i32
    %c0_i27 = hw.constant 0 : i27
    %c0_i248 = hw.constant 0 : i248
    %c-1_i10 = hw.constant -1 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_28(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_dmi_in_d_ready: i1, io_in_a_valid: %auto_dmi_in_a_valid: i1, io_in_a_bits_opcode: %auto_dmi_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_dmi_in_a_bits_param: i3, io_in_a_bits_size: %auto_dmi_in_a_bits_size: i2, io_in_a_bits_source: %auto_dmi_in_a_bits_source: i1, io_in_a_bits_address: %auto_dmi_in_a_bits_address: i9, io_in_a_bits_mask: %auto_dmi_in_a_bits_mask: i4, io_in_a_bits_corrupt: %auto_dmi_in_a_bits_corrupt: i1, io_in_d_ready: %auto_dmi_in_d_ready: i1, io_in_d_valid: %auto_dmi_in_a_valid: i1, io_in_d_bits_opcode: %398: i3, io_in_d_bits_size: %auto_dmi_in_a_bits_size: i2, io_in_d_bits_source: %auto_dmi_in_a_bits_source: i1) -> ()
    hw.instance "monitor_1" @TLMonitor_29(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_tl_in_d_ready: i1, io_in_a_valid: %auto_tl_in_a_valid: i1, io_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_tl_in_a_bits_param: i3, io_in_a_bits_size: %auto_tl_in_a_bits_size: i2, io_in_a_bits_source: %auto_tl_in_a_bits_source: i6, io_in_a_bits_address: %auto_tl_in_a_bits_address: i12, io_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, io_in_d_ready: %auto_tl_in_d_ready: i1, io_in_d_valid: %auto_tl_in_a_valid: i1, io_in_d_bits_opcode: %912: i3, io_in_d_bits_size: %auto_tl_in_a_bits_size: i2, io_in_d_bits_source: %auto_tl_in_a_bits_source: i6) -> ()
    %haltedBitRegs = seq.firreg %107 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "haltedSummary"} : i1
    %resumeReqRegs = seq.firreg %113 clock %clock {firrtl.random_init_start = 1 : ui64, sv.namehint = "resumeReqRegs"} : i1
    %haveResetBitRegs = seq.firreg %18 clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    %1 = comb.icmp bin eq %io_innerCtrl_bits_hartsel, %c0_i10 {sv.namehint = "hamaskWrSel_0"} : i10
    %hrmaskReg_0 = seq.firreg %4 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %hartIsInResetSync_0_debug_hartReset_0.io_q = hw.instance "hartIsInResetSync_0_debug_hartReset_0" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_hartIsInReset_0: i1) -> (io_q: i1) {sv.namehint = "hartIsInResetSync_0_debug_hartReset_0.io_q"}
    %2 = comb.xor bin %io_dmactive, %true : i1
    %3 = comb.mux bin %io_innerCtrl_valid, %io_innerCtrl_bits_hrmask_0, %hrmaskReg_0 : i1
    %4 = comb.and %io_dmactive, %3 : i1
    %hrDebugIntReg_0 = seq.firreg %8 clock %clock reset async %reset, %false {firrtl.random_init_start = 5 : ui64, sv.namehint = "hrDebugInt_0"} : i1
    %5 = comb.xor bin %haltedBitRegs, %true : i1
    %6 = comb.and bin %hrDebugIntReg_0, %5 : i1
    %7 = comb.or bin %hartIsInResetSync_0_debug_hartReset_0.io_q, %6 : i1
    %8 = comb.and %io_dmactive, %hrmaskReg_0, %7 : i1
    %9 = comb.and bin %io_innerCtrl_valid, %io_innerCtrl_bits_resumereq {sv.namehint = "resumereq"} : i1
    %10 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_DMSTATUSRdData_anyrunning_T_2"} : i1
    %11 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_DMSTATUSRdData_allrunning_T_2"} : i1
    %12 = comb.and bin %io_innerCtrl_valid, %io_innerCtrl_bits_ackhavereset : i1
    %13 = comb.xor bin %1, %true {sv.namehint = "_haveResetBitRegs_T"} : i1
    %14 = comb.and bin %haveResetBitRegs, %13 {sv.namehint = "_haveResetBitRegs_T_1"} : i1
    %15 = comb.or bin %14, %hartIsInResetSync_0_debug_hartReset_0.io_q {sv.namehint = "_haveResetBitRegs_T_2"} : i1
    %16 = comb.or bin %haveResetBitRegs, %hartIsInResetSync_0_debug_hartReset_0.io_q {sv.namehint = "_haveResetBitRegs_T_3"} : i1
    %17 = comb.mux bin %12, %15, %16 : i1
    %18 = comb.and %io_dmactive, %17 : i1
    %19 = comb.concat %c0_i31, %haltedBitRegs {sv.namehint = "selectedHaltedStatus"} : i31, i1
    %20 = comb.concat %c0_i31, %haltedBitRegs {sv.namehint = "_HALTSUM1RdData_T"} : i31, i1
    %ABSTRACTCSReg_cmderr = seq.firreg %31 clock %clock {firrtl.random_init_start = 27 : ui64, sv.namehint = "ABSTRACTCSReg_cmderr"} : i3
    %21 = comb.and bin %292, %987 {sv.namehint = "ABSTRACTCSWrEn"} : i1
    %22 = comb.xor bin %293, %c-1_i3 {sv.namehint = "_ABSTRACTCSReg_cmderr_T"} : i3
    %23 = comb.xor %21, %true : i1
    %24 = comb.replicate %23 : (i1) -> i3
    %25 = comb.or %24, %22 : i3
    %26 = comb.and %25, %ABSTRACTCSReg_cmderr : i3
    %27 = comb.mux bin %1026, %c-4_i3, %26 : i3
    %28 = comb.mux bin %1024, %c2_i3, %27 : i3
    %29 = comb.mux bin %1042, %c3_i3, %28 : i3
    %30 = comb.mux bin %994, %c1_i3, %29 : i3
    %31 = comb.mux bin %io_dmactive, %30, %c0_i3 : i3
    %ABSTRACTAUTOReg_autoexecprogbuf = seq.firreg %34 clock %clock {firrtl.random_init_start = 38 : ui64, sv.namehint = "ABSTRACTAUTOReg_autoexecprogbuf"} : i16
    %ABSTRACTAUTOReg_autoexecdata = seq.firreg %38 clock %clock {firrtl.random_init_start = 58 : ui64, sv.namehint = "ABSTRACTAUTOReg_autoexecdata"} : i12
    %32 = comb.and bin %232, %987 : i1
    %33 = comb.mux bin %32, %233, %ABSTRACTAUTOReg_autoexecprogbuf : i16
    %34 = comb.mux bin %io_dmactive, %33, %c0_i16 : i16
    %35 = comb.and bin %227, %987 : i1
    %36 = comb.concat %c0_i10, %228 : i10, i2
    %37 = comb.mux bin %35, %36, %ABSTRACTAUTOReg_autoexecdata : i12
    %38 = comb.mux bin %io_dmactive, %37, %c0_i12 : i12
    %39 = comb.or bin %201, %200 {sv.namehint = "dmiAbstractDataAccessVec_0"} : i1
    %40 = comb.or bin %143, %142 {sv.namehint = "dmiAbstractDataAccessVec_4"} : i1
    %41 = comb.or bin %275, %274 {sv.namehint = "dmiProgramBufferAccessVec_0"} : i1
    %42 = comb.or bin %254, %253 {sv.namehint = "dmiProgramBufferAccessVec_4"} : i1
    %43 = comb.or bin %284, %283 {sv.namehint = "dmiProgramBufferAccessVec_8"} : i1
    %44 = comb.or bin %183, %182 {sv.namehint = "dmiProgramBufferAccessVec_12"} : i1
    %45 = comb.or bin %316, %315 {sv.namehint = "dmiProgramBufferAccessVec_16"} : i1
    %46 = comb.or bin %236, %235 {sv.namehint = "dmiProgramBufferAccessVec_20"} : i1
    %47 = comb.or bin %245, %244 {sv.namehint = "dmiProgramBufferAccessVec_24"} : i1
    %48 = comb.or bin %174, %173 {sv.namehint = "dmiProgramBufferAccessVec_28"} : i1
    %49 = comb.or bin %304, %303 {sv.namehint = "dmiProgramBufferAccessVec_32"} : i1
    %50 = comb.or bin %165, %164 {sv.namehint = "dmiProgramBufferAccessVec_36"} : i1
    %51 = comb.or bin %219, %218 {sv.namehint = "dmiProgramBufferAccessVec_40"} : i1
    %52 = comb.or bin %192, %191 {sv.namehint = "dmiProgramBufferAccessVec_44"} : i1
    %53 = comb.or bin %295, %294 {sv.namehint = "dmiProgramBufferAccessVec_48"} : i1
    %54 = comb.or bin %263, %262 {sv.namehint = "dmiProgramBufferAccessVec_52"} : i1
    %55 = comb.or bin %156, %155 {sv.namehint = "dmiProgramBufferAccessVec_56"} : i1
    %56 = comb.or bin %210, %209 {sv.namehint = "dmiProgramBufferAccessVec_60"} : i1
    %57 = comb.or bin %39, %203, %202, %205, %204, %207, %206, %40, %146, %145, %149, %148, %152, %151 {sv.namehint = "dmiAbstractDataAccess"} : i1
    %58 = comb.or bin %41, %277, %276, %279, %278, %281, %280, %42, %256, %255, %258, %257, %260, %259, %43, %286, %285, %288, %287, %290, %289, %44, %185, %184, %187, %186, %189, %188, %45, %318, %317, %320, %319, %322, %321, %46, %238, %237, %240, %239, %242, %241, %47, %247, %246, %249, %248, %251, %250, %48, %176, %175, %178, %177, %180, %179, %49, %306, %305, %308, %307, %310, %309, %50, %167, %166, %169, %168, %171, %170, %51, %221, %220, %223, %222, %225, %224, %52, %194, %193, %196, %195, %198, %197, %53, %297, %296, %299, %298, %301, %300, %54, %265, %264, %267, %266, %269, %268, %55, %158, %157, %160, %159, %162, %161, %56, %212, %211, %214, %213, %216, %215 {sv.namehint = "dmiProgramBufferAccess"} : i1
    %59 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 0 : (i12) -> i1
    %60 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 1 : (i12) -> i1
    %61 = comb.and bin %39, %59 {sv.namehint = "autoexecData_0"} : i1
    %62 = comb.and bin %40, %60 {sv.namehint = "autoexecData_1"} : i1
    %63 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 0 : (i16) -> i1
    %64 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 1 : (i16) -> i1
    %65 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 2 : (i16) -> i1
    %66 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 3 : (i16) -> i1
    %67 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 4 : (i16) -> i1
    %68 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 5 : (i16) -> i1
    %69 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 6 : (i16) -> i1
    %70 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 7 : (i16) -> i1
    %71 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 8 : (i16) -> i1
    %72 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 9 : (i16) -> i1
    %73 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 10 : (i16) -> i1
    %74 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 11 : (i16) -> i1
    %75 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 12 : (i16) -> i1
    %76 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 13 : (i16) -> i1
    %77 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 14 : (i16) -> i1
    %78 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 15 : (i16) -> i1
    %79 = comb.and bin %41, %63 {sv.namehint = "autoexecProg_0"} : i1
    %80 = comb.and bin %42, %64 {sv.namehint = "autoexecProg_1"} : i1
    %81 = comb.and bin %43, %65 {sv.namehint = "autoexecProg_2"} : i1
    %82 = comb.and bin %44, %66 {sv.namehint = "autoexecProg_3"} : i1
    %83 = comb.and bin %45, %67 {sv.namehint = "autoexecProg_4"} : i1
    %84 = comb.and bin %46, %68 {sv.namehint = "autoexecProg_5"} : i1
    %85 = comb.and bin %47, %69 {sv.namehint = "autoexecProg_6"} : i1
    %86 = comb.and bin %48, %70 {sv.namehint = "autoexecProg_7"} : i1
    %87 = comb.and bin %49, %71 {sv.namehint = "autoexecProg_8"} : i1
    %88 = comb.and bin %50, %72 {sv.namehint = "autoexecProg_9"} : i1
    %89 = comb.and bin %51, %73 {sv.namehint = "autoexecProg_10"} : i1
    %90 = comb.and bin %52, %74 {sv.namehint = "autoexecProg_11"} : i1
    %91 = comb.and bin %53, %75 {sv.namehint = "autoexecProg_12"} : i1
    %92 = comb.and bin %54, %76 {sv.namehint = "autoexecProg_13"} : i1
    %93 = comb.and bin %55, %77 {sv.namehint = "autoexecProg_14"} : i1
    %94 = comb.and bin %56, %78 {sv.namehint = "autoexecProg_15"} : i1
    %95 = comb.or bin %61, %62, %79, %80, %81, %82, %83, %84, %85, %86, %87, %88, %89, %90, %91, %92, %93, %94 {sv.namehint = "autoexec"} : i1
    %COMMANDReg_cmdtype = seq.firreg %100 clock %clock {firrtl.random_init_start = 70 : ui64} : i8
    %COMMANDReg_control = seq.firreg %102 clock %clock {firrtl.random_init_start = 78 : ui64} : i24
    %96 = comb.extract %314 from 0 {sv.namehint = "COMMANDWrData_control"} : (i32) -> i24
    %97 = comb.extract %314 from 24 {sv.namehint = "COMMANDWrData_cmdtype"} : (i32) -> i8
    %98 = comb.and bin %313, %987 {sv.namehint = "COMMANDWrEn"} : i1
    %99 = comb.mux bin %98, %97, %COMMANDReg_cmdtype : i8
    %100 = comb.mux bin %io_dmactive, %99, %c0_i8 : i8
    %101 = comb.mux bin %98, %96, %COMMANDReg_control : i24
    %102 = comb.mux bin %io_dmactive, %101, %c0_i24 : i24
    %abstractDataMem_0 = seq.firreg %913 clock %clock {firrtl.random_init_start = 102 : ui64} : i8
    %abstractDataMem_1 = seq.firreg %914 clock %clock {firrtl.random_init_start = 110 : ui64} : i8
    %abstractDataMem_2 = seq.firreg %915 clock %clock {firrtl.random_init_start = 118 : ui64} : i8
    %abstractDataMem_3 = seq.firreg %916 clock %clock {firrtl.random_init_start = 126 : ui64} : i8
    %abstractDataMem_4 = seq.firreg %917 clock %clock {firrtl.random_init_start = 134 : ui64} : i8
    %abstractDataMem_5 = seq.firreg %918 clock %clock {firrtl.random_init_start = 142 : ui64} : i8
    %abstractDataMem_6 = seq.firreg %919 clock %clock {firrtl.random_init_start = 150 : ui64} : i8
    %abstractDataMem_7 = seq.firreg %920 clock %clock {firrtl.random_init_start = 158 : ui64} : i8
    %programBufferMem_0 = seq.firreg %921 clock %clock {firrtl.random_init_start = 166 : ui64} : i8
    %programBufferMem_1 = seq.firreg %922 clock %clock {firrtl.random_init_start = 174 : ui64} : i8
    %programBufferMem_2 = seq.firreg %923 clock %clock {firrtl.random_init_start = 182 : ui64} : i8
    %programBufferMem_3 = seq.firreg %924 clock %clock {firrtl.random_init_start = 190 : ui64} : i8
    %programBufferMem_4 = seq.firreg %925 clock %clock {firrtl.random_init_start = 198 : ui64} : i8
    %programBufferMem_5 = seq.firreg %926 clock %clock {firrtl.random_init_start = 206 : ui64} : i8
    %programBufferMem_6 = seq.firreg %927 clock %clock {firrtl.random_init_start = 214 : ui64} : i8
    %programBufferMem_7 = seq.firreg %928 clock %clock {firrtl.random_init_start = 222 : ui64} : i8
    %programBufferMem_8 = seq.firreg %929 clock %clock {firrtl.random_init_start = 230 : ui64} : i8
    %programBufferMem_9 = seq.firreg %930 clock %clock {firrtl.random_init_start = 238 : ui64} : i8
    %programBufferMem_10 = seq.firreg %931 clock %clock {firrtl.random_init_start = 246 : ui64} : i8
    %programBufferMem_11 = seq.firreg %932 clock %clock {firrtl.random_init_start = 254 : ui64} : i8
    %programBufferMem_12 = seq.firreg %933 clock %clock {firrtl.random_init_start = 262 : ui64} : i8
    %programBufferMem_13 = seq.firreg %934 clock %clock {firrtl.random_init_start = 270 : ui64} : i8
    %programBufferMem_14 = seq.firreg %935 clock %clock {firrtl.random_init_start = 278 : ui64} : i8
    %programBufferMem_15 = seq.firreg %936 clock %clock {firrtl.random_init_start = 286 : ui64} : i8
    %programBufferMem_16 = seq.firreg %937 clock %clock {firrtl.random_init_start = 294 : ui64} : i8
    %programBufferMem_17 = seq.firreg %938 clock %clock {firrtl.random_init_start = 302 : ui64} : i8
    %programBufferMem_18 = seq.firreg %939 clock %clock {firrtl.random_init_start = 310 : ui64} : i8
    %programBufferMem_19 = seq.firreg %940 clock %clock {firrtl.random_init_start = 318 : ui64} : i8
    %programBufferMem_20 = seq.firreg %941 clock %clock {firrtl.random_init_start = 326 : ui64} : i8
    %programBufferMem_21 = seq.firreg %942 clock %clock {firrtl.random_init_start = 334 : ui64} : i8
    %programBufferMem_22 = seq.firreg %943 clock %clock {firrtl.random_init_start = 342 : ui64} : i8
    %programBufferMem_23 = seq.firreg %944 clock %clock {firrtl.random_init_start = 350 : ui64} : i8
    %programBufferMem_24 = seq.firreg %945 clock %clock {firrtl.random_init_start = 358 : ui64} : i8
    %programBufferMem_25 = seq.firreg %946 clock %clock {firrtl.random_init_start = 366 : ui64} : i8
    %programBufferMem_26 = seq.firreg %947 clock %clock {firrtl.random_init_start = 374 : ui64} : i8
    %programBufferMem_27 = seq.firreg %948 clock %clock {firrtl.random_init_start = 382 : ui64} : i8
    %programBufferMem_28 = seq.firreg %949 clock %clock {firrtl.random_init_start = 390 : ui64} : i8
    %programBufferMem_29 = seq.firreg %950 clock %clock {firrtl.random_init_start = 398 : ui64} : i8
    %programBufferMem_30 = seq.firreg %951 clock %clock {firrtl.random_init_start = 406 : ui64} : i8
    %programBufferMem_31 = seq.firreg %952 clock %clock {firrtl.random_init_start = 414 : ui64} : i8
    %programBufferMem_32 = seq.firreg %953 clock %clock {firrtl.random_init_start = 422 : ui64} : i8
    %programBufferMem_33 = seq.firreg %954 clock %clock {firrtl.random_init_start = 430 : ui64} : i8
    %programBufferMem_34 = seq.firreg %955 clock %clock {firrtl.random_init_start = 438 : ui64} : i8
    %programBufferMem_35 = seq.firreg %956 clock %clock {firrtl.random_init_start = 446 : ui64} : i8
    %programBufferMem_36 = seq.firreg %957 clock %clock {firrtl.random_init_start = 454 : ui64} : i8
    %programBufferMem_37 = seq.firreg %958 clock %clock {firrtl.random_init_start = 462 : ui64} : i8
    %programBufferMem_38 = seq.firreg %959 clock %clock {firrtl.random_init_start = 470 : ui64} : i8
    %programBufferMem_39 = seq.firreg %960 clock %clock {firrtl.random_init_start = 478 : ui64} : i8
    %programBufferMem_40 = seq.firreg %961 clock %clock {firrtl.random_init_start = 486 : ui64} : i8
    %programBufferMem_41 = seq.firreg %962 clock %clock {firrtl.random_init_start = 494 : ui64} : i8
    %programBufferMem_42 = seq.firreg %963 clock %clock {firrtl.random_init_start = 502 : ui64} : i8
    %programBufferMem_43 = seq.firreg %964 clock %clock {firrtl.random_init_start = 510 : ui64} : i8
    %programBufferMem_44 = seq.firreg %965 clock %clock {firrtl.random_init_start = 518 : ui64} : i8
    %programBufferMem_45 = seq.firreg %966 clock %clock {firrtl.random_init_start = 526 : ui64} : i8
    %programBufferMem_46 = seq.firreg %967 clock %clock {firrtl.random_init_start = 534 : ui64} : i8
    %programBufferMem_47 = seq.firreg %968 clock %clock {firrtl.random_init_start = 542 : ui64} : i8
    %programBufferMem_48 = seq.firreg %969 clock %clock {firrtl.random_init_start = 550 : ui64} : i8
    %programBufferMem_49 = seq.firreg %970 clock %clock {firrtl.random_init_start = 558 : ui64} : i8
    %programBufferMem_50 = seq.firreg %971 clock %clock {firrtl.random_init_start = 566 : ui64} : i8
    %programBufferMem_51 = seq.firreg %972 clock %clock {firrtl.random_init_start = 574 : ui64} : i8
    %programBufferMem_52 = seq.firreg %973 clock %clock {firrtl.random_init_start = 582 : ui64} : i8
    %programBufferMem_53 = seq.firreg %974 clock %clock {firrtl.random_init_start = 590 : ui64} : i8
    %programBufferMem_54 = seq.firreg %975 clock %clock {firrtl.random_init_start = 598 : ui64} : i8
    %programBufferMem_55 = seq.firreg %976 clock %clock {firrtl.random_init_start = 606 : ui64} : i8
    %programBufferMem_56 = seq.firreg %977 clock %clock {firrtl.random_init_start = 614 : ui64} : i8
    %programBufferMem_57 = seq.firreg %978 clock %clock {firrtl.random_init_start = 622 : ui64} : i8
    %programBufferMem_58 = seq.firreg %979 clock %clock {firrtl.random_init_start = 630 : ui64} : i8
    %programBufferMem_59 = seq.firreg %980 clock %clock {firrtl.random_init_start = 638 : ui64} : i8
    %programBufferMem_60 = seq.firreg %981 clock %clock {firrtl.random_init_start = 646 : ui64} : i8
    %programBufferMem_61 = seq.firreg %982 clock %clock {firrtl.random_init_start = 654 : ui64} : i8
    %programBufferMem_62 = seq.firreg %983 clock %clock {firrtl.random_init_start = 662 : ui64} : i8
    %programBufferMem_63 = seq.firreg %984 clock %clock {firrtl.random_init_start = 670 : ui64} : i8
    %103 = comb.xor bin %hartIsInResetSync_0_debug_hartReset_0.io_q, %true {sv.namehint = "_resumeReqRegs_T_7"} : i1
    %104 = comb.xor %659, %true : i1
    %105 = comb.and %104, %haltedBitRegs : i1
    %106 = comb.or %719, %105 : i1
    %107 = comb.and %io_dmactive, %106, %103 : i1
    %108 = comb.xor %659, %true : i1
    %109 = comb.and %108, %resumeReqRegs, %103 : i1
    %110 = comb.or bin %resumeReqRegs, %1 {sv.namehint = "_resumeReqRegs_T_6"} : i1
    %111 = comb.and bin %110, %103 {sv.namehint = "_resumeReqRegs_T_8"} : i1
    %112 = comb.mux bin %9, %111, %109 : i1
    %113 = comb.and %io_dmactive, %112 : i1
    %114 = comb.xor bin %resumeReqRegs, %true {sv.namehint = "_resumeAcks_T"} : i1
    %115 = comb.xor bin %1, %true {sv.namehint = "_resumeAcks_T_1"} : i1
    %116 = comb.and bin %114, %115 {sv.namehint = "_resumeAcks_T_2"} : i1
    %117 = comb.xor bin %resumeReqRegs, %true {sv.namehint = "_resumeAcks_T_3"} : i1
    %118 = comb.mux bin %9, %116, %117 {sv.namehint = "resumeAcks"} : i1
    %119 = comb.concat %COMMANDReg_cmdtype, %COMMANDReg_control {sv.namehint = "_accessRegisterCommandReg_T"} : i8, i24
    %120 = comb.icmp bin eq %auto_dmi_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %121 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %122 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %123 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %124 = comb.concat %122, %123 : i1, i1
    %125 = comb.icmp bin eq %124, %c0_i2 {sv.namehint = "_out_T_45"} : i2
    %126 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %127 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %128 = comb.concat %126, %127 : i1, i1
    %129 = comb.icmp bin eq %128, %c1_i2 {sv.namehint = "_out_T_47"} : i2
    %130 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %131 = comb.concat %121, %130 : i1, i1
    %132 = comb.icmp bin eq %131, %c-2_i2 {sv.namehint = "_out_T_29"} : i2
    %133 = comb.extract %auto_dmi_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_4"} : (i4) -> i1
    %134 = comb.extract %auto_dmi_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_6"} : (i4) -> i1
    %135 = comb.extract %auto_dmi_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_8"} : (i4) -> i1
    %136 = comb.extract %auto_dmi_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_10"} : (i4) -> i1
    %137 = comb.replicate %133 {sv.namehint = "_out_backMask_T_5"} : (i1) -> i8
    %138 = comb.replicate %134 {sv.namehint = "_out_backMask_T_7"} : (i1) -> i8
    %139 = comb.replicate %135 {sv.namehint = "_out_backMask_T_9"} : (i1) -> i8
    %140 = comb.replicate %136 {sv.namehint = "_out_backMask_T_11"} : (i1) -> i8
    %141 = comb.concat %140, %139, %138, %137 {sv.namehint = "out_backMask"} : i8, i8, i8, i8
    %142 = comb.and bin %354, %133 {sv.namehint = "dmiAbstractDataRdEn_4"} : i1
    %143 = comb.and bin %373, %133 {sv.namehint = "dmiAbstractDataWrEnMaybe_4"} : i1
    %144 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "_out_T_1083"} : (i32) -> i8
    %145 = comb.and bin %354, %134 {sv.namehint = "dmiAbstractDataRdEn_5"} : i1
    %146 = comb.and bin %373, %134 {sv.namehint = "dmiAbstractDataWrEnMaybe_5"} : i1
    %147 = comb.extract %auto_dmi_in_a_bits_data from 8 {sv.namehint = "_out_T_1094"} : (i32) -> i8
    %148 = comb.and bin %354, %135 {sv.namehint = "dmiAbstractDataRdEn_6"} : i1
    %149 = comb.and bin %373, %135 {sv.namehint = "dmiAbstractDataWrEnMaybe_6"} : i1
    %150 = comb.extract %auto_dmi_in_a_bits_data from 16 {sv.namehint = "_out_T_1105"} : (i32) -> i8
    %151 = comb.and bin %354, %136 {sv.namehint = "dmiAbstractDataRdEn_7"} : i1
    %152 = comb.and bin %373, %136 {sv.namehint = "dmiAbstractDataWrEnMaybe_7"} : i1
    %153 = comb.extract %auto_dmi_in_a_bits_data from 24 {sv.namehint = "_out_T_1116"} : (i32) -> i8
    %154 = comb.concat %abstractDataMem_7, %abstractDataMem_6, %abstractDataMem_5, %abstractDataMem_4 {sv.namehint = "out_prepend_2"} : i8, i8, i8, i8
    %155 = comb.and bin %369, %133 {sv.namehint = "dmiProgramBufferRdEn_56"} : i1
    %156 = comb.and bin %389, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_56"} : i1
    %157 = comb.and bin %369, %134 {sv.namehint = "dmiProgramBufferRdEn_57"} : i1
    %158 = comb.and bin %389, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_57"} : i1
    %159 = comb.and bin %369, %135 {sv.namehint = "dmiProgramBufferRdEn_58"} : i1
    %160 = comb.and bin %389, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_58"} : i1
    %161 = comb.and bin %369, %136 {sv.namehint = "dmiProgramBufferRdEn_59"} : i1
    %162 = comb.and bin %389, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_59"} : i1
    %163 = comb.concat %programBufferMem_59, %programBufferMem_58, %programBufferMem_57, %programBufferMem_56 {sv.namehint = "out_prepend_5"} : i8, i8, i8, i8
    %164 = comb.and bin %364, %133 {sv.namehint = "dmiProgramBufferRdEn_36"} : i1
    %165 = comb.and bin %384, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_36"} : i1
    %166 = comb.and bin %364, %134 {sv.namehint = "dmiProgramBufferRdEn_37"} : i1
    %167 = comb.and bin %384, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_37"} : i1
    %168 = comb.and bin %364, %135 {sv.namehint = "dmiProgramBufferRdEn_38"} : i1
    %169 = comb.and bin %384, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_38"} : i1
    %170 = comb.and bin %364, %136 {sv.namehint = "dmiProgramBufferRdEn_39"} : i1
    %171 = comb.and bin %384, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_39"} : i1
    %172 = comb.concat %programBufferMem_39, %programBufferMem_38, %programBufferMem_37, %programBufferMem_36 {sv.namehint = "out_prepend_8"} : i8, i8, i8, i8
    %173 = comb.and bin %362, %133 {sv.namehint = "dmiProgramBufferRdEn_28"} : i1
    %174 = comb.and bin %382, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_28"} : i1
    %175 = comb.and bin %362, %134 {sv.namehint = "dmiProgramBufferRdEn_29"} : i1
    %176 = comb.and bin %382, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_29"} : i1
    %177 = comb.and bin %362, %135 {sv.namehint = "dmiProgramBufferRdEn_30"} : i1
    %178 = comb.and bin %382, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_30"} : i1
    %179 = comb.and bin %362, %136 {sv.namehint = "dmiProgramBufferRdEn_31"} : i1
    %180 = comb.and bin %382, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_31"} : i1
    %181 = comb.concat %programBufferMem_31, %programBufferMem_30, %programBufferMem_29, %programBufferMem_28 {sv.namehint = "out_prepend_11"} : i8, i8, i8, i8
    %182 = comb.and bin %358, %133 {sv.namehint = "dmiProgramBufferRdEn_12"} : i1
    %183 = comb.and bin %378, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_12"} : i1
    %184 = comb.and bin %358, %134 {sv.namehint = "dmiProgramBufferRdEn_13"} : i1
    %185 = comb.and bin %378, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_13"} : i1
    %186 = comb.and bin %358, %135 {sv.namehint = "dmiProgramBufferRdEn_14"} : i1
    %187 = comb.and bin %378, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_14"} : i1
    %188 = comb.and bin %358, %136 {sv.namehint = "dmiProgramBufferRdEn_15"} : i1
    %189 = comb.and bin %378, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_15"} : i1
    %190 = comb.concat %programBufferMem_15, %programBufferMem_14, %programBufferMem_13, %programBufferMem_12 {sv.namehint = "out_prepend_14"} : i8, i8, i8, i8
    %191 = comb.and bin %366, %133 {sv.namehint = "dmiProgramBufferRdEn_44"} : i1
    %192 = comb.and bin %386, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_44"} : i1
    %193 = comb.and bin %366, %134 {sv.namehint = "dmiProgramBufferRdEn_45"} : i1
    %194 = comb.and bin %386, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_45"} : i1
    %195 = comb.and bin %366, %135 {sv.namehint = "dmiProgramBufferRdEn_46"} : i1
    %196 = comb.and bin %386, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_46"} : i1
    %197 = comb.and bin %366, %136 {sv.namehint = "dmiProgramBufferRdEn_47"} : i1
    %198 = comb.and bin %386, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_47"} : i1
    %199 = comb.concat %programBufferMem_47, %programBufferMem_46, %programBufferMem_45, %programBufferMem_44 {sv.namehint = "out_prepend_17"} : i8, i8, i8, i8
    %200 = comb.and bin %353, %133 {sv.namehint = "dmiAbstractDataRdEn_0"} : i1
    %201 = comb.and bin %372, %133 {sv.namehint = "dmiAbstractDataWrEnMaybe_0"} : i1
    %202 = comb.and bin %353, %134 {sv.namehint = "dmiAbstractDataRdEn_1"} : i1
    %203 = comb.and bin %372, %134 {sv.namehint = "dmiAbstractDataWrEnMaybe_1"} : i1
    %204 = comb.and bin %353, %135 {sv.namehint = "dmiAbstractDataRdEn_2"} : i1
    %205 = comb.and bin %372, %135 {sv.namehint = "dmiAbstractDataWrEnMaybe_2"} : i1
    %206 = comb.and bin %353, %136 {sv.namehint = "dmiAbstractDataRdEn_3"} : i1
    %207 = comb.and bin %372, %136 {sv.namehint = "dmiAbstractDataWrEnMaybe_3"} : i1
    %208 = comb.concat %abstractDataMem_3, %abstractDataMem_2, %abstractDataMem_1, %abstractDataMem_0 {sv.namehint = "out_prepend_20"} : i8, i8, i8, i8
    %209 = comb.and bin %370, %133 {sv.namehint = "dmiProgramBufferRdEn_60"} : i1
    %210 = comb.and bin %390, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_60"} : i1
    %211 = comb.and bin %370, %134 {sv.namehint = "dmiProgramBufferRdEn_61"} : i1
    %212 = comb.and bin %390, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_61"} : i1
    %213 = comb.and bin %370, %135 {sv.namehint = "dmiProgramBufferRdEn_62"} : i1
    %214 = comb.and bin %390, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_62"} : i1
    %215 = comb.and bin %370, %136 {sv.namehint = "dmiProgramBufferRdEn_63"} : i1
    %216 = comb.and bin %390, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_63"} : i1
    %217 = comb.concat %programBufferMem_63, %programBufferMem_62, %programBufferMem_61, %programBufferMem_60 {sv.namehint = "out_prepend_23"} : i8, i8, i8, i8
    %218 = comb.and bin %365, %133 {sv.namehint = "dmiProgramBufferRdEn_40"} : i1
    %219 = comb.and bin %385, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_40"} : i1
    %220 = comb.and bin %365, %134 {sv.namehint = "dmiProgramBufferRdEn_41"} : i1
    %221 = comb.and bin %385, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_41"} : i1
    %222 = comb.and bin %365, %135 {sv.namehint = "dmiProgramBufferRdEn_42"} : i1
    %223 = comb.and bin %385, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_42"} : i1
    %224 = comb.and bin %365, %136 {sv.namehint = "dmiProgramBufferRdEn_43"} : i1
    %225 = comb.and bin %385, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_43"} : i1
    %226 = comb.concat %programBufferMem_43, %programBufferMem_42, %programBufferMem_41, %programBufferMem_40 {sv.namehint = "out_prepend_26"} : i8, i8, i8, i8
    %227 = comb.and bin %374, %133 {sv.namehint = "autoexecdataWrEnMaybe"} : i1
    %228 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "_out_T_444"} : (i32) -> i2
    %229 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 0 {sv.namehint = "_out_prepend_T_27"} : (i12) -> i2
    %230 = comb.concat %140, %139 {sv.namehint = "_out_womask_T_38"} : i8, i8
    %231 = comb.icmp bin eq %230, %c-1_i16 {sv.namehint = "out_womask_38"} : i16
    %232 = comb.and bin %374, %231 {sv.namehint = "autoexecprogbufWrEnMaybe"} : i1
    %233 = comb.extract %auto_dmi_in_a_bits_data from 16 {sv.namehint = "ABSTRACTAUTOWrData_autoexecprogbuf"} : (i32) -> i16
    %234 = comb.concat %ABSTRACTAUTOReg_autoexecprogbuf, %c0_i14, %229 {sv.namehint = "out_prepend_28"} : i16, i14, i2
    %235 = comb.and bin %360, %133 {sv.namehint = "dmiProgramBufferRdEn_20"} : i1
    %236 = comb.and bin %380, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_20"} : i1
    %237 = comb.and bin %360, %134 {sv.namehint = "dmiProgramBufferRdEn_21"} : i1
    %238 = comb.and bin %380, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_21"} : i1
    %239 = comb.and bin %360, %135 {sv.namehint = "dmiProgramBufferRdEn_22"} : i1
    %240 = comb.and bin %380, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_22"} : i1
    %241 = comb.and bin %360, %136 {sv.namehint = "dmiProgramBufferRdEn_23"} : i1
    %242 = comb.and bin %380, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_23"} : i1
    %243 = comb.concat %programBufferMem_23, %programBufferMem_22, %programBufferMem_21, %programBufferMem_20 {sv.namehint = "out_prepend_31"} : i8, i8, i8, i8
    %244 = comb.and bin %361, %133 {sv.namehint = "dmiProgramBufferRdEn_24"} : i1
    %245 = comb.and bin %381, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_24"} : i1
    %246 = comb.and bin %361, %134 {sv.namehint = "dmiProgramBufferRdEn_25"} : i1
    %247 = comb.and bin %381, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_25"} : i1
    %248 = comb.and bin %361, %135 {sv.namehint = "dmiProgramBufferRdEn_26"} : i1
    %249 = comb.and bin %381, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_26"} : i1
    %250 = comb.and bin %361, %136 {sv.namehint = "dmiProgramBufferRdEn_27"} : i1
    %251 = comb.and bin %381, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_27"} : i1
    %252 = comb.concat %programBufferMem_27, %programBufferMem_26, %programBufferMem_25, %programBufferMem_24 {sv.namehint = "out_prepend_34"} : i8, i8, i8, i8
    %253 = comb.and bin %356, %133 {sv.namehint = "dmiProgramBufferRdEn_4"} : i1
    %254 = comb.and bin %376, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_4"} : i1
    %255 = comb.and bin %356, %134 {sv.namehint = "dmiProgramBufferRdEn_5"} : i1
    %256 = comb.and bin %376, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_5"} : i1
    %257 = comb.and bin %356, %135 {sv.namehint = "dmiProgramBufferRdEn_6"} : i1
    %258 = comb.and bin %376, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_6"} : i1
    %259 = comb.and bin %356, %136 {sv.namehint = "dmiProgramBufferRdEn_7"} : i1
    %260 = comb.and bin %376, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_7"} : i1
    %261 = comb.concat %programBufferMem_7, %programBufferMem_6, %programBufferMem_5, %programBufferMem_4 {sv.namehint = "out_prepend_37"} : i8, i8, i8, i8
    %262 = comb.and bin %368, %133 {sv.namehint = "dmiProgramBufferRdEn_52"} : i1
    %263 = comb.and bin %388, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_52"} : i1
    %264 = comb.and bin %368, %134 {sv.namehint = "dmiProgramBufferRdEn_53"} : i1
    %265 = comb.and bin %388, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_53"} : i1
    %266 = comb.and bin %368, %135 {sv.namehint = "dmiProgramBufferRdEn_54"} : i1
    %267 = comb.and bin %388, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_54"} : i1
    %268 = comb.and bin %368, %136 {sv.namehint = "dmiProgramBufferRdEn_55"} : i1
    %269 = comb.and bin %388, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_55"} : i1
    %270 = comb.concat %programBufferMem_55, %programBufferMem_54, %programBufferMem_53, %programBufferMem_52 {sv.namehint = "out_prepend_40"} : i8, i8, i8, i8
    %271 = comb.replicate %haltedBitRegs : (i1) -> i2
    %272 = comb.replicate %118 : (i1) -> i2
    %273 = comb.replicate %haveResetBitRegs : (i1) -> i2
    %274 = comb.and bin %355, %133 {sv.namehint = "dmiProgramBufferRdEn_0"} : i1
    %275 = comb.and bin %375, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_0"} : i1
    %276 = comb.and bin %355, %134 {sv.namehint = "dmiProgramBufferRdEn_1"} : i1
    %277 = comb.and bin %375, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_1"} : i1
    %278 = comb.and bin %355, %135 {sv.namehint = "dmiProgramBufferRdEn_2"} : i1
    %279 = comb.and bin %375, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_2"} : i1
    %280 = comb.and bin %355, %136 {sv.namehint = "dmiProgramBufferRdEn_3"} : i1
    %281 = comb.and bin %375, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_3"} : i1
    %282 = comb.concat %programBufferMem_3, %programBufferMem_2, %programBufferMem_1, %programBufferMem_0 {sv.namehint = "out_prepend_61"} : i8, i8, i8, i8
    %283 = comb.and bin %357, %133 {sv.namehint = "dmiProgramBufferRdEn_8"} : i1
    %284 = comb.and bin %377, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_8"} : i1
    %285 = comb.and bin %357, %134 {sv.namehint = "dmiProgramBufferRdEn_9"} : i1
    %286 = comb.and bin %377, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_9"} : i1
    %287 = comb.and bin %357, %135 {sv.namehint = "dmiProgramBufferRdEn_10"} : i1
    %288 = comb.and bin %377, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_10"} : i1
    %289 = comb.and bin %357, %136 {sv.namehint = "dmiProgramBufferRdEn_11"} : i1
    %290 = comb.and bin %377, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_11"} : i1
    %291 = comb.concat %programBufferMem_11, %programBufferMem_10, %programBufferMem_9, %programBufferMem_8 {sv.namehint = "out_prepend_64"} : i8, i8, i8, i8
    %292 = comb.and bin %371, %331, %129, %134 {sv.namehint = "ABSTRACTCSWrEnMaybe"} : i1
    %293 = comb.extract %auto_dmi_in_a_bits_data from 8 {sv.namehint = "ABSTRACTCSWrData_cmderr"} : (i32) -> i3
    %294 = comb.and bin %367, %133 {sv.namehint = "dmiProgramBufferRdEn_48"} : i1
    %295 = comb.and bin %387, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_48"} : i1
    %296 = comb.and bin %367, %134 {sv.namehint = "dmiProgramBufferRdEn_49"} : i1
    %297 = comb.and bin %387, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_49"} : i1
    %298 = comb.and bin %367, %135 {sv.namehint = "dmiProgramBufferRdEn_50"} : i1
    %299 = comb.and bin %387, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_50"} : i1
    %300 = comb.and bin %367, %136 {sv.namehint = "dmiProgramBufferRdEn_51"} : i1
    %301 = comb.and bin %387, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_51"} : i1
    %302 = comb.concat %programBufferMem_51, %programBufferMem_50, %programBufferMem_49, %programBufferMem_48 {sv.namehint = "out_prepend_73"} : i8, i8, i8, i8
    %303 = comb.and bin %363, %133 {sv.namehint = "dmiProgramBufferRdEn_32"} : i1
    %304 = comb.and bin %383, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_32"} : i1
    %305 = comb.and bin %363, %134 {sv.namehint = "dmiProgramBufferRdEn_33"} : i1
    %306 = comb.and bin %383, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_33"} : i1
    %307 = comb.and bin %363, %135 {sv.namehint = "dmiProgramBufferRdEn_34"} : i1
    %308 = comb.and bin %383, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_34"} : i1
    %309 = comb.and bin %363, %136 {sv.namehint = "dmiProgramBufferRdEn_35"} : i1
    %310 = comb.and bin %383, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_35"} : i1
    %311 = comb.concat %programBufferMem_35, %programBufferMem_34, %programBufferMem_33, %programBufferMem_32 {sv.namehint = "out_prepend_76"} : i8, i8, i8, i8
    %312 = comb.icmp bin eq %141, %c-1_i32 {sv.namehint = "out_womask_98"} : i32
    %313 = comb.and bin %371, %332, %129, %312 {sv.namehint = "COMMANDWrEnMaybe"} : i1
    %314 = comb.mux bin %313, %auto_dmi_in_a_bits_data, %c0_i32 {sv.namehint = "COMMANDWrDataVal"} : i32
    %315 = comb.and bin %359, %133 {sv.namehint = "dmiProgramBufferRdEn_16"} : i1
    %316 = comb.and bin %379, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_16"} : i1
    %317 = comb.and bin %359, %134 {sv.namehint = "dmiProgramBufferRdEn_17"} : i1
    %318 = comb.and bin %379, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_17"} : i1
    %319 = comb.and bin %359, %135 {sv.namehint = "dmiProgramBufferRdEn_18"} : i1
    %320 = comb.and bin %379, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_18"} : i1
    %321 = comb.and bin %359, %136 {sv.namehint = "dmiProgramBufferRdEn_19"} : i1
    %322 = comb.and bin %379, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_19"} : i1
    %323 = comb.concat %programBufferMem_19, %programBufferMem_18, %programBufferMem_17, %programBufferMem_16 {sv.namehint = "out_prepend_79"} : i8, i8, i8, i8
    %324 = comb.extract %auto_dmi_in_a_bits_address from 7 {sv.namehint = "_out_oindex_T_5"} : (i9) -> i1
    %325 = comb.extract %auto_dmi_in_a_bits_address from 2 : (i9) -> i4
    %326 = comb.concat %324, %325 {sv.namehint = "out_oindex"} : i1, i4
    %327 = comb.concat %c0_i27, %324, %325 : i27, i1, i4
    %328 = comb.shl bin %c1_i32, %327 {sv.namehint = "_out_backSel_T"} : i32
    %329 = comb.extract %328 from 4 {sv.namehint = "out_backSel_4"} : (i32) -> i1
    %330 = comb.extract %328 from 5 {sv.namehint = "out_backSel_5"} : (i32) -> i1
    %331 = comb.extract %328 from 6 {sv.namehint = "out_backSel_6"} : (i32) -> i1
    %332 = comb.extract %328 from 7 {sv.namehint = "out_backSel_7"} : (i32) -> i1
    %333 = comb.extract %328 from 8 {sv.namehint = "out_backSel_8"} : (i32) -> i1
    %334 = comb.extract %328 from 16 {sv.namehint = "out_backSel_16"} : (i32) -> i1
    %335 = comb.extract %328 from 17 {sv.namehint = "out_backSel_17"} : (i32) -> i1
    %336 = comb.extract %328 from 18 {sv.namehint = "out_backSel_18"} : (i32) -> i1
    %337 = comb.extract %328 from 19 {sv.namehint = "out_backSel_19"} : (i32) -> i1
    %338 = comb.extract %328 from 20 {sv.namehint = "out_backSel_20"} : (i32) -> i1
    %339 = comb.extract %328 from 21 {sv.namehint = "out_backSel_21"} : (i32) -> i1
    %340 = comb.extract %328 from 22 {sv.namehint = "out_backSel_22"} : (i32) -> i1
    %341 = comb.extract %328 from 23 {sv.namehint = "out_backSel_23"} : (i32) -> i1
    %342 = comb.extract %328 from 24 {sv.namehint = "out_backSel_24"} : (i32) -> i1
    %343 = comb.extract %328 from 25 {sv.namehint = "out_backSel_25"} : (i32) -> i1
    %344 = comb.extract %328 from 26 {sv.namehint = "out_backSel_26"} : (i32) -> i1
    %345 = comb.extract %328 from 27 {sv.namehint = "out_backSel_27"} : (i32) -> i1
    %346 = comb.extract %328 from 28 {sv.namehint = "out_backSel_28"} : (i32) -> i1
    %347 = comb.extract %328 from 29 {sv.namehint = "out_backSel_29"} : (i32) -> i1
    %348 = comb.extract %328 from 30 {sv.namehint = "out_backSel_30"} : (i32) -> i1
    %349 = comb.extract %328 from 31 {sv.namehint = "out_backSel_31"} : (i32) -> i1
    %350 = comb.xor bin %120, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %351 = comb.and bin %auto_dmi_in_a_valid, %auto_dmi_in_d_ready {sv.namehint = "_out_wofireMux_T"} : i1
    %352 = comb.and bin %351, %120 {sv.namehint = "_out_rofireMux_T_1"} : i1
    %353 = comb.and bin %352, %329, %125 {sv.namehint = "out_roready_27"} : i1
    %354 = comb.and bin %352, %330, %125 {sv.namehint = "out_roready_3"} : i1
    %355 = comb.and bin %352, %334, %125 {sv.namehint = "out_roready_78"} : i1
    %356 = comb.and bin %352, %335, %125 {sv.namehint = "out_roready_50"} : i1
    %357 = comb.and bin %352, %336, %125 {sv.namehint = "out_roready_82"} : i1
    %358 = comb.and bin %352, %337, %125 {sv.namehint = "out_roready_19"} : i1
    %359 = comb.and bin %352, %338, %125 {sv.namehint = "out_roready_99"} : i1
    %360 = comb.and bin %352, %339, %125 {sv.namehint = "out_roready_42"} : i1
    %361 = comb.and bin %352, %340, %125 {sv.namehint = "out_roready_46"} : i1
    %362 = comb.and bin %352, %341, %125 {sv.namehint = "out_roready_15"} : i1
    %363 = comb.and bin %352, %342, %125 {sv.namehint = "out_roready_97"} : i1
    %364 = comb.and bin %352, %343, %125 {sv.namehint = "out_roready_9"} : i1
    %365 = comb.and bin %352, %344, %125 {sv.namehint = "out_roready_35"} : i1
    %366 = comb.and bin %352, %345, %125 {sv.namehint = "out_roready_23"} : i1
    %367 = comb.and bin %352, %346, %125 {sv.namehint = "out_roready_93"} : i1
    %368 = comb.and bin %352, %347, %125 {sv.namehint = "out_roready_54"} : i1
    %369 = comb.and bin %352, %348, %125 {sv.namehint = "out_roready_7"} : i1
    %370 = comb.and bin %352, %349, %125 {sv.namehint = "out_roready_31"} : i1
    %371 = comb.and bin %351, %350 {sv.namehint = "_out_wofireMux_T_2"} : i1
    %372 = comb.and bin %371, %329, %125 {sv.namehint = "out_woready_27"} : i1
    %373 = comb.and bin %371, %330, %125 {sv.namehint = "out_woready_3"} : i1
    %374 = comb.and bin %371, %333, %129 {sv.namehint = "out_woready_38"} : i1
    %375 = comb.and bin %371, %334, %125 {sv.namehint = "out_woready_78"} : i1
    %376 = comb.and bin %371, %335, %125 {sv.namehint = "out_woready_50"} : i1
    %377 = comb.and bin %371, %336, %125 {sv.namehint = "out_woready_82"} : i1
    %378 = comb.and bin %371, %337, %125 {sv.namehint = "out_woready_19"} : i1
    %379 = comb.and bin %371, %338, %125 {sv.namehint = "out_woready_99"} : i1
    %380 = comb.and bin %371, %339, %125 {sv.namehint = "out_woready_42"} : i1
    %381 = comb.and bin %371, %340, %125 {sv.namehint = "out_woready_46"} : i1
    %382 = comb.and bin %371, %341, %125 {sv.namehint = "out_woready_15"} : i1
    %383 = comb.and bin %371, %342, %125 {sv.namehint = "out_woready_97"} : i1
    %384 = comb.and bin %371, %343, %125 {sv.namehint = "out_woready_9"} : i1
    %385 = comb.and bin %371, %344, %125 {sv.namehint = "out_woready_35"} : i1
    %386 = comb.and bin %371, %345, %125 {sv.namehint = "out_woready_23"} : i1
    %387 = comb.and bin %371, %346, %125 {sv.namehint = "out_woready_93"} : i1
    %388 = comb.and bin %371, %347, %125 {sv.namehint = "out_woready_54"} : i1
    %389 = comb.and bin %371, %348, %125 {sv.namehint = "out_woready_7"} : i1
    %390 = comb.and bin %371, %349, %125 {sv.namehint = "out_woready_31"} : i1
    %391 = hw.array_create %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %125, %true, %true, %true, %true, %true, %true, %true, %129, %129, %129, %125, %125, %129, %true, %129, %132 : i1
    %392 = hw.array_get %391[%326] : !hw.array<32xi1>, i5
    %393 = comb.concat %c0_i12, %273, %272, %c0_i4, %11, %10, %271, %c-94_i8 {sv.namehint = "_out_out_bits_data_WIRE_1_1"} : i12, i2, i2, i4, i1, i1, i2, i8
    %394 = comb.concat %c32768_i19, %985, %false, %ABSTRACTCSReg_cmderr, %c2_i8 {sv.namehint = "_out_out_bits_data_WIRE_1_6"} : i19, i1, i1, i3, i8
    %395 = hw.array_create %217, %163, %270, %302, %199, %226, %172, %311, %181, %252, %243, %323, %190, %291, %261, %282, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %234, %119, %394, %154, %208, %20, %c0_i32, %393, %19 : i32
    %396 = hw.array_get %395[%326] : !hw.array<32xi32>, i5
    %397 = comb.mux bin %392, %396, %c0_i32 {sv.namehint = "out_bits_data"} : i32
    %398 = comb.concat %c0_i2, %120 {sv.namehint = "dmiNodeIn_d_bits_opcode"} : i2, i1
    %399 = comb.and %201, %987 : i1
    %400 = comb.mux bin %399, %144, %abstractDataMem_0 : i8
    %401 = comb.and %203, %987 : i1
    %402 = comb.mux bin %401, %147, %abstractDataMem_1 : i8
    %403 = comb.and %205, %987 : i1
    %404 = comb.mux bin %403, %150, %abstractDataMem_2 : i8
    %405 = comb.and %207, %987 : i1
    %406 = comb.mux bin %405, %153, %abstractDataMem_3 : i8
    %407 = comb.and %143, %987 : i1
    %408 = comb.mux bin %407, %144, %abstractDataMem_4 : i8
    %409 = comb.and %146, %987 : i1
    %410 = comb.mux bin %409, %147, %abstractDataMem_5 : i8
    %411 = comb.and %149, %987 : i1
    %412 = comb.mux bin %411, %150, %abstractDataMem_6 : i8
    %413 = comb.and %152, %987 : i1
    %414 = comb.mux bin %413, %153, %abstractDataMem_7 : i8
    %415 = comb.and %275, %987 : i1
    %416 = comb.mux bin %415, %144, %programBufferMem_0 : i8
    %417 = comb.and %277, %987 : i1
    %418 = comb.mux bin %417, %147, %programBufferMem_1 : i8
    %419 = comb.and %279, %987 : i1
    %420 = comb.mux bin %419, %150, %programBufferMem_2 : i8
    %421 = comb.and %281, %987 : i1
    %422 = comb.mux bin %421, %153, %programBufferMem_3 : i8
    %423 = comb.and %254, %987 : i1
    %424 = comb.mux bin %423, %144, %programBufferMem_4 : i8
    %425 = comb.and %256, %987 : i1
    %426 = comb.mux bin %425, %147, %programBufferMem_5 : i8
    %427 = comb.and %258, %987 : i1
    %428 = comb.mux bin %427, %150, %programBufferMem_6 : i8
    %429 = comb.and %260, %987 : i1
    %430 = comb.mux bin %429, %153, %programBufferMem_7 : i8
    %431 = comb.and %284, %987 : i1
    %432 = comb.mux bin %431, %144, %programBufferMem_8 : i8
    %433 = comb.and %286, %987 : i1
    %434 = comb.mux bin %433, %147, %programBufferMem_9 : i8
    %435 = comb.and %288, %987 : i1
    %436 = comb.mux bin %435, %150, %programBufferMem_10 : i8
    %437 = comb.and %290, %987 : i1
    %438 = comb.mux bin %437, %153, %programBufferMem_11 : i8
    %439 = comb.and %183, %987 : i1
    %440 = comb.mux bin %439, %144, %programBufferMem_12 : i8
    %441 = comb.and %185, %987 : i1
    %442 = comb.mux bin %441, %147, %programBufferMem_13 : i8
    %443 = comb.and %187, %987 : i1
    %444 = comb.mux bin %443, %150, %programBufferMem_14 : i8
    %445 = comb.and %189, %987 : i1
    %446 = comb.mux bin %445, %153, %programBufferMem_15 : i8
    %447 = comb.and %316, %987 : i1
    %448 = comb.mux bin %447, %144, %programBufferMem_16 : i8
    %449 = comb.and %318, %987 : i1
    %450 = comb.mux bin %449, %147, %programBufferMem_17 : i8
    %451 = comb.and %320, %987 : i1
    %452 = comb.mux bin %451, %150, %programBufferMem_18 : i8
    %453 = comb.and %322, %987 : i1
    %454 = comb.mux bin %453, %153, %programBufferMem_19 : i8
    %455 = comb.and %236, %987 : i1
    %456 = comb.mux bin %455, %144, %programBufferMem_20 : i8
    %457 = comb.and %238, %987 : i1
    %458 = comb.mux bin %457, %147, %programBufferMem_21 : i8
    %459 = comb.and %240, %987 : i1
    %460 = comb.mux bin %459, %150, %programBufferMem_22 : i8
    %461 = comb.and %242, %987 : i1
    %462 = comb.mux bin %461, %153, %programBufferMem_23 : i8
    %463 = comb.and %245, %987 : i1
    %464 = comb.mux bin %463, %144, %programBufferMem_24 : i8
    %465 = comb.and %247, %987 : i1
    %466 = comb.mux bin %465, %147, %programBufferMem_25 : i8
    %467 = comb.and %249, %987 : i1
    %468 = comb.mux bin %467, %150, %programBufferMem_26 : i8
    %469 = comb.and %251, %987 : i1
    %470 = comb.mux bin %469, %153, %programBufferMem_27 : i8
    %471 = comb.and %174, %987 : i1
    %472 = comb.mux bin %471, %144, %programBufferMem_28 : i8
    %473 = comb.and %176, %987 : i1
    %474 = comb.mux bin %473, %147, %programBufferMem_29 : i8
    %475 = comb.and %178, %987 : i1
    %476 = comb.mux bin %475, %150, %programBufferMem_30 : i8
    %477 = comb.and %180, %987 : i1
    %478 = comb.mux bin %477, %153, %programBufferMem_31 : i8
    %479 = comb.and %304, %987 : i1
    %480 = comb.mux bin %479, %144, %programBufferMem_32 : i8
    %481 = comb.and %306, %987 : i1
    %482 = comb.mux bin %481, %147, %programBufferMem_33 : i8
    %483 = comb.and %308, %987 : i1
    %484 = comb.mux bin %483, %150, %programBufferMem_34 : i8
    %485 = comb.and %310, %987 : i1
    %486 = comb.mux bin %485, %153, %programBufferMem_35 : i8
    %487 = comb.and %165, %987 : i1
    %488 = comb.mux bin %487, %144, %programBufferMem_36 : i8
    %489 = comb.and %167, %987 : i1
    %490 = comb.mux bin %489, %147, %programBufferMem_37 : i8
    %491 = comb.and %169, %987 : i1
    %492 = comb.mux bin %491, %150, %programBufferMem_38 : i8
    %493 = comb.and %171, %987 : i1
    %494 = comb.mux bin %493, %153, %programBufferMem_39 : i8
    %495 = comb.and %219, %987 : i1
    %496 = comb.mux bin %495, %144, %programBufferMem_40 : i8
    %497 = comb.and %221, %987 : i1
    %498 = comb.mux bin %497, %147, %programBufferMem_41 : i8
    %499 = comb.and %223, %987 : i1
    %500 = comb.mux bin %499, %150, %programBufferMem_42 : i8
    %501 = comb.and %225, %987 : i1
    %502 = comb.mux bin %501, %153, %programBufferMem_43 : i8
    %503 = comb.and %192, %987 : i1
    %504 = comb.mux bin %503, %144, %programBufferMem_44 : i8
    %505 = comb.and %194, %987 : i1
    %506 = comb.mux bin %505, %147, %programBufferMem_45 : i8
    %507 = comb.and %196, %987 : i1
    %508 = comb.mux bin %507, %150, %programBufferMem_46 : i8
    %509 = comb.and %198, %987 : i1
    %510 = comb.mux bin %509, %153, %programBufferMem_47 : i8
    %511 = comb.and %295, %987 : i1
    %512 = comb.mux bin %511, %144, %programBufferMem_48 : i8
    %513 = comb.and %297, %987 : i1
    %514 = comb.mux bin %513, %147, %programBufferMem_49 : i8
    %515 = comb.and %299, %987 : i1
    %516 = comb.mux bin %515, %150, %programBufferMem_50 : i8
    %517 = comb.and %301, %987 : i1
    %518 = comb.mux bin %517, %153, %programBufferMem_51 : i8
    %519 = comb.and %263, %987 : i1
    %520 = comb.mux bin %519, %144, %programBufferMem_52 : i8
    %521 = comb.and %265, %987 : i1
    %522 = comb.mux bin %521, %147, %programBufferMem_53 : i8
    %523 = comb.and %267, %987 : i1
    %524 = comb.mux bin %523, %150, %programBufferMem_54 : i8
    %525 = comb.and %269, %987 : i1
    %526 = comb.mux bin %525, %153, %programBufferMem_55 : i8
    %527 = comb.and %156, %987 : i1
    %528 = comb.mux bin %527, %144, %programBufferMem_56 : i8
    %529 = comb.and %158, %987 : i1
    %530 = comb.mux bin %529, %147, %programBufferMem_57 : i8
    %531 = comb.and %160, %987 : i1
    %532 = comb.mux bin %531, %150, %programBufferMem_58 : i8
    %533 = comb.and %162, %987 : i1
    %534 = comb.mux bin %533, %153, %programBufferMem_59 : i8
    %535 = comb.and %210, %987 : i1
    %536 = comb.mux bin %535, %144, %programBufferMem_60 : i8
    %537 = comb.and %212, %987 : i1
    %538 = comb.mux bin %537, %147, %programBufferMem_61 : i8
    %539 = comb.and %214, %987 : i1
    %540 = comb.mux bin %539, %150, %programBufferMem_62 : i8
    %541 = comb.and %216, %987 : i1
    %542 = comb.mux bin %541, %153, %programBufferMem_63 : i8
    %goReg = seq.firreg %550 clock %clock {firrtl.random_init_start = 678 : ui64, sv.namehint = "goReg"} : i1
    %543 = comb.xor bin %1031, %true : i1
    %544 = comb.icmp bin eq %664, %c0_i10 : i10
    %545 = comb.xor bin %reset, %true : i1
    %546 = comb.and bin %io_dmactive, %543, %721, %545 : i1
    %547 = comb.xor %721, %true : i1
    %548 = comb.and %547, %goReg : i1
    %549 = comb.or %1031, %548 : i1
    %550 = comb.and %io_dmactive, %549 : i1
    %551 = comb.extract %COMMANDReg_control from 0 {sv.namehint = "accessRegisterCommandReg_regno"} : (i24) -> i16
    %552 = comb.extract %COMMANDReg_control from 16 {sv.namehint = "accessRegisterCommandReg_write"} : (i24) -> i1
    %553 = comb.extract %COMMANDReg_control from 17 {sv.namehint = "accessRegisterCommandReg_transfer"} : (i24) -> i1
    %554 = comb.extract %COMMANDReg_control from 18 {sv.namehint = "accessRegisterCommandReg_postexec"} : (i24) -> i1
    %555 = comb.extract %COMMANDReg_control from 20 {sv.namehint = "accessRegisterCommandReg_size"} : (i24) -> i3
    %abstractGeneratedMem_0 = seq.firreg %561 clock %clock {firrtl.random_init_start = 679 : ui64} : i32
    %abstractGeneratedMem_1 = seq.firreg %563 clock %clock {firrtl.random_init_start = 711 : ui64} : i32
    %556 = comb.extract %COMMANDReg_control from 0 {sv.namehint = "abstractGeneratedMem_0_inst_rd"} : (i24) -> i5
    %557 = comb.concat %c28672_i17, %555, %556, %c3_i7 {sv.namehint = "_abstractGeneratedMem_0_T"} : i17, i3, i5, i7
    %558 = comb.concat %c28_i7, %556, %c0_i5, %555, %c35_i12 {sv.namehint = "_abstractGeneratedMem_0_T_1"} : i7, i5, i5, i3, i12
    %559 = comb.mux bin %552, %557, %558 {sv.namehint = "_abstractGeneratedMem_0_T_2"} : i32
    %560 = comb.mux bin %553, %559, %c19_i32 {sv.namehint = "_abstractGeneratedMem_0_T_4"} : i32
    %561 = comb.mux bin %1031, %560, %abstractGeneratedMem_0 : i32
    %562 = comb.mux bin %554, %c19_i32, %c1048691_i32 {sv.namehint = "_abstractGeneratedMem_1_T_1"} : i32
    %563 = comb.mux bin %1031, %562, %abstractGeneratedMem_1 : i32
    %564 = comb.icmp bin eq %auto_tl_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_1_bits_read"} : i3
    %565 = comb.extract %auto_tl_in_a_bits_address from 11 {sv.namehint = "_out_wofireMux_T_1157"} : (i12) -> i1
    %566 = comb.xor bin %565, %true {sv.namehint = "_out_T_1439"} : i1
    %567 = comb.extract %auto_tl_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_20"} : (i8) -> i1
    %568 = comb.extract %auto_tl_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_22"} : (i8) -> i1
    %569 = comb.extract %auto_tl_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_24"} : (i8) -> i1
    %570 = comb.extract %auto_tl_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_26"} : (i8) -> i1
    %571 = comb.extract %auto_tl_in_a_bits_mask from 4 {sv.namehint = "_out_backMask_T_28"} : (i8) -> i1
    %572 = comb.extract %auto_tl_in_a_bits_mask from 5 {sv.namehint = "_out_backMask_T_30"} : (i8) -> i1
    %573 = comb.extract %auto_tl_in_a_bits_mask from 6 {sv.namehint = "_out_backMask_T_32"} : (i8) -> i1
    %574 = comb.extract %auto_tl_in_a_bits_mask from 7 {sv.namehint = "_out_backMask_T_34"} : (i8) -> i1
    %575 = comb.replicate %567 {sv.namehint = "_out_backMask_T_21"} : (i1) -> i8
    %576 = comb.replicate %571 {sv.namehint = "_out_backMask_T_29"} : (i1) -> i8
    %577 = comb.extract %auto_tl_in_a_bits_data from 0 {sv.namehint = "_out_T_12195"} : (i64) -> i8
    %578 = comb.extract %auto_tl_in_a_bits_data from 8 {sv.namehint = "_out_T_12204"} : (i64) -> i8
    %579 = comb.extract %auto_tl_in_a_bits_data from 16 {sv.namehint = "_out_T_12213"} : (i64) -> i8
    %580 = comb.extract %auto_tl_in_a_bits_data from 24 {sv.namehint = "_out_T_12222"} : (i64) -> i8
    %581 = comb.extract %auto_tl_in_a_bits_data from 32 {sv.namehint = "_out_T_12231"} : (i64) -> i8
    %582 = comb.extract %auto_tl_in_a_bits_data from 40 {sv.namehint = "_out_T_12240"} : (i64) -> i8
    %583 = comb.extract %auto_tl_in_a_bits_data from 48 {sv.namehint = "_out_T_12249"} : (i64) -> i8
    %584 = comb.extract %auto_tl_in_a_bits_data from 56 {sv.namehint = "_out_T_12258"} : (i64) -> i8
    %585 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_86"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %586 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_93"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %587 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_100"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %588 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_107"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %589 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_114"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %590 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_121"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %591 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_128"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %592 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_135"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %593 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_142"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %594 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_149"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %595 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_156"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %596 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_170"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %597 = comb.and bin %904, %567 {sv.namehint = "out_f_woready_208"} : i1
    %598 = comb.mux bin %597, %577, %512 : i8
    %599 = comb.and bin %904, %568 {sv.namehint = "out_f_woready_209"} : i1
    %600 = comb.mux bin %599, %578, %514 : i8
    %601 = comb.and bin %904, %569 {sv.namehint = "out_f_woready_210"} : i1
    %602 = comb.mux bin %601, %579, %516 : i8
    %603 = comb.and bin %904, %570 {sv.namehint = "out_f_woready_211"} : i1
    %604 = comb.mux bin %603, %580, %518 : i8
    %605 = comb.and bin %904, %571 {sv.namehint = "out_f_woready_212"} : i1
    %606 = comb.mux bin %605, %581, %520 : i8
    %607 = comb.and bin %904, %572 {sv.namehint = "out_f_woready_213"} : i1
    %608 = comb.mux bin %607, %582, %522 : i8
    %609 = comb.and bin %904, %573 {sv.namehint = "out_f_woready_214"} : i1
    %610 = comb.mux bin %609, %583, %524 : i8
    %611 = comb.and bin %904, %574 {sv.namehint = "out_f_woready_215"} : i1
    %612 = comb.mux bin %611, %584, %526 : i8
    %613 = comb.concat %programBufferMem_55, %programBufferMem_54, %programBufferMem_53, %programBufferMem_52, %programBufferMem_51, %programBufferMem_50, %programBufferMem_49, %programBufferMem_48 {sv.namehint = "out_prepend_177"} : i8, i8, i8, i8, i8, i8, i8, i8
    %614 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_184"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %615 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_191"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %616 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_198"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %617 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_205"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %618 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_212"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %619 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_226"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %620 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_233"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %621 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_240"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %622 = comb.and bin %900, %567 {sv.namehint = "out_f_woready_288"} : i1
    %623 = comb.mux bin %622, %577, %448 : i8
    %624 = comb.and bin %900, %568 {sv.namehint = "out_f_woready_289"} : i1
    %625 = comb.mux bin %624, %578, %450 : i8
    %626 = comb.and bin %900, %569 {sv.namehint = "out_f_woready_290"} : i1
    %627 = comb.mux bin %626, %579, %452 : i8
    %628 = comb.and bin %900, %570 {sv.namehint = "out_f_woready_291"} : i1
    %629 = comb.mux bin %628, %580, %454 : i8
    %630 = comb.and bin %900, %571 {sv.namehint = "out_f_woready_292"} : i1
    %631 = comb.mux bin %630, %581, %456 : i8
    %632 = comb.and bin %900, %572 {sv.namehint = "out_f_woready_293"} : i1
    %633 = comb.mux bin %632, %582, %458 : i8
    %634 = comb.and bin %900, %573 {sv.namehint = "out_f_woready_294"} : i1
    %635 = comb.mux bin %634, %583, %460 : i8
    %636 = comb.and bin %900, %574 {sv.namehint = "out_f_woready_295"} : i1
    %637 = comb.mux bin %636, %584, %462 : i8
    %638 = comb.concat %programBufferMem_23, %programBufferMem_22, %programBufferMem_21, %programBufferMem_20, %programBufferMem_19, %programBufferMem_18, %programBufferMem_17, %programBufferMem_16 {sv.namehint = "out_prepend_247"} : i8, i8, i8, i8, i8, i8, i8, i8
    %639 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_254"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %640 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_261"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %641 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_268"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %642 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_275"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %643 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_282"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %644 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_289"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %645 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_296"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %646 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_303"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %647 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_317"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %648 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_324"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %649 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_331"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %650 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_338"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %651 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_345"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %652 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_359"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %653 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_366"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %654 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_373"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %655 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_380"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %656 = comb.replicate %568 : (i1) -> i2
    %657 = comb.concat %656, %575 {sv.namehint = "_out_womask_T_631"} : i2, i8
    %658 = comb.icmp bin eq %657, %c-1_i10 {sv.namehint = "out_womask_448"} : i10
    %659 = comb.and bin %897, %658 {sv.namehint = "hartResumingWrEn"} : i1
    %660 = comb.replicate %572 : (i1) -> i2
    %661 = comb.concat %660, %576 {sv.namehint = "_out_womask_T_632"} : i2, i8
    %662 = comb.icmp bin eq %661, %c-1_i10 {sv.namehint = "out_womask_449"} : i10
    %663 = comb.and bin %897, %662 {sv.namehint = "hartExceptionWrEn"} : i1
    %664 = comb.extract %auto_tl_in_a_bits_data from 32 {sv.namehint = "hartGoingId"} : (i64) -> i10
    %665 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_388"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %666 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_395"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %667 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_402"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %668 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_409"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %669 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_416"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %670 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_423"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %671 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_430"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %672 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_437"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %673 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_444"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %674 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_451"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %675 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_458"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %676 = comb.and bin %903, %567 {sv.namehint = "out_f_woready_539"} : i1
    %677 = comb.mux bin %676, %577, %496 : i8
    %678 = comb.and bin %903, %568 {sv.namehint = "out_f_woready_540"} : i1
    %679 = comb.mux bin %678, %578, %498 : i8
    %680 = comb.and bin %903, %569 {sv.namehint = "out_f_woready_541"} : i1
    %681 = comb.mux bin %680, %579, %500 : i8
    %682 = comb.and bin %903, %570 {sv.namehint = "out_f_woready_542"} : i1
    %683 = comb.mux bin %682, %580, %502 : i8
    %684 = comb.and bin %903, %571 {sv.namehint = "out_f_woready_543"} : i1
    %685 = comb.mux bin %684, %581, %504 : i8
    %686 = comb.and bin %903, %572 {sv.namehint = "out_f_woready_544"} : i1
    %687 = comb.mux bin %686, %582, %506 : i8
    %688 = comb.and bin %903, %573 {sv.namehint = "out_f_woready_545"} : i1
    %689 = comb.mux bin %688, %583, %508 : i8
    %690 = comb.and bin %903, %574 {sv.namehint = "out_f_woready_546"} : i1
    %691 = comb.mux bin %690, %584, %510 : i8
    %692 = comb.concat %programBufferMem_47, %programBufferMem_46, %programBufferMem_45, %programBufferMem_44, %programBufferMem_43, %programBufferMem_42, %programBufferMem_41, %programBufferMem_40 {sv.namehint = "out_prepend_465"} : i8, i8, i8, i8, i8, i8, i8, i8
    %693 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_479"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %694 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_486"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %695 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_493"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %696 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_503"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %697 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_510"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %698 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_517"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %699 = comb.and bin %899, %567 {sv.namehint = "out_f_woready_607"} : i1
    %700 = comb.mux bin %699, %577, %432 : i8
    %701 = comb.and bin %899, %568 {sv.namehint = "out_f_woready_608"} : i1
    %702 = comb.mux bin %701, %578, %434 : i8
    %703 = comb.and bin %899, %569 {sv.namehint = "out_f_woready_609"} : i1
    %704 = comb.mux bin %703, %579, %436 : i8
    %705 = comb.and bin %899, %570 {sv.namehint = "out_f_woready_610"} : i1
    %706 = comb.mux bin %705, %580, %438 : i8
    %707 = comb.and bin %899, %571 {sv.namehint = "out_f_woready_611"} : i1
    %708 = comb.mux bin %707, %581, %440 : i8
    %709 = comb.and bin %899, %572 {sv.namehint = "out_f_woready_612"} : i1
    %710 = comb.mux bin %709, %582, %442 : i8
    %711 = comb.and bin %899, %573 {sv.namehint = "out_f_woready_613"} : i1
    %712 = comb.mux bin %711, %583, %444 : i8
    %713 = comb.and bin %899, %574 {sv.namehint = "out_f_woready_614"} : i1
    %714 = comb.mux bin %713, %584, %446 : i8
    %715 = comb.concat %programBufferMem_15, %programBufferMem_14, %programBufferMem_13, %programBufferMem_12, %programBufferMem_11, %programBufferMem_10, %programBufferMem_9, %programBufferMem_8 {sv.namehint = "out_prepend_524"} : i8, i8, i8, i8, i8, i8, i8, i8
    %716 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_531"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %717 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_538"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %718 = comb.icmp bin eq %657, %c-1_i10 {sv.namehint = "out_womask_631"} : i10
    %719 = comb.and bin %896, %718 {sv.namehint = "hartHaltedWrEn"} : i1
    %720 = comb.icmp bin eq %661, %c-1_i10 {sv.namehint = "out_womask_632"} : i10
    %721 = comb.and bin %896, %720 {sv.namehint = "hartGoingWrEn"} : i1
    %722 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_546"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %723 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_560"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %724 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_567"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %725 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_574"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %726 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_581"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %727 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_588"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %728 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_595"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %729 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_609"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %730 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_616"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %731 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_623"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %732 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_630"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %733 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_637"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %734 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_644"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %735 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_651"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %736 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_658"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %737 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_665"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %738 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_672"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %739 = comb.concat %abstractGeneratedMem_1, %abstractGeneratedMem_0 {sv.namehint = "out_prepend_673"} : i32, i32
    %740 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_680"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %741 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_687"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %742 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_694"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %743 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_701"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %744 = comb.and bin %902, %567 {sv.namehint = "out_f_woready_819"} : i1
    %745 = comb.mux bin %744, %577, %480 : i8
    %746 = comb.and bin %902, %568 {sv.namehint = "out_f_woready_820"} : i1
    %747 = comb.mux bin %746, %578, %482 : i8
    %748 = comb.and bin %902, %569 {sv.namehint = "out_f_woready_821"} : i1
    %749 = comb.mux bin %748, %579, %484 : i8
    %750 = comb.and bin %902, %570 {sv.namehint = "out_f_woready_822"} : i1
    %751 = comb.mux bin %750, %580, %486 : i8
    %752 = comb.and bin %902, %571 {sv.namehint = "out_f_woready_823"} : i1
    %753 = comb.mux bin %752, %581, %488 : i8
    %754 = comb.and bin %902, %572 {sv.namehint = "out_f_woready_824"} : i1
    %755 = comb.mux bin %754, %582, %490 : i8
    %756 = comb.and bin %902, %573 {sv.namehint = "out_f_woready_825"} : i1
    %757 = comb.mux bin %756, %583, %492 : i8
    %758 = comb.and bin %902, %574 {sv.namehint = "out_f_woready_826"} : i1
    %759 = comb.mux bin %758, %584, %494 : i8
    %760 = comb.concat %programBufferMem_39, %programBufferMem_38, %programBufferMem_37, %programBufferMem_36, %programBufferMem_35, %programBufferMem_34, %programBufferMem_33, %programBufferMem_32 {sv.namehint = "out_prepend_708"} : i8, i8, i8, i8, i8, i8, i8, i8
    %761 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_715"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %762 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_722"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %763 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_729"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %764 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_736"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %765 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_743"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %766 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_750"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %767 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_757"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %768 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_764"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %769 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_771"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %770 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_778"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %771 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_785"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %772 = comb.and bin %906, %567 {sv.namehint = "out_f_woready_915"} : i1
    %773 = comb.mux bin %772, %577, %400 : i8
    %774 = comb.and bin %906, %568 {sv.namehint = "out_f_woready_916"} : i1
    %775 = comb.mux bin %774, %578, %402 : i8
    %776 = comb.and bin %906, %569 {sv.namehint = "out_f_woready_917"} : i1
    %777 = comb.mux bin %776, %579, %404 : i8
    %778 = comb.and bin %906, %570 {sv.namehint = "out_f_woready_918"} : i1
    %779 = comb.mux bin %778, %580, %406 : i8
    %780 = comb.and bin %906, %571 {sv.namehint = "out_f_woready_919"} : i1
    %781 = comb.mux bin %780, %581, %408 : i8
    %782 = comb.and bin %906, %572 {sv.namehint = "out_f_woready_920"} : i1
    %783 = comb.mux bin %782, %582, %410 : i8
    %784 = comb.and bin %906, %573 {sv.namehint = "out_f_woready_921"} : i1
    %785 = comb.mux bin %784, %583, %412 : i8
    %786 = comb.and bin %906, %574 {sv.namehint = "out_f_woready_922"} : i1
    %787 = comb.mux bin %786, %584, %414 : i8
    %788 = comb.concat %abstractDataMem_7, %abstractDataMem_6, %abstractDataMem_5, %abstractDataMem_4, %abstractDataMem_3, %abstractDataMem_2, %abstractDataMem_1, %abstractDataMem_0 {sv.namehint = "out_prepend_792"} : i8, i8, i8, i8, i8, i8, i8, i8
    %789 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_799"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %790 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_806"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %791 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_813"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %792 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_827"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %793 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_834"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %794 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_841"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %795 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_848"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %796 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_855"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %797 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_862"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %798 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_869"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %799 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_876"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %800 = comb.and bin %898, %567 {sv.namehint = "out_f_woready_1019"} : i1
    %801 = comb.mux bin %800, %577, %416 : i8
    %802 = comb.and bin %898, %568 {sv.namehint = "out_f_woready_1020"} : i1
    %803 = comb.mux bin %802, %578, %418 : i8
    %804 = comb.and bin %898, %569 {sv.namehint = "out_f_woready_1021"} : i1
    %805 = comb.mux bin %804, %579, %420 : i8
    %806 = comb.and bin %898, %570 {sv.namehint = "out_f_woready_1022"} : i1
    %807 = comb.mux bin %806, %580, %422 : i8
    %808 = comb.and bin %898, %571 {sv.namehint = "out_f_woready_1023"} : i1
    %809 = comb.mux bin %808, %581, %424 : i8
    %810 = comb.and bin %898, %572 {sv.namehint = "out_f_woready_1024"} : i1
    %811 = comb.mux bin %810, %582, %426 : i8
    %812 = comb.and bin %898, %573 {sv.namehint = "out_f_woready_1025"} : i1
    %813 = comb.mux bin %812, %583, %428 : i8
    %814 = comb.and bin %898, %574 {sv.namehint = "out_f_woready_1026"} : i1
    %815 = comb.mux bin %814, %584, %430 : i8
    %816 = comb.concat %programBufferMem_7, %programBufferMem_6, %programBufferMem_5, %programBufferMem_4, %programBufferMem_3, %programBufferMem_2, %programBufferMem_1, %programBufferMem_0 {sv.namehint = "out_prepend_883"} : i8, i8, i8, i8, i8, i8, i8, i8
    %817 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_890"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %818 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_897"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %819 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_911"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %820 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_918"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %821 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_925"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %822 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_932"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %823 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_939"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %824 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_946"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %825 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_953"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %826 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_960"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %827 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_967"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %828 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_974"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %829 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_981"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %830 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_988"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %831 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_995"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %832 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1009"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %833 = comb.and bin %901, %567 {sv.namehint = "out_f_woready_1171"} : i1
    %834 = comb.mux bin %833, %577, %464 : i8
    %835 = comb.and bin %901, %568 {sv.namehint = "out_f_woready_1172"} : i1
    %836 = comb.mux bin %835, %578, %466 : i8
    %837 = comb.and bin %901, %569 {sv.namehint = "out_f_woready_1173"} : i1
    %838 = comb.mux bin %837, %579, %468 : i8
    %839 = comb.and bin %901, %570 {sv.namehint = "out_f_woready_1174"} : i1
    %840 = comb.mux bin %839, %580, %470 : i8
    %841 = comb.and bin %901, %571 {sv.namehint = "out_f_woready_1175"} : i1
    %842 = comb.mux bin %841, %581, %472 : i8
    %843 = comb.and bin %901, %572 {sv.namehint = "out_f_woready_1176"} : i1
    %844 = comb.mux bin %843, %582, %474 : i8
    %845 = comb.and bin %901, %573 {sv.namehint = "out_f_woready_1177"} : i1
    %846 = comb.mux bin %845, %583, %476 : i8
    %847 = comb.and bin %901, %574 {sv.namehint = "out_f_woready_1178"} : i1
    %848 = comb.mux bin %847, %584, %478 : i8
    %849 = comb.concat %programBufferMem_31, %programBufferMem_30, %programBufferMem_29, %programBufferMem_28, %programBufferMem_27, %programBufferMem_26, %programBufferMem_25, %programBufferMem_24 {sv.namehint = "out_prepend_1016"} : i8, i8, i8, i8, i8, i8, i8, i8
    %850 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1023"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %851 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1030"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %852 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1037"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %853 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1044"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %854 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1051"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %855 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1058"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %856 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1065"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %857 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1072"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %858 = comb.and bin %905, %567 {sv.namehint = "out_f_woready_1243"} : i1
    %859 = comb.mux bin %858, %577, %528 : i8
    %860 = comb.and bin %905, %568 {sv.namehint = "out_f_woready_1244"} : i1
    %861 = comb.mux bin %860, %578, %530 : i8
    %862 = comb.and bin %905, %569 {sv.namehint = "out_f_woready_1245"} : i1
    %863 = comb.mux bin %862, %579, %532 : i8
    %864 = comb.and bin %905, %570 {sv.namehint = "out_f_woready_1246"} : i1
    %865 = comb.mux bin %864, %580, %534 : i8
    %866 = comb.and bin %905, %571 {sv.namehint = "out_f_woready_1247"} : i1
    %867 = comb.mux bin %866, %581, %536 : i8
    %868 = comb.and bin %905, %572 {sv.namehint = "out_f_woready_1248"} : i1
    %869 = comb.mux bin %868, %582, %538 : i8
    %870 = comb.and bin %905, %573 {sv.namehint = "out_f_woready_1249"} : i1
    %871 = comb.mux bin %870, %583, %540 : i8
    %872 = comb.and bin %905, %574 {sv.namehint = "out_f_woready_1250"} : i1
    %873 = comb.mux bin %872, %584, %542 : i8
    %874 = comb.concat %programBufferMem_63, %programBufferMem_62, %programBufferMem_61, %programBufferMem_60, %programBufferMem_59, %programBufferMem_58, %programBufferMem_57, %programBufferMem_56 {sv.namehint = "out_prepend_1079"} : i8, i8, i8, i8, i8, i8, i8, i8
    %875 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1086"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %876 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1093"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %877 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1100"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %878 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1107"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %879 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1114"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %880 = comb.extract %auto_tl_in_a_bits_address from 3 {sv.namehint = "out_oindex_1"} : (i12) -> i8
    %881 = comb.concat %c0_i248, %880 : i248, i8
    %882 = comb.shl bin %c1_i256, %881 {sv.namehint = "_out_backSel_T_1"} : i256
    %883 = comb.extract %882 from 32 {sv.namehint = "out_backSel_32"} : (i256) -> i1
    %884 = comb.extract %882 from 33 {sv.namehint = "out_backSel_33"} : (i256) -> i1
    %885 = comb.extract %882 from 104 {sv.namehint = "out_backSel_104"} : (i256) -> i1
    %886 = comb.extract %882 from 105 {sv.namehint = "out_backSel_105"} : (i256) -> i1
    %887 = comb.extract %882 from 106 {sv.namehint = "out_backSel_106"} : (i256) -> i1
    %888 = comb.extract %882 from 107 {sv.namehint = "out_backSel_107"} : (i256) -> i1
    %889 = comb.extract %882 from 108 {sv.namehint = "out_backSel_108"} : (i256) -> i1
    %890 = comb.extract %882 from 109 {sv.namehint = "out_backSel_109"} : (i256) -> i1
    %891 = comb.extract %882 from 110 {sv.namehint = "out_backSel_110"} : (i256) -> i1
    %892 = comb.extract %882 from 111 {sv.namehint = "out_backSel_111"} : (i256) -> i1
    %893 = comb.extract %882 from 112 {sv.namehint = "out_backSel_112"} : (i256) -> i1
    %894 = comb.xor bin %564, %true {sv.namehint = "_out_wofireMux_T_133"} : i1
    %895 = comb.and bin %auto_tl_in_a_valid, %auto_tl_in_d_ready, %894 {sv.namehint = "_out_wofireMux_T_134"} : i1
    %896 = comb.and bin %895, %883, %566 {sv.namehint = "out_woready_1_528"} : i1
    %897 = comb.and bin %895, %884, %566 {sv.namehint = "out_woready_1_345"} : i1
    %898 = comb.and bin %895, %885, %566 {sv.namehint = "out_woready_1_922"} : i1
    %899 = comb.and bin %895, %886, %566 {sv.namehint = "out_woready_1_510"} : i1
    %900 = comb.and bin %895, %887, %566 {sv.namehint = "out_woready_1_191"} : i1
    %901 = comb.and bin %895, %888, %566 {sv.namehint = "out_woready_1_1074"} : i1
    %902 = comb.and bin %895, %889, %566 {sv.namehint = "out_woready_1_722"} : i1
    %903 = comb.and bin %895, %890, %566 {sv.namehint = "out_woready_1_442"} : i1
    %904 = comb.and bin %895, %891, %566 {sv.namehint = "out_woready_1_111"} : i1
    %905 = comb.and bin %895, %892, %566 {sv.namehint = "out_woready_1_1146"} : i1
    %906 = comb.and bin %895, %893, %566 {sv.namehint = "out_woready_1_818"} : i1
    %907 = hw.array_createtrue, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %566, %566, %566, %566, %566, %566, %566, %566, %566, %566, %true, %true, %true, %true, %true, %true, %566, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %566, %566, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %565, %565, %565, %565, %565, %565, %565, %565, %565, %565, %565 : i1
    %908 = hw.array_get %907[%880] : !hw.array<256xi1>, i8
    %909 = hw.array_create %770, %878, %641, %666, %762, %817, %586, %649, %590, %826, %737, %716, %646, %853, %767, %761, %852, %639, %698, %730, %825, %587, %648, %877, %818, %736, %665, %618, %879, %766, %673, %668, %764, %876, %643, %651, %735, %799, %589, %619, %875, %824, %741, %675, %640, %832, %771, %738, %823, %647, %696, %728, %798, %591, %650, %857, %792, %743, %667, %614, %851, %789, %674, %653, %727, %829, %616, %670, %733, %820, %595, %596, %830, %794, %731, %724, %621, %855, %793, %726, %796, %594, %693, %734, %821, %588, %671, %831, %768, %717, %655, %620, %856, %769, %723, %652, %732, %819, %615, %669, %742, %795, %593, %617, %827, %791, %725, %722, %642, %828, %790, %729, %797, %592, %672, %740, %822, %585, %654, %850, %765, %695, %645, %644, %854, %763, %694, %697, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %788, %874, %613, %692, %760, %849, %638, %715, %816, %739, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c58720367_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c1048691_i64, %c1152963438438252659_i64, %c8872131342536549411_i64, %c-1062809434914291609_i64, %c1152959040391750771_i64, %c1135121202967571_i64, %c-142979517114977261_i64, %c4612886698286653475_i64, %c-1062809433653637005_i64, %c1148417969475289199_i64, %c252202055886700655_i64 : i64
    %910 = hw.array_get %909[%880] : !hw.array<256xi64>, i8
    %911 = comb.mux bin %908, %910, %c0_i64 {sv.namehint = "out_1_bits_data"} : i64
    %912 = comb.concat %c0_i2, %564 {sv.namehint = "tlNodeIn_d_bits_opcode"} : i2, i1
    %913 = comb.mux bin %io_dmactive, %773, %c0_i8 : i8
    %914 = comb.mux bin %io_dmactive, %775, %c0_i8 : i8
    %915 = comb.mux bin %io_dmactive, %777, %c0_i8 : i8
    %916 = comb.mux bin %io_dmactive, %779, %c0_i8 : i8
    %917 = comb.mux bin %io_dmactive, %781, %c0_i8 : i8
    %918 = comb.mux bin %io_dmactive, %783, %c0_i8 : i8
    %919 = comb.mux bin %io_dmactive, %785, %c0_i8 : i8
    %920 = comb.mux bin %io_dmactive, %787, %c0_i8 : i8
    %921 = comb.mux bin %io_dmactive, %801, %c0_i8 : i8
    %922 = comb.mux bin %io_dmactive, %803, %c0_i8 : i8
    %923 = comb.mux bin %io_dmactive, %805, %c0_i8 : i8
    %924 = comb.mux bin %io_dmactive, %807, %c0_i8 : i8
    %925 = comb.mux bin %io_dmactive, %809, %c0_i8 : i8
    %926 = comb.mux bin %io_dmactive, %811, %c0_i8 : i8
    %927 = comb.mux bin %io_dmactive, %813, %c0_i8 : i8
    %928 = comb.mux bin %io_dmactive, %815, %c0_i8 : i8
    %929 = comb.mux bin %io_dmactive, %700, %c0_i8 : i8
    %930 = comb.mux bin %io_dmactive, %702, %c0_i8 : i8
    %931 = comb.mux bin %io_dmactive, %704, %c0_i8 : i8
    %932 = comb.mux bin %io_dmactive, %706, %c0_i8 : i8
    %933 = comb.mux bin %io_dmactive, %708, %c0_i8 : i8
    %934 = comb.mux bin %io_dmactive, %710, %c0_i8 : i8
    %935 = comb.mux bin %io_dmactive, %712, %c0_i8 : i8
    %936 = comb.mux bin %io_dmactive, %714, %c0_i8 : i8
    %937 = comb.mux bin %io_dmactive, %623, %c0_i8 : i8
    %938 = comb.mux bin %io_dmactive, %625, %c0_i8 : i8
    %939 = comb.mux bin %io_dmactive, %627, %c0_i8 : i8
    %940 = comb.mux bin %io_dmactive, %629, %c0_i8 : i8
    %941 = comb.mux bin %io_dmactive, %631, %c0_i8 : i8
    %942 = comb.mux bin %io_dmactive, %633, %c0_i8 : i8
    %943 = comb.mux bin %io_dmactive, %635, %c0_i8 : i8
    %944 = comb.mux bin %io_dmactive, %637, %c0_i8 : i8
    %945 = comb.mux bin %io_dmactive, %834, %c0_i8 : i8
    %946 = comb.mux bin %io_dmactive, %836, %c0_i8 : i8
    %947 = comb.mux bin %io_dmactive, %838, %c0_i8 : i8
    %948 = comb.mux bin %io_dmactive, %840, %c0_i8 : i8
    %949 = comb.mux bin %io_dmactive, %842, %c0_i8 : i8
    %950 = comb.mux bin %io_dmactive, %844, %c0_i8 : i8
    %951 = comb.mux bin %io_dmactive, %846, %c0_i8 : i8
    %952 = comb.mux bin %io_dmactive, %848, %c0_i8 : i8
    %953 = comb.mux bin %io_dmactive, %745, %c0_i8 : i8
    %954 = comb.mux bin %io_dmactive, %747, %c0_i8 : i8
    %955 = comb.mux bin %io_dmactive, %749, %c0_i8 : i8
    %956 = comb.mux bin %io_dmactive, %751, %c0_i8 : i8
    %957 = comb.mux bin %io_dmactive, %753, %c0_i8 : i8
    %958 = comb.mux bin %io_dmactive, %755, %c0_i8 : i8
    %959 = comb.mux bin %io_dmactive, %757, %c0_i8 : i8
    %960 = comb.mux bin %io_dmactive, %759, %c0_i8 : i8
    %961 = comb.mux bin %io_dmactive, %677, %c0_i8 : i8
    %962 = comb.mux bin %io_dmactive, %679, %c0_i8 : i8
    %963 = comb.mux bin %io_dmactive, %681, %c0_i8 : i8
    %964 = comb.mux bin %io_dmactive, %683, %c0_i8 : i8
    %965 = comb.mux bin %io_dmactive, %685, %c0_i8 : i8
    %966 = comb.mux bin %io_dmactive, %687, %c0_i8 : i8
    %967 = comb.mux bin %io_dmactive, %689, %c0_i8 : i8
    %968 = comb.mux bin %io_dmactive, %691, %c0_i8 : i8
    %969 = comb.mux bin %io_dmactive, %598, %c0_i8 : i8
    %970 = comb.mux bin %io_dmactive, %600, %c0_i8 : i8
    %971 = comb.mux bin %io_dmactive, %602, %c0_i8 : i8
    %972 = comb.mux bin %io_dmactive, %604, %c0_i8 : i8
    %973 = comb.mux bin %io_dmactive, %606, %c0_i8 : i8
    %974 = comb.mux bin %io_dmactive, %608, %c0_i8 : i8
    %975 = comb.mux bin %io_dmactive, %610, %c0_i8 : i8
    %976 = comb.mux bin %io_dmactive, %612, %c0_i8 : i8
    %977 = comb.mux bin %io_dmactive, %859, %c0_i8 : i8
    %978 = comb.mux bin %io_dmactive, %861, %c0_i8 : i8
    %979 = comb.mux bin %io_dmactive, %863, %c0_i8 : i8
    %980 = comb.mux bin %io_dmactive, %865, %c0_i8 : i8
    %981 = comb.mux bin %io_dmactive, %867, %c0_i8 : i8
    %982 = comb.mux bin %io_dmactive, %869, %c0_i8 : i8
    %983 = comb.mux bin %io_dmactive, %871, %c0_i8 : i8
    %984 = comb.mux bin %io_dmactive, %873, %c0_i8 : i8
    %ctrlStateReg = seq.firreg %1050 clock %clock {firrtl.random_init_start = 743 : ui64} : i2
    %985 = comb.icmp bin ne %ctrlStateReg, %c0_i2 {sv.namehint = "abstractCommandBusy"} : i2
    %986 = comb.icmp bin ne %ctrlStateReg, %c0_i2 : i2
    %987 = comb.xor bin %986, %true {sv.namehint = "COMMANDWrEnLegal"} : i1
    %988 = comb.and bin %292, %986 {sv.namehint = "_errorBusy_T_1"} : i1
    %989 = comb.and bin %227, %986 {sv.namehint = "_errorBusy_T_3"} : i1
    %990 = comb.and bin %232, %986 {sv.namehint = "_errorBusy_T_6"} : i1
    %991 = comb.and bin %313, %986 {sv.namehint = "_errorBusy_T_9"} : i1
    %992 = comb.and bin %57, %986 {sv.namehint = "_errorBusy_T_12"} : i1
    %993 = comb.and bin %58, %986 {sv.namehint = "_errorBusy_T_15"} : i1
    %994 = comb.or bin %988, %989, %990, %991, %992, %993 {sv.namehint = "errorBusy"} : i1
    %995 = comb.icmp bin ne %97, %c0_i8 {sv.namehint = "_commandWrIsUnsupported_T"} : i8
    %996 = comb.xor bin %995, %true {sv.namehint = "commandWrIsAccessRegister"} : i1
    %997 = comb.icmp bin eq %COMMANDReg_cmdtype, %c0_i8 {sv.namehint = "commandRegIsAccessRegister"} : i8
    %998 = comb.and bin %98, %995 {sv.namehint = "commandWrIsUnsupported"} : i1
    %999 = comb.icmp bin eq %555, %c2_i3 {sv.namehint = "_accessRegIsLegalSize_T"} : i3
    %1000 = comb.icmp bin eq %555, %c3_i3 {sv.namehint = "_accessRegIsLegalSize_T_1"} : i3
    %1001 = comb.or bin %999, %1000 {sv.namehint = "accessRegIsLegalSize"} : i1
    %1002 = comb.extract %COMMANDReg_control from 12 : (i24) -> i4
    %1003 = comb.icmp bin ne %1002, %c0_i4 {sv.namehint = "_accessRegIsGPR_T"} : i4
    %1004 = comb.icmp bin ult %551, %c4128_i16 {sv.namehint = "_accessRegIsGPR_T_1"} : i16
    %1005 = comb.and bin %1003, %1004, %1001 {sv.namehint = "accessRegIsGPR"} : i1
    %1006 = comb.xor bin %553, %true : i1
    %1007 = comb.or bin %1006, %1005 : i1
    %1008 = comb.xor bin %1007, %true : i1
    %1009 = comb.xor %997, %true : i1
    %1010 = comb.or %1009, %1008 {sv.namehint = "commandRegIsUnsupported"} : i1
    %1011 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_commandRegBadHaltResume_T"} : i1
    %1012 = comb.and %997, %1007, %1011 {sv.namehint = "commandRegBadHaltResume"} : i1
    %1013 = comb.icmp bin eq %ABSTRACTCSReg_cmderr, %c0_i3 {sv.namehint = "_regAccessRegisterCommand_T_1"} : i3
    %1014 = comb.and bin %98, %996, %1013 {sv.namehint = "wrAccessRegisterCommand"} : i1
    %1015 = comb.and bin %95, %997, %1013 {sv.namehint = "regAccessRegisterCommand"} : i1
    %1016 = comb.or bin %1014, %1015 : i1
    %1017 = comb.mux bin %1016, %c1_i2, %ctrlStateReg : i2
    %1018 = comb.and bin %95, %1010 : i1
    %1019 = comb.or %998, %1018 : i1
    %1020 = comb.xor %1016, %true : i1
    %1021 = comb.and %1020, %1019 : i1
    %1022 = comb.icmp bin eq %ctrlStateReg, %c1_i2 : i2
    %1023 = comb.and %1022, %1010 : i1
    %1024 = comb.mux bin %986, %1023, %1021 {sv.namehint = "errorUnsupported"} : i1
    %1025 = comb.xor %1010, %true : i1
    %1026 = comb.and %986, %1022, %1025, %1012 {sv.namehint = "errorHaltResume"} : i1
    %1027 = comb.or bin %1010, %1012 : i1
    %1028 = comb.xor %1027, %true : i1
    %1029 = comb.concat %1028, %false : i1, i1
    %1030 = comb.xor bin %1027, %true : i1
    %1031 = comb.and %986, %1022, %1030 {sv.namehint = "goAbstract"} : i1
    %1032 = comb.icmp bin ne %ctrlStateReg, %c1_i2 : i2
    %1033 = comb.and bin %986, %1032 : i1
    %1034 = comb.icmp bin eq %ctrlStateReg, %c-2_i2 : i2
    %1035 = comb.xor bin %goReg, %true : i1
    %1036 = comb.and bin %1035, %719 : i1
    %1037 = comb.icmp bin eq %664, %c0_i10 : i10
    %1038 = comb.and bin %1033, %1034, %663, %545 : i1
    %1039 = comb.or bin %663, %1036 : i1
    %1040 = comb.or bin %987, %1022 : i1
    %1041 = comb.xor %1040, %true : i1
    %1042 = comb.and %1041, %1034, %663 {sv.namehint = "errorException"} : i1
    %1043 = comb.icmp bin ne %ctrlStateReg, %c-2_i2 : i2
    %1044 = comb.icmp bin eq %ctrlStateReg, %c-1_i2 : i2
    %1045 = comb.and bin %1033, %1043, %1044, %545 : i1
    %1046 = comb.and bin %1034, %1039 : i1
    %1047 = comb.mux bin %1046, %c0_i2, %ctrlStateReg : i2
    %1048 = comb.mux bin %1022, %1029, %1047 : i2
    %1049 = comb.mux bin %986, %1048, %1017 {sv.namehint = "ctrlStateNxt"} : i2
    %1050 = comb.mux bin %io_dmactive, %1049, %c0_i2 : i2
    %1051 = comb.xor bin %663, %true : i1
    %1052 = comb.or bin %2, %1051, %1034 : i1
    sv.always posedge %0 {
      sv.if %546 {
        sv.assert %544, immediate label "assert__assert"
      }
      sv.if %1038 {
        sv.assert %1037, immediate label "assert__assert_2"
      }
      sv.if %1045 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %545 {
        sv.assert %1052, immediate label "assert__assert_4"
      }
    }
    hw.output %auto_tl_in_d_ready, %auto_tl_in_a_valid, %912, %auto_tl_in_a_bits_size, %auto_tl_in_a_bits_source, %911, %auto_dmi_in_d_ready, %auto_dmi_in_a_valid, %398, %auto_dmi_in_a_bits_size, %auto_dmi_in_a_bits_source, %397, %hrDebugIntReg_0 : i1, i1, i3, i2, i6, i64, i1, i1, i3, i2, i1, i32, i1
  }
  hw.module private @ClockCrossingReg_w55(in %clock : !seq.clock, in %io_d : i55, out io_q : i55, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i55
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i55
    hw.output %cdc_reg : i55
  }
  hw.module private @AsyncQueueSink_1(in %clock : !seq.clock, in %reset : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i2, out io_deq_bits_source : i1, out io_deq_bits_address : i9, out io_deq_bits_mask : i4, out io_deq_bits_data : i32, out io_deq_bits_corrupt : i1, in %io_async_mem_0_opcode : i3, in %io_async_mem_0_address : i9, in %io_async_mem_0_data : i32, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %c4_i6 = hw.constant 4 : i6
    %true = hw.constant true
    %c-1_i4 = hw.constant -1 : i4
    %false = hw.constant false
    %0 = comb.and bin %io_deq_ready, %14 {sv.namehint = "_ridx_T_1"} : i1
    %ridx_ridx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %1 = comb.add bin %ridx_ridx_bin, %0 {sv.namehint = "_ridx_incremented_T"} : i1
    %2 = comb.and %source_valid.io_out, %1 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %3 = comb.icmp bin ne %2, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %4 = comb.and bin %source_valid.io_out, %3 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w55(clock: %clock: !seq.clock, io_d: %5: i55, io_en: %4: i1) -> (io_q: i55) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %5 = comb.concat %io_async_mem_0_opcode, %c4_i6, %io_async_mem_0_address, %c-1_i4, %io_async_mem_0_data, %false {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i3, i6, i9, i4, i32, i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i55) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 1 {sv.namehint = "_io_deq_bits_T_1"} : (i55) -> i32
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 33 {sv.namehint = "_io_deq_bits_T_2"} : (i55) -> i4
    %9 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 37 {sv.namehint = "_io_deq_bits_T_3"} : (i55) -> i9
    %10 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 46 {sv.namehint = "_io_deq_bits_T_4"} : (i55) -> i1
    %11 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 47 {sv.namehint = "_io_deq_bits_T_5"} : (i55) -> i2
    %12 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 49 {sv.namehint = "_io_deq_bits_T_6"} : (i55) -> i3
    %13 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 52 {sv.namehint = "_io_deq_bits_T_7"} : (i55) -> i3
    %valid_reg = seq.firreg %4 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %14 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %16: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %17: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %18: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %15 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %16 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %17 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %18 = comb.or bin %reset, %15 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %19 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %14, %13, %12, %11, %10, %9, %8, %7, %6, %ridx_gray, %sink_valid_1.io_out, %19 : i1, i3, i3, i2, i1, i9, i4, i32, i1, i1, i1, i1
  }
  hw.module private @AsyncQueueSource_2(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_size : i2, in %io_enq_bits_source : i1, in %io_enq_bits_data : i32, out io_async_mem_0_opcode : i3, out io_async_mem_0_size : i2, out io_async_mem_0_source : i1, out io_async_mem_0_data : i32, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_opcode = seq.firreg %6 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_opcode"} : i3
    %mem_0_size = seq.firreg %7 clock %clock {firrtl.random_init_start = 5 : ui64, sv.namehint = "mem_0_size"} : i2
    %mem_0_source = seq.firreg %8 clock %clock {firrtl.random_init_start = 7 : ui64, sv.namehint = "mem_0_source"} : i1
    %mem_0_data = seq.firreg %9 clock %clock {firrtl.random_init_start = 10 : ui64, sv.namehint = "mem_0_data"} : i32
    %0 = comb.and bin %10, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 43 : ui64} : i1
    %1 = comb.add bin %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_opcode, %mem_0_opcode : i3
    %7 = comb.mux bin %0, %io_enq_bits_size, %mem_0_size : i2
    %8 = comb.mux bin %0, %io_enq_bits_source, %mem_0_source : i1
    %9 = comb.mux bin %0, %io_enq_bits_data, %mem_0_data : i32
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 44 : ui64} : i1
    %10 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 45 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %14: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %11 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %12 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %13 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %14 = comb.or bin %reset, %11 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %15 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %10, %mem_0_opcode, %mem_0_size, %mem_0_source, %mem_0_data, %widx_gray, %source_valid_1.io_out, %15 : i1, i3, i2, i1, i32, i1, i1, i1
  }
  hw.module private @TLAsyncCrossingSink(in %clock : !seq.clock, in %reset : i1, in %auto_in_a_mem_0_opcode : i3, in %auto_in_a_mem_0_address : i9, in %auto_in_a_mem_0_data : i32, out auto_in_a_ridx : i1, in %auto_in_a_widx : i1, out auto_in_a_safe_ridx_valid : i1, in %auto_in_a_safe_widx_valid : i1, in %auto_in_a_safe_source_reset_n : i1, out auto_in_a_safe_sink_reset_n : i1, out auto_in_d_mem_0_opcode : i3, out auto_in_d_mem_0_size : i2, out auto_in_d_mem_0_source : i1, out auto_in_d_mem_0_data : i32, in %auto_in_d_ridx : i1, out auto_in_d_widx : i1, in %auto_in_d_safe_ridx_valid : i1, out auto_in_d_safe_widx_valid : i1, out auto_in_d_safe_source_reset_n : i1, in %auto_in_d_safe_sink_reset_n : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i1, out auto_out_a_bits_address : i9, out auto_out_a_bits_mask : i4, out auto_out_a_bits_data : i32, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i1, in %auto_out_d_bits_data : i32) {
    %nodeOut_a_sink.io_deq_valid, %nodeOut_a_sink.io_deq_bits_opcode, %nodeOut_a_sink.io_deq_bits_param, %nodeOut_a_sink.io_deq_bits_size, %nodeOut_a_sink.io_deq_bits_source, %nodeOut_a_sink.io_deq_bits_address, %nodeOut_a_sink.io_deq_bits_mask, %nodeOut_a_sink.io_deq_bits_data, %nodeOut_a_sink.io_deq_bits_corrupt, %nodeOut_a_sink.io_async_ridx, %nodeOut_a_sink.io_async_safe_ridx_valid, %nodeOut_a_sink.io_async_safe_sink_reset_n = hw.instance "nodeOut_a_sink" @AsyncQueueSink_1(clock: %clock: !seq.clock, reset: %reset: i1, io_deq_ready: %auto_out_a_ready: i1, io_async_mem_0_opcode: %auto_in_a_mem_0_opcode: i3, io_async_mem_0_address: %auto_in_a_mem_0_address: i9, io_async_mem_0_data: %auto_in_a_mem_0_data: i32, io_async_widx: %auto_in_a_widx: i1, io_async_safe_widx_valid: %auto_in_a_safe_widx_valid: i1, io_async_safe_source_reset_n: %auto_in_a_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i2, io_deq_bits_source: i1, io_deq_bits_address: i9, io_deq_bits_mask: i4, io_deq_bits_data: i32, io_deq_bits_corrupt: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "nodeOut_a_sink.io_deq_valid"}
    %nodeIn_d_source.io_enq_ready, %nodeIn_d_source.io_async_mem_0_opcode, %nodeIn_d_source.io_async_mem_0_size, %nodeIn_d_source.io_async_mem_0_source, %nodeIn_d_source.io_async_mem_0_data, %nodeIn_d_source.io_async_widx, %nodeIn_d_source.io_async_safe_widx_valid, %nodeIn_d_source.io_async_safe_source_reset_n = hw.instance "nodeIn_d_source" @AsyncQueueSource_2(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_size: %auto_out_d_bits_size: i2, io_enq_bits_source: %auto_out_d_bits_source: i1, io_enq_bits_data: %auto_out_d_bits_data: i32, io_async_ridx: %auto_in_d_ridx: i1, io_async_safe_ridx_valid: %auto_in_d_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %auto_in_d_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_opcode: i3, io_async_mem_0_size: i2, io_async_mem_0_source: i1, io_async_mem_0_data: i32, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "nodeIn_d_source.io_enq_ready"}
    hw.output %nodeOut_a_sink.io_async_ridx, %nodeOut_a_sink.io_async_safe_ridx_valid, %nodeOut_a_sink.io_async_safe_sink_reset_n, %nodeIn_d_source.io_async_mem_0_opcode, %nodeIn_d_source.io_async_mem_0_size, %nodeIn_d_source.io_async_mem_0_source, %nodeIn_d_source.io_async_mem_0_data, %nodeIn_d_source.io_async_widx, %nodeIn_d_source.io_async_safe_widx_valid, %nodeIn_d_source.io_async_safe_source_reset_n, %nodeOut_a_sink.io_deq_valid, %nodeOut_a_sink.io_deq_bits_opcode, %nodeOut_a_sink.io_deq_bits_param, %nodeOut_a_sink.io_deq_bits_size, %nodeOut_a_sink.io_deq_bits_source, %nodeOut_a_sink.io_deq_bits_address, %nodeOut_a_sink.io_deq_bits_mask, %nodeOut_a_sink.io_deq_bits_data, %nodeOut_a_sink.io_deq_bits_corrupt, %nodeIn_d_source.io_enq_ready : i1, i1, i1, i3, i2, i1, i32, i1, i1, i1, i1, i3, i3, i2, i1, i9, i4, i32, i1, i1
  }
  hw.module private @ClockCrossingReg_w15(in %clock : !seq.clock, in %io_d : i15, out io_q : i15, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i15
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i15
    hw.output %cdc_reg : i15
  }
  hw.module private @AsyncQueueSink_2(in %clock : !seq.clock, in %reset : i1, out io_deq_valid : i1, out io_deq_bits_resumereq : i1, out io_deq_bits_hartsel : i10, out io_deq_bits_ackhavereset : i1, out io_deq_bits_hrmask_0 : i1, in %io_async_mem_0_resumereq : i1, in %io_async_mem_0_hartsel : i10, in %io_async_mem_0_ackhavereset : i1, in %io_async_mem_0_hrmask_0 : i1, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %ridx_ridx_bin = seq.firreg %1 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %0 = comb.add bin %ridx_ridx_bin, %9 {sv.namehint = "_ridx_incremented_T"} : i1
    %1 = comb.and %source_valid.io_out, %0 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %2 = comb.icmp bin ne %1, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %3 = comb.and bin %source_valid.io_out, %2 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w15(clock: %clock: !seq.clock, io_d: %4: i15, io_en: %3: i1) -> (io_q: i15) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %4 = comb.concat %io_async_mem_0_resumereq, %io_async_mem_0_hartsel, %io_async_mem_0_ackhavereset, %c0_i2, %io_async_mem_0_hrmask_0 {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i1, i10, i1, i2, i1
    %5 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i15) -> i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 3 {sv.namehint = "_io_deq_bits_T_3"} : (i15) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 4 {sv.namehint = "_io_deq_bits_T_4"} : (i15) -> i10
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 14 {sv.namehint = "_io_deq_bits_T_5"} : (i15) -> i1
    %valid_reg = seq.firreg %3 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %9 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %1 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %11: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %10 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %11 = comb.or bin %reset, %10 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %12 = comb.or bin %reset, %10 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %13 = comb.or bin %reset, %10 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %14 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %9, %8, %7, %6, %5, %ridx_gray, %sink_valid_1.io_out, %14 : i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLDebugModuleInnerAsync(in %auto_dmiXing_in_a_mem_0_opcode : i3, in %auto_dmiXing_in_a_mem_0_address : i9, in %auto_dmiXing_in_a_mem_0_data : i32, out auto_dmiXing_in_a_ridx : i1, in %auto_dmiXing_in_a_widx : i1, out auto_dmiXing_in_a_safe_ridx_valid : i1, in %auto_dmiXing_in_a_safe_widx_valid : i1, in %auto_dmiXing_in_a_safe_source_reset_n : i1, out auto_dmiXing_in_a_safe_sink_reset_n : i1, out auto_dmiXing_in_d_mem_0_opcode : i3, out auto_dmiXing_in_d_mem_0_size : i2, out auto_dmiXing_in_d_mem_0_source : i1, out auto_dmiXing_in_d_mem_0_data : i32, in %auto_dmiXing_in_d_ridx : i1, out auto_dmiXing_in_d_widx : i1, in %auto_dmiXing_in_d_safe_ridx_valid : i1, out auto_dmiXing_in_d_safe_widx_valid : i1, out auto_dmiXing_in_d_safe_source_reset_n : i1, in %auto_dmiXing_in_d_safe_sink_reset_n : i1, out auto_dmInner_tl_in_a_ready : i1, in %auto_dmInner_tl_in_a_valid : i1, in %auto_dmInner_tl_in_a_bits_opcode : i3, in %auto_dmInner_tl_in_a_bits_param : i3, in %auto_dmInner_tl_in_a_bits_size : i2, in %auto_dmInner_tl_in_a_bits_source : i6, in %auto_dmInner_tl_in_a_bits_address : i12, in %auto_dmInner_tl_in_a_bits_mask : i8, in %auto_dmInner_tl_in_a_bits_data : i64, in %auto_dmInner_tl_in_a_bits_corrupt : i1, in %auto_dmInner_tl_in_d_ready : i1, out auto_dmInner_tl_in_d_valid : i1, out auto_dmInner_tl_in_d_bits_opcode : i3, out auto_dmInner_tl_in_d_bits_size : i2, out auto_dmInner_tl_in_d_bits_source : i6, out auto_dmInner_tl_in_d_bits_data : i64, in %io_debug_clock : !seq.clock, in %io_debug_reset : i1, in %io_dmactive : i1, in %io_innerCtrl_mem_0_resumereq : i1, in %io_innerCtrl_mem_0_hartsel : i10, in %io_innerCtrl_mem_0_ackhavereset : i1, in %io_innerCtrl_mem_0_hrmask_0 : i1, out io_innerCtrl_ridx : i1, in %io_innerCtrl_widx : i1, out io_innerCtrl_safe_ridx_valid : i1, in %io_innerCtrl_safe_widx_valid : i1, in %io_innerCtrl_safe_source_reset_n : i1, out io_innerCtrl_safe_sink_reset_n : i1, out io_hgDebugInt_0 : i1, in %io_hartIsInReset_0 : i1) {
    %dmInner.auto_tl_in_a_ready, %dmInner.auto_tl_in_d_valid, %dmInner.auto_tl_in_d_bits_opcode, %dmInner.auto_tl_in_d_bits_size, %dmInner.auto_tl_in_d_bits_source, %dmInner.auto_tl_in_d_bits_data, %dmInner.auto_dmi_in_a_ready, %dmInner.auto_dmi_in_d_valid, %dmInner.auto_dmi_in_d_bits_opcode, %dmInner.auto_dmi_in_d_bits_size, %dmInner.auto_dmi_in_d_bits_source, %dmInner.auto_dmi_in_d_bits_data, %dmInner.io_hgDebugInt_0 = hw.instance "dmInner" @TLDebugModuleInner(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, auto_tl_in_a_valid: %auto_dmInner_tl_in_a_valid: i1, auto_tl_in_a_bits_opcode: %auto_dmInner_tl_in_a_bits_opcode: i3, auto_tl_in_a_bits_param: %auto_dmInner_tl_in_a_bits_param: i3, auto_tl_in_a_bits_size: %auto_dmInner_tl_in_a_bits_size: i2, auto_tl_in_a_bits_source: %auto_dmInner_tl_in_a_bits_source: i6, auto_tl_in_a_bits_address: %auto_dmInner_tl_in_a_bits_address: i12, auto_tl_in_a_bits_mask: %auto_dmInner_tl_in_a_bits_mask: i8, auto_tl_in_a_bits_data: %auto_dmInner_tl_in_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %auto_dmInner_tl_in_a_bits_corrupt: i1, auto_tl_in_d_ready: %auto_dmInner_tl_in_d_ready: i1, auto_dmi_in_a_valid: %dmiXing.auto_out_a_valid: i1, auto_dmi_in_a_bits_opcode: %dmiXing.auto_out_a_bits_opcode: i3, auto_dmi_in_a_bits_param: %dmiXing.auto_out_a_bits_param: i3, auto_dmi_in_a_bits_size: %dmiXing.auto_out_a_bits_size: i2, auto_dmi_in_a_bits_source: %dmiXing.auto_out_a_bits_source: i1, auto_dmi_in_a_bits_address: %dmiXing.auto_out_a_bits_address: i9, auto_dmi_in_a_bits_mask: %dmiXing.auto_out_a_bits_mask: i4, auto_dmi_in_a_bits_data: %dmiXing.auto_out_a_bits_data: i32, auto_dmi_in_a_bits_corrupt: %dmiXing.auto_out_a_bits_corrupt: i1, auto_dmi_in_d_ready: %dmiXing.auto_out_d_ready: i1, io_dmactive: %dmactive_synced_dmactive_synced_dmactiveSync.io_q: i1, io_innerCtrl_valid: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid: i1, io_innerCtrl_bits_resumereq: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_resumereq: i1, io_innerCtrl_bits_hartsel: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hartsel: i10, io_innerCtrl_bits_ackhavereset: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_ackhavereset: i1, io_innerCtrl_bits_hrmask_0: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hrmask_0: i1, io_hartIsInReset_0: %io_hartIsInReset_0: i1) -> (auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i2, auto_tl_in_d_bits_source: i6, auto_tl_in_d_bits_data: i64, auto_dmi_in_a_ready: i1, auto_dmi_in_d_valid: i1, auto_dmi_in_d_bits_opcode: i3, auto_dmi_in_d_bits_size: i2, auto_dmi_in_d_bits_source: i1, auto_dmi_in_d_bits_data: i32, io_hgDebugInt_0: i1) {sv.namehint = "dmInner.io_hgDebugInt_0"}
    %dmiXing.auto_in_a_ridx, %dmiXing.auto_in_a_safe_ridx_valid, %dmiXing.auto_in_a_safe_sink_reset_n, %dmiXing.auto_in_d_mem_0_opcode, %dmiXing.auto_in_d_mem_0_size, %dmiXing.auto_in_d_mem_0_source, %dmiXing.auto_in_d_mem_0_data, %dmiXing.auto_in_d_widx, %dmiXing.auto_in_d_safe_widx_valid, %dmiXing.auto_in_d_safe_source_reset_n, %dmiXing.auto_out_a_valid, %dmiXing.auto_out_a_bits_opcode, %dmiXing.auto_out_a_bits_param, %dmiXing.auto_out_a_bits_size, %dmiXing.auto_out_a_bits_source, %dmiXing.auto_out_a_bits_address, %dmiXing.auto_out_a_bits_mask, %dmiXing.auto_out_a_bits_data, %dmiXing.auto_out_a_bits_corrupt, %dmiXing.auto_out_d_ready = hw.instance "dmiXing" @TLAsyncCrossingSink(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, auto_in_a_mem_0_opcode: %auto_dmiXing_in_a_mem_0_opcode: i3, auto_in_a_mem_0_address: %auto_dmiXing_in_a_mem_0_address: i9, auto_in_a_mem_0_data: %auto_dmiXing_in_a_mem_0_data: i32, auto_in_a_widx: %auto_dmiXing_in_a_widx: i1, auto_in_a_safe_widx_valid: %auto_dmiXing_in_a_safe_widx_valid: i1, auto_in_a_safe_source_reset_n: %auto_dmiXing_in_a_safe_source_reset_n: i1, auto_in_d_ridx: %auto_dmiXing_in_d_ridx: i1, auto_in_d_safe_ridx_valid: %auto_dmiXing_in_d_safe_ridx_valid: i1, auto_in_d_safe_sink_reset_n: %auto_dmiXing_in_d_safe_sink_reset_n: i1, auto_out_a_ready: %dmInner.auto_dmi_in_a_ready: i1, auto_out_d_valid: %dmInner.auto_dmi_in_d_valid: i1, auto_out_d_bits_opcode: %dmInner.auto_dmi_in_d_bits_opcode: i3, auto_out_d_bits_size: %dmInner.auto_dmi_in_d_bits_size: i2, auto_out_d_bits_source: %dmInner.auto_dmi_in_d_bits_source: i1, auto_out_d_bits_data: %dmInner.auto_dmi_in_d_bits_data: i32) -> (auto_in_a_ridx: i1, auto_in_a_safe_ridx_valid: i1, auto_in_a_safe_sink_reset_n: i1, auto_in_d_mem_0_opcode: i3, auto_in_d_mem_0_size: i2, auto_in_d_mem_0_source: i1, auto_in_d_mem_0_data: i32, auto_in_d_widx: i1, auto_in_d_safe_widx_valid: i1, auto_in_d_safe_source_reset_n: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i1, auto_out_a_bits_address: i9, auto_out_a_bits_mask: i4, auto_out_a_bits_data: i32, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "dmiXing.auto_in_d_widx"}
    %dmactive_synced_dmactive_synced_dmactiveSync.io_q = hw.instance "dmactive_synced_dmactive_synced_dmactiveSync" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, io_d: %io_dmactive: i1) -> (io_q: i1) {sv.namehint = "dmactive_synced"}
    %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_resumereq, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hartsel, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_ackhavereset, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hrmask_0, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_ridx, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_ridx_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_sink_reset_n = hw.instance "dmactive_synced_dmInner_io_innerCtrl_sink" @AsyncQueueSink_2(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, io_async_mem_0_resumereq: %io_innerCtrl_mem_0_resumereq: i1, io_async_mem_0_hartsel: %io_innerCtrl_mem_0_hartsel: i10, io_async_mem_0_ackhavereset: %io_innerCtrl_mem_0_ackhavereset: i1, io_async_mem_0_hrmask_0: %io_innerCtrl_mem_0_hrmask_0: i1, io_async_widx: %io_innerCtrl_widx: i1, io_async_safe_widx_valid: %io_innerCtrl_safe_widx_valid: i1, io_async_safe_source_reset_n: %io_innerCtrl_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_resumereq: i1, io_deq_bits_hartsel: i10, io_deq_bits_ackhavereset: i1, io_deq_bits_hrmask_0: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid"}
    hw.output %dmiXing.auto_in_a_ridx, %dmiXing.auto_in_a_safe_ridx_valid, %dmiXing.auto_in_a_safe_sink_reset_n, %dmiXing.auto_in_d_mem_0_opcode, %dmiXing.auto_in_d_mem_0_size, %dmiXing.auto_in_d_mem_0_source, %dmiXing.auto_in_d_mem_0_data, %dmiXing.auto_in_d_widx, %dmiXing.auto_in_d_safe_widx_valid, %dmiXing.auto_in_d_safe_source_reset_n, %dmInner.auto_tl_in_a_ready, %dmInner.auto_tl_in_d_valid, %dmInner.auto_tl_in_d_bits_opcode, %dmInner.auto_tl_in_d_bits_size, %dmInner.auto_tl_in_d_bits_source, %dmInner.auto_tl_in_d_bits_data, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_ridx, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_ridx_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_sink_reset_n, %dmInner.io_hgDebugInt_0 : i1, i1, i1, i3, i2, i1, i32, i1, i1, i1, i1, i1, i3, i2, i6, i64, i1, i1, i1, i1
  }
  hw.module private @TLDebugModule(out auto_dmInner_dmInner_tl_in_a_ready : i1, in %auto_dmInner_dmInner_tl_in_a_valid : i1, in %auto_dmInner_dmInner_tl_in_a_bits_opcode : i3, in %auto_dmInner_dmInner_tl_in_a_bits_param : i3, in %auto_dmInner_dmInner_tl_in_a_bits_size : i2, in %auto_dmInner_dmInner_tl_in_a_bits_source : i6, in %auto_dmInner_dmInner_tl_in_a_bits_address : i12, in %auto_dmInner_dmInner_tl_in_a_bits_mask : i8, in %auto_dmInner_dmInner_tl_in_a_bits_data : i64, in %auto_dmInner_dmInner_tl_in_a_bits_corrupt : i1, in %auto_dmInner_dmInner_tl_in_d_ready : i1, out auto_dmInner_dmInner_tl_in_d_valid : i1, out auto_dmInner_dmInner_tl_in_d_bits_opcode : i3, out auto_dmInner_dmInner_tl_in_d_bits_size : i2, out auto_dmInner_dmInner_tl_in_d_bits_source : i6, out auto_dmInner_dmInner_tl_in_d_bits_data : i64, out auto_dmOuter_intsource_out_sync_0 : i1, in %io_debug_clock : !seq.clock, in %io_debug_reset : i1, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, out io_dmi_dmi_req_ready : i1, in %io_dmi_dmi_req_valid : i1, in %io_dmi_dmi_req_bits_addr : i7, in %io_dmi_dmi_req_bits_data : i32, in %io_dmi_dmi_req_bits_op : i2, in %io_dmi_dmi_resp_ready : i1, out io_dmi_dmi_resp_valid : i1, out io_dmi_dmi_resp_bits_data : i32, out io_dmi_dmi_resp_bits_resp : i2, in %io_dmi_dmiClock : !seq.clock, in %io_dmi_dmiReset : i1, in %io_hartIsInReset_0 : i1) {
    %dmOuter.auto_asource_out_a_mem_0_opcode, %dmOuter.auto_asource_out_a_mem_0_address, %dmOuter.auto_asource_out_a_mem_0_data, %dmOuter.auto_asource_out_a_widx, %dmOuter.auto_asource_out_a_safe_widx_valid, %dmOuter.auto_asource_out_a_safe_source_reset_n, %dmOuter.auto_asource_out_d_ridx, %dmOuter.auto_asource_out_d_safe_ridx_valid, %dmOuter.auto_asource_out_d_safe_sink_reset_n, %dmOuter.auto_intsource_out_sync_0, %dmOuter.io_dmi_req_ready, %dmOuter.io_dmi_resp_valid, %dmOuter.io_dmi_resp_bits_data, %dmOuter.io_dmi_resp_bits_resp, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_innerCtrl_mem_0_resumereq, %dmOuter.io_innerCtrl_mem_0_hartsel, %dmOuter.io_innerCtrl_mem_0_ackhavereset, %dmOuter.io_innerCtrl_mem_0_hrmask_0, %dmOuter.io_innerCtrl_widx, %dmOuter.io_innerCtrl_safe_widx_valid, %dmOuter.io_innerCtrl_safe_source_reset_n = hw.instance "dmOuter" @TLDebugModuleOuterAsync(auto_asource_out_a_ridx: %dmInner.auto_dmiXing_in_a_ridx: i1, auto_asource_out_a_safe_ridx_valid: %dmInner.auto_dmiXing_in_a_safe_ridx_valid: i1, auto_asource_out_a_safe_sink_reset_n: %dmInner.auto_dmiXing_in_a_safe_sink_reset_n: i1, auto_asource_out_d_mem_0_opcode: %dmInner.auto_dmiXing_in_d_mem_0_opcode: i3, auto_asource_out_d_mem_0_size: %dmInner.auto_dmiXing_in_d_mem_0_size: i2, auto_asource_out_d_mem_0_source: %dmInner.auto_dmiXing_in_d_mem_0_source: i1, auto_asource_out_d_mem_0_data: %dmInner.auto_dmiXing_in_d_mem_0_data: i32, auto_asource_out_d_widx: %dmInner.auto_dmiXing_in_d_widx: i1, auto_asource_out_d_safe_widx_valid: %dmInner.auto_dmiXing_in_d_safe_widx_valid: i1, auto_asource_out_d_safe_source_reset_n: %dmInner.auto_dmiXing_in_d_safe_source_reset_n: i1, io_dmi_clock: %io_dmi_dmiClock: !seq.clock, io_dmi_reset: %io_dmi_dmiReset: i1, io_dmi_req_valid: %io_dmi_dmi_req_valid: i1, io_dmi_req_bits_addr: %io_dmi_dmi_req_bits_addr: i7, io_dmi_req_bits_data: %io_dmi_dmi_req_bits_data: i32, io_dmi_req_bits_op: %io_dmi_dmi_req_bits_op: i2, io_dmi_resp_ready: %io_dmi_dmi_resp_ready: i1, io_ctrl_dmactiveAck: %io_ctrl_dmactiveAck: i1, io_innerCtrl_ridx: %dmInner.io_innerCtrl_ridx: i1, io_innerCtrl_safe_ridx_valid: %dmInner.io_innerCtrl_safe_ridx_valid: i1, io_innerCtrl_safe_sink_reset_n: %dmInner.io_innerCtrl_safe_sink_reset_n: i1, io_hgDebugInt_0: %dmInner.io_hgDebugInt_0: i1) -> (auto_asource_out_a_mem_0_opcode: i3, auto_asource_out_a_mem_0_address: i9, auto_asource_out_a_mem_0_data: i32, auto_asource_out_a_widx: i1, auto_asource_out_a_safe_widx_valid: i1, auto_asource_out_a_safe_source_reset_n: i1, auto_asource_out_d_ridx: i1, auto_asource_out_d_safe_ridx_valid: i1, auto_asource_out_d_safe_sink_reset_n: i1, auto_intsource_out_sync_0: i1, io_dmi_req_ready: i1, io_dmi_resp_valid: i1, io_dmi_resp_bits_data: i32, io_dmi_resp_bits_resp: i2, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_innerCtrl_mem_0_resumereq: i1, io_innerCtrl_mem_0_hartsel: i10, io_innerCtrl_mem_0_ackhavereset: i1, io_innerCtrl_mem_0_hrmask_0: i1, io_innerCtrl_widx: i1, io_innerCtrl_safe_widx_valid: i1, io_innerCtrl_safe_source_reset_n: i1) {sv.namehint = "dmInner.io_dmactive"}
    %dmInner.auto_dmiXing_in_a_ridx, %dmInner.auto_dmiXing_in_a_safe_ridx_valid, %dmInner.auto_dmiXing_in_a_safe_sink_reset_n, %dmInner.auto_dmiXing_in_d_mem_0_opcode, %dmInner.auto_dmiXing_in_d_mem_0_size, %dmInner.auto_dmiXing_in_d_mem_0_source, %dmInner.auto_dmiXing_in_d_mem_0_data, %dmInner.auto_dmiXing_in_d_widx, %dmInner.auto_dmiXing_in_d_safe_widx_valid, %dmInner.auto_dmiXing_in_d_safe_source_reset_n, %dmInner.auto_dmInner_tl_in_a_ready, %dmInner.auto_dmInner_tl_in_d_valid, %dmInner.auto_dmInner_tl_in_d_bits_opcode, %dmInner.auto_dmInner_tl_in_d_bits_size, %dmInner.auto_dmInner_tl_in_d_bits_source, %dmInner.auto_dmInner_tl_in_d_bits_data, %dmInner.io_innerCtrl_ridx, %dmInner.io_innerCtrl_safe_ridx_valid, %dmInner.io_innerCtrl_safe_sink_reset_n, %dmInner.io_hgDebugInt_0 = hw.instance "dmInner" @TLDebugModuleInnerAsync(auto_dmiXing_in_a_mem_0_opcode: %dmOuter.auto_asource_out_a_mem_0_opcode: i3, auto_dmiXing_in_a_mem_0_address: %dmOuter.auto_asource_out_a_mem_0_address: i9, auto_dmiXing_in_a_mem_0_data: %dmOuter.auto_asource_out_a_mem_0_data: i32, auto_dmiXing_in_a_widx: %dmOuter.auto_asource_out_a_widx: i1, auto_dmiXing_in_a_safe_widx_valid: %dmOuter.auto_asource_out_a_safe_widx_valid: i1, auto_dmiXing_in_a_safe_source_reset_n: %dmOuter.auto_asource_out_a_safe_source_reset_n: i1, auto_dmiXing_in_d_ridx: %dmOuter.auto_asource_out_d_ridx: i1, auto_dmiXing_in_d_safe_ridx_valid: %dmOuter.auto_asource_out_d_safe_ridx_valid: i1, auto_dmiXing_in_d_safe_sink_reset_n: %dmOuter.auto_asource_out_d_safe_sink_reset_n: i1, auto_dmInner_tl_in_a_valid: %auto_dmInner_dmInner_tl_in_a_valid: i1, auto_dmInner_tl_in_a_bits_opcode: %auto_dmInner_dmInner_tl_in_a_bits_opcode: i3, auto_dmInner_tl_in_a_bits_param: %auto_dmInner_dmInner_tl_in_a_bits_param: i3, auto_dmInner_tl_in_a_bits_size: %auto_dmInner_dmInner_tl_in_a_bits_size: i2, auto_dmInner_tl_in_a_bits_source: %auto_dmInner_dmInner_tl_in_a_bits_source: i6, auto_dmInner_tl_in_a_bits_address: %auto_dmInner_dmInner_tl_in_a_bits_address: i12, auto_dmInner_tl_in_a_bits_mask: %auto_dmInner_dmInner_tl_in_a_bits_mask: i8, auto_dmInner_tl_in_a_bits_data: %auto_dmInner_dmInner_tl_in_a_bits_data: i64, auto_dmInner_tl_in_a_bits_corrupt: %auto_dmInner_dmInner_tl_in_a_bits_corrupt: i1, auto_dmInner_tl_in_d_ready: %auto_dmInner_dmInner_tl_in_d_ready: i1, io_debug_clock: %io_debug_clock: !seq.clock, io_debug_reset: %io_debug_reset: i1, io_dmactive: %dmOuter.io_ctrl_dmactive: i1, io_innerCtrl_mem_0_resumereq: %dmOuter.io_innerCtrl_mem_0_resumereq: i1, io_innerCtrl_mem_0_hartsel: %dmOuter.io_innerCtrl_mem_0_hartsel: i10, io_innerCtrl_mem_0_ackhavereset: %dmOuter.io_innerCtrl_mem_0_ackhavereset: i1, io_innerCtrl_mem_0_hrmask_0: %dmOuter.io_innerCtrl_mem_0_hrmask_0: i1, io_innerCtrl_widx: %dmOuter.io_innerCtrl_widx: i1, io_innerCtrl_safe_widx_valid: %dmOuter.io_innerCtrl_safe_widx_valid: i1, io_innerCtrl_safe_source_reset_n: %dmOuter.io_innerCtrl_safe_source_reset_n: i1, io_hartIsInReset_0: %io_hartIsInReset_0: i1) -> (auto_dmiXing_in_a_ridx: i1, auto_dmiXing_in_a_safe_ridx_valid: i1, auto_dmiXing_in_a_safe_sink_reset_n: i1, auto_dmiXing_in_d_mem_0_opcode: i3, auto_dmiXing_in_d_mem_0_size: i2, auto_dmiXing_in_d_mem_0_source: i1, auto_dmiXing_in_d_mem_0_data: i32, auto_dmiXing_in_d_widx: i1, auto_dmiXing_in_d_safe_widx_valid: i1, auto_dmiXing_in_d_safe_source_reset_n: i1, auto_dmInner_tl_in_a_ready: i1, auto_dmInner_tl_in_d_valid: i1, auto_dmInner_tl_in_d_bits_opcode: i3, auto_dmInner_tl_in_d_bits_size: i2, auto_dmInner_tl_in_d_bits_source: i6, auto_dmInner_tl_in_d_bits_data: i64, io_innerCtrl_ridx: i1, io_innerCtrl_safe_ridx_valid: i1, io_innerCtrl_safe_sink_reset_n: i1, io_hgDebugInt_0: i1) {sv.namehint = "dmInner.io_hgDebugInt_0"}
    hw.output %dmInner.auto_dmInner_tl_in_a_ready, %dmInner.auto_dmInner_tl_in_d_valid, %dmInner.auto_dmInner_tl_in_d_bits_opcode, %dmInner.auto_dmInner_tl_in_d_bits_size, %dmInner.auto_dmInner_tl_in_d_bits_source, %dmInner.auto_dmInner_tl_in_d_bits_data, %dmOuter.auto_intsource_out_sync_0, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_dmi_req_ready, %dmOuter.io_dmi_resp_valid, %dmOuter.io_dmi_resp_bits_data, %dmOuter.io_dmi_resp_bits_resp : i1, i1, i3, i2, i6, i64, i1, i1, i1, i1, i1, i32, i2
  }
  hw.module private @AsyncResetRegVec_w2_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i2, out io_q : i2) {
    %c0_i2 = hw.constant 0 : i2
    %reg = seq.firreg %io_d clock %clock reset async %reset, %c0_i2 {firrtl.random_init_start = 0 : ui64, sv.namehint = "reg"} : i2
    hw.output %reg : i2
  }
  hw.module private @IntSyncCrossingSource_5(in %clock : !seq.clock, in %reset : i1, in %auto_in_0 : i1, in %auto_in_1 : i1, out auto_out_sync_0 : i1, out auto_out_sync_1 : i1) {
    %0 = comb.concat %auto_in_1, %auto_in_0 {sv.namehint = "reg.io_d"} : i1, i1
    %reg.io_q = hw.instance "reg" @AsyncResetRegVec_w2_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %0: i2) -> (io_q: i2) {sv.namehint = "reg.io_q"}
    %1 = comb.extract %reg.io_q from 0 {sv.namehint = "nodeOut_sync_0"} : (i2) -> i1
    %2 = comb.extract %reg.io_q from 1 {sv.namehint = "nodeOut_sync_1"} : (i2) -> i1
    hw.output %1, %2 : i1, i1
  }
  hw.module private @TLMonitor_30(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i17, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c1_i4 = hw.constant 1 : i4
    %c7_i6 = hw.constant 7 : i6
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %false = hw.constant false
    %c1_i3 = hw.constant 1 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i17) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.concat %c0_i2, %io_in_a_bits_size : i2, i2
    %13 = comb.shl bin %c1_i4, %12 {sv.namehint = "_mask_sizeOH_T_1"} : i4
    %14 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %15 = comb.extract %13 from 2 {sv.namehint = "mask_size"} : (i4) -> i1
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i17) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.extract %13 from 1 {sv.namehint = "mask_size_1"} : (i4) -> i1
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i17) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i17) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_acc_6"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_acc_7"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_acc_8"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_acc_9"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_acc_10"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_acc_11"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_acc_12"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_acc_13"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.xor bin %reset, %true : i1
    %58 = comb.and bin %io_in_a_valid, %56, %57 : i1
    %59 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %60 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %61 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %62 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %63 = comb.and bin %io_in_a_valid, %62, %57 : i1
    %64 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %65 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %66 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %67 = comb.icmp bin ne %66, %c-1_i2 : i2
    %68 = comb.and bin %io_in_a_valid, %65, %57 : i1
    %69 = comb.extract %io_in_a_bits_address from 16 : (i17) -> i1
    %70 = comb.xor bin %64, %true : i1
    %71 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %72 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %73 = comb.and bin %io_in_a_valid, %72, %57 : i1
    %74 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %75 = comb.and bin %io_in_a_valid, %74, %57 : i1
    %76 = comb.xor bin %55, %c-1_i8 : i8
    %77 = comb.and bin %io_in_a_bits_mask, %76 : i8
    %78 = comb.icmp bin eq %77, %c0_i8 : i8
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79, %57 : i1
    %81 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %82 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %83 = comb.and bin %io_in_a_valid, %82, %57 : i1
    %84 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %87 = comb.and bin %io_in_a_valid, %86, %57 : i1
    %88 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %89 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %90 = comb.icmp bin ne %89, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %91 = comb.and bin %io_in_d_valid, %57 : i1
    %92 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %97 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %93 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %94 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %95 = comb.xor %92, %true : i1
    %96 = comb.or %95, %93 : i1
    %97 = comb.and %96, %a_first_counter : i1
    %opcode = seq.firreg %105 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %106 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %107 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %108 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %109 clock %clock {firrtl.random_init_start = 15 : ui64} : i17
    %98 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %99 = comb.and bin %io_in_a_valid, %a_first_counter, %57 : i1
    %100 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %101 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %102 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %103 = comb.icmp bin eq %io_in_a_bits_address, %address : i17
    %104 = comb.and bin %92, %94 : i1
    %105 = comb.mux bin %104, %io_in_a_bits_opcode, %opcode : i3
    %106 = comb.mux bin %104, %io_in_a_bits_param, %param : i3
    %107 = comb.mux bin %104, %io_in_a_bits_size, %size : i2
    %108 = comb.mux bin %104, %io_in_a_bits_source, %source : i6
    %109 = comb.mux bin %104, %io_in_a_bits_address, %address : i17
    %110 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %115 clock %clock reset sync %reset, %false {firrtl.random_init_start = 32 : ui64} : i1
    %111 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %112 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %113 = comb.xor %110, %true : i1
    %114 = comb.or %113, %111 : i1
    %115 = comb.and %114, %d_first_counter : i1
    %size_1 = seq.firreg %120 clock %clock {firrtl.random_init_start = 38 : ui64} : i2
    %source_1 = seq.firreg %121 clock %clock {firrtl.random_init_start = 40 : ui64} : i6
    %116 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %117 = comb.and bin %io_in_d_valid, %d_first_counter, %57 : i1
    %118 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %119 = comb.and bin %110, %112 : i1
    %120 = comb.mux bin %119, %io_in_d_bits_size, %size_1 : i2
    %121 = comb.mux bin %119, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %204 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 48 : ui64} : i48
    %inflight_opcodes = seq.firreg %207 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 96 : ui64} : i192
    %inflight_sizes = seq.firreg %210 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 288 : ui64} : i192
    %a_first_counter_1 = seq.firreg %126 clock %clock reset sync %reset, %false {firrtl.random_init_start = 480 : ui64} : i1
    %122 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %123 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %124 = comb.xor %92, %true : i1
    %125 = comb.or %124, %122 : i1
    %126 = comb.and %125, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %131 clock %clock reset sync %reset, %false {firrtl.random_init_start = 481 : ui64} : i1
    %127 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %128 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %129 = comb.xor %110, %true : i1
    %130 = comb.or %129, %127 : i1
    %131 = comb.and %130, %d_first_counter_1 : i1
    %132 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %133 = comb.shru bin %inflight_opcodes, %132 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %134 = comb.extract %133 from 1 : (i192) -> i3
    %135 = comb.shru bin %inflight_sizes, %132 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %136 = comb.extract %135 from 1 : (i192) -> i3
    %137 = comb.concat %false, %136 {sv.namehint = "a_size_lookup"} : i1, i3
    %138 = comb.and bin %92, %123 : i1
    %139 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %140 = comb.shl bin %c1_i64, %139 {sv.namehint = "_a_set_T"} : i64
    %141 = comb.extract %140 from 0 : (i64) -> i48
    %142 = comb.mux bin %138, %141, %c0_i48 {sv.namehint = "a_set"} : i48
    %143 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %144 = comb.mux bin %138, %143, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %145 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %146 = comb.mux bin %138, %145, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %147 = comb.concat %c0_i511, %144 : i511, i4
    %148 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %149 = comb.shl bin %147, %148 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %150 = comb.extract %149 from 0 : (i515) -> i192
    %151 = comb.mux bin %138, %150, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %152 = comb.concat %c0_i511, %146 : i511, i3
    %153 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %154 = comb.shl bin %152, %153 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %155 = comb.extract %154 from 0 : (i514) -> i192
    %156 = comb.mux bin %138, %155, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %157 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %158 = comb.shru bin %inflight, %157 : i48
    %159 = comb.extract %158 from 0 : (i48) -> i1
    %160 = comb.xor bin %159, %true : i1
    %161 = comb.and bin %138, %57 : i1
    %162 = comb.and bin %io_in_d_valid, %128 : i1
    %163 = comb.and bin %110, %128 : i1
    %164 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %165 = comb.shl bin %c1_i64, %164 {sv.namehint = "_d_clr_T"} : i64
    %166 = comb.extract %165 from 0 : (i64) -> i48
    %167 = comb.mux bin %163, %166, %c0_i48 {sv.namehint = "d_clr"} : i48
    %168 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %169 = comb.shl bin %c15_i527, %168 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %170 = comb.extract %169 from 0 : (i527) -> i192
    %171 = comb.mux bin %163, %170, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %172 = comb.shl bin %c15_i527, %168 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %173 = comb.extract %172 from 0 : (i527) -> i192
    %174 = comb.mux bin %163, %173, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %175 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %176 = comb.and bin %io_in_a_valid, %123, %175 {sv.namehint = "same_cycle_resp"} : i1
    %177 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %178 = comb.shru bin %inflight, %177 : i48
    %179 = comb.extract %178 from 0 : (i48) -> i1
    %180 = comb.or bin %179, %176 : i1
    %181 = comb.and bin %162, %57 : i1
    %182 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %183 = comb.icmp bin eq %182, %c1_i3 : i3
    %184 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %185 = comb.icmp bin eq %184, %c1_i3 : i3
    %186 = comb.or bin %183, %185 : i1
    %187 = comb.and bin %162, %176, %57 : i1
    %188 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %189 = comb.xor bin %176, %true : i1
    %190 = hw.array_get %1[%134] : !hw.array<8xi3>, i3
    %191 = comb.icmp bin eq %190, %c1_i3 : i3
    %192 = hw.array_get %0[%134] : !hw.array<8xi3>, i3
    %193 = comb.icmp bin eq %192, %c1_i3 : i3
    %194 = comb.or bin %191, %193 : i1
    %195 = comb.and bin %162, %189, %57 : i1
    %196 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %197 = comb.icmp bin eq %196, %137 : i4
    %198 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %199 = comb.xor bin %io_in_d_ready, %true : i1
    %200 = comb.or bin %199, %io_in_a_ready : i1
    %201 = comb.and bin %162, %123, %io_in_a_valid, %198, %57 : i1
    %202 = comb.or bin %inflight, %142 {sv.namehint = "_inflight_T"} : i48
    %203 = comb.xor bin %167, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %204 = comb.and bin %202, %203 {sv.namehint = "_inflight_T_2"} : i48
    %205 = comb.or bin %inflight_opcodes, %151 {sv.namehint = "_inflight_opcodes_T"} : i192
    %206 = comb.xor bin %171, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %207 = comb.and bin %205, %206 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %208 = comb.or bin %inflight_sizes, %156 {sv.namehint = "_inflight_sizes_T"} : i192
    %209 = comb.xor bin %174, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %210 = comb.and bin %208, %209 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %217 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 482 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    %211 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %212 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %213 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %214 = comb.or bin %211, %212, %213 : i1
    sv.always posedge %2 {
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_2"
      }
      sv.if %58 {
        sv.assert %false, immediate label "assert__assert_3"
      }
      sv.if %58 {
        sv.assert %4, immediate label "assert__assert_4"
      }
      sv.if %58 {
        sv.assert %14, immediate label "assert__assert_5"
      }
      sv.if %58 {
        sv.assert %11, immediate label "assert__assert_6"
      }
      sv.if %58 {
        sv.assert %59, immediate label "assert__assert_7"
      }
      sv.if %58 {
        sv.assert %60, immediate label "assert__assert_8"
      }
      sv.if %58 {
        sv.assert %61, immediate label "assert__assert_9"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_10"
      }
      sv.if %63 {
        sv.assert %false, immediate label "assert__assert_11"
      }
      sv.if %63 {
        sv.assert %4, immediate label "assert__assert_12"
      }
      sv.if %63 {
        sv.assert %14, immediate label "assert__assert_13"
      }
      sv.if %63 {
        sv.assert %11, immediate label "assert__assert_14"
      }
      sv.if %63 {
        sv.assert %59, immediate label "assert__assert_15"
      }
      sv.if %63 {
        sv.assert %64, immediate label "assert__assert_16"
      }
      sv.if %63 {
        sv.assert %60, immediate label "assert__assert_17"
      }
      sv.if %63 {
        sv.assert %61, immediate label "assert__assert_18"
      }
      sv.if %68 {
        sv.assert %67, immediate label "assert__assert_19"
      }
      sv.if %68 {
        sv.assert %69, immediate label "assert__assert_20"
      }
      sv.if %68 {
        sv.assert %4, immediate label "assert__assert_21"
      }
      sv.if %68 {
        sv.assert %11, immediate label "assert__assert_22"
      }
      sv.if %68 {
        sv.assert %70, immediate label "assert__assert_23"
      }
      sv.if %68 {
        sv.assert %71, immediate label "assert__assert_24"
      }
      sv.if %68 {
        sv.assert %61, immediate label "assert__assert_25"
      }
      sv.if %73 {
        sv.assert %false, immediate label "assert__assert_26"
      }
      sv.if %73 {
        sv.assert %4, immediate label "assert__assert_27"
      }
      sv.if %73 {
        sv.assert %11, immediate label "assert__assert_28"
      }
      sv.if %73 {
        sv.assert %70, immediate label "assert__assert_29"
      }
      sv.if %73 {
        sv.assert %71, immediate label "assert__assert_30"
      }
      sv.if %75 {
        sv.assert %false, immediate label "assert__assert_31"
      }
      sv.if %75 {
        sv.assert %4, immediate label "assert__assert_32"
      }
      sv.if %75 {
        sv.assert %11, immediate label "assert__assert_33"
      }
      sv.if %75 {
        sv.assert %70, immediate label "assert__assert_34"
      }
      sv.if %75 {
        sv.assert %78, immediate label "assert__assert_35"
      }
      sv.if %80 {
        sv.assert %false, immediate label "assert__assert_36"
      }
      sv.if %80 {
        sv.assert %4, immediate label "assert__assert_37"
      }
      sv.if %80 {
        sv.assert %11, immediate label "assert__assert_38"
      }
      sv.if %80 {
        sv.assert %81, immediate label "assert__assert_39"
      }
      sv.if %80 {
        sv.assert %71, immediate label "assert__assert_40"
      }
      sv.if %83 {
        sv.assert %false, immediate label "assert__assert_41"
      }
      sv.if %83 {
        sv.assert %4, immediate label "assert__assert_42"
      }
      sv.if %83 {
        sv.assert %11, immediate label "assert__assert_43"
      }
      sv.if %83 {
        sv.assert %85, immediate label "assert__assert_44"
      }
      sv.if %83 {
        sv.assert %71, immediate label "assert__assert_45"
      }
      sv.if %87 {
        sv.assert %false, immediate label "assert__assert_46"
      }
      sv.if %87 {
        sv.assert %4, immediate label "assert__assert_47"
      }
      sv.if %87 {
        sv.assert %11, immediate label "assert__assert_48"
      }
      sv.if %87 {
        sv.assert %88, immediate label "assert__assert_49"
      }
      sv.if %87 {
        sv.assert %71, immediate label "assert__assert_50"
      }
      sv.if %87 {
        sv.assert %61, immediate label "assert__assert_51"
      }
      sv.if %91 {
        sv.assert %90, immediate label "assert__assert_76"
      }
      sv.if %99 {
        sv.assert %98, immediate label "assert__assert_87"
      }
      sv.if %99 {
        sv.assert %100, immediate label "assert__assert_88"
      }
      sv.if %99 {
        sv.assert %101, immediate label "assert__assert_89"
      }
      sv.if %99 {
        sv.assert %102, immediate label "assert__assert_90"
      }
      sv.if %99 {
        sv.assert %103, immediate label "assert__assert_91"
      }
      sv.if %117 {
        sv.assert %116, immediate label "assert__assert_94"
      }
      sv.if %117 {
        sv.assert %118, immediate label "assert__assert_95"
      }
      sv.if %161 {
        sv.assert %160, immediate label "assert__assert_98"
      }
      sv.if %181 {
        sv.assert %180, immediate label "assert__assert_99"
      }
      sv.if %187 {
        sv.assert %186, immediate label "assert__assert_100"
      }
      sv.if %187 {
        sv.assert %188, immediate label "assert__assert_101"
      }
      sv.if %195 {
        sv.assert %194, immediate label "assert__assert_102"
      }
      sv.if %195 {
        sv.assert %197, immediate label "assert__assert_103"
      }
      sv.if %201 {
        sv.assert %200, immediate label "assert__assert_104"
      }
      sv.if %57 {
        sv.assert %214, immediate label "assert__assert_105"
      }
    }
    %215 = comb.add bin %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %216 = comb.or bin %92, %110 : i1
    %217 = comb.mux bin %216, %c0_i32, %215 : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<DEFAULT: ui32 = 0, FORMAT: none = "tilelink_timeout=%d", WIDTH: ui32 = 32>() -> (out: i32)
    hw.output
  }
  hw.module private @TLROM(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i17, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6, out auto_in_d_bits_data : i64) {
    %0 = hw.aggregate_constanthw.array<512xi64>
    %c0_i4 = hw.constant 0 : i4
    %c0_i64 = hw.constant 0 : i64
    hw.instance "monitor" @TLMonitor_30(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_in_d_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i17, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_in_a_valid: i1, io_in_d_bits_size: %auto_in_a_bits_size: i2, io_in_d_bits_source: %auto_in_a_bits_source: i6) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 3 {sv.namehint = "index"} : (i17) -> i9
    %2 = comb.extract %auto_in_a_bits_address from 12 {sv.namehint = "high"} : (i17) -> i4
    %3 = comb.icmp bin ne %2, %c0_i4 {sv.namehint = "_nodeIn_d_bits_T"} : i4
    %4 = hw.array_get %0[%1] : !hw.array<512xi64>, i9
    %5 = comb.mux bin %3, %c0_i64, %4 {sv.namehint = "nodeIn_d_bits_d_data"} : i64
    hw.output %auto_in_d_ready, %auto_in_a_valid, %auto_in_a_bits_size, %auto_in_a_bits_source, %5 : i1, i1, i2, i6, i64
  }
  hw.module private @ClockSinkDomain_1(out auto_bootrom_in_a_ready : i1, in %auto_bootrom_in_a_valid : i1, in %auto_bootrom_in_a_bits_opcode : i3, in %auto_bootrom_in_a_bits_param : i3, in %auto_bootrom_in_a_bits_size : i2, in %auto_bootrom_in_a_bits_source : i6, in %auto_bootrom_in_a_bits_address : i17, in %auto_bootrom_in_a_bits_mask : i8, in %auto_bootrom_in_a_bits_corrupt : i1, in %auto_bootrom_in_d_ready : i1, out auto_bootrom_in_d_valid : i1, out auto_bootrom_in_d_bits_size : i2, out auto_bootrom_in_d_bits_source : i6, out auto_bootrom_in_d_bits_data : i64, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %bootrom.auto_in_a_ready, %bootrom.auto_in_d_valid, %bootrom.auto_in_d_bits_size, %bootrom.auto_in_d_bits_source, %bootrom.auto_in_d_bits_data = hw.instance "bootrom" @TLROM(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_in_a_valid: %auto_bootrom_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bootrom_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bootrom_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bootrom_in_a_bits_size: i2, auto_in_a_bits_source: %auto_bootrom_in_a_bits_source: i6, auto_in_a_bits_address: %auto_bootrom_in_a_bits_address: i17, auto_in_a_bits_mask: %auto_bootrom_in_a_bits_mask: i8, auto_in_a_bits_corrupt: %auto_bootrom_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_bootrom_in_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6, auto_in_d_bits_data: i64) {sv.namehint = "bootrom.auto_in_d_valid"}
    hw.output %bootrom.auto_in_a_ready, %bootrom.auto_in_d_valid, %bootrom.auto_in_d_bits_size, %bootrom.auto_in_d_bits_source, %bootrom.auto_in_d_bits_data : i1, i1, i2, i6, i64
  }
  hw.module @RocketSystem(in %clock : !seq.clock, in %reset : i1, in %resetctrl_hartIsInReset_0 : i1, in %debug_clock : !seq.clock, in %debug_reset : i1, out debug_clockeddmi_dmi_req_ready : i1, in %debug_clockeddmi_dmi_req_valid : i1, in %debug_clockeddmi_dmi_req_bits_addr : i7, in %debug_clockeddmi_dmi_req_bits_data : i32, in %debug_clockeddmi_dmi_req_bits_op : i2, in %debug_clockeddmi_dmi_resp_ready : i1, out debug_clockeddmi_dmi_resp_valid : i1, out debug_clockeddmi_dmi_resp_bits_data : i32, out debug_clockeddmi_dmi_resp_bits_resp : i2, in %debug_clockeddmi_dmiClock : !seq.clock, in %debug_clockeddmi_dmiReset : i1, out debug_ndreset : i1, out debug_dmactive : i1, in %debug_dmactiveAck : i1, in %mem_axi4_0_aw_ready : i1, out mem_axi4_0_aw_valid : i1, out mem_axi4_0_aw_bits_id : i4, out mem_axi4_0_aw_bits_addr : i32, out mem_axi4_0_aw_bits_len : i8, out mem_axi4_0_aw_bits_size : i3, out mem_axi4_0_aw_bits_burst : i2, out mem_axi4_0_aw_bits_lock : i1, out mem_axi4_0_aw_bits_cache : i4, out mem_axi4_0_aw_bits_prot : i3, out mem_axi4_0_aw_bits_qos : i4, in %mem_axi4_0_w_ready : i1, out mem_axi4_0_w_valid : i1, out mem_axi4_0_w_bits_data : i64, out mem_axi4_0_w_bits_strb : i8, out mem_axi4_0_w_bits_last : i1, out mem_axi4_0_b_ready : i1, in %mem_axi4_0_b_valid : i1, in %mem_axi4_0_b_bits_id : i4, in %mem_axi4_0_b_bits_resp : i2, in %mem_axi4_0_ar_ready : i1, out mem_axi4_0_ar_valid : i1, out mem_axi4_0_ar_bits_id : i4, out mem_axi4_0_ar_bits_addr : i32, out mem_axi4_0_ar_bits_len : i8, out mem_axi4_0_ar_bits_size : i3, out mem_axi4_0_ar_bits_burst : i2, out mem_axi4_0_ar_bits_lock : i1, out mem_axi4_0_ar_bits_cache : i4, out mem_axi4_0_ar_bits_prot : i3, out mem_axi4_0_ar_bits_qos : i4, out mem_axi4_0_r_ready : i1, in %mem_axi4_0_r_valid : i1, in %mem_axi4_0_r_bits_id : i4, in %mem_axi4_0_r_bits_data : i64, in %mem_axi4_0_r_bits_resp : i2, in %mem_axi4_0_r_bits_last : i1, in %mmio_axi4_0_aw_ready : i1, out mmio_axi4_0_aw_valid : i1, out mmio_axi4_0_aw_bits_id : i4, out mmio_axi4_0_aw_bits_addr : i31, out mmio_axi4_0_aw_bits_len : i8, out mmio_axi4_0_aw_bits_size : i3, out mmio_axi4_0_aw_bits_burst : i2, out mmio_axi4_0_aw_bits_lock : i1, out mmio_axi4_0_aw_bits_cache : i4, out mmio_axi4_0_aw_bits_prot : i3, out mmio_axi4_0_aw_bits_qos : i4, in %mmio_axi4_0_w_ready : i1, out mmio_axi4_0_w_valid : i1, out mmio_axi4_0_w_bits_data : i64, out mmio_axi4_0_w_bits_strb : i8, out mmio_axi4_0_w_bits_last : i1, out mmio_axi4_0_b_ready : i1, in %mmio_axi4_0_b_valid : i1, in %mmio_axi4_0_b_bits_id : i4, in %mmio_axi4_0_b_bits_resp : i2, in %mmio_axi4_0_ar_ready : i1, out mmio_axi4_0_ar_valid : i1, out mmio_axi4_0_ar_bits_id : i4, out mmio_axi4_0_ar_bits_addr : i31, out mmio_axi4_0_ar_bits_len : i8, out mmio_axi4_0_ar_bits_size : i3, out mmio_axi4_0_ar_bits_burst : i2, out mmio_axi4_0_ar_bits_lock : i1, out mmio_axi4_0_ar_bits_cache : i4, out mmio_axi4_0_ar_bits_prot : i3, out mmio_axi4_0_ar_bits_qos : i4, out mmio_axi4_0_r_ready : i1, in %mmio_axi4_0_r_valid : i1, in %mmio_axi4_0_r_bits_id : i4, in %mmio_axi4_0_r_bits_data : i64, in %mmio_axi4_0_r_bits_resp : i2, in %mmio_axi4_0_r_bits_last : i1) {
    %false = hw.constant false
    %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_reset = hw.instance "dummyClockGroupSourceNode" @SimpleClockGroupSource(clock: %clock: !seq.clock, reset: %reset: i1) -> (auto_out_member_subsystem_sbus_5_clock: !seq.clock, auto_out_member_subsystem_sbus_5_reset: i1, auto_out_member_subsystem_sbus_4_clock: !seq.clock, auto_out_member_subsystem_sbus_4_reset: i1, auto_out_member_subsystem_sbus_2_clock: !seq.clock, auto_out_member_subsystem_sbus_2_reset: i1, auto_out_member_subsystem_sbus_1_clock: !seq.clock, auto_out_member_subsystem_sbus_1_reset: i1, auto_out_member_subsystem_sbus_0_clock: !seq.clock, auto_out_member_subsystem_sbus_0_reset: i1) {sv.namehint = "subsystem_sbus.auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset"}
    %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_a_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_valid, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_c_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_valid, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready, %subsystem_sbus.auto_fixedClockNode_out_1_clock, %subsystem_sbus.auto_fixedClockNode_out_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_sbus" @SystemBus(auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready: %mmio_axi4_0_aw_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready: %mmio_axi4_0_w_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid: %mmio_axi4_0_b_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id: %mmio_axi4_0_b_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp: %mmio_axi4_0_b_bits_resp: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready: %mmio_axi4_0_ar_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid: %mmio_axi4_0_r_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id: %mmio_axi4_0_r_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data: %mmio_axi4_0_r_bits_data: i64, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp: %mmio_axi4_0_r_bits_resp: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last: %mmio_axi4_0_r_bits_last: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_a_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_param: i3, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_mask: i8, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_corrupt: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_ready: %tile_prci_domain.auto_tl_master_clock_xing_out_b_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_c_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_c_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_param: i3, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_corrupt: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_ready: %tile_prci_domain.auto_tl_master_clock_xing_out_d_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_e_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_e_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink: %tile_prci_domain.auto_tl_master_clock_xing_out_e_bits_sink: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready: %subsystem_l2_wrapper.auto_coherent_jbar_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_param: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready: %subsystem_l2_wrapper.auto_coherent_jbar_in_c_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_param: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_sink: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready: %subsystem_cbus.auto_bus_xing_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid: %subsystem_cbus.auto_bus_xing_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode: %subsystem_cbus.auto_bus_xing_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param: %subsystem_cbus.auto_bus_xing_in_d_bits_param: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size: %subsystem_cbus.auto_bus_xing_in_d_bits_size: i4, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source: %subsystem_cbus.auto_bus_xing_in_d_bits_source: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink: %subsystem_cbus.auto_bus_xing_in_d_bits_sink: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied: %subsystem_cbus.auto_bus_xing_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data: %subsystem_cbus.auto_bus_xing_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt: %subsystem_cbus.auto_bus_xing_in_d_bits_corrupt: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_reset: i1) -> (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr: i31, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data: i64, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr: i31, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param: i2, auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_c_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size: i4, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address: i28, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready: i1, auto_fixedClockNode_out_1_clock: !seq.clock, auto_fixedClockNode_out_1_reset: i1, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset: i1, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset: i1, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset: i1, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "mmioAXI4NodeIn_r_ready"}
    %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_d_ready, %subsystem_cbus.auto_fixedClockNode_out_2_clock, %subsystem_cbus.auto_fixedClockNode_out_2_reset, %subsystem_cbus.auto_fixedClockNode_out_0_clock, %subsystem_cbus.auto_fixedClockNode_out_0_reset, %subsystem_cbus.auto_bus_xing_in_a_ready, %subsystem_cbus.auto_bus_xing_in_d_valid, %subsystem_cbus.auto_bus_xing_in_d_bits_opcode, %subsystem_cbus.auto_bus_xing_in_d_bits_param, %subsystem_cbus.auto_bus_xing_in_d_bits_size, %subsystem_cbus.auto_bus_xing_in_d_bits_source, %subsystem_cbus.auto_bus_xing_in_d_bits_sink, %subsystem_cbus.auto_bus_xing_in_d_bits_denied, %subsystem_cbus.auto_bus_xing_in_d_bits_data, %subsystem_cbus.auto_bus_xing_in_d_bits_corrupt, %subsystem_cbus.clock, %subsystem_cbus.reset = hw.instance "subsystem_cbus" @PeripheryBus_1(auto_coupler_to_bootrom_fragmenter_out_a_ready: %bootROMDomainWrapper.auto_bootrom_in_a_ready: i1, auto_coupler_to_bootrom_fragmenter_out_d_valid: %bootROMDomainWrapper.auto_bootrom_in_d_valid: i1, auto_coupler_to_bootrom_fragmenter_out_d_bits_size: %bootROMDomainWrapper.auto_bootrom_in_d_bits_size: i2, auto_coupler_to_bootrom_fragmenter_out_d_bits_source: %bootROMDomainWrapper.auto_bootrom_in_d_bits_source: i6, auto_coupler_to_bootrom_fragmenter_out_d_bits_data: %bootROMDomainWrapper.auto_bootrom_in_d_bits_data: i64, auto_coupler_to_debug_fragmenter_out_a_ready: %tlDM.auto_dmInner_dmInner_tl_in_a_ready: i1, auto_coupler_to_debug_fragmenter_out_d_valid: %tlDM.auto_dmInner_dmInner_tl_in_d_valid: i1, auto_coupler_to_debug_fragmenter_out_d_bits_opcode: %tlDM.auto_dmInner_dmInner_tl_in_d_bits_opcode: i3, auto_coupler_to_debug_fragmenter_out_d_bits_size: %tlDM.auto_dmInner_dmInner_tl_in_d_bits_size: i2, auto_coupler_to_debug_fragmenter_out_d_bits_source: %tlDM.auto_dmInner_dmInner_tl_in_d_bits_source: i6, auto_coupler_to_debug_fragmenter_out_d_bits_data: %tlDM.auto_dmInner_dmInner_tl_in_d_bits_data: i64, auto_coupler_to_clint_fragmenter_out_a_ready: %clint.auto_in_a_ready: i1, auto_coupler_to_clint_fragmenter_out_d_valid: %clint.auto_in_d_valid: i1, auto_coupler_to_clint_fragmenter_out_d_bits_opcode: %clint.auto_in_d_bits_opcode: i3, auto_coupler_to_clint_fragmenter_out_d_bits_size: %clint.auto_in_d_bits_size: i2, auto_coupler_to_clint_fragmenter_out_d_bits_source: %clint.auto_in_d_bits_source: i6, auto_coupler_to_clint_fragmenter_out_d_bits_data: %clint.auto_in_d_bits_data: i64, auto_coupler_to_plic_fragmenter_out_a_ready: %plicDomainWrapper.auto_plic_in_a_ready: i1, auto_coupler_to_plic_fragmenter_out_d_valid: %plicDomainWrapper.auto_plic_in_d_valid: i1, auto_coupler_to_plic_fragmenter_out_d_bits_opcode: %plicDomainWrapper.auto_plic_in_d_bits_opcode: i3, auto_coupler_to_plic_fragmenter_out_d_bits_size: %plicDomainWrapper.auto_plic_in_d_bits_size: i2, auto_coupler_to_plic_fragmenter_out_d_bits_source: %plicDomainWrapper.auto_plic_in_d_bits_source: i6, auto_coupler_to_plic_fragmenter_out_d_bits_data: %plicDomainWrapper.auto_plic_in_d_bits_data: i64, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock: !seq.clock, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset: i1, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset: i1, auto_bus_xing_in_a_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid: i1, auto_bus_xing_in_a_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_in_a_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param: i3, auto_bus_xing_in_a_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size: i4, auto_bus_xing_in_a_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source: i2, auto_bus_xing_in_a_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address: i28, auto_bus_xing_in_a_bits_mask: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask: i8, auto_bus_xing_in_a_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data: i64, auto_bus_xing_in_a_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt: i1, auto_bus_xing_in_d_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready: i1) -> (auto_coupler_to_bootrom_fragmenter_out_a_valid: i1, auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_bootrom_fragmenter_out_a_bits_param: i3, auto_coupler_to_bootrom_fragmenter_out_a_bits_size: i2, auto_coupler_to_bootrom_fragmenter_out_a_bits_source: i6, auto_coupler_to_bootrom_fragmenter_out_a_bits_address: i17, auto_coupler_to_bootrom_fragmenter_out_a_bits_mask: i8, auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_bootrom_fragmenter_out_d_ready: i1, auto_coupler_to_debug_fragmenter_out_a_valid: i1, auto_coupler_to_debug_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_debug_fragmenter_out_a_bits_param: i3, auto_coupler_to_debug_fragmenter_out_a_bits_size: i2, auto_coupler_to_debug_fragmenter_out_a_bits_source: i6, auto_coupler_to_debug_fragmenter_out_a_bits_address: i12, auto_coupler_to_debug_fragmenter_out_a_bits_mask: i8, auto_coupler_to_debug_fragmenter_out_a_bits_data: i64, auto_coupler_to_debug_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_debug_fragmenter_out_d_ready: i1, auto_coupler_to_clint_fragmenter_out_a_valid: i1, auto_coupler_to_clint_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_clint_fragmenter_out_a_bits_param: i3, auto_coupler_to_clint_fragmenter_out_a_bits_size: i2, auto_coupler_to_clint_fragmenter_out_a_bits_source: i6, auto_coupler_to_clint_fragmenter_out_a_bits_address: i26, auto_coupler_to_clint_fragmenter_out_a_bits_mask: i8, auto_coupler_to_clint_fragmenter_out_a_bits_data: i64, auto_coupler_to_clint_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_clint_fragmenter_out_d_ready: i1, auto_coupler_to_plic_fragmenter_out_a_valid: i1, auto_coupler_to_plic_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_plic_fragmenter_out_a_bits_param: i3, auto_coupler_to_plic_fragmenter_out_a_bits_size: i2, auto_coupler_to_plic_fragmenter_out_a_bits_source: i6, auto_coupler_to_plic_fragmenter_out_a_bits_address: i28, auto_coupler_to_plic_fragmenter_out_a_bits_mask: i8, auto_coupler_to_plic_fragmenter_out_a_bits_data: i64, auto_coupler_to_plic_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_plic_fragmenter_out_d_ready: i1, auto_fixedClockNode_out_2_clock: !seq.clock, auto_fixedClockNode_out_2_reset: i1, auto_fixedClockNode_out_0_clock: !seq.clock, auto_fixedClockNode_out_0_reset: i1, auto_bus_xing_in_a_ready: i1, auto_bus_xing_in_d_valid: i1, auto_bus_xing_in_d_bits_opcode: i3, auto_bus_xing_in_d_bits_param: i2, auto_bus_xing_in_d_bits_size: i4, auto_bus_xing_in_d_bits_source: i2, auto_bus_xing_in_d_bits_sink: i1, auto_bus_xing_in_d_bits_denied: i1, auto_bus_xing_in_d_bits_data: i64, auto_bus_xing_in_d_bits_corrupt: i1, clock: !seq.clock, reset: i1) {sv.namehint = "clint.auto_in_d_ready"}
    %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready, %subsystem_mbus.auto_bus_xing_in_a_ready, %subsystem_mbus.auto_bus_xing_in_d_valid, %subsystem_mbus.auto_bus_xing_in_d_bits_opcode, %subsystem_mbus.auto_bus_xing_in_d_bits_size, %subsystem_mbus.auto_bus_xing_in_d_bits_source, %subsystem_mbus.auto_bus_xing_in_d_bits_denied, %subsystem_mbus.auto_bus_xing_in_d_bits_data, %subsystem_mbus.auto_bus_xing_in_d_bits_corrupt = hw.instance "subsystem_mbus" @MemoryBus(auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready: %mem_axi4_0_aw_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready: %mem_axi4_0_w_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid: %mem_axi4_0_b_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id: %mem_axi4_0_b_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp: %mem_axi4_0_b_bits_resp: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready: %mem_axi4_0_ar_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid: %mem_axi4_0_r_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id: %mem_axi4_0_r_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data: %mem_axi4_0_r_bits_data: i64, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp: %mem_axi4_0_r_bits_resp: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last: %mem_axi4_0_r_bits_last: i1, auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock: %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock: !seq.clock, auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset: %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset: i1, auto_bus_xing_in_a_valid: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid: i1, auto_bus_xing_in_a_bits_opcode: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_in_a_bits_param: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param: i3, auto_bus_xing_in_a_bits_size: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size: i3, auto_bus_xing_in_a_bits_source: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source: i4, auto_bus_xing_in_a_bits_address: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address: i32, auto_bus_xing_in_a_bits_mask: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask: i8, auto_bus_xing_in_a_bits_data: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data: i64, auto_bus_xing_in_d_ready: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready: i1) -> (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr: i32, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data: i64, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr: i32, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready: i1, auto_bus_xing_in_a_ready: i1, auto_bus_xing_in_d_valid: i1, auto_bus_xing_in_d_bits_opcode: i3, auto_bus_xing_in_d_bits_size: i3, auto_bus_xing_in_d_bits_source: i4, auto_bus_xing_in_d_bits_denied: i1, auto_bus_xing_in_d_bits_data: i64, auto_bus_xing_in_d_bits_corrupt: i1) {sv.namehint = "memAXI4NodeIn_r_ready"}
    %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_a_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_valid, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_param, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_address, %subsystem_l2_wrapper.auto_coherent_jbar_in_c_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_opcode, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_param, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_size, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_source, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_sink, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_denied, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_data, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_corrupt, %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock, %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset = hw.instance "subsystem_l2_wrapper" @CoherenceManagerWrapper(auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready: %subsystem_mbus.auto_bus_xing_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid: %subsystem_mbus.auto_bus_xing_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode: %subsystem_mbus.auto_bus_xing_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size: %subsystem_mbus.auto_bus_xing_in_d_bits_size: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source: %subsystem_mbus.auto_bus_xing_in_d_bits_source: i4, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied: %subsystem_mbus.auto_bus_xing_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data: %subsystem_mbus.auto_bus_xing_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt: %subsystem_mbus.auto_bus_xing_in_d_bits_corrupt: i1, auto_coherent_jbar_in_a_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid: i1, auto_coherent_jbar_in_a_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode: i3, auto_coherent_jbar_in_a_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param: i3, auto_coherent_jbar_in_a_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size: i3, auto_coherent_jbar_in_a_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source: i2, auto_coherent_jbar_in_a_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address: i32, auto_coherent_jbar_in_a_bits_mask: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask: i8, auto_coherent_jbar_in_a_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data: i64, auto_coherent_jbar_in_a_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt: i1, auto_coherent_jbar_in_b_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready: i1, auto_coherent_jbar_in_c_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid: i1, auto_coherent_jbar_in_c_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode: i3, auto_coherent_jbar_in_c_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param: i3, auto_coherent_jbar_in_c_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size: i3, auto_coherent_jbar_in_c_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source: i2, auto_coherent_jbar_in_c_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address: i32, auto_coherent_jbar_in_c_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data: i64, auto_coherent_jbar_in_c_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt: i1, auto_coherent_jbar_in_d_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready: i1, auto_coherent_jbar_in_e_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid: i1, auto_coherent_jbar_in_e_bits_sink: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink: i2, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock: !seq.clock, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset: i1, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock: !seq.clock, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset: i1) -> (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source: i4, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address: i32, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready: i1, auto_coherent_jbar_in_a_ready: i1, auto_coherent_jbar_in_b_valid: i1, auto_coherent_jbar_in_b_bits_param: i2, auto_coherent_jbar_in_b_bits_address: i32, auto_coherent_jbar_in_c_ready: i1, auto_coherent_jbar_in_d_valid: i1, auto_coherent_jbar_in_d_bits_opcode: i3, auto_coherent_jbar_in_d_bits_param: i2, auto_coherent_jbar_in_d_bits_size: i3, auto_coherent_jbar_in_d_bits_source: i2, auto_coherent_jbar_in_d_bits_sink: i2, auto_coherent_jbar_in_d_bits_denied: i1, auto_coherent_jbar_in_d_bits_data: i64, auto_coherent_jbar_in_d_bits_corrupt: i1, auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock: !seq.clock, auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset: i1) {sv.namehint = "subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid"}
    %tile_prci_domain.auto_tl_master_clock_xing_out_a_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_opcode, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_param, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_size, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_source, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_address, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_mask, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_data, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_corrupt, %tile_prci_domain.auto_tl_master_clock_xing_out_b_ready, %tile_prci_domain.auto_tl_master_clock_xing_out_c_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_opcode, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_param, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_size, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_source, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_address, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_data, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_corrupt, %tile_prci_domain.auto_tl_master_clock_xing_out_d_ready, %tile_prci_domain.auto_tl_master_clock_xing_out_e_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_e_bits_sink = hw.instance "tile_prci_domain" @TilePRCIDomain(auto_intsink_in_sync_0: %tlDM.auto_dmOuter_intsource_out_sync_0: i1, auto_int_in_clock_xing_in_1_sync_0: %intsource_1.auto_out_sync_0: i1, auto_int_in_clock_xing_in_0_sync_0: %intsource.auto_out_sync_0: i1, auto_int_in_clock_xing_in_0_sync_1: %intsource.auto_out_sync_1: i1, auto_tl_master_clock_xing_out_a_ready: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_a_ready: i1, auto_tl_master_clock_xing_out_b_valid: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_valid: i1, auto_tl_master_clock_xing_out_b_bits_param: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param: i2, auto_tl_master_clock_xing_out_b_bits_address: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address: i32, auto_tl_master_clock_xing_out_c_ready: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_c_ready: i1, auto_tl_master_clock_xing_out_d_valid: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_valid: i1, auto_tl_master_clock_xing_out_d_bits_opcode: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode: i3, auto_tl_master_clock_xing_out_d_bits_param: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param: i2, auto_tl_master_clock_xing_out_d_bits_size: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size: i4, auto_tl_master_clock_xing_out_d_bits_source: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source: i2, auto_tl_master_clock_xing_out_d_bits_sink: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink: i2, auto_tl_master_clock_xing_out_d_bits_denied: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied: i1, auto_tl_master_clock_xing_out_d_bits_data: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data: i64, auto_tl_master_clock_xing_out_d_bits_corrupt: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_tap_clock_in_clock: %subsystem_sbus.auto_fixedClockNode_out_1_clock: !seq.clock, auto_tap_clock_in_reset: %subsystem_sbus.auto_fixedClockNode_out_1_reset: i1) -> (auto_tl_master_clock_xing_out_a_valid: i1, auto_tl_master_clock_xing_out_a_bits_opcode: i3, auto_tl_master_clock_xing_out_a_bits_param: i3, auto_tl_master_clock_xing_out_a_bits_size: i4, auto_tl_master_clock_xing_out_a_bits_source: i2, auto_tl_master_clock_xing_out_a_bits_address: i32, auto_tl_master_clock_xing_out_a_bits_mask: i8, auto_tl_master_clock_xing_out_a_bits_data: i64, auto_tl_master_clock_xing_out_a_bits_corrupt: i1, auto_tl_master_clock_xing_out_b_ready: i1, auto_tl_master_clock_xing_out_c_valid: i1, auto_tl_master_clock_xing_out_c_bits_opcode: i3, auto_tl_master_clock_xing_out_c_bits_param: i3, auto_tl_master_clock_xing_out_c_bits_size: i4, auto_tl_master_clock_xing_out_c_bits_source: i2, auto_tl_master_clock_xing_out_c_bits_address: i32, auto_tl_master_clock_xing_out_c_bits_data: i64, auto_tl_master_clock_xing_out_c_bits_corrupt: i1, auto_tl_master_clock_xing_out_d_ready: i1, auto_tl_master_clock_xing_out_e_valid: i1, auto_tl_master_clock_xing_out_e_bits_sink: i2) {sv.namehint = "tile_prci_domain.auto_tl_master_clock_xing_out_e_valid"}
    %plicDomainWrapper.auto_plic_in_a_ready, %plicDomainWrapper.auto_plic_in_d_valid, %plicDomainWrapper.auto_plic_in_d_bits_opcode, %plicDomainWrapper.auto_plic_in_d_bits_size, %plicDomainWrapper.auto_plic_in_d_bits_source, %plicDomainWrapper.auto_plic_in_d_bits_data = hw.instance "plicDomainWrapper" @ClockSinkDomain(auto_plic_in_a_valid: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_valid: i1, auto_plic_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_opcode: i3, auto_plic_in_a_bits_param: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_param: i3, auto_plic_in_a_bits_size: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_size: i2, auto_plic_in_a_bits_source: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_source: i6, auto_plic_in_a_bits_address: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_address: i28, auto_plic_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_mask: i8, auto_plic_in_a_bits_data: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_data: i64, auto_plic_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_corrupt: i1, auto_plic_in_d_ready: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_d_ready: i1, auto_clock_in_clock: %subsystem_cbus.auto_fixedClockNode_out_0_clock: !seq.clock, auto_clock_in_reset: %subsystem_cbus.auto_fixedClockNode_out_0_reset: i1) -> (auto_plic_in_a_ready: i1, auto_plic_in_d_valid: i1, auto_plic_in_d_bits_opcode: i3, auto_plic_in_d_bits_size: i2, auto_plic_in_d_bits_source: i6, auto_plic_in_d_bits_data: i64) {sv.namehint = "plicDomainWrapper.auto_plic_in_d_valid"}
    %clint.auto_int_out_0, %clint.auto_int_out_1, %clint.auto_in_a_ready, %clint.auto_in_d_valid, %clint.auto_in_d_bits_opcode, %clint.auto_in_d_bits_size, %clint.auto_in_d_bits_source, %clint.auto_in_d_bits_data = hw.instance "clint" @CLINT(clock: %subsystem_cbus.clock: !seq.clock, reset: %subsystem_cbus.reset: i1, auto_in_a_valid: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_valid: i1, auto_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_opcode: i3, auto_in_a_bits_param: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_param: i3, auto_in_a_bits_size: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_size: i2, auto_in_a_bits_source: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_source: i6, auto_in_a_bits_address: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_address: i26, auto_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_mask: i8, auto_in_a_bits_data: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_data: i64, auto_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_corrupt: i1, auto_in_d_ready: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_d_ready: i1) -> (auto_int_out_0: i1, auto_int_out_1: i1, auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6, auto_in_d_bits_data: i64) {sv.namehint = "intsource.auto_in_1"}
    %tlDM.auto_dmInner_dmInner_tl_in_a_ready, %tlDM.auto_dmInner_dmInner_tl_in_d_valid, %tlDM.auto_dmInner_dmInner_tl_in_d_bits_opcode, %tlDM.auto_dmInner_dmInner_tl_in_d_bits_size, %tlDM.auto_dmInner_dmInner_tl_in_d_bits_source, %tlDM.auto_dmInner_dmInner_tl_in_d_bits_data, %tlDM.auto_dmOuter_intsource_out_sync_0, %tlDM.io_ctrl_ndreset, %tlDM.io_ctrl_dmactive, %tlDM.io_dmi_dmi_req_ready, %tlDM.io_dmi_dmi_resp_valid, %tlDM.io_dmi_dmi_resp_bits_data, %tlDM.io_dmi_dmi_resp_bits_resp = hw.instance "tlDM" @TLDebugModule(auto_dmInner_dmInner_tl_in_a_valid: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_valid: i1, auto_dmInner_dmInner_tl_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_opcode: i3, auto_dmInner_dmInner_tl_in_a_bits_param: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_param: i3, auto_dmInner_dmInner_tl_in_a_bits_size: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_size: i2, auto_dmInner_dmInner_tl_in_a_bits_source: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_source: i6, auto_dmInner_dmInner_tl_in_a_bits_address: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_address: i12, auto_dmInner_dmInner_tl_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_mask: i8, auto_dmInner_dmInner_tl_in_a_bits_data: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_data: i64, auto_dmInner_dmInner_tl_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_corrupt: i1, auto_dmInner_dmInner_tl_in_d_ready: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_d_ready: i1, io_debug_clock: %debug_clock: !seq.clock, io_debug_reset: %debug_reset: i1, io_ctrl_dmactiveAck: %debug_dmactiveAck: i1, io_dmi_dmi_req_valid: %debug_clockeddmi_dmi_req_valid: i1, io_dmi_dmi_req_bits_addr: %debug_clockeddmi_dmi_req_bits_addr: i7, io_dmi_dmi_req_bits_data: %debug_clockeddmi_dmi_req_bits_data: i32, io_dmi_dmi_req_bits_op: %debug_clockeddmi_dmi_req_bits_op: i2, io_dmi_dmi_resp_ready: %debug_clockeddmi_dmi_resp_ready: i1, io_dmi_dmiClock: %debug_clockeddmi_dmiClock: !seq.clock, io_dmi_dmiReset: %debug_clockeddmi_dmiReset: i1, io_hartIsInReset_0: %resetctrl_hartIsInReset_0: i1) -> (auto_dmInner_dmInner_tl_in_a_ready: i1, auto_dmInner_dmInner_tl_in_d_valid: i1, auto_dmInner_dmInner_tl_in_d_bits_opcode: i3, auto_dmInner_dmInner_tl_in_d_bits_size: i2, auto_dmInner_dmInner_tl_in_d_bits_source: i6, auto_dmInner_dmInner_tl_in_d_bits_data: i64, auto_dmOuter_intsource_out_sync_0: i1, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_dmi_dmi_req_ready: i1, io_dmi_dmi_resp_valid: i1, io_dmi_dmi_resp_bits_data: i32, io_dmi_dmi_resp_bits_resp: i2) {sv.namehint = "tlDM.io_ctrl_ndreset"}
    %intsource.auto_out_sync_0, %intsource.auto_out_sync_1 = hw.instance "intsource" @IntSyncCrossingSource_5(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_0: %clint.auto_int_out_0: i1, auto_in_1: %clint.auto_int_out_1: i1) -> (auto_out_sync_0: i1, auto_out_sync_1: i1) {sv.namehint = "intInClockXingIn_sync_1"}
    %intsource_1.auto_out_sync_0 = hw.instance "intsource_1" @IntSyncCrossingSource_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1) {sv.namehint = "intInClockXingIn_1_sync_0"}
    %bootROMDomainWrapper.auto_bootrom_in_a_ready, %bootROMDomainWrapper.auto_bootrom_in_d_valid, %bootROMDomainWrapper.auto_bootrom_in_d_bits_size, %bootROMDomainWrapper.auto_bootrom_in_d_bits_source, %bootROMDomainWrapper.auto_bootrom_in_d_bits_data = hw.instance "bootROMDomainWrapper" @ClockSinkDomain_1(auto_bootrom_in_a_valid: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_valid: i1, auto_bootrom_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode: i3, auto_bootrom_in_a_bits_param: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_param: i3, auto_bootrom_in_a_bits_size: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_size: i2, auto_bootrom_in_a_bits_source: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_source: i6, auto_bootrom_in_a_bits_address: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_address: i17, auto_bootrom_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_mask: i8, auto_bootrom_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt: i1, auto_bootrom_in_d_ready: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_d_ready: i1, auto_clock_in_clock: %subsystem_cbus.auto_fixedClockNode_out_2_clock: !seq.clock, auto_clock_in_reset: %subsystem_cbus.auto_fixedClockNode_out_2_reset: i1) -> (auto_bootrom_in_a_ready: i1, auto_bootrom_in_d_valid: i1, auto_bootrom_in_d_bits_size: i2, auto_bootrom_in_d_bits_source: i6, auto_bootrom_in_d_bits_data: i64) {sv.namehint = "bootROMDomainWrapper.auto_bootrom_in_d_valid"}
    hw.output %tlDM.io_dmi_dmi_req_ready, %tlDM.io_dmi_dmi_resp_valid, %tlDM.io_dmi_dmi_resp_bits_data, %tlDM.io_dmi_dmi_resp_bits_resp, %tlDM.io_ctrl_ndreset, %tlDM.io_ctrl_dmactive, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready : i1, i1, i32, i2, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1
  }
  om.class @RocketSystem_Class(%basepath: !om.basepath) {
    om.class.fields 
  }
}
