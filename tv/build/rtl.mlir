module {
  hw.module @fsm10(in %in0 : i1, in %clk : !seq.clock, in %rst : i1) {
    %c0_i4 = hw.constant 0 : i4
    %c1_i4 = hw.constant 1 : i4
    %c2_i4 = hw.constant 2 : i4
    %c3_i4 = hw.constant 3 : i4
    %c4_i4 = hw.constant 4 : i4
    %c5_i4 = hw.constant 5 : i4
    %c6_i4 = hw.constant 6 : i4
    %c7_i4 = hw.constant 7 : i4
    %c-8_i4 = hw.constant -8 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-5_i4 = hw.constant -5 : i4
    %0 = seq.initial() {
      %c0_i4_1 = hw.constant 0 : i4
      seq.yield %c0_i4_1 : i4
    } : () -> !seq.immutable<i4>
    %state_reg = seq.compreg sym @state_reg %145, %clk initial %0 : i4  
    %c0_i16 = hw.constant 0 : i16
    %1 = seq.initial() {
      %c0_i16_1 = hw.constant 0 : i16
      seq.yield %c0_i16_1 : i16
    } : () -> !seq.immutable<i16>
    %x0 = seq.compreg sym @x0 %140, %clk initial %1 : i16  
    %c1_i16 = hw.constant 1 : i16
    %true = hw.constant true
    %c0_i16_0 = hw.constant 0 : i16
    %2 = comb.icmp eq %state_reg, %c0_i4 : i4
    %3 = comb.add %x0, %c1_i16 : i16
    %4 = comb.icmp ne %in0, %true : i1
    %5 = comb.icmp eq %state_reg, %c0_i4 : i4
    %6 = comb.icmp eq %in0, %true : i1
    %7 = comb.icmp eq %state_reg, %c0_i4 : i4
    %8 = comb.mux %7, %c0_i4, %state_reg : i4
    %9 = comb.mux %6, %c-5_i4, %c0_i4 : i4
    %10 = comb.and %6, %5 : i1
    %11 = comb.mux %5, %9, %8 : i4
    %12 = comb.mux %4, %c1_i4, %9 : i4
    %13 = comb.and %4, %2 : i1
    %14 = comb.mux %13, %3, %x0 : i16
    %15 = comb.mux %2, %12, %11 : i4
    %16 = comb.icmp eq %state_reg, %c1_i4 : i4
    %17 = comb.add %x0, %c1_i16 : i16
    %18 = comb.icmp ne %in0, %true : i1
    %19 = comb.icmp eq %state_reg, %c1_i4 : i4
    %20 = comb.icmp eq %in0, %true : i1
    %21 = comb.icmp eq %state_reg, %c1_i4 : i4
    %22 = comb.mux %21, %c1_i4, %15 : i4
    %23 = comb.mux %20, %c-5_i4, %c1_i4 : i4
    %24 = comb.and %20, %19 : i1
    %25 = comb.mux %19, %23, %22 : i4
    %26 = comb.mux %18, %c2_i4, %23 : i4
    %27 = comb.and %18, %16 : i1
    %28 = comb.mux %27, %17, %14 : i16
    %29 = comb.mux %16, %26, %25 : i4
    %30 = comb.icmp eq %state_reg, %c2_i4 : i4
    %31 = comb.add %x0, %c1_i16 : i16
    %32 = comb.icmp ne %in0, %true : i1
    %33 = comb.icmp eq %state_reg, %c2_i4 : i4
    %34 = comb.icmp eq %in0, %true : i1
    %35 = comb.icmp eq %state_reg, %c2_i4 : i4
    %36 = comb.mux %35, %c2_i4, %29 : i4
    %37 = comb.mux %34, %c-5_i4, %c2_i4 : i4
    %38 = comb.and %34, %33 : i1
    %39 = comb.mux %33, %37, %36 : i4
    %40 = comb.mux %32, %c3_i4, %37 : i4
    %41 = comb.and %32, %30 : i1
    %42 = comb.mux %41, %31, %28 : i16
    %43 = comb.mux %30, %40, %39 : i4
    %44 = comb.icmp eq %state_reg, %c3_i4 : i4
    %45 = comb.add %x0, %c1_i16 : i16
    %46 = comb.icmp ne %in0, %true : i1
    %47 = comb.icmp eq %state_reg, %c3_i4 : i4
    %48 = comb.icmp eq %in0, %true : i1
    %49 = comb.icmp eq %state_reg, %c3_i4 : i4
    %50 = comb.mux %49, %c3_i4, %43 : i4
    %51 = comb.mux %48, %c-5_i4, %c3_i4 : i4
    %52 = comb.and %48, %47 : i1
    %53 = comb.mux %47, %51, %50 : i4
    %54 = comb.mux %46, %c4_i4, %51 : i4
    %55 = comb.and %46, %44 : i1
    %56 = comb.mux %55, %45, %42 : i16
    %57 = comb.mux %44, %54, %53 : i4
    %58 = comb.icmp eq %state_reg, %c4_i4 : i4
    %59 = comb.add %x0, %c1_i16 : i16
    %60 = comb.icmp ne %in0, %true : i1
    %61 = comb.icmp eq %state_reg, %c4_i4 : i4
    %62 = comb.icmp eq %in0, %true : i1
    %63 = comb.icmp eq %state_reg, %c4_i4 : i4
    %64 = comb.mux %63, %c4_i4, %57 : i4
    %65 = comb.mux %62, %c-5_i4, %c4_i4 : i4
    %66 = comb.and %62, %61 : i1
    %67 = comb.mux %61, %65, %64 : i4
    %68 = comb.mux %60, %c5_i4, %65 : i4
    %69 = comb.and %60, %58 : i1
    %70 = comb.mux %69, %59, %56 : i16
    %71 = comb.mux %58, %68, %67 : i4
    %72 = comb.icmp eq %state_reg, %c5_i4 : i4
    %73 = comb.add %x0, %c1_i16 : i16
    %74 = comb.icmp ne %in0, %true : i1
    %75 = comb.icmp eq %state_reg, %c5_i4 : i4
    %76 = comb.icmp eq %in0, %true : i1
    %77 = comb.icmp eq %state_reg, %c5_i4 : i4
    %78 = comb.mux %77, %c5_i4, %71 : i4
    %79 = comb.mux %76, %c-5_i4, %c5_i4 : i4
    %80 = comb.and %76, %75 : i1
    %81 = comb.mux %75, %79, %78 : i4
    %82 = comb.mux %74, %c6_i4, %79 : i4
    %83 = comb.and %74, %72 : i1
    %84 = comb.mux %83, %73, %70 : i16
    %85 = comb.mux %72, %82, %81 : i4
    %86 = comb.icmp eq %state_reg, %c6_i4 : i4
    %87 = comb.add %x0, %c1_i16 : i16
    %88 = comb.icmp ne %in0, %true : i1
    %89 = comb.icmp eq %state_reg, %c6_i4 : i4
    %90 = comb.icmp eq %in0, %true : i1
    %91 = comb.icmp eq %state_reg, %c6_i4 : i4
    %92 = comb.mux %91, %c6_i4, %85 : i4
    %93 = comb.mux %90, %c-5_i4, %c6_i4 : i4
    %94 = comb.and %90, %89 : i1
    %95 = comb.mux %89, %93, %92 : i4
    %96 = comb.mux %88, %c7_i4, %93 : i4
    %97 = comb.and %88, %86 : i1
    %98 = comb.mux %97, %87, %84 : i16
    %99 = comb.mux %86, %96, %95 : i4
    %100 = comb.icmp eq %state_reg, %c7_i4 : i4
    %101 = comb.add %x0, %c1_i16 : i16
    %102 = comb.icmp ne %in0, %true : i1
    %103 = comb.icmp eq %state_reg, %c7_i4 : i4
    %104 = comb.icmp eq %in0, %true : i1
    %105 = comb.icmp eq %state_reg, %c7_i4 : i4
    %106 = comb.mux %105, %c7_i4, %99 : i4
    %107 = comb.mux %104, %c-5_i4, %c7_i4 : i4
    %108 = comb.and %104, %103 : i1
    %109 = comb.mux %103, %107, %106 : i4
    %110 = comb.mux %102, %c-8_i4, %107 : i4
    %111 = comb.and %102, %100 : i1
    %112 = comb.mux %111, %101, %98 : i16
    %113 = comb.mux %100, %110, %109 : i4
    %114 = comb.icmp eq %state_reg, %c-8_i4 : i4
    %115 = comb.add %x0, %c1_i16 : i16
    %116 = comb.icmp ne %in0, %true : i1
    %117 = comb.icmp eq %state_reg, %c-8_i4 : i4
    %118 = comb.icmp eq %in0, %true : i1
    %119 = comb.icmp eq %state_reg, %c-8_i4 : i4
    %120 = comb.mux %119, %c-8_i4, %113 : i4
    %121 = comb.mux %118, %c-5_i4, %c-8_i4 : i4
    %122 = comb.and %118, %117 : i1
    %123 = comb.mux %117, %121, %120 : i4
    %124 = comb.mux %116, %c-7_i4, %121 : i4
    %125 = comb.and %116, %114 : i1
    %126 = comb.mux %125, %115, %112 : i16
    %127 = comb.mux %114, %124, %123 : i4
    %128 = comb.icmp eq %state_reg, %c-7_i4 : i4
    %129 = comb.add %x0, %c1_i16 : i16
    %130 = comb.icmp ne %in0, %true : i1
    %131 = comb.icmp eq %state_reg, %c-7_i4 : i4
    %132 = comb.icmp eq %in0, %true : i1
    %133 = comb.icmp eq %state_reg, %c-7_i4 : i4
    %134 = comb.mux %133, %c-7_i4, %127 : i4
    %135 = comb.mux %132, %c-5_i4, %c-7_i4 : i4
    %136 = comb.and %132, %131 : i1
    %137 = comb.mux %131, %135, %134 : i4
    %138 = comb.mux %130, %c-6_i4, %135 : i4
    %139 = comb.and %130, %128 : i1
    %140 = comb.mux %139, %129, %126 : i16
    %141 = comb.mux %128, %138, %137 : i4
    %142 = comb.icmp eq %state_reg, %c-6_i4 : i4
    %143 = comb.mux %142, %c-6_i4, %141 : i4
    %144 = comb.icmp eq %state_reg, %c-5_i4 : i4
    %145 = comb.mux %144, %c-5_i4, %143 : i4
    %timer_init = seq.initial() {
%c0_i16_0_in = hw.constant 0 : i32
seq.yield %c0_i16_0_in : i32
} : () -> !seq.immutable<i32>
%mySpecialConstant = hw.constant 1 : i32
%time_reg = seq.compreg sym @time_reg %added, %clk initial %timer_init : i32
%added = comb.add %time_reg, %mySpecialConstant : i32
    hw.output
}}